{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "a3ce62e1-e812-4ca0-8cf8-e5d3007f6c32",
        "name": "Clear Cache",
        "item": [
          {
            "id": "a745355d-79e7-4b44-ad5e-5144f8d43bee",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "31713032-d6a8-4dfe-9bee-fb5107a11c38",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5147cd46-656b-414c-bf86-d246e4af3426"
                }
              }
            ]
          },
          {
            "id": "e6f506b0-06a9-4bb1-b3b0-71dcbe13543a",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c59cde61-ad31-476e-af0f-ba15565ed8c8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2b555092-56af-48e1-9a9d-efcb3096b20e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "41a99599-2b9b-422d-9122-3b9d61daec81",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "1403bb28-8508-4692-8967-5f36439f908e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0024f6c3-7074-41a8-a6ac-81961fed32ac",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c2f1290f-05ef-4a79-b8d0-ea87311c3123",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c94de853-fea2-418b-800b-2a0d34f07239"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7357e1f5-602c-407b-8069-76e7b459a132",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "179d621c-60a6-45ed-8cf8-3a2ce019fd1f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3fa4c77e-d21c-4d52-be48-d71bcf3d8134",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "44666e90-92c4-4c4b-bcfa-55cfe81d3739"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3d1bb082-152b-4678-a744-0ddf2c2f3ff2",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "8a93447c-392a-4e06-ab49-72af065b2a3b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aa691e96-0212-4388-84ba-062ed39dc5a3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "87bb787b-5dbe-4aaf-9258-55b205f59cfe"
            }
          }
        ]
      },
      {
        "id": "7b5d20b1-b0df-4366-a711-d0531c45adab",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "fa8be4ea-ea03-487f-98a4-b7a52cf96515",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a9c27331-1451-4ce9-8ffc-aad8a96b25ac",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "553e94a4-8455-469d-9789-081129c70f95",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d086d1c-67c1-4895-80ab-096a157ba3a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d172cd9c-eff3-4b60-8e06-e17d84960d0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80f9703b-24cb-4e39-ac04-db488c834b9c",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd78570c-a975-4630-90ed-7708128171ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c473a0b1-4219-490b-a211-973bbb1ece54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd1c8200-ee19-4173-ac20-a2945fb22634",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3db2352-5d6c-40d5-95c8-ed9f2b76589d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7f52958f-2820-41aa-ac40-f174285a30df"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "619ed5a0-6140-4d3e-9129-72827d8543a9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dd5c6baa-6396-494c-a082-dbd7e936ba26",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47a36470-d3ce-456a-b8f1-872275e184bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ab464231-887e-4c31-b098-2ee930d81a44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d680a97-1974-45e1-a606-e9caea2fad7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2959f6e0-1295-4985-87ad-59dfdbf4f266"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e126731b-778b-4817-b277-acade94b11ac",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1421c3d0-8f1b-4db1-a4f6-8bb704baa8f3",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d8c42373-bd4a-49cf-a5dc-d41f7eaaadd9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f0bdda3f-dba2-4334-b6e0-f4d2b48d1570"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cdff9ba3-7233-4c0e-8887-7ef171784744",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "6e82751e-6182-4d98-8eac-2de710ea8e4a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1bca5a64-d3f3-401e-8683-7e0f34477a54",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "030fc02a-1d66-4cc9-9ddf-3d8db0adeae2"
            }
          }
        ]
      },
      {
        "id": "411b6349-f97c-4c8d-abb5-f88490757c08",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "78c4c297-1e79-443a-9a8b-2df0746a058b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "527b3209-e998-45bc-a8db-9e71fd4e8515",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "fb048868-8f38-4195-9f4c-4815bba91fef",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f501e981-8cf9-453a-9551-8a283e0159c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e82a994b-c4bc-4e9b-9e26-9e4aee0d80fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6814969c-1a78-4a9e-a433-85c3aa9deb49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9cd997dd-6e53-4129-8b7c-fbbd1a5bd978"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c8c8dc2-398d-4f51-928f-88a3b313610a",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cca559a-3935-4097-bce8-498621d686ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b84402c-cd2a-4d04-8aed-51d309b11eb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73bf965f-35e5-49d5-810d-919f4b6e6836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e5575b6a-985f-401e-8f35-eb7f3578ab2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25bbe02b-4eed-48b0-a390-9699a45458e4",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e230a7f9-15db-44f3-8394-554d546a8296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbb62b2d-03ca-4558-9a3c-eb824efaa0d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4416d3d7-5c88-4095-8e56-db7ae3149d77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ad8191f3-19a5-416d-b5da-e082ec62021f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ac7bf97-0652-4911-85f8-b871fadd636b",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2f3de18-f7ec-408e-b164-98e2f8edf0d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c3b855f-201c-4ded-a6b5-430ac8cf68c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1ea69c6-cc5f-4d74-a68a-952f9a4aa670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a05608c9-c418-436c-bb07-4174832ba863"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4e36bb1-a111-432c-80c5-a66cb564c0ae",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4e230a9-ee2f-4bf8-a48e-01c24f3e14fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7cff846-3b21-49c8-b17d-9c56b6471851"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c353054-9b58-41ff-9d99-85d7f7cbccce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2d31b3b6-1e54-489b-8ae1-67539770d737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d1b80bf-3cf5-4b4b-a585-4e59dc859692",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c1df137-cdb9-4ad7-bc41-50c2152c6b33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77d4a5af-1a0a-4750-9874-bcc37e515198"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acad019c-b28e-4f90-b9af-e7300e8b631f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0da58116-4c3e-46c0-b45a-217108bb746c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1598b64-ea91-4a4d-968e-d6b8b3a9e876",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e6c386d-e7ef-45c6-a935-7d24878e2412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86af4fae-cb8b-4ec0-b37d-ac39e54de43c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78e56942-276c-49b6-bf53-3f8492a11232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a77b52e2-634f-497e-bf40-91d4803af44b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4365b7f-f5b7-4a3c-84d2-5aae952b58f0",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbfed2a7-ebe0-4341-b21e-8cdcfd7f8bf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e5c718d-883d-4a87-a171-cb4ca5524d4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34d8d2ee-5542-4aab-b361-dd83d9502936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "017285b2-73f3-405e-b6fb-99745f6c35e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "210939ef-403e-4468-ab35-9ca2dd6498f7",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aa12114-5c65-4cee-9a41-6ea5a78c2355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08707c8a-1a47-4323-a502-a8abcda35239"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8475924e-fd61-4f01-95ef-70939fdcf365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1e9ec265-aca9-44e2-bc75-bcd7f5c2cb68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebdb4b04-c381-4484-a48b-f0d396432827",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a019bf5-3a34-4090-ba9b-70f4eba792dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dbef261-30af-475d-87b5-6fec79677daa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4b7ea5c-7083-4e0a-b365-91afd967551b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6e9006f0-29ef-42bd-8c83-0217328c1f3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3031375-3d95-4c5a-a2fd-39fc19029ec2",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "211295bf-645d-4ac9-84b5-e689bb0ce1b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccc4b3e9-86ca-4944-9b5b-7b8fa8d2f2e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dc9059c-93e5-49a6-a165-882315396e67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "18bcb846-51b4-4088-824a-e05135064dbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e836b16d-d8f6-43cc-9ce8-466bc8413f9d",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c6aaa34-815b-4fc0-b161-c4f6943fd0f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4649285-f1bc-4cef-b8e4-61fc14033dd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af71b4f3-add4-43b0-950c-912f0402cc57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5ea52bc9-5124-4e7b-ba56-5bc11b29f1b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fdc8ad6-ada1-4e7e-b4aa-7e877cb9f683",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b950012-627e-400c-ada3-f8dd93a89b05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "518e0b1b-1f8d-4905-b3fb-f8e030e8b3f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5f31494-0e11-43e7-af76-98c546c71142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2bc5c4e2-0b56-47fd-951c-122db7fc5114"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99cdf208-c1a9-4aa9-8b3d-612209d562d7",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "974901a5-f3ae-455c-a8df-f08a8255e8f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69e53179-5a5f-4667-8124-2ef157539725"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f9ca680-e7cf-4441-895a-19bf0005e40a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "58a42b2a-52fa-4fe6-9ef0-dac0f1ff7603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b740c16b-1d06-4f57-8393-3bbcd5503549",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef0610f6-6671-4091-a572-19df9eafc66d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2c7a97b-bd2f-45fd-9b24-ed927a5cc1f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bc93bfc-ecfe-46d6-aa16-d48a6402d00d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a20ac0ba-eda2-41c7-9a11-efa35b430cae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2999dffd-1ebc-41b5-a40c-885b1607d817",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b336c0a7-f42a-42c2-82fd-889997e6656b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2969f55f-dabe-4bc5-be3f-a4e9e5b07d17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ade40f02-0a36-4aca-a2ca-6ecb7c3d6ff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cfd509a4-fc8d-4e62-827c-9523c99198da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "097754b1-1f78-4f98-86c6-95b8e43281c0",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "520ede1f-569b-4f8c-bbff-e060948aa5c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "052c48a2-d94a-40bb-a570-35d715c9d94c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "855c8dfc-1bb9-4a36-9687-f068dfa470f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f8cc6a6d-9c59-4588-b4c5-73ab830a3afb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "052cba8e-879c-472d-8d51-1496d1906eab",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7c48912-ee25-463a-8048-4a496aa36e62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33a3add3-a7b8-48da-a07f-35ddff31aadc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cb89c04-026d-4167-9181-f4e539407223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "178a710b-d4ae-4520-a9a3-e384aa86dffe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b46a146-9252-4d24-821b-09de62a640c1",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26584682-25fb-4439-a1f7-c1cceffe744d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd385a6d-977e-4fd5-b01c-f4e62944f2cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8455e573-42f0-496b-ba54-4d6270e790e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7216cc20-97b9-49c5-8381-892e7f5c809c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "356c7cd0-4aa6-4f9b-be96-ab4b1ff0a894",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "174ae4f6-d589-465a-af3e-8b24f1055ee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f30e29f-4f8f-49ae-95a7-e3a8118a21e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9659319-5635-42de-9096-05c8601c6ff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d09387c-1daa-4af4-9fa4-12f7bf954c80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9a04ce7-b85a-4af4-8347-54800103a15a",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aed51b7-87f6-4678-89c1-8eab30ba36d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1e87210-95c7-43c9-8925-1b86aa96aa06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a28b6fd-3e30-4dfe-bd47-0821128b0f9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c490503-389b-40da-82db-b99910ddc586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f79a9e72-c26f-43f5-8fdb-86a915a8415e",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "601ca3e9-b97e-4013-9275-74626aa82b4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "965f5a6c-2b79-4b9e-9e98-410f66cf6c11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff9830a3-5f58-4436-9e17-d5d3431ace57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4d49497f-7420-4d6c-9ad8-e99f942c65a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c0dfd5b-8f1e-4bb5-8b2d-eae5a6125a51",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e76db32b-26ae-4956-b70c-3737b7940622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1ad5a73-d429-46ec-ba56-aec2cbb3f010"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c3404a6-a628-41ff-9320-c2f0ee502d4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "40efe1a3-51bb-4e5c-a3d2-03bc8f7b7d4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d75b2138-383d-43b4-94f6-9f5d0600f15e",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29d42c6f-74e4-4156-8e8d-dba50592a194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "871786b1-fb87-4309-b044-f639d188e879"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d933ce86-0a6f-4fd0-a417-91ad74b91e84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e5c0940-23bc-45a3-ac56-4f9303d4ceee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4b2cabb-efdc-41f2-b505-4f0abf2f3ac0",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a15877d9-d9d8-4c9a-bff0-c713d0046fdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daef2db3-2c71-43c9-bcc5-239f9c023ab7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53878588-3e44-43cb-bdc8-ffe7b81d73dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8826a0e-d38f-49c0-8edc-69fc49287d06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6fc9a88-17f0-4f78-a4f3-6d7db838633c",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d9fa41f-e3bf-4e9f-a2d4-40e16bf95980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bd037e3-2f4b-4c44-86e8-7e9d6bcff58c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36860f7f-f6d2-4dea-a8de-123bc162ca08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0bbac25e-06e6-47d3-b678-d1316061fa49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "424c4cf2-fc35-4ed3-b61d-5ff03149fc7a",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3494d7bf-9db8-4a6a-ac48-b01efccccffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ae0469f-f512-424e-bcb3-7d924cd11784"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2ef796d-784a-4304-9f39-3f5366d11c2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf052187-40fd-4cb8-a364-ec0da22aa301"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aa04bdf-08ae-4b92-97c2-24fdac2c6ab0",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7195c4b9-9661-4cba-8678-6060079b384a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "662c009a-8154-4f44-afbb-606a4f0c494b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1921f11b-3dbd-4327-9e52-88aba5e477db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0bcbcb0f-2eff-4b24-bf59-4581133cc0de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44c6dd8b-0542-4b83-a077-d5d3c4bea359",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13bc4896-ff0c-4654-9039-1af2154a4b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f44769c7-f8f6-4eaa-a8f7-3110139f9b56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7a34570-0251-4a09-9b08-bc8b63df0edf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "72ff6dae-d89d-4bed-952a-f8c59c8d5402"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8e7c31b-9bdf-4496-b3f8-9733bbe91797",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e64194f-3b13-4d60-95c6-392818a9bcd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99afd111-b31c-41b4-8f5e-423557a6e746"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56d142c6-6b49-4d31-8d98-bbf52d5f7bed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "3af23124-cc17-4075-87cf-cec37aa3452c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5fe766d-bdaa-4f5e-9dd4-a7d0827d7429",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d32678a-0d0a-46b3-9e3b-61e22c65e39f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d5d0dce-2f9d-4ade-a671-8a88b03748d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db103690-588e-49c3-b1db-dfff85bd5a68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "850139dc-31e7-4722-8e22-531e8f19a50b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97d3cb4a-b76a-4a15-8dcb-af340eadd189",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17d90b48-e6a7-40c0-adff-2eafcf8c5fb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90827abf-49b6-4e80-95a7-36a8ead857fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f3e34c9-dd9b-43d9-9061-af8a3a9c61cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "64d9c221-62c7-46f7-ad6f-e1ee5163e598"
                        }
                      }
                    ]
                  },
                  {
                    "id": "615518ca-3d7d-42d5-85f5-b58e11292c2f",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50b6af6a-0f0d-4de0-8be2-05f9d6def58b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "964688ff-76a8-49e5-8bcc-0f3ca767dffa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a94d022c-e8c4-4cdd-af28-aa74edae02c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b462934b-ecf9-4ada-8d9b-7808c0a611f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "940e6f11-10ab-471f-ad48-4c0605c12308",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c193f31-28a5-4f29-b7cd-ad09225138e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "377eb781-4323-4a57-9389-8f8c317c9a9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34dcecf6-26c0-43ff-b632-65ef919ae950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2cf8d084-91ab-4585-97f2-b658629260e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76fcce3c-0ead-403f-b109-cd067e7f16f5",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdb34215-f9a4-4154-869d-ada047ed35c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "399ded9d-fc78-416f-a2b8-e0d5836fa441"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29126612-2b53-4b7d-b6be-3ac4c13d766e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "5059c3e7-b984-411f-a246-1b263cb9b4ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dee9117d-a454-4585-af78-0a9ebce511b9",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70c89e6c-acd4-4665-92f8-0c27472b9890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "259cc7aa-fca4-4583-957c-cc1bad8cab44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b15eaf4-0d92-4608-a229-2b1095a9d7f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f9c3b281-96c5-433b-904d-7cba3f55fb9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93eaf479-2f87-4750-9bac-35dce0928509",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b021c3b-8ad7-4b2d-ae8a-17cb201b2799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73d6ca4c-f9d3-44b4-9c58-5bcc8773cb1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7417ea08-b47c-46ec-90fc-21e72b00b12c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "84fff49f-2297-414b-8a50-cf95f0a9c801"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b5e7b4d-879b-4b99-ac76-8a14a9200dc9",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad445dfc-f8dd-432e-b552-cdf7348772a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b016249d-5436-4d8d-aed9-032068dde5d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22a072a2-e37f-4e5b-9c3b-df22a90622b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5af18176-cf1e-40e9-9601-025cffd914da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3eb3566-bf18-41e5-b07e-3d20d6f643b9",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2b10faf-a95c-49b6-bbc4-6eff9ec82f55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfd710c2-c74d-4e28-9359-5b90b3f1a507"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf294bcd-d092-49c0-bb84-cd940274b95f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "eca64863-9ce5-406a-9738-582ff5336373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcb2164c-eda1-49f9-b3fd-b1b6dbc4eef5",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9751ea8b-8dc9-4253-8e79-7d98a2750d38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fbe1378-f79f-41b1-8630-07d8ad5147e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea083c08-8bc1-4dd8-bba2-a6b85ceef104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7eb7975a-c32f-414c-ac51-e6077d0e695c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8eabbe3-54c6-414f-8591-0c12b9223140",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dd306e7-6233-4566-88be-8a1827ec74dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94355760-dc9f-4654-9d6a-97d4a9a91a9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "450ff043-d5ae-492b-bfbd-3e25632d7988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e6467cd4-ef7d-4103-a877-f68078bef5d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf039f53-5b6f-4210-8dd6-d94fd87a6c95",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93172799-1672-49e4-ba19-23bef36be28b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b20d30f2-a2a4-4e65-9730-a3f068012a01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eca53385-7d43-406e-9540-b10a79c6d1a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "ec53974c-273d-43e6-9891-97e4fb1f9a98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f1f9a8b-2604-40d0-a118-1cd67750954a",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4b66ede-22a6-4137-aa9c-0b732b129e6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08f2a0ff-f735-4733-8e48-dc4d671a4008"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8351384-65f2-414c-a945-efdadc72f2a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "04dc089e-3376-42f8-a324-3ba75f933999"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08516734-727c-4abb-81c3-8cc04a19b4fc",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a1e9cdd-0156-482a-84fc-cf6973fd9478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ef0aa68-4bdd-4a59-836f-0fbcb29aefce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb584127-0b1b-435f-8903-d5996cd16708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "29a66dbd-6c31-4fd0-baaf-ae86f2fc4dc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4182de8e-e155-4118-889a-dceb49408980",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f231528c-757e-4376-8711-2133226873b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31479aef-2cb5-44e1-8e35-e432bffec5bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5a67c6d-8f4f-41ca-b9a6-347d787a0006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "29cd9930-0b2f-43ba-a67c-57fb0e841447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d24cf570-b6ec-4e92-be84-c6c215d5f889",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6753dfa7-f515-4a50-995a-5b3c281e06cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "756a8a88-06d3-4f9c-b140-95ca34aeb460"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb373313-db6e-45fc-bced-0c1eeacb21db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e954992-dc9f-4d06-bd21-aeacd578fb85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf45199e-8457-4e74-911c-f9e062fc0dc8",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7284e12f-28db-4e6c-ba14-d64325024697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4aaa54d8-f48b-484f-8b57-27ccd26d84a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "631896ae-d9e5-4aab-8746-5d428137619a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f60d093-6086-4a1b-bcf9-534b01c0f5ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77e3f417-da0a-40d8-b16f-cf41d0c1499b",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1fd920a-6e8c-489a-aeae-62db3ecf0674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "167462b3-a8c9-41cb-96bb-bea003c478b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c95c1dc-1008-4c3f-91de-5f870e6956c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3586e489-75c8-4d49-9138-2069f20d11b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cde350b2-e1e5-47bf-8268-4f00f18ceb50",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1517eaf7-6063-460b-bfca-2eaecb87e9cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43154a18-552e-4e69-a8ae-1169dd4d88c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41871d5b-fa89-48b3-8ddd-0010d6494a3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "72d3c7f3-828a-400d-8897-cb47afb02a17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f0bc0ae-f801-46ed-9e40-d7aad321001e",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2eced01-b2ef-4254-b201-d884011f4e8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08c3d0b7-6fcd-48d3-aeca-96b4bb9e9f24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77d81fcf-261a-4c58-851d-3c4e2b00c945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dd585c59-22b1-4d3b-85b4-2f1f075cef62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f66507bf-f697-4c74-955a-03052996c60c",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "004b882c-67bc-4ea5-840f-4e6b565ff8d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "686a8e75-ba21-4a86-936f-d7efe5fe628d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bda236e2-8681-4b41-ae2e-47fc748cc80e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "8380d6d3-d42b-469e-835d-8ca560d6d81e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90c6d11c-236e-4763-a63f-0bc8e872d829",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bd54ffc-2afc-4504-a8eb-585f769f0067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66d755b1-bf3c-4c27-8a84-22a8cda4b1da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e1a1790-79a5-4831-afcb-5554786a7b9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "19a7e4af-c856-499f-9f45-f97c1ad281d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97f43cb7-2f25-4ca2-8d41-30ea345ba04c",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8eba7b3-dd10-47a5-b7df-cbd8409e82c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a99b622d-87e6-4bd6-8cc9-25cc4fdad342"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a891387-8a97-4e59-b581-b2953324e5f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "317c912b-2a31-4115-9e40-6986d43e80bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48bd8017-9de0-4519-be47-70876e90c445",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49740f0e-ac0a-4583-a1b3-ec84cb747d71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e97084a0-8a4b-4be9-9fe7-618df24d85c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d5278c4-7c9c-4d39-95c7-175c00469b66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a738104-1557-42a1-ac52-bbfcbc838088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6643dfc1-9e05-4012-97fb-b8b527d0376f",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "312ab7cf-a8c1-4bc1-a3a6-a1c36604177a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf697cfd-e388-43b6-a61a-25d5afb20220"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb97b548-9ad9-4e79-b5de-77fee56dee8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7caef5c-c3a3-46c2-89b7-26ceabd7a9e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3648db86-52ea-4b07-9acc-bebc33ae0cff",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab067495-7535-455f-a12c-0e87f45e2dab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0ca38d6-8dd3-46e9-8fd0-c1b50fe23a1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91dc5cdc-7a57-4d7e-9696-665eda306687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "84cb30b9-6cd6-4a5f-9f26-3a417eb0fc18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdbac065-3a5a-4403-8b4f-936273e5c690",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "930190ea-eede-4e33-bd01-d430611154b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c216b805-36ce-425c-9925-1709c3401322"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72e20797-248b-4d3f-b22e-9ddc59eaff4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0aa37e2e-f490-4635-b1b8-20c8c672ba0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff293290-d44f-4c6b-a6c5-a7eb867d08d1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12054fe1-6225-4ec2-8b8f-4811aa1b3aaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eba8f6d0-b689-420f-8b2f-6cf70f6dda4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "698e246a-e093-4b46-b92e-78236e57e3ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "39491c60-a1a6-45d5-b759-a97e6f28fbd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52422b9b-f703-407e-9747-28ebd3f32f63",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2573c08-003b-45fa-b76b-189c56c956fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "787c224b-622f-47ca-9e8a-3114a6ce4a4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "655d4eee-f8eb-42ef-bfed-4933e29cb973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c775870-a6cc-44a4-8f4e-8d4832c53d5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f2a38ff-f35f-4cf3-830f-50527f2a24a8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5a229db-fc36-4b45-adf9-3b737cd6b8db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "907e4a9a-6faa-485b-812f-89bbfb975f2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98987a63-bd17-4df2-bec9-04e08dce753f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a5b941b-f57a-4b2a-9e40-b9b638c96f71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b47bbbb3-68e7-48b4-ad24-336e5c08f646",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa63f56c-0aae-4f0c-a024-376d1e378c84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2cb7e65-0602-4184-96ac-42e552f313bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb9c8caa-cba1-4dfb-9197-5a18a326fd58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f2ff9dfb-b95e-4040-8034-f5b3a30d87df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43736976-157a-4c4f-9d2f-9024ab6b8bf8",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25fe91e9-15f3-4941-8667-990261225237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "018cc3da-7d4f-4704-96fd-8076e9aa8128"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fe67328-0d27-4913-97bd-6ec1eac52c5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "7fe022a0-f741-4ac4-96c9-e1d5ebcd4d2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79bb2a53-994e-4416-9adc-0264d668a12c",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2484a9a7-cc9b-485b-aa11-3f41c3a089d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca08ac8b-7001-476b-9c5f-5ce570f4100b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f473de7d-7b6f-4b86-9649-27eef4f1774f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "da68003f-a69d-4669-ae11-c156cfbd2cb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24497877-9672-4a77-80a1-63502ddcf299",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d73914a3-78c9-486f-82b8-95fe9855e0c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b80fed0a-e73e-4134-8972-c5cbcb4c74ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa778fd1-6a8f-4d8a-937d-c7ecba8de7ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d55b3817-3c54-421c-960e-2fad4368b9dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73bef85f-1308-42c5-934a-80d87629dc0b",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ab37b9b-c89f-4c7d-9322-4e67fa3f1491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfc6c1d2-23fb-4569-a99a-29801292350d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "654e9d1a-58a9-40d2-81da-4dea22bce937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "45bdbbad-090d-408d-8889-8bf0941475fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "552be172-df6e-49f6-affb-806cf31ef9fa",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3983e7b2-2715-4bf8-be4d-05bb13c1bcdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43974d0e-89d2-4c4a-a529-e87c4dc96ea1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0945d109-4072-4413-8563-1f15845ab3e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5782285-4a07-4eb3-913a-7670b7ed7bc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6c5e91f-0e83-4ac2-81f5-db0a2b664f76",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d922199-3169-42b6-adab-05bc6d178053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "409c7ab2-4653-447f-b359-65de6123c6ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c3cf844-9b65-4d65-aecc-a725057e4882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b6520da1-4d64-4927-a89f-e91e3cf65317"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd612ccc-92ec-4a62-87c2-cd42ce1c24cc",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37cfd1ad-ebfa-4067-bc1a-da76e80f9be3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d73faeb-8cee-4185-9076-9f74f80a4a5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dafed65-4786-4457-b175-81fd4312a3f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d88a9cab-b21d-4a0c-b922-46cbe8ced340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6082de4-4fd2-4d55-9fc3-89cb54425c34",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05113132-2860-4188-961e-de27d1aa3628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfa9a755-e61a-4908-9544-b911ccf312fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2697396f-a2f1-41cd-908b-fef047785502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9f72cb4-6ebc-4a16-8da5-8c55f9bd09d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffe65caf-e858-4d0f-846a-6492eb508c4b",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3e994b2-0cca-4708-948d-5342e4fa96bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5441d8e-15f4-488e-b404-979ca2ba2d4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18b8b327-b00f-4f6b-8c32-485e50f92f02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d60d5b7-5216-40e7-aac7-a1b39b598b8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "017bb2ff-3533-4ebc-a71b-f6ceb5489560",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd56047a-4f77-4134-b91a-7af4e71f06de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dfd2fc7-2670-4bd3-86b8-b7f5b71cd207"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1f94c17-0370-42fe-b8be-f14fbdf76604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "83148c93-1288-40cf-aa38-c5095a59a486"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7c126dd-61c5-4bb7-8901-7040b0bd107c",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d9106da-a11c-4c3e-834b-36b5d6432166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc4803c0-580f-4979-bd5e-3a0a01040757"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a153c29d-79a5-4ec6-872e-e9429db331e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e086e4a-c46f-4621-baa3-d63aa47c4286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2041c676-9f23-425e-be11-65ffea6d5c53",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14b2996f-dd90-4fe9-b981-7c3851d6889a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "669ed11c-3a8d-4603-a2e3-d9560852b5cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1a6564a-527e-4c87-a6f4-f7cd2e677e0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae7aa007-81ab-4b65-8c75-aae08efeb3b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a1e24d7-13c5-4ca2-affd-d80b691495fd",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7197a1c3-7fdc-4cea-b0b8-fe120ec2c9d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bc8e622-8a22-454b-bb8a-6e7d7450cd3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6ea465f-cb52-436f-84b3-866b761f1b45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "590f418d-bd74-4cf2-942b-78561d23befa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fc8d508-3471-4499-b6c3-0b9fb13854d8",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c2f4a75-e65f-4215-ae36-25e41b4f9743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bb5bbdd-0213-4577-80ec-972201f4d23d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47796ce1-244c-413c-9a91-76542e17e4b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f16f30ab-71c7-4d58-99b3-4bc7d4af0885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4863e2f-0f60-41bf-949b-28798f78865c",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "396e481c-c49c-43ac-a495-076332cdde52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dc6edbb-4253-49ce-9dc4-b528e5d2b538"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12d8fefc-91c9-45d8-910b-874bd3e7f516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "40ccd3e8-403c-4f4f-a403-98622de83c5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bc47834-910b-4c49-af0b-4615f2be1018",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25faacc7-00c8-4016-88e3-d388c4fd6746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9be7a5fa-f33f-4827-a8ad-0c7cd68e5f5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f74edddb-69b4-4e16-abec-efbb8f2e65df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "74276237-ab46-4946-a9a1-31c94e0a2f30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b311395d-9d85-474c-8385-6f05a901ceb3",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fcd7335-108d-412d-8abb-1f527287ebe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a0b2eec-ecf4-45ef-8ffd-5ea14ff3f835"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff0e14b9-a1e7-4ddf-a635-73abe7b7c9f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "363abe8e-bddc-4806-a7f6-b05f8a54466d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e292767-bb8c-4c7a-8a0b-b59a66554db7",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9754458f-01af-4b50-aaef-3631ce911b6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a7a8a44-c5c3-4fc0-8aef-a5b7c8bbe10e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de61ab24-5a2e-4331-8322-67b155e22b8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a4b0ce36-6b0a-4440-86cc-76bb44050c74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6fdf1d6-9245-496c-828b-cebde7830fc3",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a588a173-699c-44dc-90c9-238d91cd7bca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3d9bc58-2d18-46ea-9ead-e17db7cafbee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc9c8b90-4f00-46d2-911e-1bf4e48b5c19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c5da13fb-4b0c-4428-86c0-385b84924643"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aef22ff-281d-4ecc-9e42-55b003a9efa3",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56906bc5-18c7-4dd1-9c16-81cdfd8f9839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7365854a-6e58-44cd-8356-16695ac31555"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0817c7dd-96ee-48a1-aab1-1de65ae8fb4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2fc7e7e6-8353-4a79-b6b3-80eaf17a6bfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5099268-56aa-4f49-b5e4-b21c14438c51",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6606613-878f-4e8a-ae51-18885950e5c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70ad5d89-1c51-4ab2-9eb4-7520e009f062"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41269093-3b3a-4a42-945c-f093527f444d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc2fe1b0-5fea-4b04-9fbe-6e21b5facfa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a001d29e-2b92-46ae-89e5-6bd937a3c017",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52c59108-9c25-4308-b413-3f8264d5a1d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d347f5d8-8795-4967-99ec-949256ca3662"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a3a5bdf-3e3e-4bcc-b884-d7105b15f3c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cedb23cc-0686-4bfc-bc0b-8ae2a0917f24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25b4481f-7544-419d-afc8-f55b985caac6",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7623cd1-9a8f-45d4-8ac8-ca03387c6fb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36e8e23c-a846-44ac-ad13-52341664d8c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75570b21-1a34-461d-a402-93814ebdd670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf368abb-5910-4ad3-86dc-64791b63d056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93d3a81d-2b14-40d4-acdb-ea3773c6719a",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c16d48b3-1c2d-48fa-b2be-bda625fbbb0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6457fe8-d0e7-47ca-be62-14bcac6b5756"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c2e6e57-68cf-4eab-ac3b-73f1d61a98f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f98e7cce-5bf5-491e-8f8d-02571e5ca90b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "259bfd8e-e1a2-4580-b278-85f33155cae9",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "150e9d4d-de63-49c7-801d-5eae553c588c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4248914-5a4e-4c84-b2b4-7441288a6c34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "697163c3-d5a2-4f68-bf4c-09a048163162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d9bc8666-2e4c-4828-b8bc-bc62db7d7086"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39a5ee93-76ef-4de6-8d78-7b492e5f2aae",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff741451-1217-49a4-b106-3ce600323a61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfc4c2bd-54d1-4330-bf0a-1b0c8ee84bf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be454118-7440-499a-b084-ed0017c64b95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6546204d-d62b-46a4-abdd-c5e57ed96884"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74196652-dfbd-4920-b295-ef2188f181f3",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9910ee9b-2808-46ac-8372-cd6da5f98ad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28801984-9de1-4be1-a19b-465528ca8ad2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9a47b58-d1f9-4175-a191-67f8ec93a87a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "329c0a45-be69-45e2-aec7-790abce6b708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bc4f240-6997-4d91-a6bd-21641522488c",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "645cbd61-36aa-4970-9f1c-011acee3b7b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06d4382a-9e05-4ea8-8db5-ffff2ad43563"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7237f472-30a6-427c-a69e-f5217fe25c3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "dba54861-ca8f-4a99-8b46-50b4e392ae4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3919555b-1b60-4f52-af40-447d655da8fe",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e20292ad-e5b1-4f6b-94c9-70a00fc51163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ba0cc1c-e0ec-487a-8b4e-8848eb8d82dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30aa386c-5fb7-40d3-9e1b-10fee2d2b553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f183f279-35a0-4109-b33d-bf8d5519da08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10c8a87a-ac6a-46fb-8f9b-8d5a51447aba",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c808ee4e-0aa0-4c9b-80c6-608b7515c973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75c955bd-30d9-4f72-8875-054811c20bfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6136b6cb-0f54-4eba-ba89-f3bf28749cd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "878ec18d-03e4-44a1-88f8-323297113246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e370405a-6bd3-4170-80e0-7cf2c2996895",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7f917db-f96e-489c-be4f-134f06668a46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f5725030-ba35-4d50-b8df-e0d9880e8ccd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "312329d3-cd6b-4f1d-8f26-46a4b17a3afe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "925b00c8-ad48-49ad-9e46-e176abade35a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "93b01289-55ad-47e4-a682-8ca085cec1df",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b6872a65-ba36-4831-a193-5314fecc37f0",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42a9ad42-bfdb-49d8-942e-23e9766e721f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2a652b28-1360-44b1-9832-ffc0022b5998"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4285d6eb-653b-4a77-9249-6135e7d4eaab",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7b5643f2-f755-4371-8e3f-29a5e0e40b7d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6ef6a471-79c2-4117-bdca-cd651fc93eca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e28a9c80-1ff1-4d85-bfa2-a3d0c8afa123"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ffdb3459-df51-4785-ac47-13baab56dd7f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f48f7d49-cc72-4597-8914-763d821f20d9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "785247f8-06a8-4474-82f9-a18ff7470bc2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9e535153-adf7-457e-8610-512e2852c2a1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "06f102b6-030c-4f99-b951-14e40b51860d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e474f0c5-fd4f-4409-ac6e-a03be295bd2c"
                }
              }
            ]
          },
          {
            "id": "90a0c075-5292-424f-a29c-4bed37c3833d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6b7be302-49eb-4a62-9b80-f44eb88ea8dd",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "f786e974-e6fa-4f1b-936f-a2196b1daa7e",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a66e1e09-c0ce-4765-b4b7-f9208b0d4421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "e2594d87-2783-4099-b711-2db5b6eeec69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32bed045-0d50-4383-8adc-3dee64d43bc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b86a640-c440-4cae-8a72-34220a6aad53"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "44c4ee42-3112-4c83-9a92-3ae23fcbd630",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "626288f4-ee0d-4d34-9d3c-50521c4ba0d8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "53c26f3b-fa68-4ebb-b437-f710cfeed79e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "980e979e-493c-412c-925d-2a87097fb632",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4adc3360-84ab-47f0-b273-a41e94fcc33b"
                    }
                  }
                ]
              },
              {
                "id": "99f149d8-d6ef-4115-bf66-bd9188833bd9",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c4e223ed-0dcd-4f9f-bf29-0e8f9475c753",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d81504c3-5aad-4a2d-9f1e-7a9e6fd9569b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b012e525-e4f6-48c8-ac44-7b16313d48a2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4d8b8e9b-a44d-4e6a-b940-00101f5071d5"
                    }
                  }
                ]
              },
              {
                "id": "a8eda676-fe44-4744-884b-ed89f209c8f3",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "136b2be7-dba9-411a-88f4-b92a9511a9b3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "eb73698b-b261-46e4-8b37-9ef20ec9dd25"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "89b70da8-46d9-406c-9f5e-da3ed487dadd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1db3a35c-468e-4ecc-b039-bd77fabbee4a"
                    }
                  }
                ]
              },
              {
                "id": "954f0c91-33f6-4e0a-a567-f1d057f7b485",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "efe67f62-eb18-4b5d-ac83-625165f812cc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7991536c-c393-4415-88af-fe9e669cff5d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f518ac60-172c-4daf-ae8f-d1d825402606",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "6e1b3a2e-05b1-4816-8ae1-972fb1c3a166"
                    }
                  }
                ]
              },
              {
                "id": "5e8b9f76-1176-4570-b6b1-2219b8016170",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a45023ba-378b-4dca-8653-dee90f0e2e4c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ff321ac1-ea71-4568-b91e-b54bd9719048"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "35fd440f-2d04-4275-b3af-d7e76855e9ed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "9ea9a91c-b1b1-4ef4-83d4-f94af0fdcda9"
                    }
                  }
                ]
              },
              {
                "id": "9ed7a357-fb2d-481e-8d1c-7a1bb8e9087f",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "849c1935-d8d3-4d22-9aaf-5f790241466a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "45a8261b-2273-4802-b3ea-4740f437fc5d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a051df59-c0df-4699-838d-10999a7df3e5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "53573991-e20b-45dc-805d-0850ea82adc0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5a8cee93-3bba-4820-9be6-b84318c4510e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "652ee183-b51e-4146-97e2-c5dfead1a7b0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8f1aca85-1e6d-482a-b7f5-8beac7661856",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "771c7746-7162-4f66-ac7c-60ffa70b34bb"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9da38bfc-6c12-4c41-aaa2-4e04baf044df",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "3d1b9e7c-f94e-42b8-bab7-3831d7c4462d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9cd1fa65-b1b2-4784-9128-dae1b368a8e0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "056914ea-3faf-4595-a915-3f3e5f14ed84"
            }
          }
        ]
      },
      {
        "id": "80d0d9d9-4bec-43bf-9886-f076de2f3044",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "2f8df3ac-6da1-494e-86da-432daa833706",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1ff63c36-6cb2-49ec-85ec-27f239957f89",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "edf8ba51-8c09-4c66-bbb7-94208659664b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "940e40da-de46-4302-9414-423b3add2dd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ebd746c-c131-47a5-9883-64b92baed845"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9327e5ed-255d-47ad-addd-75a8675bff64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "800a1ccf-77c8-40e7-b55e-83a88d672c6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15a537cb-601f-4ed6-94ff-5a4229056f07",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "019a8e55-3b4b-4cbc-93ad-e3c6c0573eb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86ccc5a4-5959-44e1-b25c-27591cf3e405"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59cb11f9-b407-4cad-9073-35fa17aa50db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "140a8e73-4a0f-4b93-a509-c34647be5d7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77dc171c-2020-427d-b666-13feea329b92",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0575df7-2fe1-44a5-9392-bb5d6030e57b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8873efb5-2928-49d0-b176-6f166f45516e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32cc4cee-a2b9-42f9-8282-ed6fa4b031b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc35109f-4287-497b-ba9c-97868ea4d8d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61f33068-e250-4dc7-9e5f-1a3bc9fcb022",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd2e6832-38fb-42eb-86b9-08b549ccaefb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97299330-ffac-488e-9084-37740cb26eac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8090d7a4-723f-4668-8df5-b82995214b9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1ed7e03-d371-4e89-b2a3-2cf067ae03ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1ed8ce9-73ff-43f6-b817-8aaab90ec9e7",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e59295ee-46c4-455f-9251-c883c19f6728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ee3d8e3-8041-442d-9ea5-d4866f08cc6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c06cbed6-7520-4a9f-80af-844d15fb4973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "99edd63d-a74a-4c3f-be8f-3d6c56ee6978"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f383f461-b0d6-48b2-b311-3293ebfa5c1d",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b06c6bd-cad6-4a9c-83ae-63614973cef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8fa27f6-99c9-4b55-a349-e1ccd712c365"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c501531f-4e32-4ccf-bbbd-81ea1e923449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6fa2a88c-bdf2-4381-a43a-f24aefd9d42d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bf7e773-8c81-4158-85a6-dc41da22ec5c",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7424701-7b4a-4569-a5c5-06826fc81d44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3d57f56-9108-44fe-a3d6-609652a0d4b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e7409a6-0910-44a2-8484-1f801623b15d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "76ee5f51-b4db-4698-bfc6-c4cf790d60aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84a78d45-6f56-4f84-bfe9-7faf5ac68380",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0fed075-a706-4ff3-84b9-48044cd8f631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb8ab11c-33a0-4a71-97c9-466e44cd83b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52457434-27fc-4ff6-b605-5b9a2278f095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fdb79be2-5397-433a-bf01-0388525f1d14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1386e738-3a40-461c-897a-8ab75201c572",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4615169c-0d84-4746-956e-d875b12a4d13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50d987f7-45c3-46af-921a-276c39956525"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4aef74a-7a4b-48d1-83d8-bbd8003dd034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a9767ed-7932-4caa-bac7-e911f2ee29e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83a502ba-e724-44e9-ba36-e0c9480ba7ee",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e32defa-8501-4782-9053-4434d146eb9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06a1b86e-1999-462d-bed9-82f78c8dc2da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c17d7a6-4c9a-4a5c-b273-ebb3087d9b40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "df0d5b80-2005-43b4-9961-02195e1b93ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7f1e943-85a0-43d9-b82b-a94d6e3388a2",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a19df793-b6b1-44f5-a1c9-d4d279d2fd90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b8f7f38-5fcd-4818-8eda-d27b7b72c6fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d1d9b34-8198-4f4c-9b14-32d6ca316a36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "9b9c575d-12ab-4270-9ae9-86f1d2fd3e75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "220f1e96-1598-4024-ba9e-9a4c13a9eb2f",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34f9cac9-31af-49ee-8c8d-0293a5bb98a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e6b3090-94af-4eb9-8515-fedd427287d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3811b71-b243-4397-b1c4-99d3c18111c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "45add301-a7b3-4fd3-93e4-b0dd6ce4c4fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efe5e3ce-1592-49ad-9a18-e9e263213283",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7b8777f-4335-4a56-b12b-2161d17ce55e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "748f4b0d-21f5-4307-818c-1dd0e4a37ab5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c0c61e6-6507-4bf3-8a72-9bd81207cf0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f49cd21f-3d13-49c9-ab62-74a7bffb3e64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b986e864-184f-4a6b-8856-9ff8506ce25c",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30c0fad0-9bb2-4528-9c93-f0307bb244cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ac3edac-1293-4555-b486-e3ae5c62d878"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20bcd1ed-3269-4e23-93ed-bc7395d88b5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "30e933d3-db95-465d-9c95-72514a6bba6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfb9b05f-c2ac-4d29-a514-929a8f7554ad",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53907525-af60-4a66-b94e-bd4605f0a040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd18652d-ac4a-4f5d-a506-e020e4766936"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "729ae4f2-eebc-4271-92ec-c91c6282a5f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a57d7091-3a06-4a22-9d08-97ebc18746ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd87055a-fdfa-42d1-a550-aaacdbf0bb0c",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33fe265d-a410-4102-9cf9-6d4ffcca3f1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "941f4b3d-2c08-4561-91a9-381ed73a75f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "491b63f4-8464-4636-be69-9a58137d9e86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "9bf70b0d-6d1f-46b5-868d-796c2dd39915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72ba2c13-67be-4892-aab7-644c620ae956",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "968c1461-9399-4b73-af8f-0ca03ed2ace5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18a31caa-ae1e-47f3-b654-f5f85dd51aea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9ed182c-d441-4906-8ab2-2d22ae32c4c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "54e4c87b-0f6c-47d3-ae6b-c430ffe2e106"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9172f0f-4661-41fb-bd10-443ad647a746",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a607fb7-b6a7-4fee-9aa6-89db8f110e05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caf2c29d-ef56-4239-827d-832af6245be3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2deb20ce-cc05-4b0a-8b86-e9d1e4956b42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "59d7ec00-cf5b-4c7e-b2e4-5d7781b4db65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcddd794-2bb7-4219-aecb-2dcb6ccd7cf1",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65ae900f-d9d7-4a53-affa-fe22c0b60792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eac5e924-2165-4904-ad43-0c711e480a28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef0a5a81-7e22-4c14-961a-44b345d61580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d708476e-6008-4e69-8143-cff93c3e3361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f261e235-2d9c-417e-bc64-2e6ab47095f6",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed60c932-83a0-4fa6-aff9-c58bfdb35c59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df4cb271-4cb6-4731-bb22-662de3a3af64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e67ea61-1bae-4eae-b53a-5d0391cd3930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f3c05c8-7077-41d7-bc20-76180e6b75e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "473e3640-7a45-4cd9-a727-34f024defe58",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffa634c5-4ebe-4d58-a391-4a692c7d6cfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dcc31af-d866-48c1-9568-1cf5fb7f9f7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54b6e9c4-c880-4b6c-9b01-57fb0519b259",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a2b101b-59da-484b-bd02-d874c3fb02a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65509390-2328-4a44-96a1-aafb63baee06",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88d08eef-c1e5-4360-a59b-fa8cb1175c41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af20940f-5bf5-4a6e-ac5f-c616a48068b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad233b69-b58a-4dc6-9cbf-a56af7d7c89a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f55e38f-8100-4d4e-a4a1-a0fc50cd6c48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffbdb6c3-3526-41e7-b9b3-91c013361a66",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d468d282-142f-4220-bf79-580e4f059064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57524aa7-b1c3-494b-87cc-6ee3869e7e28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64ae26c5-acda-456f-b843-407009b7e113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b66c47e-0db4-4ed2-8106-6848d0ea3213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8930873a-ebf9-489b-8963-5e631b24a7eb",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "454c54ef-f16e-42c7-94eb-6512fde76eb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23564124-51ab-49cb-ac4b-47a7a8816261"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32860c5e-70b8-4e58-8364-ac84a517a23f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5fe95df9-7e68-4571-9e09-63965d8a1ccb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0621f91a-e024-4545-9f80-534b3cfbb832",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e596f22-edd5-465f-beb4-5db2fb47df6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f5a82b6-b78e-40f5-b1eb-bd5e4a4a9ef1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2d64ae0-bad0-497a-8186-1c4bffb2ef2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "01285d13-0664-4a2a-bc83-e0e175f117be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6751df5e-1258-4943-b5b4-5b5e3cf683be",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe014ee6-6160-4ef4-bc29-c9a6bb03509a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "150cfcfd-abf7-42f8-86e6-6a5de161932e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "315364b9-c5ea-41ee-9235-e4762545e66e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cbf4a56-072b-49e5-9f3b-ea4af4117f52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeb91db0-f6ad-4040-b29a-482eb1f5da1b",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f861049-09cb-4a47-9401-5d0d75efdd29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae312d9b-e0b6-41fa-9333-d8244b1b8158"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d8c9e8e-d0d7-4b1d-9687-cfecebb8f314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b950ebe2-b80f-4511-ac36-365cb2ed543f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a444a3b8-7147-4a46-b952-fb71db3e60aa",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38b877e1-555c-4962-b980-da0d059d1f71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad44c7db-7979-4ff1-ad6e-7c1c0049ae10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2da1f90-f2b4-421b-9160-f3e1ba4badc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7bfa73a3-59e2-4ddb-bae9-833f83b36cc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "921cca56-4ab1-4dea-8149-2aece40d10b5",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c79a9767-f946-49d2-a8c3-533c592c533b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a56c134-702a-43cf-9e1d-952dbf167385"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aac15f9-6585-44a8-a558-3cf689355f45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "768c4c52-d999-449e-bfcc-2fb08478dd37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "651d5a74-f120-40c6-a940-29d4a3eaa25d",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f69431ca-1906-47ed-8774-cd47f3ec760a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aed40ddf-2bc8-41c5-af9b-543419e15541"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bcb5d43-3006-4dbd-b5c4-389f7e48ee66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "16b3d4d8-852b-40dd-a1d4-969ece5e120f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "774a85c6-9f9d-4e58-95d9-42c6e6c96c7d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8c045ad-8052-4bf0-a512-340837364203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c458e80e-a1b1-4a88-b1de-b95550058006"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc967c51-309e-420b-8855-39bb6ef47923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b5b6e2f-4e9f-46b4-8ffc-2d76c37f85f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "773cc618-8e0d-4f61-859b-7da82e5051ce",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87ad9401-857f-4d68-8548-2dba62ebfe72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c21b75a-afe5-4402-9085-a05f71435767"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "945376a0-3273-4905-9c30-7367eff95783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e450fc7f-863b-45fe-836d-23ea91c6368b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "00672cf8-d5c8-43d4-a7d4-8a46821ac605",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "59c72e55-45b4-4697-885c-baec459c8af5",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62177fa0-608a-481b-a182-208a83e67a2a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "f3337838-1d8b-4646-b7ff-107d6230d901"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a13383d3-a01a-4520-ad4f-90eaff7db995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fef90195-8159-43c6-ad41-d65ab28871b3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "78307730-ad83-4403-8249-5cc2221a85ed",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ffd18a32-025c-41ee-934b-bbb69783d73f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d555de72-535e-433a-9819-09c5baad183d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "85df3dc1-ec16-430d-99d6-a1b342cc87ff"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "42d8224e-223c-4d05-b236-62ce30dbc9fa",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2334dd1d-c88c-4018-8b3d-1ebabdeddf3e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b45d936b-220c-4a61-935c-4ffdd8f8f7ec",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d57a30e6-1b85-4a84-9798-b6c0fe569bce"
            }
          }
        ]
      },
      {
        "id": "f4768796-5240-453a-92c1-985ebb64bb28",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "c8694ce5-df73-48e0-b50b-21b9714d355a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fbb578a8-9430-4b42-a0dc-7145a8e6fa59",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "313b13ed-6292-4b66-983f-b5ef14a7f0ba",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f35afed-9011-4a64-917b-62512f768174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f91f4d20-8dbd-4a0f-8215-7a60b69673ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ef60e6e-b61c-4dba-88f8-418f28ad720c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "dea91162-f407-42df-8d8d-512bb1059f3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "119bcfb6-bc73-478c-8554-50ddb85faa96",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36293536-cada-4025-8ca9-92178a30547a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f75a7f39-ad51-441e-8338-bbe2d4ba15de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "799d2448-98d7-4853-ab4f-80f2bd9c8b77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6797489c-d23a-41f5-bab8-febb2c55d461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce6dee1c-b359-4e01-9abf-ae9846aec4a8",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10bfb9e6-50bf-45cf-a073-7cd477f0d45a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a7f8423-4257-4e98-b61b-c13e3d83883b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "512f3612-78ca-4eb0-8a4b-9d628e92fb92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff9a73c7-9ab4-483d-af65-c218b05fb6d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fa695a3-e2c1-4068-aa3a-ec1d0e4ee668",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c7ef034-ecc7-43b5-ba09-046c22dd23d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70993326-db96-4b87-8ed3-ab5e541b6492"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c22fb1bb-60eb-40a1-9523-6d360fa55b0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "63068db4-b19b-43a2-9481-227d6393e328"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94965e89-c3c8-4d36-b89e-4a947e9b860f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd0f6315-c461-4869-a092-74471549b65e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7da813db-bf10-48e7-8dc3-624523b654cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "358115b8-1314-4f8d-b2d3-7f96a4ea893f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ebf8e057-0f98-4210-9423-86d2f7298609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e8a0b58-d99a-4317-849e-7436b1ee1856",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c840b9f9-ef24-42f9-9c42-0949b6049d3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37bab3d9-e289-4210-9b6b-11043a399fbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2b819bd-7c60-433c-9506-c30465616882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f26109ae-818d-4fa4-8cff-9e7d2f3eb909"
                        }
                      }
                    ]
                  },
                  {
                    "id": "242a285b-e310-4d80-9e98-bf5c105af647",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be47797e-89bc-420e-ad3d-d17fedddb924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0678dc4-003b-4de7-912b-10c5e95494a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f3edecf-2aeb-43f1-8039-30b53f1c9f7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a19ae74-01cb-40ae-95ac-8f953d3829e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2238c800-d3f0-430e-86de-f026fe04d985",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d7e4088-b113-4aa7-a218-1644f716f8cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54e1f91c-2bc4-40e8-a41c-5dc7ecd63f90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ca937ed-5e73-47dd-86d8-eb314b33766a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "33a42fde-d1b9-440e-871c-5a5be5d6fb5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74e130e7-7e92-4780-8963-ce8d94271fbb",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18d92525-52fd-4853-9981-7a54f3e099a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7b35be1-6fe3-4ef5-b724-2f4f44376110"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70390fc1-0f26-45b7-94e7-e011e8719df0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5496bf6e-e893-40ca-ab21-c07f6ded0ed4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e860e15c-c2db-45e9-9653-fd68c38d81af",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb6bc30d-9901-440e-a018-e66aba686d53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a81f26c-853e-4726-8294-3782c78b6595"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "290dbec4-8424-4721-9222-f0391552444c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ba3c0e1-5c2a-46f5-8775-9bdd044aca42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8884911a-c947-4003-ae3a-ff89e54c5384",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a44edf39-ee55-4eba-ba24-7669be078485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "996ceebf-c99f-4cf8-9a9f-3007681db8f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92f4db34-2d31-462e-954a-909a3ff8d3b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "12b31689-28d7-4b93-9722-6292ebbe0970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1ece850-a4c9-4b6c-9f4f-ab2e00b81d5f",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86c30bc5-6b2d-4f57-8f92-7437f2e2e378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d572349-f57b-41d7-b0fe-bd377b4bb599"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7fcdfd2-25be-4ff5-a12a-32a8626dccbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d6bed2ee-2628-4384-975e-7036f21b73f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f4e069a-1828-405f-80a3-f7a7f4fadb97",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e248f8a-5548-4d82-846c-0a02824e668e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcda3f45-6ea3-477a-99c8-eab83998ca7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "669f101a-01b3-4245-a4ba-179f3385577e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "36a700ec-3131-4c63-8e2c-d8a3252ca858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c05a027-c264-4738-b4d5-a6d4f892c0b8",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b303392-46b8-48e0-8e5a-af18b0c64208",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c8bf750-9237-4157-a42f-eb74036022be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89b38f5c-41a7-4e52-9e79-cc6bdf60ae68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "079660ba-da0e-452c-a14b-afd1af068460"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e40634d-3527-46c5-be1d-ab5f33f98946",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ca5837d-6315-4dd2-aadd-b8eefa305f23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "812005ed-b98b-463f-93ab-df882b11b556"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8446feb9-94aa-4386-b98a-122bdd4a9311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "776e3c99-1a42-44ba-a0b7-58b795918ea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bfb33f7-abf5-42ee-a828-9a2ad6323dd0",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da1e14be-0357-486a-8e0b-6bb3c90c2b7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb517dd3-bf95-4bbf-9e73-166e75906d4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81c571e7-e24e-4bb7-9ae2-4933c9e13b35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "d917946e-91b6-4743-83d5-8ffbdffbcfa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c860f4fc-ebbe-4d41-a9de-1b17c2899c80",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4ea5f8b-bfe6-4770-9bf8-ac72b0068069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "395b8b2d-f777-4e80-b45c-f82146fdac16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e7253da-a315-4de3-bea3-f42d8883fc19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "4643925c-45ac-45e2-a7dd-c57896a90d82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63c91e93-7309-49f4-99cd-a85456ca3f1b",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c54f688c-1d58-4513-98fc-01e8c1aed753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e432101e-432d-46e8-9294-2c62d7445dcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06844f99-974f-4daa-a741-0a6988f41483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb3bdef3-8852-4c2a-83f0-aeb5c6453dd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d76e74e7-9483-470c-a3f8-6226fd8254ad",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5fd63f2-ec2d-4d0b-bf5e-943b3087ff2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb57824f-0e16-48e8-8dc0-accfb03d23de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2178e1a3-edf1-4843-b70c-5c57a49d9135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "22c1d86c-955a-4711-9b6f-621c4db26d57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2922e1c3-0a3d-4609-ad8f-20c56511e6a6",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f7d7c90-eec4-4349-b1bf-226b6bb89131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac37b510-d861-4e73-820b-ad0f3d984c61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad68eee8-b0a3-42b7-8e71-5d977b6e0c6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8771157c-86e9-4951-a488-e4a42628cf98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0241e07e-2944-43c5-84d9-7852e7236301",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "137fae77-eade-4749-acb5-b0c9c4dfe3ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a506a1e-3895-473b-a375-54c7858a3d92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10743ee7-6f48-49b1-9512-4300e5d25840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "149a0a9c-5a2c-4a90-97e7-a82ffd48b0bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5d71472-9554-4b5c-9cc0-858551cf86e4",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98c8c442-3737-4aa7-9030-f44e98bc3ce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b0cb19e-5e2c-40bc-8a4e-d2ffe4c8c981"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac7ee975-f4c1-425b-946b-7406fccc5afc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b9714ec-535c-4148-9a15-1b98a143ea3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a95670b2-f398-4056-9007-8c6d7c856150",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55c22320-3947-4472-85cb-037d699fefe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abdb289a-2916-43bd-9ec7-3be9a885b0f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1036055f-4a0f-4314-8367-f6b452732666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ad102c1-520c-45bc-818a-2834a477950f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4bb6212-9305-41fa-9685-70e96716df67",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7b1a727-861c-42f9-936b-8b4d590592ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d91004dc-28bf-4c0b-a46d-be235aad3a66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed3a2efb-feb7-423b-8723-1b059b9485ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8bc3b083-e2b6-42a7-ae65-4713a86041e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "131b1b7c-8e2e-4743-90da-135724491208",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d723ea2b-2a91-453a-9f25-7e30a75bee42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a06a241c-8ddf-4271-bd5d-1f75bab8575e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b6aa444-c9a3-46e1-aa59-9b47ad30abbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "66493f9c-64a1-4e08-b7f0-4b24c7f15f9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ff14fa8-fafb-455c-bd75-ee853c41d14d",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f56b19d0-449e-4403-9ba4-53838bfdf030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2798b7eb-0499-4705-8999-35886fa96da9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15930f3a-0dbf-489e-adbc-8852eeb85c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7cd1948-83c6-4b1d-ae11-ef0871e1c485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90f1393c-a161-493a-8357-52a7d98ebe4c",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7729543e-a068-426a-a94d-1bdc00e466e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40f1131b-65e3-4c4c-8677-6d8da2393bf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c1dbfef-6efa-4210-8c82-d6513cc06282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7707e94-2346-452d-94cb-ce2687486d40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05bf39c1-556f-4e34-95e1-d4bc3db8580f",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d96bb40-3893-4bfc-b82c-74887adfe1ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f199610-6366-4c24-9b26-0f4acaca0be9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "712e7bd2-5ba6-44c3-9a4d-0821f3be6706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2eaaa2c1-2ff6-4bba-9907-568550c8c85e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96ece7e1-80e9-4f49-bfde-265fd5ffb0de",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c76e1a2-d13a-4ca6-a2c9-b5678973c274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7b12d14-8dc4-41ad-acb2-db6a9c0ab6d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75b9bb0a-c152-448d-8d8e-6dd3104a74bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b42ebe5d-5010-461d-a53b-db400dbfe002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2aa7c20-51f7-4443-8843-2c3655d2efb4",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb3045bb-56ec-41dd-bac9-9e14352e3985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8a4bd98-69fe-4738-a468-e4dc88b725f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de67ff31-a4bc-4960-b88a-194655986666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d556b832-4d05-4908-a3fe-78d0ac1e9baf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef558e9a-d694-44a2-8abd-1c8d51298ec7",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45c18a9f-703d-4bfd-b1de-e63ff18193ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2b775f7-ab13-499b-a4b0-958e06da3bbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a34285a-3a5f-4563-88ea-75802568fb72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5cd166a-8b9a-47e7-bced-28040cf41be8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dee71b9-8c75-4896-8ebd-cafb7b65a37c",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bed798e-1f02-420f-927a-b46c54b63c86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72a6f36b-5e2a-4ed1-ba39-235010635bf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a47fe30-70ba-4d04-8d7a-c9059915381d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ec8a19c-6939-4401-a40e-748eb55d8ff1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3d63c70-bfa8-48cf-8cc3-f293e44fbac8",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a0f328f-e2ae-4462-b329-4406427905f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "066b16ba-8601-4edc-b92f-a70c1b8076fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f90a26f-4a94-4dd0-91cc-fa0c7b876fc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c909ed88-feab-48b3-891e-6fc9bfff59dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c2ac94b-f989-4a93-96e1-c258152fe945",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6983716e-1ab1-4dc3-b5fd-3da9452422ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a85da01-bc2a-474b-a838-24890ffabc0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e96ea95-11b8-4642-b685-f2fde73edf99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a2783ef-df1f-4b02-8a9c-1945de65afd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0a3f463-8f63-4583-a216-56215dfcf5cc",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc340cf1-7f30-4268-bbb6-add1cfa36687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "647bfc41-907e-40a5-ab90-7832091f292d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "081adfac-9ccc-4de6-90fd-f108447cd627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8eed7d0e-ccef-4790-a508-c35eb2ba74ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b391908e-8548-402e-b133-52f70ef8d8f7",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ccd1f4b-9d1e-48d3-905c-eb9632252120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16905a42-3c7e-48e0-8f6d-6143a403e0c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dda05228-05dd-4d6f-960f-21810a35edd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "46378425-f35d-4a02-940a-4a00547866bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e43d4a1f-1cc1-497d-8d9f-024b1786803d",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daf53edd-88aa-4d23-b0f2-5625efbfe994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85f3c574-3765-4e61-90dc-2abc30fa1122"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57f3f01a-9ba8-4fc4-8d5a-f93c07798239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "29bcff25-178f-4118-8e2c-230056ced703"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c99bc8a2-fd02-4780-b8ca-01dbbdc0210c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3bb8b81a-4725-4713-a6fd-d5f28abd7da3",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ea706e2-df7f-4355-b7e7-ec795942b432",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b56eb1cb-34c5-4b4b-8ac9-ecd843794878"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58d4dd3b-a09b-4e75-9946-b728be1df0a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1299d533-b70f-4e1f-8f51-fdeb713006db"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "91d07037-54f8-47b3-b890-1aa48d8fc223",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6009c597-cc24-4e83-89f2-9f1f7f293c94"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f3884186-6702-4501-954f-9100a5316d7a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3034e4da-fc21-4b4d-a3e1-8dafe1876c66"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f593d0ea-c4c6-46c9-af58-62022b3428be",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "79809e0a-19b7-4d80-b5ab-c2001545b330"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ff917256-cfcd-4b6c-8723-f062e3013066",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d55df900-8be0-4da5-8366-911a1cd3a250"
            }
          }
        ]
      },
      {
        "id": "524ce6b4-e476-439b-9b1f-8c9d5e9b234d",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "c293e1fb-a9f3-4376-8abb-903076b122d3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3b81f30c-c2f8-4b86-8a81-7c35a8c2e0da",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3b181b3d-6224-4d4d-a1de-7d596017f195",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71981319-42a6-41d4-84bd-18b9f24ce871",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6ddb364-9536-4ee3-9b44-5af8da8fbefa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeecf4e2-e589-4c30-8af6-867dde69ddf0",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d800170-314a-4be0-9f66-7b98cebef473",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92aaf526-9874-40f7-b26c-4878bbe57399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd466ef1-0dbd-491e-9c01-041b34e2552d",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56e01fad-5c3b-498c-9bce-9cab0a0d2fa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3498861e-8a70-484e-b116-0853dce0436b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94bc0b9a-80b5-4718-950a-072fff0c4a5d",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fd089ea-9f2f-4ecf-9cb7-8e178c6234a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "391a4b97-c547-49ab-aa48-9e974cef363c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbb9ffcf-dfea-46f7-8fb3-01af836171c2",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "827495bf-6837-485d-a225-46d2ed35a1fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f4af9b2-9f99-4988-93aa-436809a4c6cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad10289d-46d6-40e5-a8b8-86320206b7c0",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4acde7c5-c5fc-462b-8133-263df5bd729d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8fee80d-2f30-4d9f-ac4d-7d684d41ef32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9528b8a6-0d60-4183-abc1-830577c6b538",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66e37b1d-d8d7-4625-9966-86ef31f10a47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d55b9f7-f779-4e3f-bd5a-6da84567da5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba4b2fb6-239b-4f02-ad31-9a07ae3ee99e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b68923d1-66fd-4784-8277-c36389fbbece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff1c3641-ea17-4e35-a44d-7abbf61dfba9",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a63b9be-6a8e-493f-924f-a9e0e6200f35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7851b026-5635-4d51-9244-590609bfef56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc00b434-8c25-4eb4-acfe-dfdfb45468e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd597433-40f0-4d1b-a219-01437d0f3fe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5f27631-4455-4a1c-9be6-70232c489c2e",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45bb5c62-3888-4f53-b058-1db3a226384d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "efc20db1-692e-49be-83f6-4fba2332a6db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "889dbed6-4232-4c39-b193-9cf93ca10ec2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7812c09a-dfb6-4ac4-abd5-ff7bec612519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e590829-948f-48af-9ce8-c8a71c6b6d4f",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca34fb5c-34b6-405c-9e29-bcc81ed78c65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a2e087a-e447-48e9-b646-30b4aae68a8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "569d7330-9e4b-4388-ab1e-719184ec286f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "067b101f-b9de-499d-9ceb-2ea1245b5fbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07b51a35-56e4-4c98-bd3d-ede79948eaad",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40e22ac6-1af0-4558-8deb-565ffb833330",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d4aeef5-e3f6-4601-aa66-b0baa30f14b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35ef27bd-b6e2-44f2-8df4-a4a10865e18f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a6f19a4-e7d2-4203-8201-4b9b8f88f1f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fc96e1e-dd8a-4da3-8fdf-65bf4df4e461",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a9cbbe6-b517-4653-b972-0415b9be6c27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "487358b0-8479-4aa5-9157-1e0462733dca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a82c35c-6289-4514-9c3d-ebc40a629692",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3f804ca-c073-4d0e-b07d-0602eb9e52ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "311e98ee-e2bb-4bdb-8f01-1f640071784c",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3650d2e1-7677-4281-beb5-f8639c67add6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07c05aa9-c20b-4d8f-863f-e14f10c1317c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "978b0d4b-b43c-4379-b2f4-dc83a87af001",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e6b4a76-fb83-41e6-9732-c1b0ccdd9b24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6be65295-2784-4ae8-8aa0-8ef765bf7664",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3484ada8-3bc2-4387-8b7c-770e0242bfe7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "088b9b90-50b6-4f29-bde3-1f8b30ec0aab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "166d3734-ff1d-4dc9-867c-43ef447d558d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b377819a-ff47-4cce-a18e-7a946c4ae971"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0637aae4-a8f5-4c1f-9977-f8dcfd9b75d9",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a144469b-8ca7-4bb7-9859-6be279a57713",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0fb80b73-3c62-47a4-b7a7-bfcd3cc0c92a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6af412fa-ac5d-4bf5-ae41-e4af52e043e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bd7fe07-5521-4f79-a065-a98e8a3bc32a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18a3e511-a8c7-4e1c-ac77-9e93c30be2ff",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac408107-d301-40d3-8393-f1a17b395b6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfd3baff-f3f0-4796-b5e3-7434356433a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bb4a55d-f196-4d0c-92b2-c9d9673be9dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a17c28b9-97e4-45be-8162-d0bcc90465a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f95aaa16-a142-4a19-8620-aba9c793d11e",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9cb174b-fa9d-4fe3-9641-56a6781fffa3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c979a98-ddfc-4774-a6ac-b2bd5a79bea6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7cc1c5a-ea71-44f0-ba21-8620cf04e896",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "730765ab-a553-4da9-a5ef-06eee831ce4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "619edcc8-4749-45a5-ad53-b881e2c6d36f",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6ce6ea2-2894-444a-bcd5-07ba4c660729",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49259ec7-182e-4b83-9a92-8ae055976d73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "758a76ca-9769-4351-9348-152b202bf1ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76ecd3f5-2fd6-4cb7-9235-78c324357d55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c44db9ae-cc17-4d65-a6be-b1e221ae4bb3",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7988c4ca-a45f-447b-ac0f-f8180eb574cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "197b6d52-fe2b-477e-8cd4-ffd85987d370"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e5bd814-a014-4e78-a69c-2ebe8ba573fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2f0f9f1-a45c-4051-8987-1f02d07f4836"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ade555e-c9ac-43c0-8a53-07acf589efa8",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0192ed14-55fb-4b3e-b85a-d5baa0960fbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "979c711e-0576-4ba8-9ddd-15b53d24c4da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "101bed8d-b7c8-448f-a967-33f23b53c06b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60bf55d6-79f7-4b1d-9da4-75fe82489f6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a77b5adc-d95f-4581-9009-f36e2e05aaa0",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83043e18-eb1e-4990-94f3-8c5214360fe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1fc937d-df56-45b2-9ade-bd2d30b50fd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30373ec9-7216-4fe1-b0b7-13e6bcfbde86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "937453be-ed40-4ca8-a7a8-737fae301263"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51de2601-78bd-49d3-ad73-f0995e2e0e90",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0d6a3d6-3451-48e3-ba5c-6e8ef6375cdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33ff4e0c-7a3a-46fb-a939-29de6f742d71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec5cccd2-998a-41af-bbc6-a74d262515c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5706de58-8a16-413e-a0c2-d32095f12fed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8a1070b-4e32-4e7f-9824-a16ecf4c5c4d",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aded1252-381f-423a-9ebd-a0e1f0abc563",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dc3e621-3906-4f50-b0ee-a3b4c66b64f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bf9d6d0-6a35-479a-856e-8ffa5999168b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83dae932-db4d-4925-8f53-4957f624a2ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09dea58f-88d1-4f8c-b631-509d37bbb869",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b064d27-f294-476e-b5df-5b3cbc7edf19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a169a564-54ce-4cf0-a07c-8085d5333e21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d539f0f6-6c59-4fad-9973-86fdf51da160",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4061837-7eb5-4615-b48c-a1f001168f4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12c8f51c-ea6f-4986-a7cf-b69b623d9b56",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79875861-c8f6-4994-82e1-e37886e97d55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "587accae-ac22-46b3-aca2-3e0ac14aa5f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98840fab-83f0-454e-af6f-192ec44222f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9cf44ad-2ed1-4355-98e0-cf10898361b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "401bf81b-46be-4dc0-a462-86a898b2e136",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "014baa5c-3b52-4226-a648-a2e90bd48190",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91c39827-f691-4165-a2c0-54fcf74601b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29957cf0-d4b5-408d-b3e9-81d325303787",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fda0d295-f5b0-48d1-a413-8e7096bc2074"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7180c4b7-1111-4e4a-bc18-5146f277b433",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13cbaae2-2f16-40c7-bce7-79464c86be47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b412801f-24f1-4d66-90f7-58d52531111c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff03af1b-c90f-4ccb-a2a6-fdec0f66a407",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c22ab9fe-db92-4fe1-ba8a-e674a0176bb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "699b861b-e72b-4242-9712-5ff2bf3ca222",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4ae51ea-880a-4379-a146-b0f5f74a757f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55665ad0-a625-4c88-9e13-5f27630eba50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "227d450f-2716-40d0-bda8-2cc387a98c1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fea967c3-94f2-4d02-8557-c07babb0a01c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e76084be-7b5a-4bee-9840-6aa2cf45537e",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a182a245-4aa5-484e-95d4-e53289772127",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d06c6ddc-f7ff-484a-b831-40587f92f013"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33075ef8-2e38-4ed6-99a6-c29a983d4b78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bac0972-1091-4b52-a519-c251907a2dd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6b36e6c-da8e-4e79-b391-0ccd8aad8169",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab37afd6-2bcb-4153-8785-5d118c175088",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce749501-a3e5-4305-9ed7-eadddf594e69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45ff00ee-ca5f-4783-b179-bafc35ff5e0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf400a08-85c6-4d82-baa5-13ada5e21afd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3638dd5-9615-498d-b1a6-7926f3a76de2",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b46d3b6-2d82-4751-812d-a90846a7346a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "996be5ba-64ad-43be-ba07-733dc885c832"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dded7521-ad2b-4834-bce4-e4cc4d71aca5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04f6c747-04ca-4acb-925f-9b712ab411fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8986557-10ba-4df6-8ade-4fc74b23e6d8",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ca38a35-f046-4cf6-9c6f-e34946f55509",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93bb7b23-ee5a-48e2-8a17-d306907dd340"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c0d45e4-9ec3-4193-8b2c-1dcf0b6fdb00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e7c0fa8-e152-4133-bcce-03b192ed9cf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bc79ab7-9634-41d4-acad-ab4d1f6b2026",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdc77d74-5361-4035-8e79-0fd235e854b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "304216ff-e35f-4910-9ae4-cc769a9a34e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd8a93b2-5a6b-43cc-ae0c-a1cb36a9c3e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47e984f0-c4c6-4903-aba6-eed20684ccf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21207b0c-c513-4f11-9371-be9ac1fd0bb5",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27ea1636-4197-4fd2-9068-a4c1e2a0cb19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9bcde919-931f-4856-a1a7-32830cf16edd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9d5c113-a6e5-4e6e-8def-8013e7b7704a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e7f04cc-3c87-486f-b026-1361c2be2850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84ffd155-4683-43fe-87da-cb1751162553",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bd26284-e4d7-40cd-af69-628f6af18fc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec8d43c6-d2f2-4282-abab-e8c26c5406f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccc49107-b3dd-4d89-ae2f-af6f62546a2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "892c9944-1f2e-490f-9077-cc4a2b2bebdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f4c3762-b609-4d7a-9f98-3eca75cafba4",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e490b2a1-8742-4407-b593-de2d47829c99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac9c7d5e-b506-44bf-8a90-85e84ed0dd16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeb16bed-5f70-461a-910a-07723625fbd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c603fa89-d11c-4a94-bc90-821ac18e0599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b037ca4-30bc-4b63-8735-e87a1137be5c",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6a56ef2-47ea-429b-be5b-7ca18cc55143",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e0670ba-ecbc-4893-acdf-9b2eff12ae4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de1913a0-7cee-458d-a675-016e54d6c5f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3570b611-f839-46c0-8709-737596367246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39a12b2b-ce2a-4c04-be69-018332b787ce",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af5791a1-2fd9-4aa2-aa20-7ddc65a6e9f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8509a45b-e157-47d3-9dab-3943e369ad29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2904dfb-f2ea-4db9-8676-ec9e16c0b04a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33993d52-78df-4f58-8580-3fd6666dc3e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c268967f-13bb-4769-8c78-9d7c419d4531",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04598506-2ee0-44d1-a536-978087652bde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f754ba4-0c1a-4a46-be10-6c983d3a118d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "293fcf14-2d73-43a7-9157-21c544169a56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c63bfe86-c2e2-4af4-8497-1e233c2225dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffe0a306-db08-4cf0-a5c5-fb303d5d442b",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4a1f5af-833e-490e-b4ba-f3f662d7cd17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "966dcb37-6cf8-4490-8c3b-a2cbd9e9503d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d7ca954-c185-4a85-bee6-0a87aa6992ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56ea27fe-1949-4cf8-ad05-9b49ecde5364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22ea996f-16e1-4fec-9270-a34e4b8fde79",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7aaa937-6628-4e97-9dae-d956ac1e9bd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2c9159f-86f2-40a3-a8e8-d646eb32a75c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1c4f469-3101-4704-9253-e8529d3eb7a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5283d97b-3ed5-4aab-abc4-182b06f92a4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db21c28b-6a6e-4b3f-b482-bf469244492d",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12562041-6afc-4323-9ac5-df0c3790877d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31269a66-c6e3-49b5-9d63-5068b235d6f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b639642-4a54-4a97-983f-0d8a0d728818",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b545aae-06a7-4a49-8431-8247d7478bb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd38da72-1934-4f7b-a8cd-405f9ae4d475",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0522871-bcd7-43db-9574-1ded63aef666",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "171f5a50-3441-4efb-9d09-328542b01f0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "683c93d1-b0a9-415b-988f-0c3a2d32b06b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ec58931-5186-46af-a55e-31164210baec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5eeeac2-ccd4-4ebc-a7c2-61852b1223d7",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a232aae2-67dc-4202-b336-9dea2a98620b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2792d31-cf88-41e9-839a-8e612580ddc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9085b727-acd7-4b6c-8bfc-f1ca9febdee2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c9a073b-08b3-4aa2-8e33-65c4e066f695"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8abe0398-b786-4a0a-98be-d2f3b84ef78c",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "555b1395-d30c-405e-9efa-df7159c9dcb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6618a7cc-27b3-49c1-8bb3-a56589c18f71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7551f21c-57d9-43da-90e3-7e56d977f36f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b6a7091-c698-4421-8ac5-4642e9a574cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9c82cba-f34a-42ee-8c5a-a65a1fbd1744",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dde9578c-d1b5-429a-a99b-f1eb3b998f86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52b96a1c-abf1-4e6e-bef5-268bc4315b09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73853628-f72b-4733-b09e-a3bb3e343f10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f3132ab-f882-41ba-b470-f1cdf35fc9a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a7647c1-1373-46fd-b789-2645fc04f4a5",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23028e93-498c-4d59-b2b7-a51a02df7183",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abb4654d-8724-417a-9bd0-7d4cae9728c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33241dcc-3e8d-4586-b686-8485395d08d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3c77a7f-3ba0-4cf4-aff6-a1ed0f64ec60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb7084a5-27e9-437d-94eb-2d724c0e8a20",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b760511a-a30d-4f6f-b745-2b313e3e87e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f18d8aa-b98e-478d-b1ec-9c8119650b72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc4181d8-3f15-47ad-a0df-44f315c197ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9de591f0-fc94-48e6-b7fe-74d63c4c2eee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ab981a7-9f94-4096-8ee2-85328bdade14",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "779315b5-f6d3-4ec9-b529-936e3191ba13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4812e542-b23b-4788-904a-e234c19637bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6730a4da-18d5-441f-bdef-1eac672d8f36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaf86d25-c99b-4008-93c3-5d805e120ec5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78425fed-3966-4c1d-8e79-3cb26d9e747c",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "833e72a6-1d24-44c8-ba78-4668e9fdb427",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dac6d64-c3ff-4ac2-b506-0d795bb959c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed160420-65ea-4f2e-a0ad-bc274329ffec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dce4198-7d2f-46cf-b449-9c147245dd33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cb0b6cb-63cd-467f-a23c-6e7319b55de7",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50693355-5659-43ff-9fa3-5513a541e5f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a1d118c-a706-4080-8222-e13d74d07d94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43bb8698-e84b-4794-9263-10b83496aeb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df8e82b5-5458-4164-bc32-d4641647b420"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5773d269-819b-4e63-87c9-c01cff60808f",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85b0734f-9920-4d46-9d12-18b046a2fe2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a6e14e5-4b51-4c29-8398-6e745b810d6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "650b5ae7-04c0-4824-b63b-25312f707c9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "122fe741-f89c-48a2-98c6-3e96a138d056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "348ab4f7-702a-4bcd-93c7-4bd16fa54f91",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0812064e-d0e4-484b-87dd-49f59624e3f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6953fe50-fea9-4c16-b85b-acc2e9518de9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "642ed18f-5e4b-4aec-82ba-46078b501664",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d1fc875-0b2e-48c5-b9f0-6fc5370382b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c05c65f5-c822-4874-ab6f-a0248f079bb8",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6039e22d-7061-4963-bdc4-babf160a545d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c62b19d7-b8b1-4673-85b7-f4944ee25206"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98c8d3f1-70cc-4763-8b75-ca14631f0be2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37725871-1f60-4b5f-b38d-17637e21f0fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44f8facd-93c6-4513-9f44-1ee4d9abd506",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0be9f9e-8777-43d9-b7c7-60a30d62cb39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5b4c66d-6b14-403f-b2b1-6efed5aa2138"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "916f5742-2456-4bf6-8aa5-1df829f04953",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0180249f-c1cc-4ed8-8a6c-18c39e8b6f37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7c72cb7-93fe-4978-973f-f05cc9077910",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb846f41-4e2f-4c41-a574-799ca74a0e0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f3def5d-dccb-4c8e-86c0-2980eb73907f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f84f3f97-60ea-4f75-b0a5-38b3faf7aa21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63188102-c711-4461-8f7e-f9ae456c10cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a5643db-d028-4ae6-93ce-56c333e9f54a",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a36ab2f2-efa2-4bba-9c5e-7cba10406e68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4290c815-869e-4f21-aedc-3eb689f9dd96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10df73ec-5b1f-4db5-9a9c-ac4c01e0dab1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8419005c-a7b4-4b00-908a-962ff4768f88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dee2f80f-0d69-48fe-a7c4-be58dd6c55a1",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f34dd91-4693-4378-8e45-f25ad39d0987",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6507db29-026c-469f-87b5-41079c6a0d90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4180757-6dd4-42ff-949b-5942085d56b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e94d6efd-7fcc-4e96-9468-b45821f20281"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39f473ea-1536-43f3-ab95-4f7786ca2623",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aec8eaeb-c457-49fa-9b0b-222293fdcfc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b354452f-fad5-47ee-a32b-0a024479488b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fbddc3c-b085-4c12-adad-eb93114cbf8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "217089f7-04c0-46b8-9ec2-22269363bf78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2084c00-e098-408f-9832-6802f1eb97d3",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "357b6c24-9dde-4960-97c7-f9b8f1b7a3bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "034f7375-f3a1-4d57-ba6c-623ec66d1669"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aba0898d-098f-4ada-87f8-7d74dd141113",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6442534-d38c-4b03-a308-82776ed00546"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1a0c166-3e72-46ce-b045-3c37d85e2bf3",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3db0506a-34f2-4451-a4d3-23df8a4e3771",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33d8ccf3-0fa6-415f-a038-6630d0c6547a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17d22a0f-0010-4257-a483-087193d82821",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ae248b5-6e56-485d-8c68-a43576fcdbb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4a378ac-f9b4-4bfa-a6ac-ca0625acb3ff",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0d8fca4-0911-4a36-9a84-fc727a9da923",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3893c1b-1f1b-4edf-8596-e2e4d5e3f012"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e2411cf-028f-4213-a197-2271fe675166",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fe4438b-6166-4a91-a716-0072536fb7a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1db3f742-8e58-4483-b9f7-43579053a03d",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45cde9a8-c82b-4991-a8d6-cc9fa66224a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f04e132-69b4-4c1f-8802-192158da5299"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d622d79-d2ee-42f1-a2e0-ba6e156bdb02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4712dc8e-0ad7-49b7-91aa-75a3d33fafb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4a2beb2-2935-41cd-b9d1-0bbfa0d8bca3",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae57e586-f0a3-4335-a599-952de13c492b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c626262-d5f1-4b12-8e05-adaacc152df6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9035cbce-d282-4698-a3ec-6bd10434ae46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb55b925-2711-4dac-abf5-3828201b15e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b490bb5-12cb-4768-b743-489a54a17176",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd9054eb-7c1b-4e40-a888-fa3a811b53a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c92f0c0-e4af-4d09-954b-f5ea017994bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f775118d-c57f-40c9-9dd1-718af2a20176",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "183ccf09-680f-41d9-beb9-0b65cf5abc58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac6ece79-9420-40e6-b90e-3dacea66de7c",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d2461ab-10b7-4df1-a7a7-46a0e9b1fa45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb064ade-28a4-40b6-a6c5-fb051e05c3c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dcdd2a4-0bc6-4019-a83a-f29aabc408fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7f9ae71-f17d-45a7-8ef0-841b30957035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c07ca5e0-ccdb-413d-b8b0-9202ed045ba5",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6e6e004-564a-4d11-bfc7-3afb6cb66017",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50fad5df-a8ae-4f1b-9310-5490656559aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b28baf31-6570-4a4a-a986-dcd0a69a76b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb92d8a9-0b8e-4b78-92c8-ec9a912806be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a42f15eb-b4d9-4c37-b9eb-17077df175cf",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de3921ee-8ac2-4b0d-b9fa-4bbc3fa39625",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0268362f-ec7a-443c-bf17-a0f50b29604b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4345104-dea8-4368-8e2e-ed952a007265",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bd2077c-3c02-4d13-867a-3c2db26531c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b718ceb9-5deb-4454-b3cd-011c2575002b",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85e2f6d7-6dc9-4461-ab98-4168bcf5b7fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fe759fb-0f6f-46f3-ab42-f56acbefce8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a0302df-003f-4f40-a09e-3c1cba220150",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4b87883-c7e5-4e9d-b828-b4510e2658d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66c6a5df-5ee6-4f2c-8b03-a1615849a553",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "866d7a70-6c67-422d-9e23-0431006c549b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0527f6c-900a-4fd4-8682-14747c753c6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1739684d-a3c3-4255-83ca-d5a0601658b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b693e3f-d6ba-49c0-943a-53fd48b93b9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a77c2e8f-cf49-45ee-976b-2dbb6b2be0c3",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f21ca941-8f94-4699-ad71-e775a2ed09d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c111be67-c164-4e90-8c7a-678d60d78b22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f90801c4-2580-4696-839e-1fe522566993",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ae7dd56-d7e1-4bfb-8da7-3616e8e3a1e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "012b4cbc-c443-4fc0-b5b3-256659e460dd",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "330cea43-a5d3-4ad5-8959-382307b8ce3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0303c817-6cf1-48ae-b5a1-e53df648f0da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2117b7a-495d-40f4-b31e-0967b3e653b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1ac6db8-f34a-47a7-a41a-8c43fbc3e8b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9f770d9-273f-4434-8d9f-f25d189f634f",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e285e53-9c71-4734-8ecf-2764648c9d8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0267ef5b-a0ac-472e-b4e9-95f9f943eb27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02e6f112-977c-44b2-83c4-aa1222e22546",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a1f2e31-9f4b-40c3-a3f2-ab14619e5f0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b580929-fa67-4192-9dbc-a2acb5056b08",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f8f4484-0b24-4ca3-970c-eae6d6574b24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70c965e9-d206-4e3c-9354-e3833f63f966"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b98b9692-fa21-42b6-81b8-5f2d1c10b35d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed525d40-0739-4b95-be73-b7f1f9858436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fd9ae34-8468-432f-b01b-1377c8c924ad",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c44937d9-8c25-4177-aa89-29d2e938062f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6dfbe9a-28cf-4cc9-a665-6889e7fa0abb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "974e4344-9f0d-46da-83cf-27920c21b38f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d32d0e2f-52ca-426b-b9af-41d2fa127ed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a14eb35-5d39-4c23-b10e-0eee63866bda",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "151d1cfd-54c8-4ab4-b261-7f62a5d03d36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03fbcc6e-78f5-4dc0-905d-596fb9453cb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "393a975d-d973-48cd-a87e-3c9f0ebe9363",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24dee35e-10cc-4c91-a8f2-b57c0fe9b741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4fc5660-14eb-4d4e-a55b-f2ba5afab913",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca3803ef-6b57-4f33-9f67-a313a1fd3ad8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cae3ee02-0573-4f7a-9b0f-ef391a6553fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b48645c-9c84-49f4-b08d-3bbadbb7275e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee746149-2093-4cf4-9a5f-fc2bd9d958cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f53ac771-0cb1-4e00-9c2a-a1fb8c86ee49",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1bbf844-c37a-4a21-a348-a0a32a876c80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e512f71-3714-474d-8f4a-594f00fcb1ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8465f691-be3c-4b76-ad17-8cd9f466fec7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db88401d-c4d2-47e6-b900-597cdfc17bde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca95437c-e9fe-43cd-85f3-1223ec2efbe3",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d115b89-3167-49a8-a7f0-f02211efbafc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6e63f05-f875-49e0-a958-14ed6aa209d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47e61afc-d0de-4539-a3f4-10a3462864bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2dc2534-9e93-42d0-ab02-6c5f58a9721c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0567e922-6e55-490e-8c16-5eed04041f4c",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "154e0a67-bafb-4ee2-8c08-39d31e2a4445",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "add9c449-6ae8-4774-ab35-eaeb6d5dee04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cca64724-c99c-47ea-a083-2980a9f5efa3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a1b003f-85f1-4649-bee2-7f4389bc1ed7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fecaf0d9-b222-4e8a-9371-a464e27bd9a3",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed1ddc10-7489-46af-a7e6-f825ea9b4fc9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a07be9f-102a-4b4d-8fcf-bb6b25e661ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "160233fb-7555-4e3e-b0aa-59f440bc8b22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7af1af7-68bf-46a7-b7c2-6b6321e9d845"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5969e9c9-763a-4030-9859-c29851590887",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d7c51a7-564f-4053-a6ab-e6282172bf9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a502e57e-395e-4433-bbf7-013b7164f8a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60e159e5-e967-441c-ad46-005e119778ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16d960ea-2e22-4a61-b159-ad3154655595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d033517f-fb34-4a56-9c09-4fa8177c65c5",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a8032ab-416a-4055-b7ec-7017cd7ff9a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "306e4f9c-16f2-43ba-b5b2-cca2d0d50a10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4422dce2-306c-4c21-ad08-e58e8654ea6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8502f4de-8bf2-44c4-baf2-04407f44d98f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ed50a0f-d695-4d3c-8fa6-3ba389565495",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34c232d6-eee3-4205-8679-d6083d06ff4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b52345da-4833-4bd4-872c-dcd95b317ac7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fa9a5de-cac9-494d-b21e-35499add687f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65130a76-3e4f-421a-8d16-dbf5f6ba2ec2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21a9262d-85d2-4db6-ad01-6094d747e996",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c51179d-5853-4c41-9641-b15b7a23a080",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abcd40b0-dc95-4f5f-9016-5fc95309352e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00d46013-04cf-4c07-b2b1-6504172f5835",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d3477a4-b230-442a-bb74-a4351eb8d5fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87f69cfb-3add-488e-986d-fea4cf87bf42",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "027ddd20-11f3-4a28-9fca-6bd1a14eb6ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3244fce-0996-468d-ad32-3f18c519cdbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cf948e5-7d84-4733-b80c-8f98a1e38501",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d77e898b-3c2c-4000-8da0-2f146d387b89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e8bf251-160b-419f-9b93-295d111442ec",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e413afe-4931-4007-8588-84b384c35508",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76b87794-f317-493d-88f0-054db21ec7a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b569ffff-36ee-4186-9514-a6a5344b40c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4f94034-676e-4add-ad0c-4e137c9cc416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41675197-fda7-49a4-abf0-10e35cc6fd5e",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ba77a5-93ef-4b28-959a-8c39af4157c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b77b4257-7249-4f6f-b3a1-c9da3b17cb61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08bbaaa6-09a8-40f2-9035-400b10d2c47d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d37b262d-d007-4405-bea5-3400990c24d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac00bdf4-6852-4e97-b223-f7c1d429ec90",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e417598-a61b-4021-965f-3015196f5128",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea76e950-a18b-4e7f-bb98-c41e6353e739"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d79ba73e-c434-4d2e-8c90-f5dd276c3d9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ad76897-1304-439b-b901-96ea51f9ed37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "537c5066-4985-428f-9bb5-6743b9f73d35",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "240ccb9b-d098-48a5-951d-2d042fcda951",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7cf7b6ef-9c8e-4cf2-b09a-37922b6a2512"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff4c4efa-607f-4774-819b-9fdd7ced195c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "093aeb5c-d998-447f-bd62-ca4fc03593e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d207da9c-2220-42a9-a75e-df7eb11347e1",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c37c408-20c4-4497-9c32-50bef1a7adb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2352083-8667-48aa-9277-d81b1b2784a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3877e7cd-79a7-491d-9e71-f76ae3695d40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92fbee7d-e7c8-40dd-82ac-cd3bc2fcb197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa286274-1317-4b13-ab8e-d862073c9088",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bedb136-fc10-4dbd-8f7e-8a18027112f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61366980-561d-4e37-911c-9d161f771122"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c10739f7-37f5-488b-97d0-b74a99d1deac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc744dc6-d73e-43d9-bb99-af4aa8782a0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ec7f75a-0892-4759-bba5-f87a42abbe2d",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5076f185-d263-4a60-be4c-b1d8e29ce3a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17341b7a-0698-4418-b26a-f21229da6310"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92b83020-dbd9-405a-9939-1b37c505a6de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4eaeb58a-52b3-4ed7-a539-ae1f98d32139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9841c088-961a-4eb5-8a4e-e63eec42771b",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f607d769-a29d-4a43-97a5-c09ef3c22fbc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52154e81-84df-4bdb-af3e-7f0e73d25e3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39bd43be-f1c7-4c28-9a03-9b8e457e0be0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "019a8938-4fbd-4e14-8245-b472f045e0dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddae6261-6a7a-48bc-9264-f53720dd1bfe",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18680c04-b2e0-4f04-8f71-060956812735",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b8bc86d-576a-41b1-851e-52f60b134568"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc1aea17-dc0f-4168-977e-2014c4a752de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d90143f7-0ed7-47ab-ad91-3aa3502bd0c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7ff566a-b1ed-45da-86d3-b55371de9037",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff53e1f1-87a9-42b1-b223-3bbb22a36936",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91946570-1f9c-49e9-877a-c379727e174b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe2133bd-3497-4a65-ac9b-8f769018be2c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "660cbf92-7cf7-4817-8a26-30ba1e77124b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d162def5-b421-4ba7-8096-65147300a057",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b07902c-3577-4fc0-bbff-b5479e890263",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17742371-be5f-4731-b32f-dc477d66f2f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fdbbfdf-84a8-4747-b546-bec1bfc1c5f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ee0aefd-fd77-4670-9e73-2e8e20f1b30e"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2ef39077-248f-4f4f-a35d-2c52e328487f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8ff7ee07-b208-485b-baff-ec6d4accb69f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "54778283-289e-46f4-a7a5-530a587271b5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2eff860f-d4a4-4aeb-ba34-a0be9f2d42bc"
                    }
                  }
                ]
              },
              {
                "id": "26eba95e-1f43-420e-addd-69d5528d3049",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c26e1fe4-defa-490c-b26a-65ea45b64d14",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a579c4a-3477-4f1d-b74e-27e59f292cfe",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "941bab70-6336-415b-8150-6d12c9ca84de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4895e718-a707-4876-a186-32dff87f4d35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d885291f-4764-438b-80d7-a70b6e31087c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "58a79ac2-452d-4e6a-ba61-8ec83dfe5bd3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7974fcd5-0005-4f6e-854c-01c4cf36b072"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "92288501-dbd9-4b8e-8e7a-6c123bd25686",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "da3867e6-4109-4e9a-8acc-311f729f7fd3"
                    }
                  }
                ]
              },
              {
                "id": "e8c0ff3e-439e-4556-9541-183cd39d3eb3",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "b30ac35c-8274-425b-9b86-899e9740c0d4",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c58ea12a-764a-4d2a-bed4-90116f4348e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "865e519a-50f2-4c4a-adbe-35d4b785fb29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "559a899d-69ed-46c9-8a47-b636c235bdb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c22e5ce2-2126-4585-b018-6e4142ea818b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c265fb84-bf8c-4d81-af6a-5a3ca1be2d4a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5c6bc6f6-23f4-4854-9906-3933d86ad0fd",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ddb0bea8-d6b7-4e22-9075-b03c7038c51b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "05dc4d18-de31-42ed-991f-c574980a24f8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c40a794f-4134-40a5-89a9-a1b6a8f96f3e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a7896088-70fe-4065-96de-2439cd664ae1"
                    }
                  }
                ]
              },
              {
                "id": "11219cbf-e5c9-41a4-89a0-066086e9303c",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b6725669-0f67-4076-8e63-265c3a179195",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "643fe335-57da-48bb-8d9d-5660d497babc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "438bd8a2-512c-41bb-a8c7-822fed6737ca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5b7f432e-3f81-4f60-8976-afeaca00e162"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "380ba3f6-b58c-49ae-b4f2-33f880d12784",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "c185bc5d-ba4b-4ea1-a372-a85fc2d3703d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1832b911-35bc-4626-81b6-15066608d1e4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "af17c534-3466-4a56-866c-62e2a2f76c77"
            }
          }
        ]
      },
      {
        "id": "87115ff3-4394-45b1-b113-631c328c5310",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "08ecf1a8-3c01-4b93-99a2-9ae56f62108b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f27f3095-6e5b-41ca-8265-9412a5630f42",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "73695e35-d2d2-434a-a691-e411afcc15cb",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "473749cd-66d3-46cc-b286-afaec9a45751",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d2a9ea63-37fb-4e1a-b24a-5e38759e2010"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a54f49b5-7e63-4666-9595-097982bd616e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "af29210f-58b4-4b74-813f-b9ae65fab289"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5ab86627-29ac-447c-a6bf-a5eff6ad5910",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "48d16021-a4a0-4399-bc59-55ae051519c6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0e491daa-06d9-41a0-bbbc-820a9adac784",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f783a4d5-4400-4e99-a857-e8a7a8f5c6bb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "21609119-18f0-4bde-94e1-1d4f34da0f21",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "88c23979-2add-4103-92d9-7ddcd358f8be"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0346faee-aac6-4ae7-a622-a3975a40234c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a5dbbaad-7e1b-4d8e-b269-bc1b1dcad8cc"
            }
          }
        ]
      },
      {
        "id": "229f0e30-04da-4c6f-a743-dbd110bebbde",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "9358f852-e4af-4e3a-9a19-7c9c1273da58",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7dbd9283-3f51-4e91-a2e1-7e247bc935e0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c344eaef-ef5b-4218-89f8-c7d5dd34ec53",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a62ebd8e-efb0-4d7b-b792-2fd552be62b0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2e6cb857-c87c-482f-b06d-fa5468058663"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f202078f-4482-41d4-a858-3783c9f1bd8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "496d3e09-2d8e-4b19-8bf0-1e23c216a3e0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0404cf76-eb9f-4990-84e5-759c9abe3fca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0fcdb8be-9ee0-4239-9563-040df4ac9a64"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "57e49bf1-4530-4c24-84f6-735d2d27263a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "15d31ea1-3bcc-4210-8488-93cfc01f614f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dbb6c6dc-064b-4883-b1f7-ae26a6ae7e2f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7fa0bd89-6026-4425-84df-e53c7e85149b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e2251731-e665-49b8-828f-78b15168d85e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "db00afa9-2478-44cd-b541-4e5153ce036d"
            }
          }
        ]
      },
      {
        "id": "4121cba4-fa16-4c51-810b-a2eb28ec49e4",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "5e98573d-9c2e-4b17-86a0-34102abe0df5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f6a74c68-5f8d-4013-b0cb-bac4d5847177",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fd167f40-af55-4ee3-aa91-848034a4aca8",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b257bd6-db6f-4684-9dfa-c84aeb94582e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "39b55e77-cfee-47f6-a3ba-e63cc5a1c129"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "120430ce-5bf3-415a-a70f-865cd8783d7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4bc2d81c-87e7-4f99-8681-41c4e2d3d48a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9d7047e6-e56a-4fd1-8807-53fd161fd77a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d867d3f4-e600-4841-9099-1e94efc1fdf3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "60412517-2153-4e18-9c34-d1dfc5d4256e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2f0df117-a583-45ee-bae9-f5641624950c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7b933859-35fc-48e5-99e7-013516b94cd0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5d3d7ac3-5b85-4b14-8a35-12c94d32d07f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b637b4f4-ff93-405d-bb99-52f833282ded",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f6109e06-4704-44ce-9e6d-240879b7ffac"
            }
          }
        ]
      },
      {
        "id": "4b8e6d08-127a-4eed-9fdb-143992a571e9",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b7827270-f7b9-4acd-b272-2ae207e41ba0",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e43c95d1-305d-4dfc-875b-e2d6719d7686",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "f76ec8e7-e867-4b11-b5f8-069691161544",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4d15fe78-e22c-477d-8627-20d5b8e82191",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fc136146-3cbf-469c-b04a-85e930c19c5e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 65.42807017543862,
      "responseMin": 10,
      "responseMax": 597,
      "responseSd": 79.70986369302092,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1704328557955,
      "completed": 1704328585788
    },
    "executions": [
      {
        "id": "a745355d-79e7-4b44-ad5e-5144f8d43bee",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "bef1147b-31d6-42d9-9ff3-78b4e35b1389",
          "httpRequestId": "57daaf94-5ef8-4492-ba4e-76d74ad0a4a2"
        },
        "item": {
          "id": "a745355d-79e7-4b44-ad5e-5144f8d43bee",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "ee9eb3a9-f7c1-447b-a185-2bf30b2e0b84",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 0
        }
      },
      {
        "id": "e6f506b0-06a9-4bb1-b3b0-71dcbe13543a",
        "cursor": {
          "ref": "04f8adbb-f53b-485a-b775-00c0c29f640d",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "753931c2-6bd1-4697-9434-0406099658c9"
        },
        "item": {
          "id": "e6f506b0-06a9-4bb1-b3b0-71dcbe13543a",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "298bc5ad-2ac0-42b6-94e3-2b822c42b0a1",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "0024f6c3-7074-41a8-a6ac-81961fed32ac",
        "cursor": {
          "ref": "491e660d-3ce0-462c-a53d-d7dbbfdf1eda",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a6cd3824-f97b-490b-a3f0-04de5e7fbb1f"
        },
        "item": {
          "id": "0024f6c3-7074-41a8-a6ac-81961fed32ac",
          "name": "did_json"
        },
        "response": {
          "id": "4b39d19b-3f30-423e-9498-94612caf8e36",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "553e94a4-8455-469d-9789-081129c70f95",
        "cursor": {
          "ref": "3a40d356-8e3d-4c45-bf99-4fe3f6678cf5",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "82c7ae04-1ead-49a9-a69b-5421f6e3bf7b"
        },
        "item": {
          "id": "553e94a4-8455-469d-9789-081129c70f95",
          "name": "did:invalid"
        },
        "response": {
          "id": "a868ed3a-86c4-483b-a00b-fc7ff7e5868f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "553e94a4-8455-469d-9789-081129c70f95",
        "cursor": {
          "ref": "3a40d356-8e3d-4c45-bf99-4fe3f6678cf5",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "82c7ae04-1ead-49a9-a69b-5421f6e3bf7b"
        },
        "item": {
          "id": "553e94a4-8455-469d-9789-081129c70f95",
          "name": "did:invalid"
        },
        "response": {
          "id": "a868ed3a-86c4-483b-a00b-fc7ff7e5868f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80f9703b-24cb-4e39-ac04-db488c834b9c",
        "cursor": {
          "ref": "8debe0d0-8cd9-479c-8488-bbffc6175b0c",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a9f074ae-2967-4b78-8ba1-f19abffb4689"
        },
        "item": {
          "id": "80f9703b-24cb-4e39-ac04-db488c834b9c",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "0503e654-98c7-480b-b305-2c284fd12ed0",
          "status": "Not Found",
          "code": 404,
          "responseTime": 98,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd1c8200-ee19-4173-ac20-a2945fb22634",
        "cursor": {
          "ref": "2be12224-fb07-4011-af70-0a2f42332c04",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "35c81ff8-fb35-4081-b1f6-3a425fbaf45b"
        },
        "item": {
          "id": "bd1c8200-ee19-4173-ac20-a2945fb22634",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "0ec48980-094a-40de-90d1-8db35222ccf2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 39,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd5c6baa-6396-494c-a082-dbd7e936ba26",
        "cursor": {
          "ref": "834036b8-ec20-4c7b-8733-7689cffbe827",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "3a7c9105-0189-4af2-acda-3904aa83b4e6"
        },
        "item": {
          "id": "dd5c6baa-6396-494c-a082-dbd7e936ba26",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "51c04a19-9ef0-4753-b9b5-d87dc31a375c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1421c3d0-8f1b-4db1-a4f6-8bb704baa8f3",
        "cursor": {
          "ref": "e9720b7c-6a7a-40e2-b9b7-f984d1b9bcbb",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7d717798-0412-4b98-bff0-a5b5d5c0e543"
        },
        "item": {
          "id": "1421c3d0-8f1b-4db1-a4f6-8bb704baa8f3",
          "name": "identifiers"
        },
        "response": {
          "id": "dabaf272-5180-4533-9926-7d37bbc94cef",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb048868-8f38-4195-9f4c-4815bba91fef",
        "cursor": {
          "ref": "a1e97c94-dcea-4d9f-a850-0e975189b720",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "169da803-d54d-4601-a5ba-fa4815345089"
        },
        "item": {
          "id": "fb048868-8f38-4195-9f4c-4815bba91fef",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "8ec2a398-8196-4105-a845-f619097c0abf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c8c8dc2-398d-4f51-928f-88a3b313610a",
        "cursor": {
          "ref": "082e4d06-684f-4526-a5f7-0992aa3c0cdb",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "2d71c442-1058-475b-98df-fa58008acd7c"
        },
        "item": {
          "id": "3c8c8dc2-398d-4f51-928f-88a3b313610a",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "ca69f231-ac89-4ab9-a18c-baf1cb58211c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25bbe02b-4eed-48b0-a390-9699a45458e4",
        "cursor": {
          "ref": "4dc9503d-c0e9-4022-a590-5a11cc9e47a5",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "acc02b5b-4eb7-4d15-82a9-2bfd3262acfb"
        },
        "item": {
          "id": "25bbe02b-4eed-48b0-a390-9699a45458e4",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "190d98f5-d1e0-457b-95bd-a6ae0fd26de9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ac7bf97-0652-4911-85f8-b871fadd636b",
        "cursor": {
          "ref": "208b82d5-173e-4fed-b90e-c58bedec22b4",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "7162f39b-d433-492f-ab5e-116cceba2103"
        },
        "item": {
          "id": "9ac7bf97-0652-4911-85f8-b871fadd636b",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "80db646d-05d9-4e21-8c2d-ab4827eb3c3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4e36bb1-a111-432c-80c5-a66cb564c0ae",
        "cursor": {
          "ref": "af15b632-a071-45a1-8815-dfc08d2036a7",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "2c6e5d41-1216-48e6-925a-f0a24ac5e2ac"
        },
        "item": {
          "id": "f4e36bb1-a111-432c-80c5-a66cb564c0ae",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "597bcb57-dcb5-4e4e-9a33-7066afc6f3e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d1b80bf-3cf5-4b4b-a585-4e59dc859692",
        "cursor": {
          "ref": "57ab30e8-ec3d-4292-a829-141cd819ee64",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "93d73740-d1e4-4f80-bb41-e2b51d9579f2"
        },
        "item": {
          "id": "5d1b80bf-3cf5-4b4b-a585-4e59dc859692",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "4b49b043-65d3-4f7a-9161-a24ca6acc0bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1598b64-ea91-4a4d-968e-d6b8b3a9e876",
        "cursor": {
          "ref": "6dea7d7e-bbd6-458d-a761-c9518a444447",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "38bc3c9f-ceb2-4e18-8e97-726d5d072405"
        },
        "item": {
          "id": "d1598b64-ea91-4a4d-968e-d6b8b3a9e876",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "2b9416fc-36c7-47b4-a049-78dd44afebe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4365b7f-f5b7-4a3c-84d2-5aae952b58f0",
        "cursor": {
          "ref": "0bedaef8-a414-4099-9aa4-1d493ec6917a",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "e4868edb-d12a-474b-9f8e-a455b807f5a1"
        },
        "item": {
          "id": "c4365b7f-f5b7-4a3c-84d2-5aae952b58f0",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "18c175d4-8dcf-4f78-b705-0de82d8bc58c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "210939ef-403e-4468-ab35-9ca2dd6498f7",
        "cursor": {
          "ref": "a284abfe-eac6-4b8c-af74-c616af517cda",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "c59f43c2-9e25-4f61-93f8-796a9eb7b057"
        },
        "item": {
          "id": "210939ef-403e-4468-ab35-9ca2dd6498f7",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "23394636-cab1-4e71-99c8-9d8a7117e244",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebdb4b04-c381-4484-a48b-f0d396432827",
        "cursor": {
          "ref": "229aec0b-8d83-4495-91ae-419ea4648fa2",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "c6cc0e6c-948b-46fb-8f7c-843a8839866f"
        },
        "item": {
          "id": "ebdb4b04-c381-4484-a48b-f0d396432827",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "eef2618d-30d2-4840-99f1-403489ea4f90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3031375-3d95-4c5a-a2fd-39fc19029ec2",
        "cursor": {
          "ref": "c4dcff72-ebfd-4009-a8ff-610369c937b5",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "c4ec4dfe-6705-4e68-a7f2-4d10c9a57e66"
        },
        "item": {
          "id": "d3031375-3d95-4c5a-a2fd-39fc19029ec2",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "ea7132b8-5575-4168-ae42-56eb4548fabd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e836b16d-d8f6-43cc-9ce8-466bc8413f9d",
        "cursor": {
          "ref": "3641d6ab-ee1b-42d3-839c-5fac77ebe783",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "452562c1-e1e5-4095-9d59-a716a66817ee"
        },
        "item": {
          "id": "e836b16d-d8f6-43cc-9ce8-466bc8413f9d",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "371c2e7d-6149-4338-8482-0888dc8fc249",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fdc8ad6-ada1-4e7e-b4aa-7e877cb9f683",
        "cursor": {
          "ref": "ba2b968b-2790-4f1c-93cf-b5876479e9b8",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "f2a6507d-27f3-4a3a-85de-e5455d6953d1"
        },
        "item": {
          "id": "1fdc8ad6-ada1-4e7e-b4aa-7e877cb9f683",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "a133e1e5-1cc6-4b3a-b776-51f583dcd010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99cdf208-c1a9-4aa9-8b3d-612209d562d7",
        "cursor": {
          "ref": "90091161-db01-4724-bb40-5537b9022815",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "6f63b410-d4ca-4c6d-afa6-b833e03ff4e0"
        },
        "item": {
          "id": "99cdf208-c1a9-4aa9-8b3d-612209d562d7",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "f8bd1d19-47b8-40d3-af7f-78222bcdae35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b740c16b-1d06-4f57-8393-3bbcd5503549",
        "cursor": {
          "ref": "bf5622f4-3512-4fbd-98d1-9023be709aee",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "b78dbc87-63e2-4573-8a8f-5b6b12f192ff"
        },
        "item": {
          "id": "b740c16b-1d06-4f57-8393-3bbcd5503549",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "f9ceac02-25db-40dd-ae41-864eb4e63d12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2999dffd-1ebc-41b5-a40c-885b1607d817",
        "cursor": {
          "ref": "b54c12d7-24dd-441b-8192-da04a39e5dd2",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "703c5bcf-32ad-48f5-bd36-6a719de34450"
        },
        "item": {
          "id": "2999dffd-1ebc-41b5-a40c-885b1607d817",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "692a51f9-cd61-4541-8977-fae27ec2cac5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "097754b1-1f78-4f98-86c6-95b8e43281c0",
        "cursor": {
          "ref": "4d4daec6-1bb5-42c8-aa88-3c688491d08e",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "a4fb2647-f41a-4ba2-81b2-8b6ff41af08f"
        },
        "item": {
          "id": "097754b1-1f78-4f98-86c6-95b8e43281c0",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "aae330ce-8e84-47c0-b288-794e462bbcbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "052cba8e-879c-472d-8d51-1496d1906eab",
        "cursor": {
          "ref": "1cb3dda2-29c7-4e80-8c79-9bd9a39b07a0",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "bc75ea32-15a2-4cd3-b24b-4c42d0b86103"
        },
        "item": {
          "id": "052cba8e-879c-472d-8d51-1496d1906eab",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "65a674d8-173c-4b04-a965-025c36115c08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b46a146-9252-4d24-821b-09de62a640c1",
        "cursor": {
          "ref": "97ac495d-4eaf-4eda-b964-c5959e2d9b98",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "1ffa649e-7013-468a-ac91-c6fb491ac32a"
        },
        "item": {
          "id": "6b46a146-9252-4d24-821b-09de62a640c1",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "9991a8c1-26f9-452e-97f5-b49370236b61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "356c7cd0-4aa6-4f9b-be96-ab4b1ff0a894",
        "cursor": {
          "ref": "4c0d264b-2f50-4776-ac72-23506c002ad3",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "0eab2a3b-af9c-4d26-8266-16c384ed9045"
        },
        "item": {
          "id": "356c7cd0-4aa6-4f9b-be96-ab4b1ff0a894",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "1a52735f-bb71-4708-90fc-ba486bac88ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9a04ce7-b85a-4af4-8347-54800103a15a",
        "cursor": {
          "ref": "7dbb1307-9f8e-4e9d-9446-3f5ce842bf80",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "b2a12440-10c8-4b3e-8011-591bb1e51a2e"
        },
        "item": {
          "id": "c9a04ce7-b85a-4af4-8347-54800103a15a",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "4471e18f-6cfa-4f0b-9abb-b2fbdc8f2e14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f79a9e72-c26f-43f5-8fdb-86a915a8415e",
        "cursor": {
          "ref": "08b3ec54-5b36-47f3-9fda-ae4f3fb6841d",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "b21c57ed-8473-4fcc-96df-b8d44bd256e6"
        },
        "item": {
          "id": "f79a9e72-c26f-43f5-8fdb-86a915a8415e",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "95514f41-4c70-40bd-8d7e-9ed7ec8df4b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c0dfd5b-8f1e-4bb5-8b2d-eae5a6125a51",
        "cursor": {
          "ref": "a77ded55-7d48-4bbf-8f31-3945d5148aab",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "853beedb-a72e-4b63-865b-37d5f8c028da"
        },
        "item": {
          "id": "4c0dfd5b-8f1e-4bb5-8b2d-eae5a6125a51",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "edb66704-16d7-4e68-8506-79f92c450a67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d75b2138-383d-43b4-94f6-9f5d0600f15e",
        "cursor": {
          "ref": "66f6041d-5ef9-4cb4-bbb3-a0f7a5941d0c",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "11b955df-beae-4558-b8c8-5d4781cecf24"
        },
        "item": {
          "id": "d75b2138-383d-43b4-94f6-9f5d0600f15e",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "e9b38719-51a1-4c08-8ebb-16340a1ef52c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4b2cabb-efdc-41f2-b505-4f0abf2f3ac0",
        "cursor": {
          "ref": "cedf9222-2441-4554-8f75-11c34d345f73",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "db1f5c88-c28c-4b99-a0f0-8d4b7b847729"
        },
        "item": {
          "id": "a4b2cabb-efdc-41f2-b505-4f0abf2f3ac0",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "bfe2567b-5445-40b9-afd3-15c3174b75e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6fc9a88-17f0-4f78-a4f3-6d7db838633c",
        "cursor": {
          "ref": "384ebeb7-d7e7-4615-8bae-7bec179d2845",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "95e3b4a6-5a70-45c7-bf09-ae57a3a5b9a4"
        },
        "item": {
          "id": "a6fc9a88-17f0-4f78-a4f3-6d7db838633c",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "7a5c42d0-0c6f-4b8e-9edf-63dc820ae858",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "424c4cf2-fc35-4ed3-b61d-5ff03149fc7a",
        "cursor": {
          "ref": "92c28b7b-a22f-4909-9242-70311271e0db",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "df001106-d39d-4367-81d0-1353fbfa96a1"
        },
        "item": {
          "id": "424c4cf2-fc35-4ed3-b61d-5ff03149fc7a",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "4f5d725f-e076-47a4-9a67-0fb7d9340dd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aa04bdf-08ae-4b92-97c2-24fdac2c6ab0",
        "cursor": {
          "ref": "2429bbec-b966-4fc0-ad2f-73699e58d7ee",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "4ef0de50-2e82-4bff-8d6f-85d5fefe1dd1"
        },
        "item": {
          "id": "7aa04bdf-08ae-4b92-97c2-24fdac2c6ab0",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "97fe6612-4d2f-4a4f-be08-b08803cbeed0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44c6dd8b-0542-4b83-a077-d5d3c4bea359",
        "cursor": {
          "ref": "40511a92-cad9-44d2-9d3d-3086ce6fec7b",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "13889404-c83d-40cc-919d-c6f1ace4e7e1"
        },
        "item": {
          "id": "44c6dd8b-0542-4b83-a077-d5d3c4bea359",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "51a05af0-87b3-4cbf-afcd-0a6087e6955b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8e7c31b-9bdf-4496-b3f8-9733bbe91797",
        "cursor": {
          "ref": "4dc676f7-a2c2-4f24-bf88-927e239cc125",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "07115d8b-4e3b-4c25-acd2-a57602e7a753"
        },
        "item": {
          "id": "b8e7c31b-9bdf-4496-b3f8-9733bbe91797",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "f8534089-cd9a-42ea-949b-bd376be6e0ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5fe766d-bdaa-4f5e-9dd4-a7d0827d7429",
        "cursor": {
          "ref": "d0cb49d5-e516-4b27-946c-88ca36b771c9",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "0fe08e75-6e23-4c77-87ca-9c550b3be087"
        },
        "item": {
          "id": "c5fe766d-bdaa-4f5e-9dd4-a7d0827d7429",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "a579342a-88fa-4597-aa33-d41540efd4f2",
          "status": "Created",
          "code": 201,
          "responseTime": 597,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "97d3cb4a-b76a-4a15-8dcb-af340eadd189",
        "cursor": {
          "ref": "a70ad3de-087e-4037-8fc7-27c4d19a6b1e",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "01f753a3-7c53-4b98-a8ba-0357c4f8ac6f"
        },
        "item": {
          "id": "97d3cb4a-b76a-4a15-8dcb-af340eadd189",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "f6f4ccaa-15ce-4b07-b8e7-379f4da9376b",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "615518ca-3d7d-42d5-85f5-b58e11292c2f",
        "cursor": {
          "ref": "49beed84-b4c5-4576-9296-d6093258f1ef",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "5696fa8a-a4ee-4a90-b5c3-147294c597b2"
        },
        "item": {
          "id": "615518ca-3d7d-42d5-85f5-b58e11292c2f",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "81d9210c-5637-40d5-8418-ead5265106b9",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "940e6f11-10ab-471f-ad48-4c0605c12308",
        "cursor": {
          "ref": "fa43e9ea-566a-4b35-9775-3c1350ef27f5",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "4a2a5a95-8b97-490a-a0f1-3973039a2e72"
        },
        "item": {
          "id": "940e6f11-10ab-471f-ad48-4c0605c12308",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "949df7ed-d853-4210-8573-abc3d3b127c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76fcce3c-0ead-403f-b109-cd067e7f16f5",
        "cursor": {
          "ref": "9ea9ff5f-2743-405d-9c82-03533a150b92",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "7a8c2bd2-5968-4944-affc-f419ec2be750"
        },
        "item": {
          "id": "76fcce3c-0ead-403f-b109-cd067e7f16f5",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "40fd9241-9f94-453b-bf96-e74f431ccfa7",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "dee9117d-a454-4585-af78-0a9ebce511b9",
        "cursor": {
          "ref": "81152a2f-03e0-4412-9f23-bd413978d952",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "0583b4d7-12c4-4ad1-900e-4d8fe0a24234"
        },
        "item": {
          "id": "dee9117d-a454-4585-af78-0a9ebce511b9",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "4c442dfa-6f94-42da-af2d-79e769887953",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "93eaf479-2f87-4750-9bac-35dce0928509",
        "cursor": {
          "ref": "8de98991-6938-4870-bc55-251950c5db80",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f61e069c-f4a6-4321-930d-92652bf925d6"
        },
        "item": {
          "id": "93eaf479-2f87-4750-9bac-35dce0928509",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "bc3eab1b-e5b6-4165-9287-67de582fe928",
          "status": "Created",
          "code": 201,
          "responseTime": 380,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "0b5e7b4d-879b-4b99-ac76-8a14a9200dc9",
        "cursor": {
          "ref": "ae03c08f-3c48-4943-87be-95bbe081f55c",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "12e52ae1-beab-4df8-809b-62ffb01ec149"
        },
        "item": {
          "id": "0b5e7b4d-879b-4b99-ac76-8a14a9200dc9",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "61a999f1-358c-4bb2-8317-4f72e24a8531",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "f3eb3566-bf18-41e5-b07e-3d20d6f643b9",
        "cursor": {
          "ref": "43488cb2-f704-4681-8de0-5e77bea6580b",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "9c299c80-570c-4e66-ab8b-2576306305d1"
        },
        "item": {
          "id": "f3eb3566-bf18-41e5-b07e-3d20d6f643b9",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "2d61c75e-d63a-4662-9564-a5de9cb33786",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "fcb2164c-eda1-49f9-b3fd-b1b6dbc4eef5",
        "cursor": {
          "ref": "d7633746-44a1-446a-8299-7a60e7592861",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "be76cac1-3fe5-4937-9d3e-b640493e5220"
        },
        "item": {
          "id": "fcb2164c-eda1-49f9-b3fd-b1b6dbc4eef5",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "58fd93b3-608f-416c-917b-97e7e3084f41",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "d8eabbe3-54c6-414f-8591-0c12b9223140",
        "cursor": {
          "ref": "8d650093-4109-4a5e-9cb9-bb81159eaa11",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "512da6c1-c8b5-4c2d-9ba3-a8bfe5b7c1b2"
        },
        "item": {
          "id": "d8eabbe3-54c6-414f-8591-0c12b9223140",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "c9b5a0bf-7316-473f-9f70-a7206e1245be",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "bf039f53-5b6f-4210-8dd6-d94fd87a6c95",
        "cursor": {
          "ref": "a6c453bf-3f96-4eb6-89a6-c86f211a1c56",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "6eae20a8-490c-405e-ad27-5e0ee911942d"
        },
        "item": {
          "id": "bf039f53-5b6f-4210-8dd6-d94fd87a6c95",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "f0d8e91c-cf7e-4690-a7e7-cad58b2d638b",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "2f1f9a8b-2604-40d0-a118-1cd67750954a",
        "cursor": {
          "ref": "4ca6fda5-b295-444e-acc4-dc7d56fe562c",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "1b6f7943-c859-4e4a-8cf2-61e2fa5fa8b8"
        },
        "item": {
          "id": "2f1f9a8b-2604-40d0-a118-1cd67750954a",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "c5e8b966-c623-4db5-959a-bf875ec14dc1",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "08516734-727c-4abb-81c3-8cc04a19b4fc",
        "cursor": {
          "ref": "fdd71a0d-ca15-4e7d-9d0e-73f6210c2919",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "2ce76b73-ae04-409a-8f25-4a8ce4995f23"
        },
        "item": {
          "id": "08516734-727c-4abb-81c3-8cc04a19b4fc",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "f584ce1f-ab14-465b-b126-805f27123d92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4182de8e-e155-4118-889a-dceb49408980",
        "cursor": {
          "ref": "9eb7c97b-1f84-4ef4-9586-e1614f1723a9",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "2a74468e-604f-4fee-a758-258ca24698d8"
        },
        "item": {
          "id": "4182de8e-e155-4118-889a-dceb49408980",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "58c861b3-5792-4868-8f1d-d5b389d684db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d24cf570-b6ec-4e92-be84-c6c215d5f889",
        "cursor": {
          "ref": "768c3259-6933-4ac7-ab1c-3a67c6e5da67",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "bb5671ac-85cd-44df-a3a8-95f171c434d8"
        },
        "item": {
          "id": "d24cf570-b6ec-4e92-be84-c6c215d5f889",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "378e2299-de32-4ddf-9f57-6901cdd32cea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf45199e-8457-4e74-911c-f9e062fc0dc8",
        "cursor": {
          "ref": "517e86b1-bb05-4d44-9380-c2205fdfe22f",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "e0119bce-4edc-4e00-b3db-4173310b2e7f"
        },
        "item": {
          "id": "bf45199e-8457-4e74-911c-f9e062fc0dc8",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "c213335d-8915-4522-8a86-ca6ad4a3cc92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77e3f417-da0a-40d8-b16f-cf41d0c1499b",
        "cursor": {
          "ref": "f2e8041f-b345-44c0-984c-de2c8efd842c",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "f99b5fbb-d89b-4b8b-8a54-267e2ad9c795"
        },
        "item": {
          "id": "77e3f417-da0a-40d8-b16f-cf41d0c1499b",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "01c25aff-1fbb-4f26-ab03-4b618a8e82be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cde350b2-e1e5-47bf-8268-4f00f18ceb50",
        "cursor": {
          "ref": "5dac1a37-dc00-4569-ade1-eb35459fb7c4",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "544ab1f2-78f4-4b8d-bf7f-867462933796"
        },
        "item": {
          "id": "cde350b2-e1e5-47bf-8268-4f00f18ceb50",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "23b0f916-d575-42ea-b696-ce209b5acf3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f0bc0ae-f801-46ed-9e40-d7aad321001e",
        "cursor": {
          "ref": "be81cf3c-5102-4695-9d2d-660b42f05e2b",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "31ac8463-d1b0-4104-b9fe-8489f9883978"
        },
        "item": {
          "id": "4f0bc0ae-f801-46ed-9e40-d7aad321001e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "ac8a495e-0c5f-4220-8a0d-51034aed35d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f66507bf-f697-4c74-955a-03052996c60c",
        "cursor": {
          "ref": "a04c0a07-ecc4-4291-baed-9f58c732d6b1",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "89712b6b-95c0-478d-b049-19e010721bee"
        },
        "item": {
          "id": "f66507bf-f697-4c74-955a-03052996c60c",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "71e97282-55aa-4afd-9719-d9dbd65e4091",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90c6d11c-236e-4763-a63f-0bc8e872d829",
        "cursor": {
          "ref": "f91926d0-b2e6-48a4-afb0-1643dc6a6f3b",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "bea977e4-f99c-45b3-a6cd-ee09ace0624b"
        },
        "item": {
          "id": "90c6d11c-236e-4763-a63f-0bc8e872d829",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "70f6051e-1b01-4ce6-ae19-847215563454",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97f43cb7-2f25-4ca2-8d41-30ea345ba04c",
        "cursor": {
          "ref": "24b32b8e-0455-423b-985a-2cd8668ac517",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "732e8687-4334-4784-be46-c7b5b08ab59e"
        },
        "item": {
          "id": "97f43cb7-2f25-4ca2-8d41-30ea345ba04c",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "9e07b23d-8e33-441b-a625-1d2e5dedb983",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48bd8017-9de0-4519-be47-70876e90c445",
        "cursor": {
          "ref": "68868a0e-81cf-41d7-9679-dc5ba0715a0b",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "ba17942f-d9fa-4f6c-b784-15ab60dffaf1"
        },
        "item": {
          "id": "48bd8017-9de0-4519-be47-70876e90c445",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "d75b2edd-e9bb-423f-bfc9-171365228e9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6643dfc1-9e05-4012-97fb-b8b527d0376f",
        "cursor": {
          "ref": "3eb1fffc-ef43-406d-91f9-c8277519a31f",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "460dc789-3cb8-40fe-86d8-365e070c29b7"
        },
        "item": {
          "id": "6643dfc1-9e05-4012-97fb-b8b527d0376f",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "398a6366-bac2-453b-aafb-8c670dc1544e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3648db86-52ea-4b07-9acc-bebc33ae0cff",
        "cursor": {
          "ref": "1ef93094-ea56-4cfc-a8b5-a25abe10018e",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "c7ac5bcf-3ed8-40b8-b609-7e4da1e7b176"
        },
        "item": {
          "id": "3648db86-52ea-4b07-9acc-bebc33ae0cff",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "b92c975b-75f6-44da-a8f4-b244bfdedd3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdbac065-3a5a-4403-8b4f-936273e5c690",
        "cursor": {
          "ref": "12891d23-0b1f-401b-8394-38cd575ab5b5",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "ca10e5ab-028c-41aa-8d1a-95f3f29a4407"
        },
        "item": {
          "id": "fdbac065-3a5a-4403-8b4f-936273e5c690",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "f65443f5-3979-4307-aa97-a67250ffca78",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "ff293290-d44f-4c6b-a6c5-a7eb867d08d1",
        "cursor": {
          "ref": "2617b8a2-3817-44cf-b125-5d226f5280e6",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "7f06d796-4206-497c-b461-6c35a66d8b1f"
        },
        "item": {
          "id": "ff293290-d44f-4c6b-a6c5-a7eb867d08d1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "8cfd04be-40d1-4181-a6ac-3c7ad34a4578",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "52422b9b-f703-407e-9747-28ebd3f32f63",
        "cursor": {
          "ref": "cfd53e0f-1d58-43f2-ae3b-17169e945899",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "b149d55b-d075-49e8-b319-1c87bb494034"
        },
        "item": {
          "id": "52422b9b-f703-407e-9747-28ebd3f32f63",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "ed3a2825-9eaf-45d2-b1ca-f38da847c709",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "7f2a38ff-f35f-4cf3-830f-50527f2a24a8",
        "cursor": {
          "ref": "55ea5fcf-1f4e-4c11-9512-a82a4f07de74",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "2453f49f-6b27-40a9-845c-4bd9e727f213"
        },
        "item": {
          "id": "7f2a38ff-f35f-4cf3-830f-50527f2a24a8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "e4298a46-657b-4ef7-b9d4-71c5968e5796",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "b47bbbb3-68e7-48b4-ad24-336e5c08f646",
        "cursor": {
          "ref": "5ce81691-5dcc-46c7-a7d6-a8da85ce0140",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "5e2481b0-8f49-4c4e-bc72-776a0624e59b"
        },
        "item": {
          "id": "b47bbbb3-68e7-48b4-ad24-336e5c08f646",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "858dd7e6-1f51-4570-80f5-1023cad8f813",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "43736976-157a-4c4f-9d2f-9024ab6b8bf8",
        "cursor": {
          "ref": "c7446de4-92fe-470e-8080-080b59981404",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "25c34101-f14a-4cf2-8a14-478f8ec13f21"
        },
        "item": {
          "id": "43736976-157a-4c4f-9d2f-9024ab6b8bf8",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "39adc4a0-3763-4852-a8bd-b6ecf5327cf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79bb2a53-994e-4416-9adc-0264d668a12c",
        "cursor": {
          "ref": "bb1128ca-19c1-46f9-82d4-e7f5f32a9e87",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "e8a0ffed-658c-47f1-bee6-0a50e7a0b037"
        },
        "item": {
          "id": "79bb2a53-994e-4416-9adc-0264d668a12c",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "fac47708-6835-402c-b981-923384553c4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24497877-9672-4a77-80a1-63502ddcf299",
        "cursor": {
          "ref": "f0a81d22-576d-4fc5-b352-4bfa3b370fe2",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "e98f1d5d-5e42-437c-b8a5-a608b2dcf018"
        },
        "item": {
          "id": "24497877-9672-4a77-80a1-63502ddcf299",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "74a0f330-6a06-43c6-9378-78aecb39ebf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73bef85f-1308-42c5-934a-80d87629dc0b",
        "cursor": {
          "ref": "4a12f081-c144-49b3-a393-8254c1e7e490",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "dead27d6-3e00-4912-bbcb-08619cc22adc"
        },
        "item": {
          "id": "73bef85f-1308-42c5-934a-80d87629dc0b",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "77dc4147-7683-4cee-9d25-bf6d0f38b547",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "552be172-df6e-49f6-affb-806cf31ef9fa",
        "cursor": {
          "ref": "873b77ab-bacc-4214-b719-b81da8d94f0e",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "09fd748d-3e9e-4e4d-a425-2c14ac966bc4"
        },
        "item": {
          "id": "552be172-df6e-49f6-affb-806cf31ef9fa",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "fd0c81f4-c5a1-4ca7-953f-9259e1f492fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6c5e91f-0e83-4ac2-81f5-db0a2b664f76",
        "cursor": {
          "ref": "a3fff4fb-9c69-450f-8ccd-b7b7b1b43198",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "2a1b3bae-2316-4333-a038-396b33ca4b7b"
        },
        "item": {
          "id": "b6c5e91f-0e83-4ac2-81f5-db0a2b664f76",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "23a84da0-b540-41a5-911a-97e0015e9b49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd612ccc-92ec-4a62-87c2-cd42ce1c24cc",
        "cursor": {
          "ref": "405af446-5dc9-4c40-8d0f-38cad008f6ae",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "abdaf2e5-3be9-4d95-aec1-0b68a1fd8c9f"
        },
        "item": {
          "id": "bd612ccc-92ec-4a62-87c2-cd42ce1c24cc",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "5586a08e-e2d1-4d2d-86bb-2b5759f28401",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6082de4-4fd2-4d55-9fc3-89cb54425c34",
        "cursor": {
          "ref": "1f1113c2-76bd-4c91-9b26-89b1d3bb19b5",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "f51bd26e-7651-4d54-a67f-b8d1f46cf723"
        },
        "item": {
          "id": "e6082de4-4fd2-4d55-9fc3-89cb54425c34",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "8f69cc95-ba7d-4315-9f56-884de5ab42de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffe65caf-e858-4d0f-846a-6492eb508c4b",
        "cursor": {
          "ref": "e3101210-9d14-4929-ac20-e44e9ebc24bf",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "2989ae43-c2cb-4931-95ae-e45a19637fed"
        },
        "item": {
          "id": "ffe65caf-e858-4d0f-846a-6492eb508c4b",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "8ea74c59-d19b-4ec6-9d99-542ded7a6c0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "017bb2ff-3533-4ebc-a71b-f6ceb5489560",
        "cursor": {
          "ref": "f2c07835-4c74-4e84-bf50-d39771e33c51",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "050c450b-0d32-4f8f-9d39-fae90b14030f"
        },
        "item": {
          "id": "017bb2ff-3533-4ebc-a71b-f6ceb5489560",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "e050398a-340f-433e-9a51-d0406107e381",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7c126dd-61c5-4bb7-8901-7040b0bd107c",
        "cursor": {
          "ref": "90c5f1fe-5b53-4fbd-acf1-d3503a732079",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "33e48dcc-f13f-4e52-ad2b-a554162e7727"
        },
        "item": {
          "id": "c7c126dd-61c5-4bb7-8901-7040b0bd107c",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "1bc536c3-ebbc-4c8d-b115-7a4199db0eda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2041c676-9f23-425e-be11-65ffea6d5c53",
        "cursor": {
          "ref": "83dfb4db-9f23-4cd3-9db1-94be00809de3",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "51f8bd54-5e13-4a58-a4bd-6051b859e641"
        },
        "item": {
          "id": "2041c676-9f23-425e-be11-65ffea6d5c53",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "ea8a7210-6547-4aef-9d8f-c51394f890cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a1e24d7-13c5-4ca2-affd-d80b691495fd",
        "cursor": {
          "ref": "099e31e2-d6d4-401d-9748-2c84349ae22b",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "50c06aa1-8997-47f8-aed5-0ff673d85091"
        },
        "item": {
          "id": "5a1e24d7-13c5-4ca2-affd-d80b691495fd",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "4529194a-44a2-4bd4-8e88-2675134c315c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fc8d508-3471-4499-b6c3-0b9fb13854d8",
        "cursor": {
          "ref": "3bb36e15-5ae5-431d-aaf7-5ea4f4909126",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "ac1d566c-b6a7-4ccf-a262-66677af64f6e"
        },
        "item": {
          "id": "4fc8d508-3471-4499-b6c3-0b9fb13854d8",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "770df4c5-44e0-47e9-b441-799323db4d86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4863e2f-0f60-41bf-949b-28798f78865c",
        "cursor": {
          "ref": "37c4b69a-f6b4-4f67-831a-e969776eebc6",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "5f113c86-e813-4f15-ad4f-8b43d2757563"
        },
        "item": {
          "id": "e4863e2f-0f60-41bf-949b-28798f78865c",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "0e6f3109-25a2-499d-b018-9ec531176475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bc47834-910b-4c49-af0b-4615f2be1018",
        "cursor": {
          "ref": "7de83f07-3d00-4059-9b83-3838c05fb0ea",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "9bb06053-ef63-43ef-b07c-035fc4893083"
        },
        "item": {
          "id": "9bc47834-910b-4c49-af0b-4615f2be1018",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "f8163cf1-2468-4b71-8682-5b361711e670",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b311395d-9d85-474c-8385-6f05a901ceb3",
        "cursor": {
          "ref": "ca84a020-4541-4bd0-a6a9-fc0f02fb75c3",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "04f6b4df-6ffe-4b0c-b8b4-f2ef93f15523"
        },
        "item": {
          "id": "b311395d-9d85-474c-8385-6f05a901ceb3",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "d49c1da5-b306-4d14-816f-accd379de658",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e292767-bb8c-4c7a-8a0b-b59a66554db7",
        "cursor": {
          "ref": "031536b7-2029-4fcd-bf28-0e0c424c241e",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "198bf5ef-8e58-42e4-a430-8d7071798e01"
        },
        "item": {
          "id": "9e292767-bb8c-4c7a-8a0b-b59a66554db7",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "6ed6a244-177e-4039-b7b2-6287eeaf2fac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6fdf1d6-9245-496c-828b-cebde7830fc3",
        "cursor": {
          "ref": "91e4b413-08de-4103-a632-469ae4a9e108",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "ccdcccf8-4113-4d10-84da-c9deb9a520e2"
        },
        "item": {
          "id": "f6fdf1d6-9245-496c-828b-cebde7830fc3",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "55027b2b-2fda-4b8c-8056-aac64c03f55e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aef22ff-281d-4ecc-9e42-55b003a9efa3",
        "cursor": {
          "ref": "33f1a552-53c9-4ec7-9683-f154c1c72cfe",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "87a277ec-32f0-4e4c-b730-40f29cdb8657"
        },
        "item": {
          "id": "9aef22ff-281d-4ecc-9e42-55b003a9efa3",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "3334a705-191c-4fb0-b92e-658540ea194e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5099268-56aa-4f49-b5e4-b21c14438c51",
        "cursor": {
          "ref": "c006c410-0175-4767-996e-47562cdafef0",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "3303f186-669a-4643-b947-024d6b7a06e9"
        },
        "item": {
          "id": "f5099268-56aa-4f49-b5e4-b21c14438c51",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "18d63470-33f6-4134-a2af-ed582b0ddf73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a001d29e-2b92-46ae-89e5-6bd937a3c017",
        "cursor": {
          "ref": "6f88e85b-02ca-49d1-b15b-83354cafe2cc",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "8c215a6e-87b9-473c-ad19-8c898370caa6"
        },
        "item": {
          "id": "a001d29e-2b92-46ae-89e5-6bd937a3c017",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "f34b317c-36f9-4545-a5f4-b066c50c3696",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25b4481f-7544-419d-afc8-f55b985caac6",
        "cursor": {
          "ref": "8b34b32d-a569-44ea-a813-4fa7789bcdd0",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "cee9e033-db3f-46cd-b327-67137f99fa25"
        },
        "item": {
          "id": "25b4481f-7544-419d-afc8-f55b985caac6",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "16251084-2083-4525-a8ef-a0bf88a3d3b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93d3a81d-2b14-40d4-acdb-ea3773c6719a",
        "cursor": {
          "ref": "93562921-d7c3-433f-8445-1a729b5c9577",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "9e8d7426-64bb-4db9-9305-181a219bd119"
        },
        "item": {
          "id": "93d3a81d-2b14-40d4-acdb-ea3773c6719a",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "8f5357ed-90ed-4cf5-9c86-891910af3b38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "259bfd8e-e1a2-4580-b278-85f33155cae9",
        "cursor": {
          "ref": "99dfd221-a0a0-45a2-94ea-49e9b5300965",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "f776b7d1-e659-48a8-8020-d87d4e9fe080"
        },
        "item": {
          "id": "259bfd8e-e1a2-4580-b278-85f33155cae9",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "166d1cce-7c09-4eaf-8c4e-d1b725effa8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39a5ee93-76ef-4de6-8d78-7b492e5f2aae",
        "cursor": {
          "ref": "ffbdaf78-d44b-4ec3-bb69-1fc31c0ccf0d",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "9537a215-8f2d-44d9-9d79-24dd48386ad6"
        },
        "item": {
          "id": "39a5ee93-76ef-4de6-8d78-7b492e5f2aae",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "17ec982e-d2f5-41d6-acc8-3be14529ca89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74196652-dfbd-4920-b295-ef2188f181f3",
        "cursor": {
          "ref": "d316be09-c9cf-4fbd-adea-e3e4fa8e2e23",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "56162f70-a8f1-4f9e-8cf2-4bb81fa16b21"
        },
        "item": {
          "id": "74196652-dfbd-4920-b295-ef2188f181f3",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "88309d1f-ddce-4f65-a1b9-c446aab5560b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bc4f240-6997-4d91-a6bd-21641522488c",
        "cursor": {
          "ref": "4d45ec9b-eb36-44e9-97fd-35b9d61852db",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "e0abd186-a3bb-40e0-b74a-dc3e65cf17d9"
        },
        "item": {
          "id": "0bc4f240-6997-4d91-a6bd-21641522488c",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "4d643615-c185-4802-a432-5ec9a91a4c0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3919555b-1b60-4f52-af40-447d655da8fe",
        "cursor": {
          "ref": "07794f04-3960-46c8-86cb-59cfbd6b4072",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "e318be4e-80ae-4923-9c72-096714c5082a"
        },
        "item": {
          "id": "3919555b-1b60-4f52-af40-447d655da8fe",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "0b142771-2bd0-487b-81f4-337678773f61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10c8a87a-ac6a-46fb-8f9b-8d5a51447aba",
        "cursor": {
          "ref": "ed759df9-4655-4e2e-83aa-cd3c63213c1e",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "0ee1f659-0ef2-4a9a-a9c1-cea7edf88ab7"
        },
        "item": {
          "id": "10c8a87a-ac6a-46fb-8f9b-8d5a51447aba",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "0560e392-9275-423b-86d5-6ff34df83490",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e370405a-6bd3-4170-80e0-7cf2c2996895",
        "cursor": {
          "ref": "82c0f75e-9e9e-4d1c-aaca-02a62d0003e2",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "7cfa1150-79b7-4e04-b9f4-944ecaf00f26"
        },
        "item": {
          "id": "e370405a-6bd3-4170-80e0-7cf2c2996895",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "025ed225-436a-4e57-85e3-3e3987056daf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6872a65-ba36-4831-a193-5314fecc37f0",
        "cursor": {
          "ref": "31b34cde-e311-4d5f-9c21-7880529cf40b",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "2f2ed212-d2da-48d3-b67d-3f122fe624f5"
        },
        "item": {
          "id": "b6872a65-ba36-4831-a193-5314fecc37f0",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "2708e36b-51a9-4b2b-85c8-c2f95406b15b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f786e974-e6fa-4f1b-936f-a2196b1daa7e",
        "cursor": {
          "ref": "9c4c7ded-fca1-449f-9a0c-02ea99a250a0",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "426acd55-ce28-4c07-95af-e57365e5d7ce"
        },
        "item": {
          "id": "f786e974-e6fa-4f1b-936f-a2196b1daa7e",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "d03527ac-f824-4542-9119-8d90ac6f9c24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "44c4ee42-3112-4c83-9a92-3ae23fcbd630",
        "cursor": {
          "ref": "c4911873-185c-480f-b8d1-d68d7576181f",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "446273d8-2cd2-44a5-b2c9-46487876bc6a"
        },
        "item": {
          "id": "44c4ee42-3112-4c83-9a92-3ae23fcbd630",
          "name": "credentials_issue"
        },
        "response": {
          "id": "d349a6b3-ef6f-4c52-ba4a-6ac3e30d71da",
          "status": "Created",
          "code": 201,
          "responseTime": 249,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "99f149d8-d6ef-4115-bf66-bd9188833bd9",
        "cursor": {
          "ref": "d1cc5e7b-8e8d-4df3-97e3-3690a40555f9",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "4f824545-1bce-409c-be26-12dd4aba9607"
        },
        "item": {
          "id": "99f149d8-d6ef-4115-bf66-bd9188833bd9",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "5f7016b9-c6ca-421d-b79b-1d921f04f3d3",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8eda676-fe44-4744-884b-ed89f209c8f3",
        "cursor": {
          "ref": "8b817af1-47dc-4423-8965-3d5f723f0a43",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "8b60758b-e359-4604-9bdf-9e13b28795c8"
        },
        "item": {
          "id": "a8eda676-fe44-4744-884b-ed89f209c8f3",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "f1ee07d0-8d43-4d4c-865c-beeb3b245991",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "954f0c91-33f6-4e0a-a567-f1d057f7b485",
        "cursor": {
          "ref": "02419f77-7891-46ce-9f55-e1202d1e3b62",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "45fd8230-3d03-474a-b5b6-a6ed302ead8d"
        },
        "item": {
          "id": "954f0c91-33f6-4e0a-a567-f1d057f7b485",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "db71e4fa-67fc-4d5f-a97f-40a2a858aedf",
          "status": "Created",
          "code": 201,
          "responseTime": 399,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e8b9f76-1176-4570-b6b1-2219b8016170",
        "cursor": {
          "ref": "0a8db341-f3e2-4c93-acaa-196da9ddedc1",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "1198dccf-3d5e-4a46-8511-5b4a62ddef95"
        },
        "item": {
          "id": "5e8b9f76-1176-4570-b6b1-2219b8016170",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "2c52af37-ce8e-4ac5-8249-13e707fe9142",
          "status": "Created",
          "code": 201,
          "responseTime": 521,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-01-04T00:36:12.039Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-01-04T00:36:12.039Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "9ed7a357-fb2d-481e-8d1c-7a1bb8e9087f",
        "cursor": {
          "ref": "c5575729-b4b3-499e-b507-0ae6ed7456ca",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "5ef3b34a-f28d-4874-9b48-2ddf2139ea42"
        },
        "item": {
          "id": "9ed7a357-fb2d-481e-8d1c-7a1bb8e9087f",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "fd1d5cc0-ea83-4cf0-947f-2209dcf13a45",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edf8ba51-8c09-4c66-bbb7-94208659664b",
        "cursor": {
          "ref": "dacd96e0-12dc-4009-af3e-f26d318833a0",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "2422a203-2896-4ea9-beea-d83fea07d6d1"
        },
        "item": {
          "id": "edf8ba51-8c09-4c66-bbb7-94208659664b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ea659d45-4b37-496e-a0e4-f09196dff0b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15a537cb-601f-4ed6-94ff-5a4229056f07",
        "cursor": {
          "ref": "ff26d7f1-9b31-47e4-b7b1-3111583bd064",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "4c5e9115-c715-421a-9f8d-0688363f7914"
        },
        "item": {
          "id": "15a537cb-601f-4ed6-94ff-5a4229056f07",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "24c47f1f-6c5e-40a8-a096-10f428c99623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77dc171c-2020-427d-b666-13feea329b92",
        "cursor": {
          "ref": "59b2ffec-b44c-406e-b4ad-f6bc2fe9d851",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "615e9146-52de-4e5f-ab2a-5607d76bc827"
        },
        "item": {
          "id": "77dc171c-2020-427d-b666-13feea329b92",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "39327b6a-703e-47f1-9abc-c941dc8f09e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61f33068-e250-4dc7-9e5f-1a3bc9fcb022",
        "cursor": {
          "ref": "97df28f6-c4e2-4f99-b494-eb4a88fd686b",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "e07f87a6-a4f1-4c3c-8bfe-9ad0f1e7048f"
        },
        "item": {
          "id": "61f33068-e250-4dc7-9e5f-1a3bc9fcb022",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "675a766b-6d1a-4d18-9ce4-334290de95c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1ed8ce9-73ff-43f6-b817-8aaab90ec9e7",
        "cursor": {
          "ref": "bf19b7fc-44a4-43a2-9200-1a3e41952487",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "3971c30b-0dab-4fd3-ae79-5654ff0de9b7"
        },
        "item": {
          "id": "f1ed8ce9-73ff-43f6-b817-8aaab90ec9e7",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "f4f2038c-9f3e-47ab-8042-8c00c8212c5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f383f461-b0d6-48b2-b311-3293ebfa5c1d",
        "cursor": {
          "ref": "b971f22f-553a-4cbc-96c7-f95da670ab23",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "6f2ca360-eba8-4654-9f59-602a5066248f"
        },
        "item": {
          "id": "f383f461-b0d6-48b2-b311-3293ebfa5c1d",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "a34c55dd-499a-4729-a0f4-9bcb36371069",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bf7e773-8c81-4158-85a6-dc41da22ec5c",
        "cursor": {
          "ref": "317eeadf-76eb-4d3c-b221-c802de600c0a",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "cdce284a-f223-4834-b2cf-e5e11c22892e"
        },
        "item": {
          "id": "3bf7e773-8c81-4158-85a6-dc41da22ec5c",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d45e3b4c-37d5-4ef0-8006-c8cb8791b7d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84a78d45-6f56-4f84-bfe9-7faf5ac68380",
        "cursor": {
          "ref": "50c970d2-ec6d-4658-bab0-743477c07374",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "3366f5e3-47b8-485a-99bd-cf70ff66fcaf"
        },
        "item": {
          "id": "84a78d45-6f56-4f84-bfe9-7faf5ac68380",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "6e90ef8e-3d1f-4332-a977-0d3c23b1501f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1386e738-3a40-461c-897a-8ab75201c572",
        "cursor": {
          "ref": "338e32ab-f0d3-4eb6-b1c8-ec40cc187614",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "c42316e2-ddbc-4d61-acae-711c83c9b5e8"
        },
        "item": {
          "id": "1386e738-3a40-461c-897a-8ab75201c572",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ac817d4a-b268-468d-976e-ea89bc7b7c8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83a502ba-e724-44e9-ba36-e0c9480ba7ee",
        "cursor": {
          "ref": "fdd5c6b0-e79f-4005-9056-88cf3838b000",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "7073dac4-4dca-469d-9566-e6a8723e4477"
        },
        "item": {
          "id": "83a502ba-e724-44e9-ba36-e0c9480ba7ee",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "cfb58cdf-8930-4f14-b397-0f25fbbd911f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7f1e943-85a0-43d9-b82b-a94d6e3388a2",
        "cursor": {
          "ref": "dba8bade-4da7-44c0-b8b6-d4542f6edc3b",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "4f82040b-71dd-41dd-9e84-20f760f71c92"
        },
        "item": {
          "id": "c7f1e943-85a0-43d9-b82b-a94d6e3388a2",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "90b02e4a-25a0-4558-a20a-7fb23b45a9d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "220f1e96-1598-4024-ba9e-9a4c13a9eb2f",
        "cursor": {
          "ref": "8b90259f-6e63-4745-8bd1-c18959805668",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "53f8b6dd-42e1-4184-9249-b309d358ce02"
        },
        "item": {
          "id": "220f1e96-1598-4024-ba9e-9a4c13a9eb2f",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "e150daf2-8592-4e8e-a22d-bf8e29f452bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efe5e3ce-1592-49ad-9a18-e9e263213283",
        "cursor": {
          "ref": "3a55414f-7375-4916-aa39-9e8060576d79",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "74a477bc-7bc5-4af5-b333-0001e1f27c9a"
        },
        "item": {
          "id": "efe5e3ce-1592-49ad-9a18-e9e263213283",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "3c5374a4-9d40-4427-a4c4-3d17f763c411",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b986e864-184f-4a6b-8856-9ff8506ce25c",
        "cursor": {
          "ref": "653f9758-fb99-4337-a920-b539fb02c30a",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "312d6919-20c0-459f-b5be-83b6658fdc6e"
        },
        "item": {
          "id": "b986e864-184f-4a6b-8856-9ff8506ce25c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "61b95a6a-8e5f-4fb5-8509-9bb70984f1e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfb9b05f-c2ac-4d29-a514-929a8f7554ad",
        "cursor": {
          "ref": "823d7be4-d09b-4e44-a5e4-91142fcaa41e",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "fa2ce651-bbc4-4550-97e1-f947ea5bea74"
        },
        "item": {
          "id": "cfb9b05f-c2ac-4d29-a514-929a8f7554ad",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "0a966097-0942-4f68-a98d-f83549170d39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd87055a-fdfa-42d1-a550-aaacdbf0bb0c",
        "cursor": {
          "ref": "4be84412-a298-4f0f-8544-eedc3f822c85",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "5318a1fa-6d79-457f-ab7d-177760d9bf0b"
        },
        "item": {
          "id": "fd87055a-fdfa-42d1-a550-aaacdbf0bb0c",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "94f83bca-2a57-4a1a-8a31-b02f0db8deeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72ba2c13-67be-4892-aab7-644c620ae956",
        "cursor": {
          "ref": "6206d504-249e-4dd4-a8e9-285736b12a1f",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "1cf0dc3e-a655-44ec-bc94-fa6e6db3f972"
        },
        "item": {
          "id": "72ba2c13-67be-4892-aab7-644c620ae956",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "d0b88d58-671e-4de5-84bf-4b433726b1e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9172f0f-4661-41fb-bd10-443ad647a746",
        "cursor": {
          "ref": "65926281-31b3-4d76-9e70-023109fdfffc",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "a04f3910-7598-48bb-9a41-7b4440c20005"
        },
        "item": {
          "id": "e9172f0f-4661-41fb-bd10-443ad647a746",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "2317092d-42cd-40ac-8650-722c62a4c15a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcddd794-2bb7-4219-aecb-2dcb6ccd7cf1",
        "cursor": {
          "ref": "3523111e-6a5c-447b-93bd-1f1c3a574906",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "99c239e3-bb98-48a2-94d8-7b686c518fb1"
        },
        "item": {
          "id": "fcddd794-2bb7-4219-aecb-2dcb6ccd7cf1",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "42f2c749-55fb-41e2-aa89-cca2982b55c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f261e235-2d9c-417e-bc64-2e6ab47095f6",
        "cursor": {
          "ref": "3cddb9c5-f153-48ee-b0ad-32b8b0928979",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "7399c583-dd35-4424-ac86-0fe96f5fee58"
        },
        "item": {
          "id": "f261e235-2d9c-417e-bc64-2e6ab47095f6",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "9cb7d174-4cd8-4514-8905-ba25d90562af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "473e3640-7a45-4cd9-a727-34f024defe58",
        "cursor": {
          "ref": "c9eb189d-55f8-483a-89ce-eb23dc20d283",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "3cceb0a1-3621-4ceb-9926-d7e5035e0a31"
        },
        "item": {
          "id": "473e3640-7a45-4cd9-a727-34f024defe58",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d959d801-e7a7-41b6-8868-681a338b937b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65509390-2328-4a44-96a1-aafb63baee06",
        "cursor": {
          "ref": "f1e7ff33-3e1f-4805-af6e-4e79285e194e",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "ed033198-e0f5-43df-b95f-fd7ed997fba3"
        },
        "item": {
          "id": "65509390-2328-4a44-96a1-aafb63baee06",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "9483c664-93c2-4427-9f67-148944e695b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffbdb6c3-3526-41e7-b9b3-91c013361a66",
        "cursor": {
          "ref": "d9574d31-7785-4d68-8428-2e5bc173bc81",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "f6171088-b0e0-4ca5-9709-76f2cc1fce2e"
        },
        "item": {
          "id": "ffbdb6c3-3526-41e7-b9b3-91c013361a66",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "af5058c1-0567-4283-a3e6-abd0212a6dfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8930873a-ebf9-489b-8963-5e631b24a7eb",
        "cursor": {
          "ref": "6228b9fa-e7d2-4a95-a41a-077fe6be8982",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "5b053504-647d-474d-84de-f78bfceb3363"
        },
        "item": {
          "id": "8930873a-ebf9-489b-8963-5e631b24a7eb",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "ef48361b-add8-421a-a18b-3b4c45ca4bc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0621f91a-e024-4545-9f80-534b3cfbb832",
        "cursor": {
          "ref": "7a96dec8-8ac1-4052-a421-8ee97dd8b218",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "113eb2f5-4fac-47ff-9b5f-eefd684d9ffe"
        },
        "item": {
          "id": "0621f91a-e024-4545-9f80-534b3cfbb832",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "740f35f9-2e07-49bc-9e98-fb0e56f3b1d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6751df5e-1258-4943-b5b4-5b5e3cf683be",
        "cursor": {
          "ref": "7d96a32b-fe07-47c1-a670-3f564e0aa51c",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "54701268-bccb-49db-a805-703684671f82"
        },
        "item": {
          "id": "6751df5e-1258-4943-b5b4-5b5e3cf683be",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e98a4e30-1271-45fe-bb03-768ca6cc7d39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeb91db0-f6ad-4040-b29a-482eb1f5da1b",
        "cursor": {
          "ref": "775452a7-a326-4999-b44c-3e5f9fd2e7b8",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "dfceef20-8a50-4c0d-92a0-6595b90fb4a8"
        },
        "item": {
          "id": "eeb91db0-f6ad-4040-b29a-482eb1f5da1b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "18c3334d-49fb-4847-a8a1-f95acdd3ae69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a444a3b8-7147-4a46-b952-fb71db3e60aa",
        "cursor": {
          "ref": "414722d7-4c72-4495-b37b-73d03b1ea39a",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "29942b37-95a2-466f-8a0d-bfd29bf1a704"
        },
        "item": {
          "id": "a444a3b8-7147-4a46-b952-fb71db3e60aa",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3f3416e1-59f2-44a5-84e9-ea9d00a8cc19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "921cca56-4ab1-4dea-8149-2aece40d10b5",
        "cursor": {
          "ref": "1d99395e-1c63-4f6d-8459-da79faf334f2",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "56ead643-a0c9-4c1d-8dcd-98abedb3a500"
        },
        "item": {
          "id": "921cca56-4ab1-4dea-8149-2aece40d10b5",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "72b71e3d-937d-4869-91aa-384310144a30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "651d5a74-f120-40c6-a940-29d4a3eaa25d",
        "cursor": {
          "ref": "10df3b79-3e94-4c18-9081-39348310d1af",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "58900feb-b515-4173-83d3-67feec4cb1b0"
        },
        "item": {
          "id": "651d5a74-f120-40c6-a940-29d4a3eaa25d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "9b07128d-9d21-4088-af97-b8bc9596db19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "774a85c6-9f9d-4e58-95d9-42c6e6c96c7d",
        "cursor": {
          "ref": "1850c927-2960-490d-8dc6-ca39d5b5cbf6",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "941ab11e-95c2-44e2-be9a-99d4adf86849"
        },
        "item": {
          "id": "774a85c6-9f9d-4e58-95d9-42c6e6c96c7d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a6535960-2e53-4397-bf95-43926e88f230",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "773cc618-8e0d-4f61-859b-7da82e5051ce",
        "cursor": {
          "ref": "9772e935-155d-41ea-833d-3bfa777415c5",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "3931bb6d-bf58-46fe-9b8c-363b885cf727"
        },
        "item": {
          "id": "773cc618-8e0d-4f61-859b-7da82e5051ce",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "e22d7825-87f2-4c56-a1b5-df9c554c1186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59c72e55-45b4-4697-885c-baec459c8af5",
        "cursor": {
          "ref": "5667c77b-2163-4649-9cae-a954b714503f",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "5fd8c135-cffd-489b-ac1a-5d2ae2ebda43"
        },
        "item": {
          "id": "59c72e55-45b4-4697-885c-baec459c8af5",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "a83e3cda-0e56-440c-82b0-4a3dab5a6cf7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "313b13ed-6292-4b66-983f-b5ef14a7f0ba",
        "cursor": {
          "ref": "084ff3b7-45f9-40bd-93bf-47ae52cd5b09",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "8cea8e55-ae63-412d-95e6-85deda208612"
        },
        "item": {
          "id": "313b13ed-6292-4b66-983f-b5ef14a7f0ba",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4fb56648-796a-4343-bd7d-959f2680e5ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "119bcfb6-bc73-478c-8554-50ddb85faa96",
        "cursor": {
          "ref": "3ff3b832-a40f-4ed5-a538-9734241f176f",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "fd1cdf6c-5aa1-4df3-8506-afe7934b85a4"
        },
        "item": {
          "id": "119bcfb6-bc73-478c-8554-50ddb85faa96",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "dfded38a-8a74-4e68-9f8a-ea0caa687ac3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce6dee1c-b359-4e01-9abf-ae9846aec4a8",
        "cursor": {
          "ref": "c49231b5-13e6-4553-91ef-e38fdf33a3d2",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "937f9ccb-eade-45ec-a205-728ff1d7e783"
        },
        "item": {
          "id": "ce6dee1c-b359-4e01-9abf-ae9846aec4a8",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "31d80380-b4c7-4088-aa7d-7e3a1e457b0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fa695a3-e2c1-4068-aa3a-ec1d0e4ee668",
        "cursor": {
          "ref": "9657384c-16f5-4bc6-8191-a54544a7de9f",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "56c56c46-8bdb-4c31-b4ea-0ca28f02700c"
        },
        "item": {
          "id": "9fa695a3-e2c1-4068-aa3a-ec1d0e4ee668",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "1ea14120-4295-4f80-ad10-5a79a480d58b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94965e89-c3c8-4d36-b89e-4a947e9b860f",
        "cursor": {
          "ref": "f6f76502-f408-4562-80ee-89aba9430c37",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "745a3199-ac5e-4257-b451-b5723a06773f"
        },
        "item": {
          "id": "94965e89-c3c8-4d36-b89e-4a947e9b860f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "2323f41d-4575-4d55-8566-7ebfc4953b30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e8a0b58-d99a-4317-849e-7436b1ee1856",
        "cursor": {
          "ref": "908071e8-8949-4cc3-a612-236e24cf3b91",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "3886c18d-37aa-48a1-98ce-5b30b9163523"
        },
        "item": {
          "id": "4e8a0b58-d99a-4317-849e-7436b1ee1856",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "33375b18-14e3-4d12-ac89-8dfb9d929ec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "242a285b-e310-4d80-9e98-bf5c105af647",
        "cursor": {
          "ref": "f4824ee0-c261-4201-825e-08ad68b1349e",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "8d96596a-9695-4cbc-9c0f-9336320bbded"
        },
        "item": {
          "id": "242a285b-e310-4d80-9e98-bf5c105af647",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "080120b9-30f6-48fa-b520-23cbf8acd471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2238c800-d3f0-430e-86de-f026fe04d985",
        "cursor": {
          "ref": "fa4e3634-2c48-4c55-8a5b-61063eac3c9e",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "59f72c4b-fc4f-47f4-9740-415974fd6569"
        },
        "item": {
          "id": "2238c800-d3f0-430e-86de-f026fe04d985",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "b3a225f5-e07e-42ab-a811-f5f80cec4888",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74e130e7-7e92-4780-8963-ce8d94271fbb",
        "cursor": {
          "ref": "35d40d4b-7183-423e-a3e7-3cb96b44f2f5",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "8cb5682b-8724-4987-8d4b-07a782cf28f4"
        },
        "item": {
          "id": "74e130e7-7e92-4780-8963-ce8d94271fbb",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b8c0d0ac-a5f3-4cb6-ae29-dad64f770f87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e860e15c-c2db-45e9-9653-fd68c38d81af",
        "cursor": {
          "ref": "4b5f0d23-11d2-4df1-abe0-37377724622f",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "b41dca72-3dbd-4ffd-aa35-c2e75905ef98"
        },
        "item": {
          "id": "e860e15c-c2db-45e9-9653-fd68c38d81af",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "d41658f0-e238-4581-9c0b-c8722717b729",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8884911a-c947-4003-ae3a-ff89e54c5384",
        "cursor": {
          "ref": "b68710f5-a933-4d06-a787-a0df4a03c118",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "7e43b83a-273f-4457-b07d-8da74bb14701"
        },
        "item": {
          "id": "8884911a-c947-4003-ae3a-ff89e54c5384",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "84f43206-9265-4b0c-8835-1bb74cef71d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1ece850-a4c9-4b6c-9f4f-ab2e00b81d5f",
        "cursor": {
          "ref": "ba05a8e9-2a90-4564-95e5-6b20548afeeb",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "3027d00a-b5bf-4a10-80a8-0d48aecdf8fd"
        },
        "item": {
          "id": "e1ece850-a4c9-4b6c-9f4f-ab2e00b81d5f",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "437e1116-62e3-4931-a6d0-f5d683e415f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f4e069a-1828-405f-80a3-f7a7f4fadb97",
        "cursor": {
          "ref": "9add954a-ef3e-44dd-8f49-751cc4b64b87",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "d8630790-a8d5-44b5-a75d-ead391bdaa96"
        },
        "item": {
          "id": "3f4e069a-1828-405f-80a3-f7a7f4fadb97",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "5e849d61-0dd8-44d5-ab7f-1151ae6a7c24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c05a027-c264-4738-b4d5-a6d4f892c0b8",
        "cursor": {
          "ref": "66dccca4-be8e-4574-bb8a-49b473f6e6c7",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "7d0e05b3-39e3-48b2-b4e7-fb3e832b5ca3"
        },
        "item": {
          "id": "5c05a027-c264-4738-b4d5-a6d4f892c0b8",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "2d7486d8-d063-4408-9a42-3219aa560a51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e40634d-3527-46c5-be1d-ab5f33f98946",
        "cursor": {
          "ref": "8a2ed812-6449-4cb1-87f5-a7067d6124b2",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "5359f928-30d2-4c0b-8341-9761cc62d9f1"
        },
        "item": {
          "id": "7e40634d-3527-46c5-be1d-ab5f33f98946",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "a7552ea8-5788-4446-b6cc-be136c831871",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bfb33f7-abf5-42ee-a828-9a2ad6323dd0",
        "cursor": {
          "ref": "7e7304fb-56d4-475d-885f-18fde7806c97",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "07e813a6-39a6-47d5-a5d6-50b5de2c9357"
        },
        "item": {
          "id": "4bfb33f7-abf5-42ee-a828-9a2ad6323dd0",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "1e85cded-2fb0-4692-beaf-6cec9034c526",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c860f4fc-ebbe-4d41-a9de-1b17c2899c80",
        "cursor": {
          "ref": "7c80c268-c262-4b02-8d56-b3d6a429406c",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "74398bde-b3e0-4091-9371-a40047614d1c"
        },
        "item": {
          "id": "c860f4fc-ebbe-4d41-a9de-1b17c2899c80",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "a3e30005-8a55-4979-be54-f804f62cf100",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63c91e93-7309-49f4-99cd-a85456ca3f1b",
        "cursor": {
          "ref": "0f87c08b-a4a4-447a-8fae-2d630943321a",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "5263180c-70ca-41fd-ad46-1fb59b7fa3eb"
        },
        "item": {
          "id": "63c91e93-7309-49f4-99cd-a85456ca3f1b",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "6f37e499-eadf-463d-8b10-76a483e54ec7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d76e74e7-9483-470c-a3f8-6226fd8254ad",
        "cursor": {
          "ref": "537cfc44-da40-4c0c-a783-325aded679a5",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "194e6637-98a2-4c2c-8fb8-262d4d15ad22"
        },
        "item": {
          "id": "d76e74e7-9483-470c-a3f8-6226fd8254ad",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "1d29f706-88b3-4315-b4bd-db994b121f59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2922e1c3-0a3d-4609-ad8f-20c56511e6a6",
        "cursor": {
          "ref": "638aedb4-231c-49b2-8c1f-b2a2dba3e416",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "fea23808-ba08-49a7-8f7e-c56ec89ee319"
        },
        "item": {
          "id": "2922e1c3-0a3d-4609-ad8f-20c56511e6a6",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "803b3531-d0a5-4516-83bc-3843f304108d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0241e07e-2944-43c5-84d9-7852e7236301",
        "cursor": {
          "ref": "e21b388d-d980-4f4f-bd02-f4d4c60c2ee4",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "143b9933-fc9b-451c-9443-afbbcbbe5328"
        },
        "item": {
          "id": "0241e07e-2944-43c5-84d9-7852e7236301",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "167c5bca-c3a6-4c55-88bf-ae083a305f85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5d71472-9554-4b5c-9cc0-858551cf86e4",
        "cursor": {
          "ref": "8e538b6d-546b-438d-8a74-d2b3051364c1",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "9e8c9e62-d25f-43ed-9910-313fad78c4aa"
        },
        "item": {
          "id": "c5d71472-9554-4b5c-9cc0-858551cf86e4",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "5cdaf1c3-3b98-4e8d-8ca8-f4bce2021b7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a95670b2-f398-4056-9007-8c6d7c856150",
        "cursor": {
          "ref": "33a68a51-06db-4afa-a368-e04a10915c46",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "18cf95f1-1cc7-4183-98a3-76ff945e393c"
        },
        "item": {
          "id": "a95670b2-f398-4056-9007-8c6d7c856150",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "78cf232c-4d4a-4856-91d2-acea7542785b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4bb6212-9305-41fa-9685-70e96716df67",
        "cursor": {
          "ref": "72253770-7168-419e-a989-bc73242e4a31",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "91a87ceb-3d23-41b2-ad0e-df768d348a21"
        },
        "item": {
          "id": "c4bb6212-9305-41fa-9685-70e96716df67",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "46c0246a-7040-486c-84a7-d82b4c536c0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "131b1b7c-8e2e-4743-90da-135724491208",
        "cursor": {
          "ref": "b02c3514-127a-45fb-a446-e5ff3e5cf480",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "5fde24a8-6113-4752-a6ce-5c873d6f82b8"
        },
        "item": {
          "id": "131b1b7c-8e2e-4743-90da-135724491208",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "15c5a438-6892-41f3-93bb-5d0d63b450f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ff14fa8-fafb-455c-bd75-ee853c41d14d",
        "cursor": {
          "ref": "5a030b5b-cbbd-47d8-827d-f9a490c90464",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "c57657cd-01c2-4d3e-99df-5b4adc39e7f8"
        },
        "item": {
          "id": "3ff14fa8-fafb-455c-bd75-ee853c41d14d",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "11b70aca-b8b4-40c3-855f-a9a6d9b87b98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90f1393c-a161-493a-8357-52a7d98ebe4c",
        "cursor": {
          "ref": "3ab9f5ad-444f-493b-8d52-cb11cc51caf7",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "47b0addf-335b-45ee-a05b-beb2fb409c39"
        },
        "item": {
          "id": "90f1393c-a161-493a-8357-52a7d98ebe4c",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "8540573f-7686-4d7a-8c5d-45bd67a40eb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05bf39c1-556f-4e34-95e1-d4bc3db8580f",
        "cursor": {
          "ref": "1ba74b24-ca24-4fcf-9f56-24e2320c49a1",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "934d2341-98ad-490b-8fc0-11c45df63349"
        },
        "item": {
          "id": "05bf39c1-556f-4e34-95e1-d4bc3db8580f",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "325a3eee-548f-4dba-b83c-5013bfe0f0f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96ece7e1-80e9-4f49-bfde-265fd5ffb0de",
        "cursor": {
          "ref": "93d950de-cd70-419d-80c1-a9c28e68b92b",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "dbf66e86-5f98-4e37-a2ed-d31215d3d574"
        },
        "item": {
          "id": "96ece7e1-80e9-4f49-bfde-265fd5ffb0de",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "377255c8-db59-4ff1-9f6e-3061ac82e3d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2aa7c20-51f7-4443-8843-2c3655d2efb4",
        "cursor": {
          "ref": "7098f4af-2f56-4863-a646-8f49a43020fb",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "eabe4257-02f0-4eab-8413-40350f14ddb9"
        },
        "item": {
          "id": "e2aa7c20-51f7-4443-8843-2c3655d2efb4",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "e9aa5168-22d7-4d9d-8019-728303837234",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef558e9a-d694-44a2-8abd-1c8d51298ec7",
        "cursor": {
          "ref": "860433e8-a769-43a3-8ef5-b6d3add927ad",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "d6f7b540-2637-4dce-a556-e8b052e5cacb"
        },
        "item": {
          "id": "ef558e9a-d694-44a2-8abd-1c8d51298ec7",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ffbf00bb-3ad7-4ccd-863c-7f046349c592",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dee71b9-8c75-4896-8ebd-cafb7b65a37c",
        "cursor": {
          "ref": "c28ab4c1-feeb-4633-b236-ea65788d0eda",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "2b45a420-9e33-4661-9b11-0d27722f3ad4"
        },
        "item": {
          "id": "1dee71b9-8c75-4896-8ebd-cafb7b65a37c",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "663e73c5-09e8-4a7c-b915-4032a55eeb7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3d63c70-bfa8-48cf-8cc3-f293e44fbac8",
        "cursor": {
          "ref": "52d99d97-3733-4014-b02c-4a0a78c76ce2",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "4aa1d439-c9f1-48ae-b7b3-6b4362575c22"
        },
        "item": {
          "id": "c3d63c70-bfa8-48cf-8cc3-f293e44fbac8",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "b5d8a25b-d863-45e8-ac85-5618b8b00982",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c2ac94b-f989-4a93-96e1-c258152fe945",
        "cursor": {
          "ref": "c77003e5-28ef-4d21-a1a1-74b18587b2e9",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "ee72ea81-2801-4d98-92d0-d425004a75fb"
        },
        "item": {
          "id": "2c2ac94b-f989-4a93-96e1-c258152fe945",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "b1e25a8f-b87e-40f5-9f08-22700e9f1c06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0a3f463-8f63-4583-a216-56215dfcf5cc",
        "cursor": {
          "ref": "cd33ef2c-febc-4f30-af0a-c7837a3e2ff3",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b5b586d0-7453-4e2e-8b16-f88d7d68449f"
        },
        "item": {
          "id": "e0a3f463-8f63-4583-a216-56215dfcf5cc",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "ff2c4520-71f5-4048-bae7-d3c0b0fab3e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b391908e-8548-402e-b133-52f70ef8d8f7",
        "cursor": {
          "ref": "eee03a02-6f4a-4e75-bba2-b23360d36309",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "2f497345-c2ec-4d87-824a-84ded8e2c74b"
        },
        "item": {
          "id": "b391908e-8548-402e-b133-52f70ef8d8f7",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "b11136c1-2109-4c9f-9bfb-9f20022951dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e43d4a1f-1cc1-497d-8d9f-024b1786803d",
        "cursor": {
          "ref": "ba411078-27dd-456d-8f2e-a95e0e276f59",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "4acb083e-1825-4981-baea-1867db4dcefb"
        },
        "item": {
          "id": "e43d4a1f-1cc1-497d-8d9f-024b1786803d",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "8e4e6bc4-b4ca-4bb7-9281-d597b60e462b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bb8b81a-4725-4713-a6fd-d5f28abd7da3",
        "cursor": {
          "ref": "2754ba70-5bc5-4ede-9ccf-b3325a2b9927",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "ae3e21b4-9b99-4a77-8fac-86564252d007"
        },
        "item": {
          "id": "3bb8b81a-4725-4713-a6fd-d5f28abd7da3",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "417e424c-4f6e-445c-9f90-0eb7c7fcedd4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b181b3d-6224-4d4d-a1de-7d596017f195",
        "cursor": {
          "ref": "6b7eca65-3328-4ce0-97bf-e3aaf551e473",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "45ba8f16-74c5-404f-89da-581b08d216b2"
        },
        "item": {
          "id": "3b181b3d-6224-4d4d-a1de-7d596017f195",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "e2bd3036-c544-4b81-9f54-c1f2eeee3d6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeecf4e2-e589-4c30-8af6-867dde69ddf0",
        "cursor": {
          "ref": "6191d7e5-7ff5-4450-8f4d-6884440427c5",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "e7a0ee19-86b7-4fc1-8b40-4dc5d65d85e1"
        },
        "item": {
          "id": "aeecf4e2-e589-4c30-8af6-867dde69ddf0",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "ab60682f-40c0-45cf-96ff-bd6f43fddbeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd466ef1-0dbd-491e-9c01-041b34e2552d",
        "cursor": {
          "ref": "81766a3f-3805-4d80-a812-1f6a9e03ba44",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "0f327ac4-bd70-42e1-8dfd-b2a1fbdbf87c"
        },
        "item": {
          "id": "dd466ef1-0dbd-491e-9c01-041b34e2552d",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "628db74d-5ff4-4ddc-9ae9-a21a12a509a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94bc0b9a-80b5-4718-950a-072fff0c4a5d",
        "cursor": {
          "ref": "1f6b2f4d-0d22-457f-b15d-91cd116f374b",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "02c1805e-2406-46b5-9b50-793a701008a5"
        },
        "item": {
          "id": "94bc0b9a-80b5-4718-950a-072fff0c4a5d",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "9b9f0743-a14e-4a31-8546-f83b7f326218",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbb9ffcf-dfea-46f7-8fb3-01af836171c2",
        "cursor": {
          "ref": "676deadc-ed86-4ff4-86b7-8db55f238acf",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "8614da2e-4764-4137-83f0-6f0f6cc2b0cf"
        },
        "item": {
          "id": "cbb9ffcf-dfea-46f7-8fb3-01af836171c2",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "25f15aab-64fd-415e-84fa-75ea97b5361d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad10289d-46d6-40e5-a8b8-86320206b7c0",
        "cursor": {
          "ref": "17c50b62-d3f1-4798-8f25-b8b22cc7c0a7",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "b92d9cbe-6bf5-4b72-8f51-d980cbb2b903"
        },
        "item": {
          "id": "ad10289d-46d6-40e5-a8b8-86320206b7c0",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "f1900b40-86e1-4945-8e2c-88d10c2a976e",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "9528b8a6-0d60-4183-abc1-830577c6b538",
        "cursor": {
          "ref": "f3e09203-2e03-42a7-bd27-10e85eb4e80b",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "54f5c3d4-86e4-4817-8b2f-8920df558557"
        },
        "item": {
          "id": "9528b8a6-0d60-4183-abc1-830577c6b538",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "51a1d37b-5deb-42d6-9b7a-215b8433894d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff1c3641-ea17-4e35-a44d-7abbf61dfba9",
        "cursor": {
          "ref": "53b075f8-def7-4475-9f13-2232171cad7a",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "5aab988b-d42d-45ff-9f12-a81f35cfac0e"
        },
        "item": {
          "id": "ff1c3641-ea17-4e35-a44d-7abbf61dfba9",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "4e4c87bc-50d2-4c23-a8a8-228a015fbc6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5f27631-4455-4a1c-9be6-70232c489c2e",
        "cursor": {
          "ref": "2ca15fcd-1cdc-4003-8f13-b707f4a00197",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "574c6d57-5543-4833-b871-13b9b1c1e8ec"
        },
        "item": {
          "id": "f5f27631-4455-4a1c-9be6-70232c489c2e",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "5ab24b31-11d9-4714-b76d-b0e3408f7c4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e590829-948f-48af-9ce8-c8a71c6b6d4f",
        "cursor": {
          "ref": "37f9d1c8-4a21-462a-9b30-8e9c039b162f",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "eabecce1-596a-4b40-8b32-c44236624d29"
        },
        "item": {
          "id": "5e590829-948f-48af-9ce8-c8a71c6b6d4f",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "bd0714b4-561f-4635-af0c-f19e2c69cbeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07b51a35-56e4-4c98-bd3d-ede79948eaad",
        "cursor": {
          "ref": "017811b9-d94c-4f46-8019-b5c9930c3909",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "3f4629c4-9525-4878-94cf-ce1bcd3f79fa"
        },
        "item": {
          "id": "07b51a35-56e4-4c98-bd3d-ede79948eaad",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "ca42f2bf-4ff8-49d6-92c0-948cb7d1c48f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fc96e1e-dd8a-4da3-8fdf-65bf4df4e461",
        "cursor": {
          "ref": "31f2ccb7-ad2c-49c3-98fd-25b508db4249",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "9b5eeeb8-212f-4809-918c-f7218cbd957b"
        },
        "item": {
          "id": "6fc96e1e-dd8a-4da3-8fdf-65bf4df4e461",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "54c0d70e-799f-46cc-bc8b-2583884578bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "311e98ee-e2bb-4bdb-8f01-1f640071784c",
        "cursor": {
          "ref": "dcc03281-627e-41bf-a9ac-33039be27cd8",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "c82ef433-134d-409b-9bd8-70d224ef636f"
        },
        "item": {
          "id": "311e98ee-e2bb-4bdb-8f01-1f640071784c",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "b404d162-bffe-4d0c-8092-02f13da09a4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6be65295-2784-4ae8-8aa0-8ef765bf7664",
        "cursor": {
          "ref": "35805b77-3c54-4cf4-8bb3-50b5d98613f1",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "fbcdee2a-9278-429f-8f0c-7c21529bd219"
        },
        "item": {
          "id": "6be65295-2784-4ae8-8aa0-8ef765bf7664",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "b71d11d3-2f32-4992-b0c6-22dcec299f51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0637aae4-a8f5-4c1f-9977-f8dcfd9b75d9",
        "cursor": {
          "ref": "ca72f7c3-89ae-4800-86de-fc01eaafa623",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "e97da81c-3c9a-4d23-8e6b-d4a938a0dcec"
        },
        "item": {
          "id": "0637aae4-a8f5-4c1f-9977-f8dcfd9b75d9",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "1e2d4e16-00e9-4c3c-9ad7-698d50458981",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18a3e511-a8c7-4e1c-ac77-9e93c30be2ff",
        "cursor": {
          "ref": "a5229ddd-f6bb-4a4c-953e-8d9a8920eb30",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "5e54963c-0e90-4dda-bdcd-6fd235d80410"
        },
        "item": {
          "id": "18a3e511-a8c7-4e1c-ac77-9e93c30be2ff",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "b067e316-fb6c-484c-880c-e8badc87f2e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f95aaa16-a142-4a19-8620-aba9c793d11e",
        "cursor": {
          "ref": "1ea0b307-b36e-495b-8d77-25431fde0bb4",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "5bb1215c-5a14-4b71-bce5-00414a4897a8"
        },
        "item": {
          "id": "f95aaa16-a142-4a19-8620-aba9c793d11e",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "cbb310d1-4cec-47f7-addf-c09c1a179f0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "619edcc8-4749-45a5-ad53-b881e2c6d36f",
        "cursor": {
          "ref": "2614aed7-906b-475c-a18a-d8a5b6f37b26",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "3658e3f1-7cd4-4959-9b61-58dee29f95b8"
        },
        "item": {
          "id": "619edcc8-4749-45a5-ad53-b881e2c6d36f",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "cb63c548-3fe6-4d62-ab72-a18e558bc061",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c44db9ae-cc17-4d65-a6be-b1e221ae4bb3",
        "cursor": {
          "ref": "4edefff9-41f8-42a6-a6b0-4d25940601d9",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "28480f73-0353-4d20-810c-af7be56468c7"
        },
        "item": {
          "id": "c44db9ae-cc17-4d65-a6be-b1e221ae4bb3",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "81599b5d-6a3b-4223-9a49-90ba081d454b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ade555e-c9ac-43c0-8a53-07acf589efa8",
        "cursor": {
          "ref": "17c5cd5e-616f-486f-bcc5-caafece204e9",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "564be9b7-319c-455e-9e6e-a7f64efaa0ab"
        },
        "item": {
          "id": "6ade555e-c9ac-43c0-8a53-07acf589efa8",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "ee247726-a21c-463e-9113-f8b9c3a90e76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a77b5adc-d95f-4581-9009-f36e2e05aaa0",
        "cursor": {
          "ref": "38985ad1-0067-42bb-9ad7-98cd86a93a3e",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "4acd42e5-a9bc-4e46-9c6d-d5e3b3b52228"
        },
        "item": {
          "id": "a77b5adc-d95f-4581-9009-f36e2e05aaa0",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "eb719ab4-38a8-455c-9494-5ae601652e2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51de2601-78bd-49d3-ad73-f0995e2e0e90",
        "cursor": {
          "ref": "8bb3e94d-828a-4c53-b547-ff52c929bdf3",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "23cbb53e-1fcb-47b0-b455-15961041726c"
        },
        "item": {
          "id": "51de2601-78bd-49d3-ad73-f0995e2e0e90",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "d7b743cd-511b-4f2f-9e03-54d993dda1cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8a1070b-4e32-4e7f-9824-a16ecf4c5c4d",
        "cursor": {
          "ref": "8b8f9939-6809-44f4-bd0f-4e29accfd21e",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "d0e1b55d-a8ec-48af-8eeb-9d3cb79dfbb0"
        },
        "item": {
          "id": "c8a1070b-4e32-4e7f-9824-a16ecf4c5c4d",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "d103ca32-015b-4b4a-a4d2-c6c75f7290f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09dea58f-88d1-4f8c-b631-509d37bbb869",
        "cursor": {
          "ref": "d3789870-efd5-456d-99c3-aa037b568d59",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "aca86472-278e-4567-834d-23e270e8499f"
        },
        "item": {
          "id": "09dea58f-88d1-4f8c-b631-509d37bbb869",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "e61825c3-cbc4-4c45-a53a-bfe488a87ca0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12c8f51c-ea6f-4986-a7cf-b69b623d9b56",
        "cursor": {
          "ref": "a8cee76b-4791-477d-b4b8-fd1d9e3e82ab",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "245bbf67-3b03-4026-b3e2-dad25133161f"
        },
        "item": {
          "id": "12c8f51c-ea6f-4986-a7cf-b69b623d9b56",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "473be318-676b-460b-b509-f3a084056821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "401bf81b-46be-4dc0-a462-86a898b2e136",
        "cursor": {
          "ref": "7e93510e-9e75-4b28-92aa-5dc162b6d98f",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "a57ff07d-7421-4cb0-8728-aa13ed043ef5"
        },
        "item": {
          "id": "401bf81b-46be-4dc0-a462-86a898b2e136",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "a5af84c1-f965-4d38-99d2-ed0d12a17488",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7180c4b7-1111-4e4a-bc18-5146f277b433",
        "cursor": {
          "ref": "b6c9bf65-f0c3-4b12-95fd-731df14633a8",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "3192aaf6-44fd-431c-a3ab-9dd806302b22"
        },
        "item": {
          "id": "7180c4b7-1111-4e4a-bc18-5146f277b433",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "dc7824a4-6eef-47b1-8503-cf2d1415cfe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "699b861b-e72b-4242-9712-5ff2bf3ca222",
        "cursor": {
          "ref": "07860f31-2061-48a5-961e-0c5ff514e1ca",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "aff9f5e7-43f4-4833-8ef7-da014488f118"
        },
        "item": {
          "id": "699b861b-e72b-4242-9712-5ff2bf3ca222",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "57b151d6-68f2-407f-b655-d3120adea14a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e76084be-7b5a-4bee-9840-6aa2cf45537e",
        "cursor": {
          "ref": "0104e76e-5667-450e-a7bf-38803b4eee66",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "f4e72223-5ffe-4e28-9159-eed11f08f012"
        },
        "item": {
          "id": "e76084be-7b5a-4bee-9840-6aa2cf45537e",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "c9c0609a-9045-4bb2-9d14-076c8a2e5ca8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6b36e6c-da8e-4e79-b391-0ccd8aad8169",
        "cursor": {
          "ref": "dc33f312-e4fe-43bf-84dc-dd0a9251f6b4",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "191e0464-d217-49a0-aa17-4882cac592f3"
        },
        "item": {
          "id": "c6b36e6c-da8e-4e79-b391-0ccd8aad8169",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "120b4322-c15d-42ab-93a9-07ebb6d7fb31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3638dd5-9615-498d-b1a6-7926f3a76de2",
        "cursor": {
          "ref": "5dfe18bb-f25d-4f7f-9076-cdb7e198a268",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "60a54ac7-8cad-40c3-b159-5f1ff5d2bf7a"
        },
        "item": {
          "id": "c3638dd5-9615-498d-b1a6-7926f3a76de2",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "0ddda748-f1ec-4b8f-b421-68c2727c2c0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8986557-10ba-4df6-8ade-4fc74b23e6d8",
        "cursor": {
          "ref": "0f0d60bb-0ffc-4f96-8e1a-5aa22a1ccf61",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "a32d5176-04b9-4de6-a727-1fea300ecf85"
        },
        "item": {
          "id": "f8986557-10ba-4df6-8ade-4fc74b23e6d8",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "0714e613-cf6a-4b10-9661-35b68e00f447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bc79ab7-9634-41d4-acad-ab4d1f6b2026",
        "cursor": {
          "ref": "26cd52b9-c4b7-4d61-baf2-82639ba1d996",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "5e5714a8-dfeb-4dc3-8cf6-df618eb5d051"
        },
        "item": {
          "id": "0bc79ab7-9634-41d4-acad-ab4d1f6b2026",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "8e7b369f-cb6a-416f-8a39-5e31fbf35491",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21207b0c-c513-4f11-9371-be9ac1fd0bb5",
        "cursor": {
          "ref": "bb11108a-b874-46b4-946b-1e8ec98266ce",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "7ca15c80-85e2-4d3a-9b60-e1d9974890d2"
        },
        "item": {
          "id": "21207b0c-c513-4f11-9371-be9ac1fd0bb5",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "c020717c-541d-4cb1-a678-5118f9b6df32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84ffd155-4683-43fe-87da-cb1751162553",
        "cursor": {
          "ref": "7b59e650-47ec-47f9-a441-775f128792e3",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "685bf031-3a66-422d-bd9e-aa8dc5f49ceb"
        },
        "item": {
          "id": "84ffd155-4683-43fe-87da-cb1751162553",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "a0a11838-d86b-406b-b6e3-dae2dde50c99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f4c3762-b609-4d7a-9f98-3eca75cafba4",
        "cursor": {
          "ref": "bd2ccc81-fd42-44d0-9c5e-bf8be3886bf4",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "40e48588-b5ed-4d9c-a52c-e5e42084d9e4"
        },
        "item": {
          "id": "9f4c3762-b609-4d7a-9f98-3eca75cafba4",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "8a557021-7831-4e4d-88bd-4b40e85eeafb",
          "status": "OK",
          "code": 200,
          "responseTime": 112,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "9b037ca4-30bc-4b63-8735-e87a1137be5c",
        "cursor": {
          "ref": "c8f5dea2-a74f-4a6b-859a-ef1b8a024838",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "1fb061b3-29dd-4eae-8209-1e4f224dc6bc"
        },
        "item": {
          "id": "9b037ca4-30bc-4b63-8735-e87a1137be5c",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "976711af-d316-4da7-8ff9-ec7a8d096b53",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "39a12b2b-ce2a-4c04-be69-018332b787ce",
        "cursor": {
          "ref": "a899a621-3610-49f0-bd1a-738c7127cbaf",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "3398d659-cb4c-4e5c-a922-5ec5c20fe241"
        },
        "item": {
          "id": "39a12b2b-ce2a-4c04-be69-018332b787ce",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "1fa2fee2-da46-4f9d-b68d-c037b0e54108",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "c268967f-13bb-4769-8c78-9d7c419d4531",
        "cursor": {
          "ref": "18673ba5-942c-4262-82a5-3d363a0e31c3",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "66e947f8-01bf-43b3-a24f-e0bc049284f3"
        },
        "item": {
          "id": "c268967f-13bb-4769-8c78-9d7c419d4531",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "f6521f02-fe5e-4d5a-850d-275c67812249",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffe0a306-db08-4cf0-a5c5-fb303d5d442b",
        "cursor": {
          "ref": "1dfced35-2909-40ca-b0c9-f05988c14992",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "4f451a44-714e-465c-9aa5-bc711756d1d5"
        },
        "item": {
          "id": "ffe0a306-db08-4cf0-a5c5-fb303d5d442b",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "9cbe9f2a-2f14-47bb-b77d-a3375738cc3a",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "22ea996f-16e1-4fec-9270-a34e4b8fde79",
        "cursor": {
          "ref": "e96f34b7-551b-4523-b3a1-aef1e0c35146",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "111af7e3-f918-4a8b-9cea-b28c69277528"
        },
        "item": {
          "id": "22ea996f-16e1-4fec-9270-a34e4b8fde79",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "d6923654-52c0-4925-8542-efd9c90eb4d3",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "db21c28b-6a6e-4b3f-b482-bf469244492d",
        "cursor": {
          "ref": "cc841bc2-ee09-4f2c-ac1c-cff0c3ea3043",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "32623858-75ec-4939-b70e-d962acd1dd63"
        },
        "item": {
          "id": "db21c28b-6a6e-4b3f-b482-bf469244492d",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "61e5ff99-af73-4f6a-be18-ff3e475222f6",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "dd38da72-1934-4f7b-a8cd-405f9ae4d475",
        "cursor": {
          "ref": "006ff1c1-855e-44d1-b74d-5370c96cb404",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "ee77b7b3-9b4e-4aae-a78f-546e4505ebd2"
        },
        "item": {
          "id": "dd38da72-1934-4f7b-a8cd-405f9ae4d475",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "46732373-dfc5-42cc-af1a-57c87020dfba",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "f5eeeac2-ccd4-4ebc-a7c2-61852b1223d7",
        "cursor": {
          "ref": "1f6604d4-4d19-4481-ae3c-bbf7ac7ccea3",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "bcdd55cb-0e3e-4d5a-9fc2-2208b6043d49"
        },
        "item": {
          "id": "f5eeeac2-ccd4-4ebc-a7c2-61852b1223d7",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "a2ff9fb5-d335-4a5a-8196-4768f3eece47",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "8abe0398-b786-4a0a-98be-d2f3b84ef78c",
        "cursor": {
          "ref": "36a2fc99-ccc3-4a1a-99aa-fbf4caeb0eb0",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "ff7b5045-5b1c-495d-b628-52e8a00dbcc1"
        },
        "item": {
          "id": "8abe0398-b786-4a0a-98be-d2f3b84ef78c",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "fd89d22e-a24f-4f67-a20e-84afd0479e58",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "c9c82cba-f34a-42ee-8c5a-a65a1fbd1744",
        "cursor": {
          "ref": "f4e4b2d1-6e04-4d37-be77-96a3777d72a3",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "0fdc2fbd-aacd-41af-914f-143e3bc30b01"
        },
        "item": {
          "id": "c9c82cba-f34a-42ee-8c5a-a65a1fbd1744",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "8eaf066b-2d63-4e37-b7d3-8366a18aeaec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a7647c1-1373-46fd-b789-2645fc04f4a5",
        "cursor": {
          "ref": "10f8934f-5665-4f15-aacf-97e3bd492602",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "6e095ead-69cc-4bc3-b194-abd0dbb76c24"
        },
        "item": {
          "id": "8a7647c1-1373-46fd-b789-2645fc04f4a5",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "c099745e-3708-4253-85ce-f9901237f087",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb7084a5-27e9-437d-94eb-2d724c0e8a20",
        "cursor": {
          "ref": "1fd6e11a-ab32-4879-9333-7e125401ba38",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "fb0c9f4a-2676-4902-a7b9-213f5ceb406e"
        },
        "item": {
          "id": "eb7084a5-27e9-437d-94eb-2d724c0e8a20",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "339c3af1-331a-4bbc-9346-b3dba91cb2e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ab981a7-9f94-4096-8ee2-85328bdade14",
        "cursor": {
          "ref": "160d98e8-09e9-4f34-91a5-b6730ea7356e",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "bf319dca-c348-4607-b0ff-21e168159d72"
        },
        "item": {
          "id": "5ab981a7-9f94-4096-8ee2-85328bdade14",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "8225430c-07f2-407e-8301-9e277f5d71c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78425fed-3966-4c1d-8e79-3cb26d9e747c",
        "cursor": {
          "ref": "474804cf-613a-4ad8-96f7-31a32edc0c86",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "6bae39fe-52c6-4c56-9b6d-f10b9046d70f"
        },
        "item": {
          "id": "78425fed-3966-4c1d-8e79-3cb26d9e747c",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "03851e52-c167-4a38-b415-5465d54b4f2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cb0b6cb-63cd-467f-a23c-6e7319b55de7",
        "cursor": {
          "ref": "1069d6ff-b569-4c85-bcce-7f728b205b67",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "d3d384c0-ad99-4af7-a26b-2380b12c78a8"
        },
        "item": {
          "id": "0cb0b6cb-63cd-467f-a23c-6e7319b55de7",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "edce3fe7-9ba4-49b9-9245-509a96df000e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5773d269-819b-4e63-87c9-c01cff60808f",
        "cursor": {
          "ref": "ef53f083-332f-4c98-b965-2568df64e3b8",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "8783fa1b-7358-4b5b-8ce1-93bec9156439"
        },
        "item": {
          "id": "5773d269-819b-4e63-87c9-c01cff60808f",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "aef91bf8-0a5f-4ff6-b24c-e8a77cbe3a70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "348ab4f7-702a-4bcd-93c7-4bd16fa54f91",
        "cursor": {
          "ref": "9a574be4-c694-4b6b-b603-8b5b59e87e03",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "e295fe57-2c08-4938-8c2b-67d88b35be91"
        },
        "item": {
          "id": "348ab4f7-702a-4bcd-93c7-4bd16fa54f91",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "7142c347-bfa8-47cb-9cee-b8e308f0ae18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c05c65f5-c822-4874-ab6f-a0248f079bb8",
        "cursor": {
          "ref": "ad5e448c-3361-4f1e-a64d-2c39f3467464",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "4e41eef3-4e60-4a5d-a7b7-9e0d07456e5d"
        },
        "item": {
          "id": "c05c65f5-c822-4874-ab6f-a0248f079bb8",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "8ae801b4-74c5-4fd9-b36e-8e7e4de4d31d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44f8facd-93c6-4513-9f44-1ee4d9abd506",
        "cursor": {
          "ref": "bc4242ae-9295-4c27-99ef-05c57f9d9fa3",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "a63a86c5-7d87-4765-abb6-125d0f08b3a2"
        },
        "item": {
          "id": "44f8facd-93c6-4513-9f44-1ee4d9abd506",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "971c21e7-576a-4927-a3fd-f53dd38b6316",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7c72cb7-93fe-4978-973f-f05cc9077910",
        "cursor": {
          "ref": "d494b704-d34f-4b10-8e33-c2dd46db3f68",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "c61baf5b-2c1c-4402-9467-549480798ab4"
        },
        "item": {
          "id": "b7c72cb7-93fe-4978-973f-f05cc9077910",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "4a2fa406-8c1c-41a9-9e83-3ffa366049fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a5643db-d028-4ae6-93ce-56c333e9f54a",
        "cursor": {
          "ref": "74b46ad2-f75b-4861-91ca-20a8961b84ff",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "8e33a3dc-7755-4f46-bb29-50243589c383"
        },
        "item": {
          "id": "6a5643db-d028-4ae6-93ce-56c333e9f54a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "3a80ef98-2227-4c81-9646-3f7e39412fb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dee2f80f-0d69-48fe-a7c4-be58dd6c55a1",
        "cursor": {
          "ref": "1c7cfb94-f123-488a-a3f5-aab20dd410ea",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "e898b956-da25-479f-9ee5-611060cf3a27"
        },
        "item": {
          "id": "dee2f80f-0d69-48fe-a7c4-be58dd6c55a1",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "f8011bfd-f6a8-4861-8f80-b5e2b46905b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39f473ea-1536-43f3-ab95-4f7786ca2623",
        "cursor": {
          "ref": "099d3620-82c4-409b-9a54-8e922bb995d1",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "af4432c1-e162-4e7c-81a5-9886efb07c2d"
        },
        "item": {
          "id": "39f473ea-1536-43f3-ab95-4f7786ca2623",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "5c896306-8e4b-4e16-8aca-9f1324229d11",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "a2084c00-e098-408f-9832-6802f1eb97d3",
        "cursor": {
          "ref": "b166e752-bbe0-4833-be02-0e34bc418f52",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "e263258d-2e43-4b0a-8a1b-515b3e3378f1"
        },
        "item": {
          "id": "a2084c00-e098-408f-9832-6802f1eb97d3",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "73834497-3b7b-44ec-baf6-eaaaf1a4d188",
          "status": "OK",
          "code": 200,
          "responseTime": 174,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "a1a0c166-3e72-46ce-b045-3c37d85e2bf3",
        "cursor": {
          "ref": "f68665b4-c9ab-41a4-9861-d75e96a9101e",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "21f556bc-ef82-4329-9bb6-7edafeb4319d"
        },
        "item": {
          "id": "a1a0c166-3e72-46ce-b045-3c37d85e2bf3",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "9691effd-6e69-4fef-8c7c-e3b7f7aabe98",
          "status": "OK",
          "code": 200,
          "responseTime": 259,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "a4a378ac-f9b4-4bfa-a6ac-ca0625acb3ff",
        "cursor": {
          "ref": "a50baee1-3c5a-4a73-9e67-a09e14cb56cf",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "859fb061-985f-4d15-9b2d-79d310e37cdc"
        },
        "item": {
          "id": "a4a378ac-f9b4-4bfa-a6ac-ca0625acb3ff",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "ce943582-091e-4bc5-a128-06f40028d482",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "1db3f742-8e58-4483-b9f7-43579053a03d",
        "cursor": {
          "ref": "13069056-5640-4545-bf7b-e9a343f8f2ed",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "8727a040-a2e4-488c-a19b-ff069a74a91d"
        },
        "item": {
          "id": "1db3f742-8e58-4483-b9f7-43579053a03d",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "f71af511-4663-4f9b-ab5d-33684e872cb2",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "b4a2beb2-2935-41cd-b9d1-0bbfa0d8bca3",
        "cursor": {
          "ref": "410a6f02-98c0-4096-8b4f-7db300ed3051",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "c54f46b4-55b2-41cb-9720-33c212755690"
        },
        "item": {
          "id": "b4a2beb2-2935-41cd-b9d1-0bbfa0d8bca3",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "12f1249f-fa29-4902-b42d-74624cc8a0f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b490bb5-12cb-4768-b743-489a54a17176",
        "cursor": {
          "ref": "a5002673-758a-4214-98bb-9d9bc98743a0",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "db18c1a4-c3a3-4083-b716-6f8b6832118f"
        },
        "item": {
          "id": "4b490bb5-12cb-4768-b743-489a54a17176",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "64e0f73c-a6bf-47c4-bc5b-a0334683f5f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac6ece79-9420-40e6-b90e-3dacea66de7c",
        "cursor": {
          "ref": "1c968865-e782-4b90-bfd6-84effb805e9d",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "1277065b-0125-4d73-8af4-eb1cc8980aa8"
        },
        "item": {
          "id": "ac6ece79-9420-40e6-b90e-3dacea66de7c",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "cfa0d6e3-28ca-41b8-ba3e-fc6bed478470",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c07ca5e0-ccdb-413d-b8b0-9202ed045ba5",
        "cursor": {
          "ref": "405a5d27-2c8b-438f-81cb-1b065178a162",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "8722754c-d8d6-4e70-83c6-6df732cf7554"
        },
        "item": {
          "id": "c07ca5e0-ccdb-413d-b8b0-9202ed045ba5",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "053e7194-bfc2-44e7-8c3c-3a2999802ece",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a42f15eb-b4d9-4c37-b9eb-17077df175cf",
        "cursor": {
          "ref": "d11d9d87-c3b8-4c04-a54f-3e2ae1b44d0b",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "881ac435-4ebe-4126-974d-401902610393"
        },
        "item": {
          "id": "a42f15eb-b4d9-4c37-b9eb-17077df175cf",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "9d621210-9a3b-4eb1-87bd-d546ef5f20af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b718ceb9-5deb-4454-b3cd-011c2575002b",
        "cursor": {
          "ref": "c7a95b58-fdf2-45d7-af63-12b72fa72f08",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "13ab9e7e-fc1b-415d-b433-20ae6fae5cd8"
        },
        "item": {
          "id": "b718ceb9-5deb-4454-b3cd-011c2575002b",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "59eeb005-2259-45ca-b059-33c9105b23bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66c6a5df-5ee6-4f2c-8b03-a1615849a553",
        "cursor": {
          "ref": "c0540348-f912-4bd4-850c-f5bc576615aa",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "5a1df9f6-af2c-4503-b3fa-ae2288ab4871"
        },
        "item": {
          "id": "66c6a5df-5ee6-4f2c-8b03-a1615849a553",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "02597403-53a3-422b-ae1b-37fd08897bbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a77c2e8f-cf49-45ee-976b-2dbb6b2be0c3",
        "cursor": {
          "ref": "bf6e52d8-6ece-459e-ba18-e08c9c1ca366",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "87499cb3-b05c-42c3-addf-920aa5448d74"
        },
        "item": {
          "id": "a77c2e8f-cf49-45ee-976b-2dbb6b2be0c3",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "452b8264-372a-464f-8b8d-6d9fcf69d074",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "012b4cbc-c443-4fc0-b5b3-256659e460dd",
        "cursor": {
          "ref": "9599facf-2c96-4f7a-92df-9883944b2327",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "bc17ffc5-61f7-4e46-b0ee-37916269c87f"
        },
        "item": {
          "id": "012b4cbc-c443-4fc0-b5b3-256659e460dd",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "f637a585-992e-49cc-b5ca-e85ac7d059e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9f770d9-273f-4434-8d9f-f25d189f634f",
        "cursor": {
          "ref": "0de02d0a-f755-42e0-b971-1c42968b2694",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "8e8516c9-8277-41cc-b443-79665c0ac8ba"
        },
        "item": {
          "id": "e9f770d9-273f-4434-8d9f-f25d189f634f",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "714720e8-4994-4a2a-915d-1153c1422319",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b580929-fa67-4192-9dbc-a2acb5056b08",
        "cursor": {
          "ref": "9afd2492-fd33-443f-846a-98a0dea559b6",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "8cdf40aa-4328-42ed-8496-33951ce8ad0c"
        },
        "item": {
          "id": "0b580929-fa67-4192-9dbc-a2acb5056b08",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "274c9a1b-551d-480d-94b1-2579f4bc8741",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fd9ae34-8468-432f-b01b-1377c8c924ad",
        "cursor": {
          "ref": "4c675506-d9f2-4c10-ad48-087de9fbe9b1",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "1aee0667-3b0c-49f1-b4f1-bb91d6c991b6"
        },
        "item": {
          "id": "5fd9ae34-8468-432f-b01b-1377c8c924ad",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "587defe4-fddb-44ec-a609-dfc4c4b8b9b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a14eb35-5d39-4c23-b10e-0eee63866bda",
        "cursor": {
          "ref": "0cf77b5e-ef45-427d-a62b-6f34528435ef",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "d51c7ef7-7e74-48d8-921c-04f72ca191ba"
        },
        "item": {
          "id": "2a14eb35-5d39-4c23-b10e-0eee63866bda",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "cbd25c55-b6b8-4142-9f8e-a3f8e0bbff47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4fc5660-14eb-4d4e-a55b-f2ba5afab913",
        "cursor": {
          "ref": "868351fc-9370-41fb-a201-71d8a00ed3a2",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "9b75e5e5-12f7-4123-93ee-75b2ca9f968d"
        },
        "item": {
          "id": "b4fc5660-14eb-4d4e-a55b-f2ba5afab913",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "ed562818-d012-45ab-b839-0a3320ddaa47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f53ac771-0cb1-4e00-9c2a-a1fb8c86ee49",
        "cursor": {
          "ref": "89aa539b-dffe-488a-8f88-0c3e84db86d4",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "0490b196-63c1-42a9-884b-603abd9d8501"
        },
        "item": {
          "id": "f53ac771-0cb1-4e00-9c2a-a1fb8c86ee49",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "14b86cfc-7eb5-4cf1-9f11-0869fd8a38f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca95437c-e9fe-43cd-85f3-1223ec2efbe3",
        "cursor": {
          "ref": "cb3c24ed-e479-43b4-93f3-ed06176c208b",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "b13db091-98a5-482b-8548-b70e9d718eb9"
        },
        "item": {
          "id": "ca95437c-e9fe-43cd-85f3-1223ec2efbe3",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "f065412d-f563-4965-84ea-cce5e64489ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0567e922-6e55-490e-8c16-5eed04041f4c",
        "cursor": {
          "ref": "c90da1b1-c1a3-4f58-bae3-0983ac31418d",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "ccabdb52-d243-4b86-840d-67f3686c50c3"
        },
        "item": {
          "id": "0567e922-6e55-490e-8c16-5eed04041f4c",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "39a72a7e-9839-4bd3-a1d0-d996e6460296",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fecaf0d9-b222-4e8a-9371-a464e27bd9a3",
        "cursor": {
          "ref": "939b069e-4e90-4928-aa0c-27da71bedc40",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "69ab4226-d1e4-40ec-904f-ca70616e1555"
        },
        "item": {
          "id": "fecaf0d9-b222-4e8a-9371-a464e27bd9a3",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "299f10cd-1c88-4e1e-a005-6c5c77784195",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5969e9c9-763a-4030-9859-c29851590887",
        "cursor": {
          "ref": "8a7d5def-7e3c-42de-807d-b544c25bc561",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "c285c8f8-1e82-4550-a743-e1f280e5ab72"
        },
        "item": {
          "id": "5969e9c9-763a-4030-9859-c29851590887",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "dae4c28e-1840-48fe-ae72-11ca01365b67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d033517f-fb34-4a56-9c09-4fa8177c65c5",
        "cursor": {
          "ref": "63013eaa-0530-49f6-939a-2eaff56ad5e7",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "af0958c9-bd25-493a-86fb-971cdf1e0803"
        },
        "item": {
          "id": "d033517f-fb34-4a56-9c09-4fa8177c65c5",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "9f1a0a50-b42b-4942-b46d-2d3a77f6a338",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ed50a0f-d695-4d3c-8fa6-3ba389565495",
        "cursor": {
          "ref": "0b8830a4-e750-4891-aa19-70c8c087b93d",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "8a18c811-8492-4698-a0a0-1f71897c7bab"
        },
        "item": {
          "id": "8ed50a0f-d695-4d3c-8fa6-3ba389565495",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "ecee233e-d217-44ea-998c-db3a8e5e7dfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21a9262d-85d2-4db6-ad01-6094d747e996",
        "cursor": {
          "ref": "f65e8de2-d6b0-4821-8592-b5b7a6a8285d",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "d3ab5312-7fb8-48b2-a9e1-5275941d016b"
        },
        "item": {
          "id": "21a9262d-85d2-4db6-ad01-6094d747e996",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "66ee9be3-fcbe-451f-bca0-601b1eaf6397",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87f69cfb-3add-488e-986d-fea4cf87bf42",
        "cursor": {
          "ref": "41231da8-1529-4c38-bbe3-6da5ec26c948",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "c0659112-bbc1-4ee0-8566-d587adce0795"
        },
        "item": {
          "id": "87f69cfb-3add-488e-986d-fea4cf87bf42",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "7aecf14b-a8ad-4c14-a9fd-35704f78ee0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e8bf251-160b-419f-9b93-295d111442ec",
        "cursor": {
          "ref": "ce4bd8b5-3858-4992-b278-e2aaa017e20c",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "8f9a52bc-4830-4f10-ac60-fab3501c1e3e"
        },
        "item": {
          "id": "1e8bf251-160b-419f-9b93-295d111442ec",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "483e8443-d2fb-46a3-9964-798ca57c5683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41675197-fda7-49a4-abf0-10e35cc6fd5e",
        "cursor": {
          "ref": "b300c962-d3c6-44b2-b41d-c10f4393e71e",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "7fa72e33-732d-4eb0-bd67-5f3e92138bd4"
        },
        "item": {
          "id": "41675197-fda7-49a4-abf0-10e35cc6fd5e",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "ec9a81b8-dc62-4c8e-8db7-87c6cc80a08a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac00bdf4-6852-4e97-b223-f7c1d429ec90",
        "cursor": {
          "ref": "0d169c3c-59bf-40cf-8ac0-394a7af7b45b",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "4ae0ce27-50a2-43bf-95f5-ebb56ac0cb2e"
        },
        "item": {
          "id": "ac00bdf4-6852-4e97-b223-f7c1d429ec90",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "d1b48016-6aea-4c74-ae67-0fc427e4e5c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "537c5066-4985-428f-9bb5-6743b9f73d35",
        "cursor": {
          "ref": "bb6cf633-7178-4344-ad9f-4691c668d925",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "75b951a3-736b-4df6-ae65-bdb772e382ef"
        },
        "item": {
          "id": "537c5066-4985-428f-9bb5-6743b9f73d35",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "881f44bf-58fa-412e-b726-f6b60c5f5ecc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d207da9c-2220-42a9-a75e-df7eb11347e1",
        "cursor": {
          "ref": "bd31cce8-3630-455f-8b2a-2b6dd5caca73",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "e2d4f269-7852-46ea-b008-d77430730222"
        },
        "item": {
          "id": "d207da9c-2220-42a9-a75e-df7eb11347e1",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "9fe283ef-828d-4f00-871e-80da23d9392d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa286274-1317-4b13-ab8e-d862073c9088",
        "cursor": {
          "ref": "8bd36528-d668-4c0b-82ec-0eba39200f0b",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "6f4d02cd-4125-4e53-9bef-17d2822fcaf2"
        },
        "item": {
          "id": "aa286274-1317-4b13-ab8e-d862073c9088",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "6c6b3861-bc0d-456d-badc-2bbabf7d6dcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ec7f75a-0892-4759-bba5-f87a42abbe2d",
        "cursor": {
          "ref": "6dc806e1-28e2-44d9-8c2a-904626ee6e34",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "e34b3a7d-6e4f-487c-a2c8-9cc7dc3220dd"
        },
        "item": {
          "id": "0ec7f75a-0892-4759-bba5-f87a42abbe2d",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "cf684124-0ba8-49b3-8c9a-6a3e9870f8fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9841c088-961a-4eb5-8a4e-e63eec42771b",
        "cursor": {
          "ref": "b856a42a-a40a-4616-b14c-9be2dd3c1e9c",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "5ec9bb6f-265f-4c0d-a336-545f8dbfd4cd"
        },
        "item": {
          "id": "9841c088-961a-4eb5-8a4e-e63eec42771b",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "e05d2bda-6be3-4f0e-a2c1-327be02b6041",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddae6261-6a7a-48bc-9264-f53720dd1bfe",
        "cursor": {
          "ref": "95c02e3c-83b7-4c4c-86aa-a949b990b316",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "bcdea26a-252a-4191-985c-24316c46d440"
        },
        "item": {
          "id": "ddae6261-6a7a-48bc-9264-f53720dd1bfe",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "0a4f649a-0629-493a-bdaf-2d4c5ba48cf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7ff566a-b1ed-45da-86d3-b55371de9037",
        "cursor": {
          "ref": "d6eccb29-70af-43bd-9262-e6fa618393a7",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "f7d56a65-e63c-472c-b978-795c130e7854"
        },
        "item": {
          "id": "c7ff566a-b1ed-45da-86d3-b55371de9037",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "298d57b0-8b60-447f-ae78-ff64b8f6a24f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d162def5-b421-4ba7-8096-65147300a057",
        "cursor": {
          "ref": "33891672-660c-40ea-a441-60f19b9850a0",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "e50639dc-88f3-48d4-bed4-5c5773d3e0c9"
        },
        "item": {
          "id": "d162def5-b421-4ba7-8096-65147300a057",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "2bdab018-a128-4ac4-b75f-d3eae5430f32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c26e1fe4-defa-490c-b26a-65ea45b64d14",
        "cursor": {
          "ref": "543f8ab1-9e9a-4d1f-aae2-bc2f460dcb21",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "b461a55b-c032-4f3e-957c-a52c4b1370bf"
        },
        "item": {
          "id": "c26e1fe4-defa-490c-b26a-65ea45b64d14",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "c0842f81-0c7c-43fb-8add-51b1d73afe8d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b30ac35c-8274-425b-9b86-899e9740c0d4",
        "cursor": {
          "ref": "e1dd8dc3-1632-42fa-aa70-bae371cf020a",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "f366ec19-8281-4a47-b800-106115589551"
        },
        "item": {
          "id": "b30ac35c-8274-425b-9b86-899e9740c0d4",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "1878b48b-65ab-4318-a488-f87e1a9c9a77",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "5c6bc6f6-23f4-4854-9906-3933d86ad0fd",
        "cursor": {
          "ref": "9675d708-eee1-42f6-8204-9d04616f528e",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "6a7393ad-f38c-449c-a820-b77057f3441f"
        },
        "item": {
          "id": "5c6bc6f6-23f4-4854-9906-3933d86ad0fd",
          "name": "credentials_verify"
        },
        "response": {
          "id": "0e11d61a-a8b1-4d0e-9ce6-50cf4292e005",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "11219cbf-e5c9-41a4-89a0-066086e9303c",
        "cursor": {
          "ref": "8493e69d-710f-4b75-b61c-fb2aaedb5dda",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "1a220690-357a-4de4-b33a-d063bf66f64e"
        },
        "item": {
          "id": "11219cbf-e5c9-41a4-89a0-066086e9303c",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "09663582-054c-4509-af53-1e742c626c80",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "73695e35-d2d2-434a-a691-e411afcc15cb",
        "cursor": {
          "ref": "d15bf57d-d3da-45b5-8e38-ed24c4083b48",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "6ea2f662-e55b-43fe-91f2-8d7a72222957"
        },
        "item": {
          "id": "73695e35-d2d2-434a-a691-e411afcc15cb",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4b0613a0-5bbd-499f-a051-2b14eb793f1e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73695e35-d2d2-434a-a691-e411afcc15cb",
        "cursor": {
          "ref": "d15bf57d-d3da-45b5-8e38-ed24c4083b48",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "6ea2f662-e55b-43fe-91f2-8d7a72222957"
        },
        "item": {
          "id": "73695e35-d2d2-434a-a691-e411afcc15cb",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4b0613a0-5bbd-499f-a051-2b14eb793f1e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c344eaef-ef5b-4218-89f8-c7d5dd34ec53",
        "cursor": {
          "ref": "da120859-e45b-49f4-a35e-56277fa83af3",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "56e51f79-8d05-438e-9a06-524ce1fe199d"
        },
        "item": {
          "id": "c344eaef-ef5b-4218-89f8-c7d5dd34ec53",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "1a826c45-b469-441b-8c77-df9703f1e9dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd167f40-af55-4ee3-aa91-848034a4aca8",
        "cursor": {
          "ref": "6123224e-db25-454e-983d-2a9da02f275f",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "d0751637-685d-4a7a-9062-ca810e725be7"
        },
        "item": {
          "id": "fd167f40-af55-4ee3-aa91-848034a4aca8",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "55335d0a-597b-4050-8026-6e4bd916604f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}