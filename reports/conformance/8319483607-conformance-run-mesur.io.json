{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "86a5efcf-ad81-4755-94d7-d316a6a4b0af",
        "name": "Clear Cache",
        "item": [
          {
            "id": "7d727e6f-aa69-4175-a7a4-185b2ba58075",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3813bbb4-b6dc-4321-9629-43997b8fd9ba",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "aab935aa-e702-40fa-b17a-3aa0265143bd"
                }
              }
            ]
          },
          {
            "id": "a92da795-c33b-4a7d-8490-06b06504d3a8",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "06cd3ea4-6bcb-4cef-8c3a-f06a2fe2209e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "b42b9c9a-71e4-432d-b48d-b1513eb57269"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "d3eef595-968e-4614-a893-03dbbac56571",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "56ff6b10-1902-45c1-97a5-53c52044e6f9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9922dd4c-d3a9-4b1e-98a4-735495aacb8a",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0fde147e-0664-4ff1-94f2-ed32408ab8e7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a82260ba-e8c3-4f2e-ba9b-afabb226101a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "78c86b28-d48b-4d54-ab5a-295c886f010f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "04aa3934-4224-48d5-a940-00fffbbe916c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "78c5f5e2-db6f-42da-b543-260136f3f3b3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d2d8ebe3-4c74-4e6d-b5be-a1e9e3348595"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1eb69f80-d119-406e-bdd2-65fc9c137d46",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "ec12efde-c396-4648-81c3-a6784292e4e0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "994b2ce6-4ba4-4277-a71b-c7c4b14df2a3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "64b00be4-0bc6-4ec9-9bf8-743578b32692"
            }
          }
        ]
      },
      {
        "id": "c4a4ae32-e70b-4447-a9fb-6ebbf6247795",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "385e56f7-7e62-4361-b8b5-61191d97ed98",
            "name": "Negative Testing",
            "item": [
              {
                "id": "69c01315-a68a-4ad5-88b8-149803631ab1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d31b93e3-b891-4e17-b321-10fefe626b9b",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b3d95bc-5d35-4c88-8dc1-865317d6e2ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "adce31cb-c1fc-49d3-a9d4-d2fe6b2ec5e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d85e9a7-c86c-47c4-9b42-79a2f4eb144c",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8508dc3-6ac2-4d18-800f-291098c7c708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "74fd8f8f-b771-47a0-82a6-b23a00976db9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70b57f67-24de-420e-8d30-a140f264c099",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeb11645-b588-4879-8b93-1d301ad3bc61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "874c7fb6-8c9d-4fd4-9b68-4061dd5322c7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "13c0d54c-08db-45e8-9de4-e6e02b86ed57",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "05ffd370-8c26-4cba-879c-95b734043147",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "375f489d-2fbe-4296-855f-71e3afae9b10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "647eb36d-302e-440b-b11d-ba154fb352c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a85183d1-3284-4970-b29b-f8f942b48924",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99e15936-27e7-4085-8b78-0630389b3188"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ef2c44a2-58dc-45f3-ab82-1fc7a5eea9b1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "751b3d8f-30df-4a50-b48e-e9163f2c3e83",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "22b1b988-1c0b-46e6-b1da-e4c4d7b4bc3f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "bbfba0fc-6e47-4dfd-8df6-6b0aafb6002f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ccb3264b-0187-4c13-ac18-048ad0b9c6e7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "100a5f9c-81d2-4bec-b4db-9297f5005448"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7a4e7170-2576-48ec-8de6-0ec8c9cf6b19",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a9934f21-89a6-4c6b-ad9e-e223636a3520"
            }
          }
        ]
      },
      {
        "id": "ca0545ad-e714-4c84-8b1d-6060dc52ebb5",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "0843ff72-4048-478f-889c-cea8db43081b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bea6fc3e-f3ea-4f3f-8a75-a071acaf9185",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "b70dfed2-74a2-4681-89eb-cdaa49d38969",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4bf08da-a0d6-4e93-9a29-abb7928af5dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a21a0e50-18c7-43f4-81f6-e8530174906f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11dd644d-72ad-402f-b1bd-0707f283e917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8487ee63-50e3-4b16-86e5-bce7397818bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a144a079-adfe-4c18-9b7d-63e33121f228",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6995f3b-02b2-4954-8e11-8886c5853dc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fe748bf-3800-4416-bfb7-77766a0427f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa25babd-2df1-41c0-a6b5-a642d2d9ce12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "74c342c3-15ae-4227-8c73-1a969eea81db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4bcb338-fd63-4159-9a0c-8edf49afd541",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4deeea21-17d2-441a-83a4-6c47947898cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3870c108-206b-46c9-bf9d-6eee39466785"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e535a78-aa8f-408f-9c5d-102a36f6a927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ed01b934-d70e-42dc-b975-5eb02bc8fe88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e3b5370-c169-4a2a-8e1c-705a354a9770",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9932f20c-34f3-405b-928b-cf73284d9882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63001fa0-fa63-4053-9ef8-7e6244725495"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f307a560-f093-437b-9fe1-033e49913b1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "16925fa6-aa81-4e52-ac51-be54c044c719"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50985c4d-fd9f-4488-bfe7-2eedd4da1dfb",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4304517e-cfdd-4003-8efd-da70bbb44469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad5c43b0-197c-4f5d-b615-93bdbd3e41bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd8b776f-5119-46f2-9dda-f834b9e6e392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f16e377b-54b3-4e68-a074-2a0e5069ec88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ef73646-2784-4ad2-a47d-fee1c6be4665",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8165856-4eec-4614-b821-8f8696b4c865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9958284-6815-4bed-8744-32845ef5999b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bd2234f-0670-4912-b61b-770425a8be34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1bf01419-6e38-426c-8574-e5b3c0ca5f3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a781d93-9f00-4a7b-9e4c-63bdffc5d5a0",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0567deb-5534-4e4f-99fb-bcbfebb41465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8adc889d-c7ba-472b-a2c4-2a2679ca9c4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54f197e0-5587-4c57-92dd-63591fac1056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3bd45f9b-7a9c-4b1f-9389-e4e235146b8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67f06d01-2e40-4d7d-b5d0-35b97e1a9425",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9565c34f-62cb-4d64-8074-e63de54b70da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afdff566-a52e-4cab-a300-260a7a8fe001"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51116b06-34e7-4767-9a18-25157ba9461f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7665c787-564c-40f5-bcff-69702d6d2f7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8027fca7-b1e5-49c7-81fb-74ccd4c3d1d6",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "928aefdd-2072-4105-863c-c65502da5000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7edc5aa-8514-40bf-a41b-dcf0bd7df5d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "572829fe-e8b3-4b70-81a1-9a861b61a1eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "949afb9b-95d1-460e-ba44-e88383279f70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3e31a24-a09f-479f-a83f-0b5db5ff31d0",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01d9f3ad-ce2d-4377-a625-93957369193c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78da4265-89dc-4aff-8e81-bca1b1713a73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13ca6cdc-1d85-4518-9118-a49da7464d85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "92090c1f-3a27-4bd3-9a5a-5b8e4828900a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f40cf297-b98b-4f4b-a258-ed914a0f5158",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80a0aedc-ca13-43d6-9da9-a7bd2409bd32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23ef8dbf-d3db-478c-895d-83416261e65c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36e2d7ea-3ed9-40d7-9127-6512733ca76f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d2f8797-ea3f-4bce-a3d0-fda216193294"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94ebd16c-b683-4995-8f54-c5e910244afa",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d80a0c1-b66a-427c-ba2f-1ec79a36de88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24a686cf-cb83-4521-a06d-26a625b7186f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b29ad3d3-d8e7-4dc5-a454-378fa18c7963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "834f6f86-59dc-4b18-ac27-e759203e1397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53e311ea-ca31-455b-b73a-08653299d302",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "748c859c-cb56-4d9b-aba1-3f3594be2296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9624d9ff-602f-4b23-8a23-e1eda38abb1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c765c627-bf03-46af-9346-e724e9182ff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "53e25256-3ed7-4ab7-b77a-f647a33f48a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48a3861e-830d-4593-b0de-206685907cc1",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "554f088c-0667-4f1f-b53f-cd7eb73f1212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fc38537-c771-4d31-84d2-eba20b7fb9c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1d305cb-a223-473d-a684-c9e89c384c6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "99b222de-be58-475a-b3d7-a54a5c3108e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3d5b5a8-fa26-488a-9738-2c2c4b9b598b",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e3fed1a-71c1-4945-bef4-dda95e7dd8b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8514cbb8-4372-4c33-97f1-164d5a704bb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33453735-d0b6-40fe-842d-58de4ad11f27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eb47ab03-56de-46a9-8570-92f0ee174840"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38042f15-ec8b-4425-ac5a-cabedc4344dc",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5344e20c-e473-45cc-801b-c5b347e97733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f96b8e9-8162-42f5-a389-b20680252d29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb029fc6-60e4-41c4-91a0-2ae48f327ecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "99ba5f17-d5b5-44b2-9b60-921d6842f169"
                        }
                      }
                    ]
                  },
                  {
                    "id": "543cf7f9-97e4-4d5b-9674-0746117e36ab",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81524c5e-0b09-47c1-9ec5-068d6ffbcc5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e53cd19f-b41d-4054-aafe-69a474b22ea3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae64590b-c15d-43cc-8865-982f421a9f1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5b96a2d9-f628-46db-8a04-c35f4e66aa06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fef3a2de-8a1e-4d24-9b8f-c6bb05a71efc",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55c44729-d93f-47d6-ac62-4a2f7111bcad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5f69046-8efc-41c7-b5ca-272275b9c97c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc803587-af63-446c-9575-75e0326a0726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "26a2fe20-ea15-4e92-a135-608eef52a136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e27e5bb9-4838-4873-b7cc-3bced3aab807",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74369a15-98b9-4f4b-ad3a-dbd08ded9242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33e50145-e0fb-4783-bfc0-1ba5bbc85dd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1f3437d-024a-4f72-bc7d-6aa664190302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "23ee00cf-0d03-42d6-b17a-51fcf34614a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f90ce737-1c44-4967-90aa-21b62006ad3b",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9d1dc9f-b0bb-4c1a-a4cf-fb3fc56c0448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f0bf88d-599a-4aec-9111-f4e8cc31962b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b05b3aa-c665-4809-a4e2-5e37f8138219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f0b9442-4120-4d65-b340-c47cb0b0ec9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4469c0f-ffca-4291-aa7b-e9b807f59cc0",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93b58682-5118-4823-9e4a-b5c5a372092d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e502fe40-8c7a-4f9a-a1af-96c4550c1df3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1e334f2-8b24-4cf8-b02d-908f65da93d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "beec1fde-6893-447b-92a8-671f0ea37cad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96631aa2-a2eb-43a3-9ff7-a4a827bed78e",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15725772-3bc2-4313-a97e-bec8ec94f0e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f56cf9b-4d96-438b-807b-414eac2afeaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c517438-c2be-4502-afd9-b9160633f412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8682199f-1afd-4f3e-b538-e7c17ab07025"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f872b95-ec61-4861-8506-e5b8c77a8089",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "717c6b7c-e047-439b-b7a9-97eebdfa9cfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3ac774c-bd0b-45a0-ae41-b3461d5419bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb8fb0d0-9948-4572-a7b2-66adc3e1a0af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6f176fc4-caa4-4270-9202-659cdad6759a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e73b191-371f-469d-85fe-e2c09cd3f506",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f86d2f75-f6af-4ab6-b23b-3ed91820872c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4686f13b-1956-491a-8a61-1f953cb95555"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e30ee49-b601-4975-86a4-ed1359ae3724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "428de178-002e-4b2e-aa57-89bdb4e7dfcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c336a407-e482-468b-8289-b0d9572390fa",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be0e9983-e458-4c29-bd8f-de15017ec6e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffdf55aa-071a-4c6f-8891-beb3bd36400f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e68ec0f4-821e-441c-97ca-f10189fda5a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "219250fb-beec-490f-a16b-be95717ad159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e620d42-5d04-4be6-9c0e-0249105fead0",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19eb1254-38ae-4c49-9616-96f52b097a3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6750246-7462-49ab-97b9-c07aa1b19aaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86d46a7d-f315-4c6c-a44c-e7fb44fe9413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f6373d0-efd5-4006-a288-a460caff097d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e37cc60b-e31c-4e68-bb09-7d8158565fb0",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56be6447-1f0b-47d0-a8af-dc52be034c37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3715a19f-fb8a-450c-87bb-73cd16bc1ef7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b19a5574-9a71-4a3a-ad37-0f8aa15225d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "773eb89e-9b4c-4c03-a28a-012a71734107"
                        }
                      }
                    ]
                  },
                  {
                    "id": "720a9ab9-662e-464c-b4e5-2ebd3d03bffd",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb68003e-525f-4904-a44e-4c51156b55e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbac5074-4d98-4424-8de4-ded55dc5d657"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "239336c6-b773-4c21-9338-ad7d09a3482d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f570c10-8aa3-4658-a325-08d0e11ece42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f5cd84a-63a1-4a79-8fd2-750f579f7227",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "278b1e72-d163-4b2f-a3fa-1f6ac5b644e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cf93ccc-9853-4f46-96bb-c8cd2298d605"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5803fea9-eb29-4805-a629-99430f219fd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "23ac5d39-7e62-4296-8f6c-0e3301c68a3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4ed4960-7b01-4317-ac84-0b40cb1731e2",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a55750ca-6e00-4efa-88ee-0868d061a044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6b5a370-b2a6-4098-a057-eb3c9bb6d46e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e68f03ae-447b-43a8-8288-b78f9c7c2f7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "d815b534-a9ed-4319-8eca-abf4aecd31ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb681e70-53aa-41b0-9514-29cb18aa8709",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce4f12e0-35b7-4129-9ed9-7d91442ff367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "973f7231-7f53-480e-a7b1-b42a8527820a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a279f521-4216-459b-853a-50ed26ee09e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "de8b0eb0-11db-458b-9eea-1ef59981d263"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29a129d9-c426-4225-b264-e25cbfe9af61",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bddadf4-6c07-412f-bf1a-eaf1d8dd6e1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ef10d87-5440-4d86-9951-0a1f1d6eaa33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "086d3449-ffbc-477a-89ca-6d43bb73a6dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc7f30e5-93a2-41f9-a769-c76af3aab301"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d44b9e44-9855-498f-b6b6-013e6a517054",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9176edfd-129f-4bf5-90fa-4730ab721349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b682c15d-8b7e-4dc9-865b-c77911572248"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38080273-7099-4670-bef9-435c71f428db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e498d5b-e852-4dad-b2b9-664a25895167"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24fc195c-9eb2-44b1-802d-e2e5ff6bedfd",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ef7835b-f836-4cdb-87a7-268a7e2229bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f01d5bc0-ac6a-4fa2-a641-cc3c093ee02f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bc3242d-4880-4c6e-b452-0bbdb98d0887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "790e7852-9a44-440b-933a-1a8b6d144d16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "147cb14b-dd6d-493f-86b9-dbbce709c3c1",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3277294-daaf-4c29-b294-6b5fb40a38e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc94021f-10aa-4091-b773-99e05ddd97f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e3e7957-e04d-47b0-af9b-41e82d562d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "1bf5a34c-ab52-4b76-a430-f55b83908a28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3830d638-4d8e-4371-b1c9-60d031db7606",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65c23595-7b41-45c5-8beb-ffcedc6b9d1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c3c03d2e-67c4-478e-a9b6-4b46dc00a9a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c07f5894-942d-455a-b6e0-1a13f62ae49c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1fd1d88a-94a0-4b59-8de0-690747683696"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaf309c5-fb7e-4332-913b-0f2f0af14682",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2eb2f74-1588-4d31-925f-280198c1f22d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b33075aa-1310-4adf-a699-2871611266ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1c7a769-d006-4da2-a3f8-e4790c2e59bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b89974f9-d329-47f2-b33b-4e98f9d71ccb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdd30b5e-bff3-4407-b1ea-9907f21dd599",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf1dd43c-39e6-42c6-81b5-a8e8309d77d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cf243e1-5aed-479f-8467-6859e612c5cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a40a9428-d74f-4e86-96fa-f62eeca7ce99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "31a92595-3179-4b0e-b550-a2e8387663c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc567fd0-f02b-4713-91fb-3ceb4f41690b",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8fef2fc-8d8e-4696-801f-37d3d35c6b50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "701183e2-9bd9-4e55-a841-924a4116df7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b3d4e53-7874-4b30-a221-be6b9201deb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3c6127f5-0a4f-49a9-80ba-ea531f4839d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "248c27aa-d87a-4eea-8dd0-88bc3bed6e3b",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5be58f79-c64e-4f7b-be91-89656883e969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89a40e3c-c96d-4f30-9ed6-98cb1a0b923f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "722be81b-3e8d-4e4b-a058-1e2ef175521a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4109975f-4b40-420b-8c5f-e0e3c3df6f62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa0697ce-18dc-4ba0-b629-9554db1fefbf",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebb4d6b9-7f2d-48e8-ace3-d213e954e4ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e23bc154-bd56-4395-9b3b-764681d995b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4f857ed-00d4-40e2-87c0-4d8eb32aa246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0f976d1-6130-458b-b186-0a387c24ec40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1b8b9bc-673e-4ab4-9fca-462359745faa",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24e9b1e4-c22b-4050-b8c2-26885d724766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a9243a4-94a8-4733-b366-5ab23a7b5505"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb36f902-a1d4-4aed-90e5-4c0a7791fa28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "e1473a70-b4f5-487b-87f8-ede50ebd9441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f7a5fa8-4207-4b8a-ae78-3d6ab2b904ca",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1f88266-bd5b-4866-95e3-6d7c626c2407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7e3f599-8531-4562-b0b5-29a49f4543bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4371802-9722-4149-9847-2d6fa96d3373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e3b48aeb-d499-43b0-8bb5-e4fa7905c85b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "694ddf69-65a4-4b81-ad39-2ead7551feef",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "885510f8-394d-487e-b1ce-9359974aa722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "477a44c1-8d2d-416f-8358-f59deda5a77d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "179631fe-a20d-4bce-bf28-5d9292e482bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "23453e97-a8e2-4cab-8836-278cbeb27f16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaca4bb1-589a-4d0b-8b36-9aaafd5f0f44",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d736e25-59d6-4978-886c-9379670ffbc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e40cd65a-0502-4c84-9120-e977a6684fe6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63d9086d-a675-4fb6-bd6a-9d80f5b269bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7390c387-aba5-4dd9-bb13-94322257f80b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "880830a4-7ed9-4844-811b-7b7bde0b526c",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d6ae09b-9c53-48cd-a11c-e005299aa7df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ec3b147-612f-4b86-bd7a-392490f150b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70c3211f-4b15-45dc-a8be-a9e53e3a6c26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a575463a-907c-458e-b31a-53aad4b50866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "388f9a55-4ad9-4a3b-9f91-ff6d6b1702f8",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "531144df-b2a6-46d5-8d60-b90ba572320f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38477387-9510-4f80-b771-011ce2e1508d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4df96b77-be64-41cd-a86a-e412e66ee862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8bb4244c-cf32-45e2-8809-fd34b12dd882"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caf61ce3-8170-4306-b3ed-9c0a3afceee7",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93f314bb-1802-46ae-8915-0519469b4e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "815bdcda-efc5-42e9-ac9e-c2b6f294725a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eab6185-8585-4c47-a977-382dcf004773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ac85364-1f91-4744-9cac-412803cd1932"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0d8fce9-8c7e-4430-95f6-68d05a169d78",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7236f08-9f4f-41b0-9abb-d38e9cc7ca3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb904561-edb0-484b-a40e-19ac4b0cc170"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c28c1e5-e397-4b1f-b258-a4910834c3f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a0a129d3-5048-4bfe-bc19-922361228bae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f36daa4-6e00-45ae-a8ce-3cf6ffe0c10c",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00790529-4078-4015-b35a-8dfe69f9a057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14726e0a-6924-47b8-a8f9-dcfaa711330d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbba4c94-8511-4f0e-b828-850e0a1bf27e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4ca1e5fe-833f-4118-9957-7f80278e3934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1236b90-eeef-4d07-88d9-a709b808e580",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3030c5c7-c608-4ea9-9115-78e242ffaaac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80fc2421-af4b-4138-b6ec-72929ae68d6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "621bf5c4-a464-4c10-91eb-2550094b3b96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6b54f6c-d030-41c2-8405-c1686e7a8742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca4c6c18-a75a-4ab3-a548-fd245ca6a491",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "722dfc60-16e7-420b-8ef5-2f7dea0c9de2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4137d420-2481-472c-bca8-a667cce7ff0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caa80f3a-d010-4138-8c8f-14b8f311a594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "afc5f148-d85c-4de0-b92b-71a5c7e36b79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83252f64-b137-47ac-91c7-d517ea39cc52",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdef262d-0390-4622-bdbe-2e6051bd4407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9fd8cb7-20d6-4542-aea5-b4c740533fee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86052cd8-a2c2-4fdb-ba79-5c58f26082b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd9ce252-238d-41e8-a342-ae7beb656262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2819d1c4-1c4c-4b75-b292-b9a4a63e874c",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6add35f-0f94-448f-8c41-db76e02f452d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c03ea67-19ee-499a-8130-5d8d2d2aa715"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c12a7a7-7d1c-47fa-a351-e8202f9a46d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6380112b-42a2-4b0e-bb60-60e5c15c455c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a13728f0-19c3-4dab-a32b-2bf67509b3de",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0105e685-1874-4adc-9722-ba76dd101b9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edb4974f-645f-4c51-b20b-51d4da18c637"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6792992-90ee-4bfc-9570-511b9288d8fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "99e45bb8-332e-43e9-a546-b6281ef3062a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f28a512-3e11-4da7-ac21-4835d5237b09",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3236ef91-c2eb-474e-907a-274a47a12359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76981d75-23d2-45ed-9da5-39d23ac93aef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87ba05c7-2dad-490d-a604-d0114a3ad8a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "d40ce393-21c4-4ec6-a767-03b8ed42aa4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5336e5c1-0486-413f-ad09-67676a975e0a",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "965326b2-02e1-4331-a77a-3bd2095ce0de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a0a293c-17fe-405f-97a3-418a49dd6896"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bf0f760-7467-407d-93f7-c1913223788b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c5dfa094-8e42-4a06-a2bf-97f02a760f80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8c4b7fd-293e-4aec-98c7-1a5bc5d5660b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6443e0ac-c381-4527-af23-a1622ca04dda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c90a46f4-d7a5-4877-adb9-8d086dcac22b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69f25703-814d-4b72-b5e2-39b74fd23af4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b01d91ad-f4cd-44a4-b400-d33bc8c32a03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83878593-dd50-49b1-9619-8d26a9fef3d6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0216cdf-185c-47b5-8c9d-19da77723676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9005767-ae9c-4e06-bee9-6366127051fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "272f0a45-63d0-439b-89f0-bc667ed994a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e1f9d86-7f17-4e6c-962a-b1ba1c27599b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc33d1c7-65a8-46e7-9b50-cbbcf404c488",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bccb4970-67e6-4ece-9e4c-362079b7199b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc4d3232-42dc-4b0e-8a77-c4c057c127e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d94800e-93f8-403a-94ee-76aaa4ef789a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "af120d1b-b5d2-417c-9a81-a5d34fb62a8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c76d16ce-df92-4250-ab20-7f3a02464e7a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18c5b2a9-6bf2-4a45-bfff-19494c62fca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "830bcc05-bf46-4b6a-ae38-650460d4df95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4099815e-f933-4c3a-b808-7f7c07431fe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "9441089b-e5a9-49d5-b7e5-08db82504307"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d91a8672-4ca5-4279-8d49-faad5f145985",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98649bf4-9aae-4a74-a21c-2b718081a345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7320364-da7d-4079-9b22-8db3ee4109b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "220e2b48-b0d5-4069-a497-0e60ccaa2d5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa73b624-3b79-419f-8eaa-8d37f3443b8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c242397-008a-4a0d-9c7a-35ce70a23973",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87f08249-5c53-4eda-91ee-c01880a7039d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5edde70f-54e1-441e-8988-df5c20152d1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d24c85bf-5440-4480-9fe2-60784fce4afe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c31d41a-bd66-423f-8665-eeb337b5c9be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d88016b-b3ea-48fd-b298-96420390b389",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42f1c752-4454-49f8-893f-be941f5cf12a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d540134f-4f56-454a-b8b2-3d164f8c46d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5315cf66-aa62-4c28-b40f-dad9aec9a6f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "89f73602-29f3-40a1-8cbd-4cb1d3c73943"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c67119a-c652-45c0-92a4-08a4c2695002",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "064473de-1bb5-4867-bb93-2dbf53cf8c90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8094c028-99c6-414d-be1e-faf0cebec208"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49c72a14-adf7-4e0a-8a1f-298d203f77de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "82ffc15f-fd8c-40b9-bdbf-b923da19ad33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d481d8db-4d0c-4258-8d57-cdf43b2d71e2",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c6c1294-2306-4705-af02-e26757d09290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2472f1e-72d4-4dac-bf4b-87b39591a6e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "564343c2-2ede-49bb-bbc8-89e20378efde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc9e8194-be9b-4dc5-b1c3-e80111a7c0ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6db398e3-8a50-464a-a829-6bea1705d29a",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cad042f-9f8a-40d7-85ba-befbf85fbf1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6573ae92-f396-4a59-85a6-85460763e021"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77718b54-ac35-4d2c-953b-ed2429d78498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a18e6920-a153-4282-a5e5-f241c479517c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57a78444-8611-4cdf-8076-f11846cc76fd",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bab9523b-87c5-4af0-b816-a77181333b52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eab91a75-2a2d-45a4-9b93-cde9cb861abb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da75c825-55b4-494d-9689-ccbbfcda89b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e14dd34-a808-4987-8cd0-428c1316aa65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25017b87-f50b-4e24-8600-40860585485a",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae1cffe2-700e-482a-a167-493ae97d9e95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbeff30c-d923-4a8e-9f84-b0a1c7a0dccf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cb9d213-8303-4045-b394-23ce3d4792e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2136881-c314-4911-9e02-08a621eb4b3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d51288a-410c-45da-a2c5-f155d700f935",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc0eed49-3a38-47b9-8253-dd5e997e09d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd820445-5aa7-498c-9319-50570f8b7d77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0264039-7df5-4c1f-86ae-293cfe27c3b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bbc56678-b322-4bd2-a90f-55a0d71ee347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f1ef1d8-ce5f-4768-995d-9bded2885329",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a56cc3ba-e277-47c1-89d1-df4f561d1361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dc2387a-ae85-4828-9905-906f93f4fa91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29bc20d3-5934-4771-af1c-6a4c67052614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba09ac0f-1a91-49a1-b512-841913de3603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fbb8429-4242-48b2-927c-160b81616b58",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ff27a12-4685-4b58-9bc5-98d51c3e1231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e77c1be8-a469-4f6f-b67f-a40d2c1adab3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb2dbbd2-ec7e-4274-b5b5-eff4e8252bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "838917aa-50a5-466e-a86e-b7821d6156b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "184e3a85-08db-43be-bd9e-5f9bb1fea758",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15303b8c-c872-4794-ae2f-87e3e4323c2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2008b2e7-e716-4964-a37d-4b318409b569"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a79ba73f-163c-494d-81f8-d7b680380dfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3fb9cc42-6c16-41b9-b4a1-46d99fcfb947"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a941b35-ed85-46c1-b2f2-0b3d1d472242",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d3581ff-57e6-4808-86cd-e602c2847ac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdfb574a-557d-43e4-acc4-2216bacd5734"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44aaf7d8-2e8a-4050-8191-841131caac65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "98e796e2-85be-469a-b59a-b74a3ae51932"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a27ad27-5b6d-43da-857b-3634b1a65b01",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59cbffff-f407-4b82-89d2-d4ba3605a990",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "207f3050-b6a7-4f1d-9d89-d754207ddf2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55354a16-3e31-447e-9cee-2b29a02b5553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "20e311e8-a21a-40e9-962a-82c4fe1483b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70332277-bfed-4168-bc70-80237f9c8575",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74b57bb8-20c6-4b9d-9a52-582fa524bc5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29edc523-9b04-41a6-b06a-28a6117e9c69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6c4073b-e4d1-4110-bac7-a24d0bc64d70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e81c0a3-956d-47e4-bf70-8b4c63609969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dddbaa5-03f6-4854-96ce-f7976e2c8022",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "887517af-0abc-4d5a-8e3f-5308c798914b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "280d7124-222d-4328-aaf0-b9ca7d1748ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "683139ad-4b3b-499b-8c90-95c38ea8ad72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b9122e9-9bf9-44a8-b095-7a8be6997346"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e9e7ce5-44b2-4e64-a577-5bda85a0c039",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fded6f0-c596-46ab-9fec-24bbd121dcad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5df00cf5-ec62-41f5-a70b-ad80a65a9c81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a971b13-66fc-4e3d-94e8-8eb9aa349944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "67915bc9-bcda-4ff7-8613-c2f44164373a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "911c191d-2d7b-486b-a816-9c4218d62117",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abf56100-3dcb-4ae4-a8bb-c08f9e7ee502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "240cc694-2eaa-417f-a264-46534191f94e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0a6c697-0c73-465f-a95e-940971f6f81c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8523a456-803f-47fd-9afb-c43cb46cc3fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60d6aa20-d044-40ad-a4ea-98a1881a91ed",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4df1e1a3-816f-49c9-b614-abc36cf1e9b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c93129f6-2c22-4c10-948e-dad5b4fc9b6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ee968cf-3373-4fb0-8a14-22301c36266a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9c98abc0-f356-4a7b-84ac-8c4660379147"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95d3c01f-5326-470d-93ea-50dbe6dc050b",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84da7212-3a9d-4f9b-ac67-e1ade90c0af3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "847c21dc-6e7e-4838-89d9-0de67d54bc5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15602674-cdb7-464c-9ec9-69a1c996e8f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1a2a179-59f0-46fe-8ff3-617aae903eab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1877233-cb94-4211-ae29-b339ec5aac7b",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "616b3bdb-0176-4333-b8c9-28a3e7274652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73f87cc0-9da3-41a6-b05b-631250416d8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b477d04-ab6b-4f77-bd01-2c346d14d33a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "314a5faa-4ff7-496c-a017-d52159c3cd3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "882a4b6b-f729-40bb-90cb-4e641f293965",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e8e2ee8-6c7c-4e59-9c56-105860fcf52d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8289412-41a2-4687-9d6f-e9b248dffc03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "469a2ae4-1c50-41ec-a22c-f05a0b9efd6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c81b18f0-fb6a-4fef-992d-4a7d29ef8568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f13fb7b-cdeb-4c5f-a0a3-a77d806d9aa2",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64c314fd-a594-43a9-9174-f66f8ab383dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0f391ca-23f3-421d-b330-f3f0b765a9f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89bf6666-a68e-4ccd-b828-87b42706b4a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1c5c562-d983-4cc1-96e9-2c64ac745902"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54312a50-9caf-4300-bf0b-8b93bc5c0b78",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24815904-35a7-4412-b72a-ec6169a66551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "164df20a-6ee8-4ddc-b467-0bef6dd0c3ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f2f05ad-f3cd-4a05-bdd4-e96b81f8e784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "63beeaa1-74fb-4e43-98f7-653bd842d673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fc76895-440a-4ed4-91d1-c974fe67d79f",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e381f321-192e-44f7-afee-156e87fb5a3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "068bd99c-d8ad-4f01-9180-42f802a7e1f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c750e20-4bbd-4352-86ad-09b07c8c2dcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f7095c8a-47f7-49b1-b21e-7f69b90a656d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46de10f0-1336-4d44-8877-2b153dde26f8",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5f0123a-7bb0-49a1-b21d-15f12445eff0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e86cd48d-c640-4585-8c9e-3566ce2c9eba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75cd9404-abc2-4fde-a32b-aee958dd9dc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6811f9c7-cc52-4cad-a89c-967f6dd9c1d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7bdd286-31a2-4ffa-b8d6-46d9ee82754a",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a78467c1-0d6e-49ad-b783-7cefc67bf93f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a94ec2f4-e3c1-4131-9b69-cbf032dbfc2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "802ff437-749e-4b6b-bb42-ae89f559d8db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "38490a06-1251-4e7b-afd6-b9400f6d0684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5f40a85-3757-4efe-8443-93d1e817009c",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39f4b148-bfca-4771-9795-1004150df82c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caec4c43-f772-4cce-8a36-e44dab058945"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67ab3f18-d18e-42f5-bef4-e45799c9121c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "287a8c7a-29fd-4193-9cb3-4979d5dd2c27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e22dee62-f1ab-48fd-8a9e-2e0d04abf4d4",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f31c1885-6e43-452f-9985-aba8fe631428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "840dc83e-768e-419a-9ecf-4f18fa9cb014"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7d05879-fc0b-439e-ba42-e1501912154f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a0e01e15-545f-408f-b667-21feb66cc7e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62e9bde2-5029-4c61-b8e6-d96af32eda02",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60462180-86ed-4e56-aea1-7c4fcae3e00f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78e03eb6-25d6-4f89-841c-c5b52c5709ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a026c140-82aa-4c6f-a586-4d4a36161b76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a96fc34a-d63a-403c-aa58-030c60d14732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50fb3952-2a6a-49f8-8c08-2566101d37f9",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd47b26e-6718-47c5-a01e-5c6410655e0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "d1e32373-9220-4ee5-a678-8a25e484becb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6075892-4ce0-4e27-84b8-fef7a09f73e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a142938e-e972-4854-b92e-b40a99b7c724"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "34fcb44e-689e-4a8c-a7fb-72da141c02ca",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "905d1711-78e0-409f-8a3f-0e6a6ed3687a",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a24e3fbf-7b63-408a-9664-967547011e8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ed8f07ae-5755-48bc-bb4c-c647cc16e277"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7416ed24-5567-42da-8c37-34a10c52c8f5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "55fd5b05-406b-45be-b428-69584cec17a6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1a06d8a4-e69b-4f34-8df5-b3abefe9e159",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "291a1365-259f-49a7-8143-9a24a8aee81d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "afecf2c2-8dc7-470e-9405-b9e2fba9cd7f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6c3c3da7-b19c-4dcd-b904-c76ee2852ae6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6e491453-cf25-471d-9989-3536b0811a64",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "13d03a4b-baf1-4346-8e22-e916d690e6e7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "570b9195-0871-4821-9619-f58ba2fb8450",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b71de80c-a3b5-404f-9e3b-14b39d8eba15"
                }
              }
            ]
          },
          {
            "id": "f7e801e6-7e19-4c42-bfe4-3806a017147b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "82cc7df6-f034-4720-a462-6b1c94d3859f",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "68c733c9-03fc-4233-9502-f8a33fd7a4ff",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cdf474f-582a-4292-b72e-4789e0fe077c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "34773ad9-9dd8-4cb6-b54b-316d2c92c02c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c64a74d7-e873-4261-8a08-2fae92d69797",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98f3137d-ae5b-451c-a0a8-5e0ffacd953c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9ffaf5ec-ffa5-49bf-892b-ba089e632207",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "741e1687-17f3-4b22-b34b-8cc2603bcecd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ec1b44f2-2f62-40b6-bb18-38fed88cf9cc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2cfd911c-c9fc-4b3d-817b-54774c2e8bdd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a3da1125-3da1-4d2a-a343-ebc086e0d49e"
                    }
                  }
                ]
              },
              {
                "id": "d62c30ef-b419-4841-9895-86fc04771049",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f31ec417-8669-4e87-afa1-b4c0273e8119",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5720bda3-4eda-4ddd-b20c-1b0ba766eec3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "beabaddf-0547-47d1-a6cd-86f097dc5a85",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6851e97e-7111-4dc4-9eb9-fc2a5f415682"
                    }
                  }
                ]
              },
              {
                "id": "f4982e84-acf2-4b8b-9ce1-116635a42f55",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2ea38997-11b2-4c08-96b0-6b0dbdae7128",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5211f612-a16f-4ebd-9965-7e0b37b2a0dd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5b82aea8-d275-4b85-a737-47d8c6a5f8a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2fcfd76c-fb0d-4347-8f05-482a9e03511d"
                    }
                  }
                ]
              },
              {
                "id": "56ec9a3f-fd4b-442c-a722-2ed90b6f8678",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a2ed7bd4-079a-4c04-8834-b9d3c7a06260",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6487ce42-0567-460f-9f86-1d8014bdd8f1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "66d12ed6-4a84-4070-9553-8c641d8d1b07",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "7ce54ffd-579c-460f-b5d4-cbb5184708b0"
                    }
                  }
                ]
              },
              {
                "id": "fc97ce54-d2bd-4523-9c58-573424f0dc0b",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "481d1a3c-c990-427e-b52f-0a8f7f3bbbcb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7c447ac3-f2bd-421a-ad51-3568840b7496"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "691d7a51-1800-4884-8485-6c2fc179f411",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "9ffbf8cd-d332-4cac-bb8e-8b3b2e47bf28"
                    }
                  }
                ]
              },
              {
                "id": "37a4bb82-c4f7-4034-b29a-9bbd98003447",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aee93f92-7009-49ed-a34e-2f977ceb01b9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cd4d7d5f-ffcf-4f54-9eee-d6ab7084289f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4cf46c51-7de3-40ae-9958-a27c2c32fb80",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c4dca3d5-f281-4f1f-9345-0895aabcd4cb"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "db9d7dc3-4bee-4b5b-8a0e-5cb577bf7e5a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b6059747-26d4-41e5-9947-d768a4db9840"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f9b11737-7095-41cf-ab42-b59f9c334194",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bbe85e3e-7f40-4037-a51b-21ba6905e790"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5521de8a-d6d4-439f-97bd-a839da9b7a3f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "83bd4b8f-23dc-411b-bee8-dcc07bcc4f31"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a4ca7025-e0f9-4ef7-b3fb-01687f97071f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4727e568-c1e5-43ca-85b4-4583b022f2df"
            }
          }
        ]
      },
      {
        "id": "3e403ddf-048f-4e27-b523-012585d4bbc8",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "c621c766-195b-480e-be1b-e4787287783f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "10a2274a-89b2-4568-abee-ea328d232e99",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a5da1e3d-e74b-4e63-b0c9-a2191e3b9c40",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95ded477-dbb7-4ee9-b2cc-fa022ddff189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98674307-636a-4409-9cf9-6bf06cd08d09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e21fd6b-6996-4476-bef7-28567664971f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "743533de-6b54-48c5-a362-54772015e5f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0abe4163-12af-4ede-95f4-be3153f1111f",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49cbb848-f9b1-4b27-99b5-52176b477b3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06ae81e8-a8f0-4c55-a4f4-5f82c546411b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af7bd7fe-430d-4ba2-b845-bc78830f18a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c65cf027-4dc1-4328-880e-47f6e789a651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ed073f7-ad2e-4a2f-af7e-2907fb16b087",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74373437-a8e4-4b8d-b70f-443ec115be81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f5acd42-8f17-43ac-9875-b404c69d7053"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf81ca4c-fd9e-473f-8ffa-950372272069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "32674485-2406-441b-a117-3bce1e86aaa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "453d9cfc-3089-4026-a005-00a6f473c2cd",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea05789c-8af4-4a66-aa57-d1138dcf3898",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "941dedd2-dc7a-4715-a2f8-df83b3f530d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fff2bf9d-eec2-4b1f-a0a5-39260c0163ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b889763e-12c5-4423-8d58-87a94a191374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1015149b-fa76-4b69-b0c2-abc80295f638",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02625e2b-c711-4780-a20a-3f1bd2f3ef88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "646d31c4-20e4-40f9-8aeb-d158af761e80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7819eb22-47a1-4696-af0a-e378121a23e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc872d6b-15db-4edd-84e8-8528ceeeeaab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8899ab3-4eae-4a15-8709-8a9126510f9f",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c112e9b2-6277-4d05-9290-969b7f8107c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b22a3ae5-c30e-474b-83ab-28bae11b258d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3321f0a-e83a-400b-b041-f3f6d2d978cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b34a838d-2258-4399-a128-e75724475274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd085d23-4c08-4a32-a0a9-31b8cbb2eb29",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f007cc7-e61a-4c46-8c82-83201fa937b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58dc66c4-a41f-42eb-9465-a4e94d907f13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4119d01-522d-449e-a4f2-3059fafb1f3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "1df3ae08-2b71-4671-9042-044a124565b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec8dae1b-769e-4f1f-ad41-8cc7f4c7f03b",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8780e8b-1651-4b53-bee8-dae22135092a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f040f49b-fbc4-4ba8-b40a-0c667937ff0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "183e256e-357a-4024-b27c-941105079b3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "84770031-781d-4614-9b04-17c6297dc43a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2e9ba66-511b-4100-870b-e4ab0a0836f5",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "453b5c67-9ea9-4ece-a69e-d97fcc7a3db9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc4915fd-5c14-4e2b-88bc-0f7679181531"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bb7a23f-3496-4d46-b74a-0e150d427a06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "caa01c6e-e2ad-4f0f-b8ca-292080d2b2f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e5a26b0-a8c6-4336-8f7e-1851c43247fd",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c32b54b7-29ef-4795-8fb5-1b2a3a69d5b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6468f01-fb75-41f6-9b4b-18483b0fbfdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "169dd0d9-263d-4e71-948d-f985997dfbd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f57e04b-438c-4ff0-971e-7254b6caf512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71674a7a-e439-4616-b542-267d7348afdd",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "217b7bbe-2135-4e61-98d8-a6e5ed5c5263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4d4ff27-4b21-49c2-9b79-fbceb18fc2fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4c446f0-505d-4ae8-b474-75c3d3284c4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "22a15eef-fbc2-4221-a174-ff8968f765fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d699a687-195d-4d81-964c-a59675aa17d1",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a00170cd-9002-4671-a1ab-1e15e383e342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e41b490a-40ce-4aae-8654-3dae0aacbbf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d7b06cd-1f9c-4f70-98b7-acabbf865017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f94946a8-a779-4c64-89f2-1fb53e1a05b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6120fa05-5ff3-4929-943c-01bdf2ce4ac5",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad900209-f762-4c40-8f45-0890c5473f1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8f69edd-1470-4004-b89d-635be2d8d58b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48c9137c-d969-4d93-8132-08b0bb4cbf21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "217fa85e-7627-42f5-bf83-4406a1d2b0f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1378dbe2-225e-4602-bc78-4bcaece5b83e",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b9f4d42-4559-4bd5-b595-964b5dd9466f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9eb3f45-ce1e-474b-a258-a8aa53c80d4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5302b4d2-fc7c-4469-9609-545b6fd7e990",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b261c8d-2288-4d9e-82f4-3c8fc8492b27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6868344-89d6-4ba7-b73a-8beb5f2e201b",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c09be097-725f-48f3-865c-256812cd3697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fd70512-df91-4da8-981a-e2bf8d0b7365"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "808a370a-5963-4f70-9da5-60f24d9993c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "07315d60-b559-4458-9e07-affdc6ab97d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e82d7dcf-d989-4ae7-bccc-fa35ea8253b2",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a61e635-4b76-4fcd-ba93-d2da35b263f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d925fd48-ab9e-444d-b2f8-1172aaa59568"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd2f51dd-7072-4132-a198-ba41ec119318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2539061-f452-4f62-aa23-52a993f67137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2aea3a3-9cbc-47c6-904d-c7333c432c8f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "655bf788-2e6a-4b42-89f0-cdb1f51a9693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f36b1055-874c-4921-8196-dbcd8deacb76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "815736f1-d499-4152-811f-e8452ca9d67c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ec8ad67-7cd5-4a9c-96c8-a26816609ce9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c44dc80-9fcf-482b-b3dd-6da3401fae58",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eae9f63-732c-45e1-b127-0a57898fd41a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fab7729-9a23-4639-a23d-a3c25b0a07e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "793e30c0-a9fe-46d3-9631-b9d49b43d3f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bbb45c4c-a8c0-44f9-9069-5af5bb177dea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a732f11a-221a-4327-b5a3-d2070481a70c",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8805b60c-ba96-4c8d-895d-418de7e40225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab312bf1-c61c-4783-a0c0-170588e73823"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11fa3b06-83dc-490f-9956-7692965c9c7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d59ab6e6-263d-40b2-8db8-fca70a6f5cf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a56aae9-481f-41fa-ac57-33a7b3c90b6b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ce890b1-9070-4021-882c-e46067a4270b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dedca98-fa8c-4214-9859-e9169d2d7588"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7fe6b56-9d1b-48ea-b82b-bcf1feceb464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e604ffcc-e266-4dcc-8985-be7bb9b8fc5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b50ed82-a55a-4168-9d0d-56a09667298c",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "913e24e1-c8bc-4281-aeb9-75345d4c2e87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "926454aa-034c-4fb0-bf29-94866f0adca9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e509a213-525e-4db0-987d-aa68a9c91b3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "730ae649-7c0e-4a74-b8ed-bbb6a338ff63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b66cb5c4-3086-43fe-bbbe-9cd084659802",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "224974b8-1647-4b31-ae4c-ead45e24d6f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b369214-041b-4999-af13-9189286220b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5071a464-806b-49e8-bea4-61ae57ff1208",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1992b6f0-7b30-45af-b086-8116439cfdc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db5dcfe6-fbf6-4330-8a9d-a3d4c92bf2da",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84461c0c-23a1-4f29-b4cb-2d1ff46834c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f8f18b0-239b-4423-acf1-515950e81007"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d17764a-4ea5-437f-a8eb-9e49b975c049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f434957-4e03-4969-bdc6-b2588e87ad80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "987003ef-62a3-4924-b9cb-f7c4f90b5248",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4420ad6d-aaf8-4e85-b31f-34dcb8c025ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00a0ad52-7f18-4a92-a628-d1e258fee390"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ac6062b-1e54-421d-babb-53988a074cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc8be163-62fa-4788-866b-023a026089c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0457318a-25c9-4628-877c-b4c208eb9627",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63839ecb-300c-4a31-b754-2962a4e59508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01a7708d-d21f-4de2-be2d-16806871d9af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83c4048d-5f10-4efa-9f53-728e2bf80a55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f41dd4d9-38ec-4837-ad6f-79c468a59b2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0274d00-bfbf-4272-a79a-8022270fb67a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2212073d-e0d3-4713-b143-96fa1a757418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c461cc3e-9d18-4b81-9e87-1c4e843be9fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "746ad5e6-30ac-4d3e-878d-acf1a1b06772",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "730abb90-3b2b-4bb2-9970-7daf0089c06e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2ea2b32-63e5-4390-99f5-90c6eef61336",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e29b997-db86-4b99-843b-6ed7bd5bd5bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d2139f8-18cb-4c59-a172-eb4081a17f69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b462ad0-8c4d-489f-828d-1384449be0e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc8a30a4-06f0-4142-b88a-c4f8cfbe45b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d89f773-133e-45ef-9fc4-a3232d584898",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fceb1026-e823-4044-a2ff-f42b91f31696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "939ca6ee-221e-4c5d-9692-fc52ca42425d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f287269d-26ac-40ff-bec0-70947d954f6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b85e0f74-5472-4709-9c73-8e46b18bd5c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98c670d5-c6d8-45fc-9be2-35dd0d385dd1",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c9c2f32-9e76-4bb7-9d75-08af087ce97e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f571324f-f094-41c9-9656-f4bfb4241fb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f3be4cb-1753-4ed5-9d88-0739a6dce896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "decca7c1-63bd-4962-b7c7-3de81698b491"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fca90bc-d23f-4045-9f30-ee23a53e058a",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a9c264e-87c4-4eeb-aab5-f24e1e08da46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d85e333-3602-4aab-83c8-4b9dfd4db105"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86b11ef5-f8d6-448e-9f0f-5a595b4a2181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8da0d654-d212-4ed4-9c75-6a5991c739a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5373bfcc-6a77-4509-9741-9b8ccb5f4675",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b73fccfe-ca45-4ecf-807a-624ac86303e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02eb3445-92ab-4c41-b83a-e4ed36b28106"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9489ca31-0f39-460b-8e68-63e02a43c68c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "802df5d7-f844-4f07-afda-a926d6e73c70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a9e5476-9549-4535-a54f-402e6fd42b25",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b427c6c2-f6f5-4d56-a821-bd302e2cbbe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aed5c9c8-6472-428b-b876-0b6190381d8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8539f226-ddfb-4210-b14e-c417d1ff6c14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "893b3bfc-6f79-47a2-8055-9bb58a624529"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b16f7990-0494-4dc1-b56f-1b9dbea12968",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9745866d-6998-4dba-8d3b-c5e320b4346f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5280ab3-4de5-4ac2-af7f-e05c56a5924c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "1e9b4dc4-3cfc-4076-9a47-558bfa7a22ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9def3d6-82f9-47a2-b017-1c6286fd35ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "373e2f9c-f401-4dfe-ace4-c9c7820abd6e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "58ee1ac7-cae5-4c19-b326-cf9a13649556",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a3dfb5d3-36f6-419f-8f4b-bbf50c578377"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e2311716-9b69-4058-af42-874774e10d00",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4f48e0ca-14e2-414e-a520-c4fc8ee30c29"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "96aeff92-a3f9-4f0b-a36d-f007b914ab49",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8e02b945-9e70-4ce8-a3cd-a4e71c7d5cc4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "52c4c115-4de4-4d81-92c5-dfd38cd19e3c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "062021f3-5379-445b-8288-c148eb4bcab7"
            }
          }
        ]
      },
      {
        "id": "41a6012f-ee41-4ea2-ae3a-ccbcf761a228",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "e1118d1c-33d1-427a-aea7-3540d594e442",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6d0efd62-d20f-4d9e-b591-13c55b065670",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5b0f607f-c1a1-4287-897b-020c306627d9",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fce6b374-0d94-4355-877d-364fbbf18cb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3315f08-dc7b-48e8-b22c-ecc9ca64b2d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89852c09-05fe-41a0-9722-ea8075338349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "43862b4f-9a3e-4401-ae51-9f79e43a73ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d40853d-0f3c-43e0-a6d6-4924732a081b",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26b61275-173b-47cd-906c-0d90cb095a32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70d6ce55-3ea3-449a-a267-3940de1cbf15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b68013c5-c341-4df1-8efe-62ac4513efbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3df647f-f074-4f36-be0b-f4c33adb731a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a03f3de-8a40-4197-81b9-134610026cfb",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a7912c6-ef82-4e6e-8643-bb533039bb34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82172351-4a65-44ac-a384-6c752d310dc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71be3adc-4b97-4db1-968b-3dc61d932358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "808d6c6b-536b-4903-90b9-d33c7ae511df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ae2f85f-cad5-4b6a-80b3-916a98d14573",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "980da616-7ba0-477f-ba03-bc93cc4bfd13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "271a1310-2dd3-420d-b179-4d07bd61b4ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "308e203b-296a-48e3-ae61-3e2b471b74a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "873f0382-fbb6-40f8-a7b1-e710752e8baa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0243fd1-c80e-4b5b-833e-8496717742c6",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f29f0345-68ec-4b34-aa3c-3aa565ab1714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4d4e4e9-6491-4f45-b659-0efcec56ab7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb310fdc-a586-4e6b-8ca6-a6c946f9c087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e21d557-2057-413b-bae2-2c6ce96c5c32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a471a2a-67f3-48fc-9ca3-f4b8ea609592",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73cc0c5c-bd22-4ec8-98db-3baba42267d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4a1c34a-25a9-4d56-a5a7-95cf6ca8544d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d28c8a0e-6832-41ed-99c8-9c33882d05cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1b219bee-37f6-4d24-a5aa-be0a420940da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d418efc4-7057-4081-b895-e64b2b773805",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9715ca4-24cd-40ba-bf07-804bf8783245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faf4eb0f-a0ba-46e9-9597-5c276ed4f6ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8376490-263d-4dc7-8894-f0a610aa8abc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b21c740-8db8-4d7c-b1e6-3e2ea425314a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ade45362-cbfa-41ac-837d-0c3acace99ff",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49bd1e1c-53e5-4cdd-b883-50e552dddd32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04290675-9c47-4117-83ee-c31559dc0572"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aa31987-fb39-4d07-9725-cd01c1388be6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "331ccbcd-eb0f-4d77-8668-c38376734021"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2117cb9c-50fd-4eb7-bc16-1a2bdd93b869",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "394f9c93-0a9a-4f6e-900c-b8ce24ef8d1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "084c309b-3ab0-4405-9654-8b85d6c8cb48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f5519fd-8f85-4801-812e-995e3721f24f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "759d685b-a70f-491f-bd5e-7304b73d05d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e83b8fc-4635-4ca1-8425-e527188718d6",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8356c423-f8c3-4829-90cd-b8b688d1537c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5a01ab5-9740-4cc7-9b08-c1bd3199a4ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e244f0d-e194-4f70-b5a1-ca1c22b281a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "369749e9-a8e8-4bf0-ac36-7e75064fad7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f362cf6-5b87-4094-8bb3-9eb06afd24fd",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "318ce170-f8ab-428a-aad8-595e3b241a02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aceeb6cf-96c4-4c60-9653-c82b99d92ca9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0586f8f4-acf5-4590-8746-e7a56cc4ccdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "4c4d142f-b9b0-4f8a-9f82-9ea30a22a3b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b341ba0-d966-4b08-922f-1645b2a533ad",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac694f91-5b52-49c2-9aca-697460563ec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a85af5aa-01ad-4da6-adda-de1ad025d0d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fba10e83-3979-4d75-88d0-ed086f347e48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c99a111c-d1c6-4662-9e0f-8019c38dda33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf2e63e7-4565-45d4-94f0-8f7cca457a1d",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fe860f0-d598-4d17-954e-ab7c53e2ec15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e39c0ef1-f373-4834-a100-fae9f33af846"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a262a0b5-8e04-49a1-a990-ed9fc8d04ed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a25b9d17-abf4-4afa-9016-6181c9df718d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c88be9c-1951-47d0-b2a9-4be2bbadc3dd",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ed88af9-efa0-497e-b172-c36333f79d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26a54436-9c2a-40ef-ae0e-cd7fa453bfe6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9804279-541e-4eac-ba2b-8b7224a984ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "cba4f1eb-eb81-47e1-9d5a-c41d4c8b6269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fcb1152-9c01-4f9e-95d6-197dfa097087",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28976980-6ad5-436b-a575-059049636912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3349dc5a-20c6-4b4a-bbdf-0cf168c085dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e713156-6991-448e-b5f0-f2e79a5ed16b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec835e96-8b1e-47a5-8227-5b91a105552f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b45a6799-0284-436d-9d6c-bc23673dcef5",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbc9b205-f4be-43e8-b781-b8907eabb140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2788faea-0809-462b-998f-4a2d8180995f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f90eb5d2-a5cd-452e-9601-b1028ed4a051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "cdec9870-2413-403f-9018-aed3323362d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e25242b-3fe0-4455-8edc-93a35ed94707",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ccf42bf-c655-466b-a4c9-ada82f0ee051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "251d798e-0496-4022-86de-8a18a50fbe3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6c85ac6-d573-4fcb-a43e-3b61f75236ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f5f95e9-d869-48f6-a709-46807a7cb638"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddd5f7b8-8682-4430-87d2-55754b9c6123",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8b2e6f0-e3d9-49f7-8bc1-d898c0824041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b248c36d-d2a3-4026-9868-0bea7f1875f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d7f211e-36ba-4891-b6a7-1151f380cef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f06e322-b07d-4e2d-9bda-aab363660c04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6720665e-6607-4f5a-bbab-0ed45586cf66",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "408c333a-01ab-4255-9929-12b24e04ff5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "558d79f7-52df-40b6-b4fd-e82cec65f8f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4b36fea-60dc-4ad6-908b-5f44cc2d3113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40a7321b-19f5-4752-9070-6bf6ff9e1056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7af64a7-3755-41be-8b1f-9530fe9ed81e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efcab21c-fce6-48ec-a94d-be86838d3033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f67824dc-e4fd-4bea-9bc2-4b2d708b6f9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01bfe0f3-ee24-4af7-975d-dfd79cc49ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "141a1c35-a568-40ca-8fe2-8ea075960024"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a0e0f14-98c6-4ecf-8fb3-b768b359ef75",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1789b61b-ced1-409e-ba49-db41cedf87a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f55393a4-2cbe-4b1d-908b-bb2211234947"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61b2e3c0-4d59-4518-86c4-c9ebe1eb587d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b045433-5b23-452d-965b-5c23ace02c71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d8e887a-9180-4261-86c2-f6732df0df04",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fab6c418-77c1-4289-99c5-406558e73da0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16c51c0e-1da9-49d5-a8fa-05f10912b426"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcac72d3-c6aa-4770-8bc4-f3e9cf276f92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9eb0b026-a2bd-41fd-896e-5e761d3d7dfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90102fb0-174b-4313-a9b9-d3e023b1d0cc",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df503b54-acc3-4a41-8c0d-a7d57e2a8c44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6678794-acf1-43e0-9cc6-92b9acd1f4ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a5c7620-3f6f-45d5-a145-08883f57633f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "56453d94-c379-4349-ab5a-97fd16b8f1b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fed9f676-86fc-4cee-8556-7b9a7488b745",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf7ebbca-4349-417e-af00-ee6048c0d37b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f709449c-c063-480e-a7d3-5394573bf831"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "558af666-5550-4bbe-90c8-daaf56a1a67a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e9dd74e-affa-4771-97a9-a9845f224490"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c761f7dd-de0b-4256-ade9-6a739cf58ab2",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d13aadc1-7a41-4303-b827-ce8e7e3a1d56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a53a4e0-af7d-454a-a156-3b725ed68f15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9246bd9d-21dc-4dd2-b5fd-360160332f55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "25a3d1bd-ef07-412b-a5ab-8994fe416763"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc6e7400-93dc-4a17-81b4-a3b73e2447a5",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e5fa215-9baa-4b09-8ec6-0739c8ac7fc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7996791c-5016-48f3-9397-c68add5da52e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5cb3591-5c71-43c2-ad5e-0cd9a7b44ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ff81053-daf3-4f79-8d4f-176f4f6e4412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6b82518-af97-4707-b53b-68140ac022d4",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64b34053-cd92-4f53-b4c0-516826e388e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "482d6b95-2a45-435c-8f89-8323883a119c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60ae5021-2403-4f07-8b80-25642af4473a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6cb3f0a9-19ee-4a07-b57d-fa90cfacf6e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a2ac1fc-be3e-4d6c-b0a0-c90e6639e150",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a7d81fd-1655-4435-85cb-f9d8a4b32773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0e82c1b-aeb6-48ff-be5e-b000fcb3c705"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02affa95-2165-4258-9f46-2ac193e1393d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "72145da8-10b9-444c-bd68-79d708f31cbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bae891ef-2f54-47c2-9c1e-2ae695f49048",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c8f3c61-bb29-4519-be4e-c4527c7449bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "202dc1f4-13ed-4faa-8c9a-0b3968a8c6f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09c22af5-e5eb-4c58-9536-f7414c8c8744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "09993636-e4bc-4f47-8426-b3c13597b302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8789ed02-8d7b-4cf2-b526-8c94d96e4d05",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dea54aa7-83b5-4b3c-a745-735bbde553ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "befec26e-528e-4d0e-87e8-fe632e79fddd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b88f01c-ba33-4760-8f13-ce380ec73a8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4bfd09d4-98f6-41fb-9fc0-b0c1bd448d70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01447e92-c664-4279-ad8c-79e7d7ffdc0e",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b68ad7a0-1d59-4532-acee-de66257863f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "247f4a5f-ab1d-4f8c-bcbf-5a7b6eb81917"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e747c52d-55fd-4732-92eb-a445e18fe717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "252cf02b-07aa-49e1-8996-d82d9d0e1ecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97ffa0d3-141f-4629-8929-78bcdc04eae3",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16e2113e-105b-41fe-9776-b8aa96b22ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab9f40a6-ba32-4823-a2c8-540cd6280363"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cab615c-b0bd-42ea-a65a-9b6596b95acd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "481c3165-b1e8-44a5-b180-643af0a19e75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "040f9a49-b32b-4442-96bd-d516fb9f9ee1",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd0aa69f-4c27-4663-b686-ae0533aeeb2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3c9ac00-b533-48ab-966e-ed077e6f0c60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c8871d0-3784-43de-880e-076e95b15302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d16e0503-9b9f-4d59-bb1b-79f86e125b0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d36903a1-d348-4a4f-8a12-fc3b0d7d92a6",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ed9fa90-730c-46cd-b759-266cf8e79f7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5b3a0d1-4307-44fd-b12e-deb2e82b983d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "075b0ea0-f8d3-4cda-94bc-10a19fbf7e33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d24fb86a-d64b-470e-8119-0a70a97c70b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7b1671d-bf68-45b0-9504-2882d4eb7dc7",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "707d72e0-77c7-49cc-801d-98bab31dbd18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab203111-66ec-43d5-9b8f-af3d8ea0d3a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94e00115-c744-48b7-b133-0d004567c5a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4b433e0-414a-4860-9ac0-0df06b08dd17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e9609ba-3fe8-4ddc-b337-fda9336db7ff",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "423bcf12-b80a-4cf9-9838-c7a2a0c7dc39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4837167-b198-44a9-b7b5-21b3ee5c7c0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6f7026f-c985-4c98-93fd-7486da5560cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8150357f-e1c7-4295-a375-538ffe8f578a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a900889-6ace-4f5d-a58e-ad209a36533b",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caf71e29-0be5-4fe0-92c4-c775699d04ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d35c4966-22a8-4a4f-9835-bed8c2a0cd4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa41ee97-310c-4a79-bcec-65bd2feff6c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "df88716c-6792-45f3-ae1b-f4ff25db67a9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ddefd8fb-098b-4244-a3aa-677b160387ca",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "703070bd-5644-4456-a25f-d334b8986357",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a43df39-f2b9-4d71-83d4-7a9e3587947b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "93cbff16-8e4b-4561-bf92-5f3ec3f9a881"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c2f2a7f-af4c-46a2-a500-72d1aa7e3ea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b0db2eee-72c2-449e-a14c-b618bd692856"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "58e93ff1-4df2-4cae-bf25-954d15b645d2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7a52321d-432d-456f-af7e-85c8a58d2f39"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4aca2474-0af9-4c00-bc30-4f5b0cdc708e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "84469207-00f3-441e-90d3-42ac40804151"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b0b048e5-f047-429e-b0d4-17099dbb3d6d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "947f5e41-a55d-4c82-880e-e1022890f1da"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1d8e3d8a-db68-4ec0-bf89-3fc49e9eca49",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "32e57772-66b5-4955-a12d-bdf61504b3e6"
            }
          }
        ]
      },
      {
        "id": "cc09bd16-cf01-40af-9119-55cc6e6b6b50",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "cb02c9b9-1885-4b19-aa20-5c78f5670523",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cb91a11f-bdbb-4ceb-91bc-60cdae1bd57a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4fbc81ac-441d-4128-b00f-d640e24221d5",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f7ed46e-b79e-484a-bce4-023a816ae627",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7251e91a-e344-463e-a721-7eb8c43ca13f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00b0015c-2d98-4d24-b2c9-a1b6ec3132e7",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7e91c1d-7a17-41e8-856f-3e84d2943478",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1a1fbe4-8104-4228-ad50-7051e2d26f95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2388772-a84c-4f0c-a275-2a3ac10ffcd7",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2509134-05ce-4624-8e2c-345df189d6a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc501ac4-54a8-41b1-8cfb-45477a8086fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fee09923-0a74-4871-af18-32e576c15a76",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6300dd15-0508-4bdf-ba78-ff960f1e9a67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b310dcc1-031b-4490-a182-a1fe476ff0d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa8f1264-96b7-4b5e-ab55-9e64065930cf",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68c3ad9e-b518-40d4-80a6-e84c2614ca76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3890631a-a799-4ed5-bda4-92a5abc3982d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "540ffceb-532e-4258-8bbf-0265a4249fb9",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66dcdd8f-052a-44ae-bdfb-180e83b30e7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "747b1458-f96b-4a84-9740-da6ecae20f6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9d122de-4fc4-4dff-bac2-588059083392",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fff6206-24cc-4112-9f6c-9a6b168126aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4192a377-d0cc-4bd3-8e4a-99f953ebf3c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c73939e9-0fde-4af8-afdf-dc5c53a85ed8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7cbc997-4ed9-4577-a57e-76bc6601e08b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2143d603-9e11-425b-a6d8-5e89d8e5b761",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c70c0c7d-18b3-452b-abd9-e3e412c2a944",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "705d3fef-d205-48d4-8f32-d87ddc66eed9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2314514a-0847-4357-b1f5-3ca1fc4c560c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3946640a-8dac-4364-8437-47ff22577443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66a0381a-14e0-4672-9c0f-cbfe9520a84a",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "940e885a-a237-4ca2-869d-efdca846305c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec11a087-997e-408d-ad37-41ca4235670c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aabec426-3fbd-42bc-9146-711e9155731c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8095b7d-2602-4972-bdfb-a65fa9f6466c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67e06a90-3aa9-4ede-b375-c4982ce0d436",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60db9087-b22a-4525-9806-c96cedbbc746",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af8a2069-7188-4cab-a6d1-283b3e335bba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f1a5ed0-2edb-48c4-a767-4fb85cbfff1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "699f0a45-38e5-4c44-9bd0-fa1a99024324"
                        }
                      }
                    ]
                  },
                  {
                    "id": "572117c2-a9eb-43bc-a6b5-ef509a719b45",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aac15c38-a8ab-41d3-b57d-8b6f96f46beb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "204b7b30-19a1-4662-a928-9465cf66eea8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e946ea4d-a6c6-441e-9680-b2986ea913dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ef7ea12-1a8e-4d7d-9d80-5b37de24acd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12f088cc-8f8c-4f55-a1f3-cfde97eaa12e",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c39bf3a-6ae8-4754-b987-2dcb42d2ac0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "898e2ed9-1fa8-496f-a067-41b5a0e774fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f0fcaa4-2f93-485a-84fb-98b67864aed6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "442ad7c4-5e1f-41c4-aca9-51e6d26f9ad9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19d6d7bd-e8ed-4e6a-ba03-2a6914b3d5cc",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "851d4e2d-919e-414e-af7b-d627bdf45a86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa26ea87-c27e-4600-a114-7d3b4c5cf458"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77918eb6-719f-4af4-b39d-2220da3a063a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d5457b3-bcd6-49dc-a033-43d250c6f601"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7db212db-d8e7-4746-b913-b2feff4173e8",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b36d9a29-fa67-4bb9-be95-dfe59bf6a502",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c0122c6-209c-470b-8569-eb4853b92255"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68cf1cbc-d18e-417e-ae07-b3889478af89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cda04750-b54a-4af0-afef-d851bf05cfa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9b979d4-d394-4247-97bc-5d7f264bf9c7",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21d41f19-8aa1-4b0b-8319-ba444f5c7acd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6a4e3b9-28e6-452c-869f-e9c59eccb85d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d82d662-4bf3-428f-9b3a-6e13032b5803",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f25eb2a-22de-4ef2-a733-89d42c9624df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc2c4dcb-7c49-42eb-b999-e0dee7e730bd",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05c6b1e5-0c99-4c08-a3b3-b7b6594d62e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "071b10d3-2157-4a38-8b55-a5c16e42f155"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37afd99e-3393-487e-b2b9-f5b43bd10783",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b49ebf9-ef1a-4039-8418-3ef4544b2e5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "511d7db9-fccd-42ba-9e1c-55688a672bee",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80aa8627-f8dd-46d8-9854-bc71d397e234",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a66744aa-a904-406e-8f72-f1bb476b2c53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "454a7c58-0230-4611-a2f5-f4d915bab76b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53c327a1-7de7-4077-b6d2-b3ab944d079b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1841007e-f78d-4d84-84d3-f749db007a81",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a90dfbfc-ec76-4c5b-8240-fc8d89e6cf50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26ee6f20-9498-4462-9b6d-eb0ce316d8e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0ac33a8-2e8a-4034-b168-a788543cee87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dd49d21-2baa-4ea8-bf03-d9ce244ed596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e071525-b340-464c-bd1d-6807cce33e9c",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13100824-0e42-4486-87e4-6ed9c27e54cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff549da1-a9c2-41cf-ab89-f6dcade2e0f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81d24d17-d9f5-47d3-8d31-0fc798482e24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2875ccba-1051-45a7-ba61-727126349037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13b94bc9-5f2a-422c-b0c8-d8208a18c312",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf634257-7fa5-499f-8d9e-15abbf1581ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7116a80e-360f-4ab7-add0-789fdd1097fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbd50228-1b7b-4d91-9f82-52bf3700514a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab197711-81a6-4df9-99da-f8e131b7d349"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8294c205-b1c2-4efa-9f99-bcdabff335dd",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "304cc151-951a-44ce-9e00-4486448c2718",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0915b44c-5409-476a-b4a2-bda9eed41e99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2a71c2d-e5b8-4a47-9496-6079b1b5e062",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e0bdcd6-80d7-494a-a117-15c897f48e16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "207842f3-40b3-4517-b4f1-b27b92f82176",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c63a892f-e9a7-45b9-955c-78441c32c45f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c1c9a85-4f30-4aad-ab0d-84c9fd74bb5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e4c9b2b-4034-4bec-94b1-a4a3202d8af0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec0c220e-691b-4afd-8778-a5073934f330"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5638e3b1-40f5-41eb-a726-b27d04f279c8",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08130342-6644-465c-86d0-b895a2a574eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6ac55f2-c8e0-4076-a951-5a1049a37f40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d831306-bc7c-4256-b666-55957cb751c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0091ed4-0739-44da-b53d-1ae5fd52d659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09200771-2982-4bf9-aae2-263524752aba",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2bac649-2274-4847-b0d8-09e1b13de966",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f4feca0-be6e-46c2-8cc6-f7350df70338"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0672da52-c794-4b91-86ab-3499890eee2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "634395f6-f2a4-4737-a24c-d5205e189056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80aa211f-9411-474b-9503-fae52bae81af",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e782e30-09d0-4061-a929-a42caab39a3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4714059c-6f7f-4d38-ada1-3e6956175783"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb1469ee-17cf-4ebf-bd21-3e3f9063f0f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8090df5-eea0-4f56-b272-ad5739fd90a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a827d045-699b-48ac-a9c9-7d8967114560",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1d3c402-8203-421b-89d8-025b4ad1995d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b9d4bc7-5169-4517-96b8-b6dfc677fd04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12ec4f83-7972-4df5-b571-857ca05f558c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4947bc3-e5e5-407f-885e-59afe7ab81c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "522efdd0-bcf5-4db1-a745-a8085a8d4b02",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31f99c63-ab53-430e-8743-0c7990bfe7f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57d1705d-05b3-470b-a5ef-cc0e278986e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f82af235-9b96-457d-87ad-fd112376640b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43757e10-b023-4e0a-9aec-3e589a105466"
                        }
                      }
                    ]
                  },
                  {
                    "id": "554fa44e-d27e-419f-8c50-3a34833e9939",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14f35909-832f-49bd-aae0-5a8f201f276c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72ffb7da-e7eb-4283-a50e-7f8854694661"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f21d6f62-3e51-4f83-a114-378dcdc1c775",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43e0da4a-cc35-4467-bf57-447ccfdc8553"
                        }
                      }
                    ]
                  },
                  {
                    "id": "140a06a8-4986-4a82-8fc0-b92bf6fb9b7b",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da50c713-7e9c-4ad6-944b-425b172d9eeb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8348d302-11da-4507-83d4-d8c89247b92d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0de9a91f-7f97-4e46-9294-0e6003034098",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50bcb3da-a93b-4dbb-b036-7874b37e8f03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f4bb30a-aa6d-491c-8028-d3bc0253f58f",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f414033-d737-45d5-8b2e-569b933b6cb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6f38395-4f8b-4bb6-b8ea-d7481d029ae2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f753ea8e-1937-4f8b-908f-18a659b31a0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dc97afe-3e64-4b5d-aa14-7599abfd3909"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c16bbb05-5b3c-4592-b60d-f910aeb6a1a2",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d482a82a-7da1-4c41-b16b-814da06601c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "656914eb-440d-4957-822d-337187bdb3ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17446a72-d43b-4163-824e-4bd8f5b3a381",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e00c862-8362-422b-918d-ca6a26f34e53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56e48652-939c-4a0d-b091-81b93fd21a77",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc1f6185-8516-4617-b1a6-2ad0ff0a91b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17f2e044-f2d0-4388-89d4-f81f0cf51edf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5faa4db-5ab4-48af-8c50-4ce0933bdd9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a1e93db-36a4-463f-a7e3-5941df2bfb9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71eb324f-5f64-477c-9471-cc8821a80d5d",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22400564-0b64-4c32-98c8-5ae6aed42f7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a965a042-e0df-498f-8b48-cadb9841d209"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d0213cf-1d1b-46c5-8291-220bf7cbc061",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e054d4f8-62c3-481c-a51f-c323dc6f47d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6a1268c-85d2-4fce-87f4-8ea2a7799277",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a99f910-4dc8-4342-bf5f-5c4079c3cd67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2706782a-8b99-4226-88d8-0d3426f01c5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af88a835-2dd2-4160-9798-1eb13844a7bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cd35fee-d69b-4643-84ac-fe60dac6edea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5ac7187-4d00-463b-ae7c-c098ffd7da5e",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d679afd5-d5a1-4cb6-9606-cccc521d3538",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ebef9da-b1dd-4747-8a62-7db4eff2775d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6c5277b-08ac-4362-bcde-03138ad4e44c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79aba9a9-0423-4891-8e83-9b6472ebb8ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c8553aa-5031-452a-93dc-bffe464b71ad",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e07380b7-5f69-4df0-bef2-164eff702410",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4927634-017e-4dcf-af07-2598158b0611"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b9b392a-6a05-4f36-98d7-3c59c796a5a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd0c4b68-a32b-49bf-8c30-842e618399e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e776d239-a67c-4297-ba4a-99e17fa37d70",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8642c548-06a4-40b9-8ef6-311ccf6dce84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "656736b8-05d6-4ba1-8c0e-0ea5ab1a864e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "535499de-2973-45e0-acf7-5a10b894d9f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98ac6efc-6495-49a7-890f-b496d5f484ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0e552ff-79a6-48ba-af77-c712d77e7c9d",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d796065-cddf-45c7-970d-0ba191f54988",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0eb367b6-7056-4dc1-9ff8-24e9a70f11bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "520191f4-39f1-4f94-aa91-31b2ccdcace8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57ea5099-e531-4626-a949-d83b7a73a052"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2e596a8-204c-4f23-881e-0c2a18c035e7",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c70817e-0609-4319-af68-537c51525cff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "333ddab0-d777-4488-a9cc-f5608ea71219"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c5a2a7f-57a7-4d1b-8133-cb5eec40f01c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edc12840-730e-4a07-8de0-be6481a679be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa4ac073-4088-4db7-b47d-f080e70a3a4b",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99569981-6b8c-4aab-a0bd-3e3b07430c24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "002bca78-3c0c-4acf-91d5-378e4871509a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c96171a-f273-469d-a3b2-f5cce348494b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "072314f4-061c-4634-a8b7-7c5f296d6a46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6dce455-a004-46c8-9c7b-7452c40328af",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "273e4379-a05b-4d4d-b36b-97fd7f79e2fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de250ded-6eb0-4d07-af2e-a70ea44ffd15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1424e62-97a9-4066-ad00-46de9e93b94a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40ee1d85-7eda-4674-a177-16e2fd173be2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5024efb-efd7-45b4-b2f7-df9d2a1d1359",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea2127fe-af5f-4193-9ebb-ea269074ea06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73f498fd-5f38-46d8-99a0-01c361d1205d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b27528ad-fdc6-491b-b917-c3ff7e3785c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95b0fa6a-99ef-447e-be1e-64b17c28e2e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "479daf9f-122b-430f-ac89-3976b5812269",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a300f51f-a485-4d62-ae87-b9548f7674a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c342e04-7b1f-4d45-b765-0e4027afcb7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56e96ea4-9b98-4897-b47f-aa809dca0e1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f20ec03-4250-42f6-943d-24b4754eeafa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcdf6201-a77a-4fd2-bd68-3dd67ed81239",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdeb1f37-36df-44b0-9082-402642787c6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "976e97e4-c03f-4e9a-9666-b05ccb7b1873"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57ce4ed3-109e-46b5-8d91-10cb22ff2e62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da54a33d-6dab-4619-985e-5afd393636f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1004c098-9a67-42b6-99b1-ae5addf61e64",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5da4868d-24ee-4a90-8913-010d2b19c94f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c10e783b-689d-4ba0-af18-7defb4f8aaf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ca7516a-83d0-4f3f-b98a-f36d4cfe0079",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb7d2849-f4af-4ad4-9389-fc35142e7374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b86c227f-a1fe-41ea-a8c5-f2ecc74ce8aa",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "480dc608-4a16-48b8-b0b4-275134a1f829",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4a8d8fc-0fff-4b92-9ff2-65229fb1d5e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50051504-37f7-4600-bbd1-611e528160ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "604ad404-8e39-44af-a0d9-c2ae14649031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cc47b55-f7c2-4778-8538-c8f529bb0276",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09f3659e-9c2c-4c53-bf82-9c56591ff58e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd37f58b-4411-4e8e-a8a8-76045805b5ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5aabbbb-4da0-4914-907b-971e06fa4732",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48048ac5-4ea3-4677-8fb1-5c6316a6037c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10738754-0cf8-4c01-93b1-e19c3ef0d8bb",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b0e020b-fe50-4de6-a2d4-40d167297c1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f99aa84c-0aa9-4722-bf8d-a0fd0038fe87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7379cf5b-63b6-46b7-afb7-0fedf7671b67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e2117c5-b329-454d-bee5-748410191ebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c8a3f7a-ba53-4e56-9f24-eb631b765712",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54c4dd1c-1bbd-49bd-842d-cfd82aceac14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deb0c7d1-25c8-46f2-bd0a-a72f831bca8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfecf07c-ca73-465e-b311-2d8f8116e1b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1aa3a345-0d94-4b9d-9ebf-2fcc2b3ac792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0465db1b-8592-4088-b677-d718a941c959",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7815c764-6ac9-4428-80cf-25cd0f00a283",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08a75596-2a27-4005-abfd-4cf555b4ddda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "741b03f9-ddd5-4d65-a6d9-a8ae93dd8a07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fa03297-e3cc-408a-90fc-d97f53ecca99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8008aad-3404-4e94-aa77-ddd319766764",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb1768e4-f80f-46c9-a143-270baf8903c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06e9751e-c786-4de7-b361-ec868175928c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc651db5-05d7-4df7-a815-5f9d5c485ca3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdd31328-10bc-4d3c-9a36-c3bbf998479b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d703995-64bf-41e2-8f3d-7a79e66e1743",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54da5237-94bf-4804-9875-18bf8a34319d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce55cc69-ea1a-450d-a213-c2ed93553d2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2292eb9-2c57-483d-8568-5322552d4f3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "228c4e24-24db-4b7e-9f24-91bc7855c581"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b78c8c3-5b51-4632-945a-c93fab70b9f1",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3a5fe3d-4848-4a41-aee8-08f3e09456a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32d2b433-f271-43c8-bdab-c80b54326fe7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f79c348-bbb8-4b88-8184-9827fad7a211",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b6742c8-0c9e-4dee-8f37-34063110b43d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bd3e0aa-d51b-4e33-a952-852f57817a4e",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eb4bdf0-7a1c-4cae-94ef-bf213914b013",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0c9e22d-ec75-4588-a8c6-083bc07e9956"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e756886-bdef-4853-95a1-5967e5cd3e4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e500ed2-dd69-46f8-a164-6581928428c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f1f8a72-efc2-4507-a9a7-97a061eb9b8e",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e50fae0d-4886-42e5-9c7b-8f5e8649a0c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81c7d405-e7b1-4c34-86be-e280709b27a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39e0d8d8-d2ae-4315-98e7-88588e0aabb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47174e9d-f775-4dcb-bfb5-9c2ada10b3f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc0fd8ef-d30a-425f-b386-aec1ec895edf",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaedcc08-8539-4c44-9c7b-c881545a895b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc25d79e-9a3b-4cfd-a4b7-185b81d4d43b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98e36036-dd9e-477a-8388-1e09a61562c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d42f5afb-cd43-4fa8-acad-5f7a4baa23a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25c26738-ebe1-4f06-98ae-32eec62cc7d3",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd0f02fc-18cb-401a-a914-ee4fb377cfd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1a394d8-ad72-4b88-851d-2adf8480eb75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3350ede1-b754-4c2d-83c8-04fc9729eb95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b450248a-659e-41ab-983f-24dbc22f8210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4558647-3ca1-4eb9-bb5d-65b1c61c2315",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cec7b90-dc2f-477d-9a50-c3bf55e8a5aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d264a90-25f6-4c9b-a02a-a4ea78e16273"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2b9be55-08a6-451c-a137-0b9944a964c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4ac6f71-465f-4c2c-9417-59d77ad9138f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b7980ae-8a5f-4f2a-b1a3-c8f1b6d069cb",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3de60c4-02d0-4809-b257-3d99a69454f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4da853eb-7cc5-4ff1-9059-3e99dbcb1184"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a305a8ce-72d9-4ad2-8bf1-f4b59e21d06f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00a70c77-edd0-4333-a56b-2c5c891815e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e501d16c-0014-489c-8440-0da13ae194ab",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cacba0a1-f8ae-4219-9df0-fcbe682eed79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ede9e689-5840-426a-b2f3-bf753a32d324"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac78a962-3fca-40f4-982e-bd3d4cc0b89c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0315fe3-6e2a-42bc-8430-3ebdd8e17b39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13be353b-1c66-420a-b45d-7d41d810bb51",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1985b81f-b5b9-4172-9326-2e4ef71118b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0c20e79-ee9c-4b8f-978b-7bb675862d2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a6475fa-5811-4d7e-a04b-69f76860f026",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36cd6ada-510b-4779-9af4-17ff77acf5e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc26f559-8e8a-4ce5-b4d8-00a5f237fa31",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6655c25e-1559-43fd-818e-ba1a94e897bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea3bd705-4d51-4d08-b31e-5859e2337a55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f331d4f9-a5c0-4666-8060-35326453190f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a055de5f-def8-459b-a9c1-eb3b5aa38377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f3af569-43f1-4281-8ef6-84f1a2322167",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0af102ea-d990-4aed-9712-eb12b616b783",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8d1c32b-b3fc-4492-9b55-0d880e689eec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "049591e6-ff6e-4a8d-a62c-9c490c0af52a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a6fa00b-55e7-439a-a05a-b070fcf50968"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dc55769-291d-4c77-823c-8185be26e5ce",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb039e97-d73d-4fb9-b1e6-98e7c78e8f54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07ce5d3f-f357-461b-928f-a16a286048f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0537ad9-124b-42e8-9bff-06bac378b990",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4e7894e-a38e-4ec3-92aa-f1a20bb9e2db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d070297c-df3c-48af-8552-7a0d5cb108d2",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5e4d5bb-37f3-4aba-925c-823dcb2eb140",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b939b24-ec04-40d0-a6d7-039fb148f481"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dab75e88-8c64-4843-b2b0-595cb0388a2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "064f78ff-a6af-4ab3-a717-2bee66694936"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb0247d8-9d77-4c8e-8157-60ac1ac9e739",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a28d03c-6525-407b-b78f-27bd5342fc99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55cf4c13-6345-4683-9f48-0f29d9625080"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0085f7b0-b3c8-4a3f-baa5-05abf5cd47cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1426f9cc-194b-4f9d-be04-838354c3c719"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b694d9e7-d4f9-4211-9351-20cbb2189242",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0dc83a6-802e-41e5-ad7e-18de73e5b4b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc4cf927-646f-437a-8184-47e1c59bd1f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2ba02ce-e351-4a5c-951c-e1dd3e5089f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cee88ef-5140-46da-8644-9d3dadde9d41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c0c07b5-d197-4974-9f03-a31e50c5ae20",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6aa1b12-c521-4ff0-a27b-e13812171533",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a1ff783-f133-4643-ac86-f37991fdf47e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f56c1ab-91be-4808-915c-7aa5d9e63d7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "987baba2-431b-4767-a262-ef1f0bebba80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4fc3879-4b25-4ab2-9a31-89a6f103c399",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae4f2f3a-b858-4418-8e68-2f5cd941b5b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37e28ead-b893-4caf-a0d6-5ae75844b144"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c395a96e-8095-4691-9ec1-04ae697532b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f04e3046-0706-49ba-be25-3e6248eacafa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc706613-cfe5-4898-9075-25157f0c0005",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f613888c-edec-4c58-bcc3-950f910a0195",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b15b3d1-86fb-403e-8b8a-3260db1cba99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c520b894-bc94-42d2-9880-96878d0c633d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "113c702f-6bb4-4e69-ab93-ad1f341f40b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57056616-348f-44f8-b112-db04a4e987d4",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce7af95a-6e59-4106-ab77-9665b2c1cd09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5184214-8963-4a09-9688-b7caea1f8289"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42124fde-d8f5-4be6-839e-ceb01b14d363",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0af21c5e-25df-48b4-99c3-dc6843cd3690"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dee535c-93f6-43fc-b10a-00c8cb062484",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33c7b47a-9c84-45a0-9e30-0f674efb0830",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6ba38a4-21b8-49ef-a3f5-7deb25aa85c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3248268-ca76-46fa-a90f-510e53d2f6a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20ed1cae-fe90-4eaf-9ccb-d5aafadd2bd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54c96011-59f7-4848-a6a5-bd19104983c6",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c18f84b-272d-4b6f-88f4-efc89a81f7c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81d33fcc-1bad-410d-8430-b8117fa61ac2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6490eb37-474c-45f4-937a-5022a10dab14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28d292e6-717a-4b9f-b30f-6ff642e1d94c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70f0f8c0-deea-427d-8443-dc920db83164",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96f9fb2c-f41d-406e-baa5-839e6413e254",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7d202be-dfde-4bc0-8e48-d77afc89f03d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da3dc856-d8ec-4aae-a02a-ffd6a1242984",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cef761a-284f-4b12-8fe0-4d5a053fff5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c67a9486-2edf-49e1-9a98-d6562e1dca91",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13e2ef19-7b95-4b09-a9a8-bc80a4855cf0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67ee0767-c033-4e70-bf2b-6a831d1ae112"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c164aa6-28c4-4ab4-9b16-d7a80e2bc51c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b90e8362-e0c0-43a3-a06e-cc99467e837b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6456b754-780e-4828-9dcb-19413abd4554",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d460c9e-7da5-4230-930e-fd16de3b1398",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02a962bf-21d9-431f-a766-6b3e41205d56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26c2136c-c30c-4cab-9d42-b07a1137b7d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13772767-c590-44a0-8184-cee32031b566"
                        }
                      }
                    ]
                  },
                  {
                    "id": "555d9471-2e00-48bf-ac5d-a62c85179718",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4785ac20-2bcb-498c-a1cb-e57ba7a797bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8135d37-e0df-4e7c-bdfe-9ccc7e552667"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b82755b2-ce96-4a20-ab03-239ac539d4a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "234b5a1a-509b-4a28-80a2-2ee80829b63b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00bf8031-4641-4e49-a73b-76ffded006cc",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f1df063-fa53-47a7-ae46-0c864dcc9892",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e04c5f49-8e5c-4391-81f2-d1c49a16c9f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6b6be0f-4551-484b-960b-c88af63b2a4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d65c6991-eeea-42ee-9d28-c19e110a5195"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f4fdb5d-0c31-41b6-b76f-e0e405cd6653",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97343709-ca59-457a-b42c-46aa08f0ad76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dee923ff-fc3a-49ed-a98b-23f8e7d93ec6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "567817dd-3474-42ca-a31f-7e53c7802020",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ef21039-57ce-4609-ae40-b2f4b1504206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91c1e4e3-f3ea-44ca-a533-4cea3f3b9d76",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4094efa6-cf47-459e-9ca0-34b6a49fb143",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff7c3288-0f6b-4f3c-89cb-24cb16afccce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11ab30dc-3dbe-4097-9dd6-6d0120ab159c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "750390f7-0264-457b-b8d1-e76e33444cb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c8f7be8-3bfb-4f50-b7ea-6e1c3c4f3517",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a98a97e0-431e-4841-ab9f-7cfafdc35dcf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "682ab811-6328-48b2-9320-a9990fd1d09b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18d82705-f436-49c4-840f-aa1ea68c79ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf0c4212-c8a0-4ec8-904b-c14c5a131f18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6786b206-bf2f-4f49-ba8b-9cf2a981466d",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "784d8b5f-0d07-468f-98ce-c798bd55948d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a4ceb7a-7cb5-415a-8763-f64b5a2ca2d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64caca95-d45c-4b77-b3c8-ebd836d4567e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e321a755-f04d-4ad1-bfdf-5d5c1ae6a320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ef12625-310a-48dc-a095-397d8a5d4928",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "798a6017-fe3c-4bb9-9e6b-cacca099ccf3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "553e5431-1f86-4ed3-a2c1-b3ba92e35f30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41607b63-3eb4-4478-a7ea-e3b3bc8a5dbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0eb3c8c-846f-4823-ae06-56bcc149ddd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fef16db-70fd-4579-b6f9-ec52ff64530b",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17aeb287-255d-4705-a089-c16c245e1dcd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7d78d0a-d068-4435-ba4c-8287fc9a563d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3502b385-08cb-4066-a160-cb271847215b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "838f9e1e-a688-4d34-a6bf-fc7151680706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f0ca068-65c9-4b4a-b1ae-e235dcdcf489",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1edfd33a-d628-426a-81a1-78e216be0062",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "869d3159-b23c-42a5-9325-74924ab32939"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cecdb4f7-b44c-4d10-8b99-05e08c708504",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b5c8920-2e20-4431-931c-c26ea865e980"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3d25d06-6190-40de-902b-3dbe185b597f",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22e0a7a9-b1ac-4ec2-aae1-4db1d6ee944a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f75bf2e8-b039-43d0-b425-d7560dc4b7f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e52b908e-d1ee-4c07-84e9-fabe76feca0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "027048ea-2b5e-44e6-90b4-f24dfc180423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fce18da-b141-4722-894e-3ef074b42022",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54d2d571-908d-48a3-a075-48e8655357a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63a0afdf-5eba-462f-89a9-43f98e4d30f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f811aabc-580b-4ff8-8249-47b50e4c5552",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "048c95f3-d581-4848-adc5-53bd8fc0f489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15f4da1a-8f0a-4d26-a6d6-0821ee1223e8",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc596aa6-fe57-46d4-ab53-1d4e1277d1b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12fc804c-e61f-40a7-a334-5db149484c67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab0e00c2-37ef-4f3b-8e8f-d05c0206c143",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60d9925e-09d1-4c3c-859b-feafb26e5360"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d83fe5ef-881b-43b0-888b-9d1403b56b0d",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8a3f2ab-ff23-4695-ae35-03349a8dfbce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43a55fc0-7457-4d6b-be9a-05b1ec8df439"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07d4485d-8c68-49ea-8720-2ff6855e8c43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aaa5830-ad67-4006-9d8f-7a9a070c3679"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c96d9a7c-7d24-4e35-9d45-8fea3a1fa50f",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1533ae7-02a7-46fa-8272-0793654c824e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae0aae14-69df-45af-ae39-eb83ae43082e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9518bf10-82c3-4a1d-8047-66157a0e49e8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29f058a8-7c4f-477c-ae57-14ef1382f2fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec4a4b74-5fa1-4e89-bf43-ccca31c7517f",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d382e986-a29a-40b3-bcb5-c724bc926927",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00e95684-b167-4324-91c3-ae4508823b46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e03f4d45-e1a6-4c4f-848e-e4b00a1e22df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4e6735b-9c1f-4900-b71b-5f4a5ff6de38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ce73be3-c11a-4605-832e-debf83da3078",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a740ab39-c469-467a-b07a-0f84cb715418",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb19b831-2786-41a9-9d2d-8b904ecab4a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f461b5ea-ebe4-4876-a385-7fe2581076d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caa95f6b-853b-4774-b153-6d86456b9576"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93ffa11f-d22d-4dd8-bd8a-d4615b52a625",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b41d703-ec16-42dc-81d3-9247d762100b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e93bb9e-6bcd-462e-9e01-213890c7f7a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a807a4c4-188f-4c42-a3b9-593229b5a6e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eef2f1a1-e9db-4198-8932-74fe584ca528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12090d8a-adfb-49d4-83d4-9c973a420a8f",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba0b540b-c55d-4b19-bdf3-c200279756c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58c0526c-2722-4823-bf3c-83bf0d410f28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eacf2539-1c01-4552-ba26-e995aeb719a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "054b0043-2a7c-44a2-872e-3f50d135557d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "997793cb-9f4f-4a6c-8f38-e9df89d9de8e",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "153ce3e1-d15b-489f-9c92-35ffb9d98f58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41129bd0-d679-4c7f-9b92-d056e523ff4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f16f2721-a995-42de-aee7-05563d030046",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79b83c13-ff1a-40d4-ba2e-8a34254ffd50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12e40b93-1afc-47d5-ad1b-b9ce7e66e7fe",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58a1a4d0-6cdd-4685-a1cd-318064af4556",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb51d381-5a62-49e2-8f28-86b98cc9c686"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8222cf8c-0bf1-4a76-8078-c79f3292006c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b983c55-30d2-4b9c-a104-a3b2203e1372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f83bfbc-e56c-4966-9e52-2e7ed54df6e8",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15d4a95b-6433-4a4d-887b-802224f5ece2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97d9f8df-b0bc-4083-9ac9-87a8658bfe38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17b57eea-d835-49be-887e-a6a5401d913b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "324a0553-b640-4f26-8bea-faea609000eb"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "284c9e44-f16e-43ff-be72-d527e35b6fab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1bb41fd8-e638-48ad-8174-8c463ce7b92d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7d81a75d-eb32-4a7b-a1bd-2881ac3124c5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "432acf19-39e8-48ff-98c3-d8492a12baca"
                    }
                  }
                ]
              },
              {
                "id": "e7c91695-8691-46f3-8e41-07c5351b481b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "29c122fb-fdfc-4d6b-b0dc-3caecad5a348",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "858677dd-fbf9-4483-a8e7-72658aa86a1a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "20e2b8ef-80d6-4038-8f27-3069018fa95a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7a40943-9e2e-4f9d-a6b8-743a7e3ae857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b96a2540-0402-4328-af43-c6b17c06e380"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8c97762c-2204-4614-baac-c148df27a879",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7c8d747b-ee1c-4c1e-9f51-c6113e9b84d2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c194ce6-ccca-42e5-a086-4076d91804e2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b86f34b7-902d-435f-af88-e22aa90c6577"
                    }
                  }
                ]
              },
              {
                "id": "b4d9337d-d693-4a4b-a562-7db2c193feeb",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "f936e630-93a2-49c4-9b93-b1ddf7e902b0",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f91091f-a206-4cfd-bd21-7c7193b8f08c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "4e8f459f-c7ce-42e7-ab6c-39739c188301"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef35a3d7-de60-446c-a48f-56e7470bfdf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be86b0b2-cc41-4fca-a411-d8031122c23f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c823614a-68db-445c-9562-7d579944114f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "02cfbee8-9820-4aae-88af-c19246a3c1f9",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "46b502ce-3c13-4b37-acf1-20bea7d06cae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c0fdc286-9dfc-4488-a078-3bbbd2f07cba"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "808e7613-d5c1-4fc0-a400-994b8c2b5249",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "27a5c015-37ad-4c7c-bb98-0fecfaaf9b76"
                    }
                  }
                ]
              },
              {
                "id": "3e80dbf6-d07a-4aff-8842-8864eebfffff",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bae02467-cad7-4605-9e8b-28248b36894f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d4fd1851-e62a-48ae-8a2f-d14048a93966"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2f1c1156-3fc8-4ece-808f-b35864823e29",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "112b0edd-2a0d-44bc-ac5d-18bd9fab8113"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "67810096-8985-43f9-8cee-48118f96f0e9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "30ed720c-3fc1-4546-b6e0-b1fbfdb64b79"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a2531629-cf46-49fd-a7e9-ad3b143775c9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "314d6584-51fc-407f-b3ac-4d2ec798129f"
            }
          }
        ]
      },
      {
        "id": "6afab414-aeb9-4917-901e-20dab5657e1f",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "0a0529a8-cf1c-4a57-9f51-a230025aa222",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9ebc79f2-bad4-4d4e-86ef-2d97198b4f55",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ccbf8dc0-9b9f-4701-81e2-f08de0418189",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5339922e-a1bc-43ce-af3a-4d962adc13c0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "746c321b-221f-4c10-9286-660846160b42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e771c65f-2eac-4d62-9fb8-9af1f135f5cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2a2ba6c8-da4f-437b-96b3-66d43936cd67"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5d5583bf-b519-434a-9e9c-eccdb459f447",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6e28212a-55a3-4b35-8003-0da94786bc1d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0870a053-03e1-4572-979b-daa7300c3a3d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8d9a7e7a-c7f5-4c3e-84c7-6631b23d2f0a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "052624db-42d7-46d7-a60c-277a02cc4988",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "6f52ca95-cb8e-4691-9321-7efd535faa37"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9e7db9a6-f1d8-476d-902e-acb0ccf6164d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3d53551c-6092-41df-855e-fea87974e961"
            }
          }
        ]
      },
      {
        "id": "8fcb977d-9832-4744-96e6-35f0f5cdb516",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "ef72e616-e26f-4b37-b8fc-e3c7ed68a4cb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8aec0e34-2126-43d7-aa0c-749b5302c4b2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4ff5d2bf-6b97-4138-a724-dd6fb272cf11",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a79fc111-641a-4808-863e-d92a9b419c70",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "040ffd57-e130-4473-81ea-5c877a81e49b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3e090b9-c143-4846-8d61-f6b8a6317bc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "00a18f84-7da6-47cc-9b79-512c127d1567"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "425194ca-d146-42d6-a601-c8cb0234363a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bc7118cf-7d6f-4945-9329-f282754df474"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d9e058f4-d503-4207-bd37-7bb2ec14974f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1cf5ad78-96a4-4b84-8f36-3a85d1ac3e23"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7479c96c-c9c0-4838-a479-3042aec25e55",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e983c848-2e0a-4b95-a5a2-233b39682156"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "132d684b-ecbd-45b2-97c0-bd84edb719e1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ed8dacac-caad-430c-b364-224776aa92f9"
            }
          }
        ]
      },
      {
        "id": "39d3fdb7-abe2-426e-9329-aefe45783d73",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "e70a5521-8e61-458f-a458-256e6bc71921",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5c7a9832-fb40-4207-91c6-ce8e7a8f84a9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b0c0e52e-bbec-441f-8c0c-2c43a14293f3",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6aed1e2-ea77-4bff-9e59-ba420d24a14b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4a095245-ed71-41f0-9163-673551439819"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c403240-b3de-4c98-b2a3-117de1f4b62c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "66379288-83da-43cc-8ce3-8ed8cd0bff70"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7c6340b2-0237-4a5e-be04-33e8764e79cc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cff6aee8-b1f2-4113-8a35-b55f403164d9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9aa11d8e-dd25-41f6-b6ea-03262f939b38",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0e0d1e15-c228-463e-8195-1a2cce200cf8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b1c5f686-a730-459c-a693-939b9494b4a8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1cb6689f-4413-4456-8fe9-f4b8250a4d17"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9f119b9e-e5e2-4c99-901c-6f86c7df9afe",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "038983b0-d39b-41da-badc-d7418b0f7cda"
            }
          }
        ]
      },
      {
        "id": "ab1b5140-3672-4606-8352-39e3111c77dc",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cf661105-53b7-4bfd-80cd-47bc3f94b3b4",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "542f74c2-5851-4dc2-881a-f42ac1e1e541",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "95e2d451-de7f-498c-bfed-b0c8c893a6ca",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "87d7360a-9412-4b89-893a-67549bf6ec06",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "123efe23-33ea-49cc-a146-9f405d34e277",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 295
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 49.88070175438596,
      "responseMin": 25,
      "responseMax": 244,
      "responseSd": 18.407658957061074,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1710722122615,
      "completed": 1710722145780
    },
    "executions": [
      {
        "id": "7d727e6f-aa69-4175-a7a4-185b2ba58075",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b0a4f5df-a957-42df-b731-9e3d6080c15c",
          "httpRequestId": "c671f439-b982-4fe6-8ca1-7f894faa258b"
        },
        "item": {
          "id": "7d727e6f-aa69-4175-a7a4-185b2ba58075",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "82959ad2-e9e4-4703-b0d4-81ebf9410a2b",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 0
        }
      },
      {
        "id": "a92da795-c33b-4a7d-8490-06b06504d3a8",
        "cursor": {
          "ref": "4ea2110b-ed9a-4fd8-b170-88567d8d253a",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "94d00aa1-31ac-4d52-96f5-24d29c628c81"
        },
        "item": {
          "id": "a92da795-c33b-4a7d-8490-06b06504d3a8",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "9ad41277-1ec2-40a5-bf15-260eae1e353e",
          "status": "OK",
          "code": 200,
          "responseTime": 25,
          "responseSize": 0
        }
      },
      {
        "id": "9922dd4c-d3a9-4b1e-98a4-735495aacb8a",
        "cursor": {
          "ref": "0e20c19d-c202-420a-a871-89b4601ddbf1",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "cf264fb4-0cde-48fb-b093-1481bc89d00a"
        },
        "item": {
          "id": "9922dd4c-d3a9-4b1e-98a4-735495aacb8a",
          "name": "did_json"
        },
        "response": {
          "id": "8d53fb69-cc1e-491c-a3d4-25194312a6c8",
          "status": "OK",
          "code": 200,
          "responseTime": 187,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d31b93e3-b891-4e17-b321-10fefe626b9b",
        "cursor": {
          "ref": "eff6d67d-ff9d-4a26-a4eb-f92ce7362954",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "aa3ed13a-d208-4665-89a5-8fc45cbe297f"
        },
        "item": {
          "id": "d31b93e3-b891-4e17-b321-10fefe626b9b",
          "name": "did:invalid"
        },
        "response": {
          "id": "d8f637a9-4d21-4087-97c4-9c0e03520740",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d31b93e3-b891-4e17-b321-10fefe626b9b",
        "cursor": {
          "ref": "eff6d67d-ff9d-4a26-a4eb-f92ce7362954",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "aa3ed13a-d208-4665-89a5-8fc45cbe297f"
        },
        "item": {
          "id": "d31b93e3-b891-4e17-b321-10fefe626b9b",
          "name": "did:invalid"
        },
        "response": {
          "id": "d8f637a9-4d21-4087-97c4-9c0e03520740",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d85e9a7-c86c-47c4-9b42-79a2f4eb144c",
        "cursor": {
          "ref": "a0b66657-d55e-4f64-8dba-cdc8d285b4dd",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "dbeb7c04-db39-4f66-b4bb-6ba0ae2ecd56"
        },
        "item": {
          "id": "8d85e9a7-c86c-47c4-9b42-79a2f4eb144c",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "5b88e716-c19b-46c7-89f2-95edb1f85ae2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 96,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70b57f67-24de-420e-8d30-a140f264c099",
        "cursor": {
          "ref": "42eb0ec4-90e5-45f9-ae08-66827c54ba61",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "cacb842a-07bd-46bb-9b36-8ed3bc2393c5"
        },
        "item": {
          "id": "70b57f67-24de-420e-8d30-a140f264c099",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "59d1cce3-71ac-4525-85ba-207867ad7948",
          "status": "Not Found",
          "code": 404,
          "responseTime": 48,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05ffd370-8c26-4cba-879c-95b734043147",
        "cursor": {
          "ref": "1dd32cb2-52ee-4006-ba1a-f59928822a94",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "0a590dd6-116c-46fa-ae2d-40049cf4e078"
        },
        "item": {
          "id": "05ffd370-8c26-4cba-879c-95b734043147",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "fc83e7a9-eb14-4e8f-9334-eb7903396874",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "751b3d8f-30df-4a50-b48e-e9163f2c3e83",
        "cursor": {
          "ref": "92e795c8-1359-41dc-a3d5-77991925ae7c",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "be55448e-4e46-47d4-aa34-6bbe62817dee"
        },
        "item": {
          "id": "751b3d8f-30df-4a50-b48e-e9163f2c3e83",
          "name": "identifiers"
        },
        "response": {
          "id": "01040c7b-da50-410a-adf2-872e98c46464",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b70dfed2-74a2-4681-89eb-cdaa49d38969",
        "cursor": {
          "ref": "c69a5467-9aaa-463c-8ec9-5ac9b351fa15",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "0ef8c55c-158a-4452-8f54-de6518088e4a"
        },
        "item": {
          "id": "b70dfed2-74a2-4681-89eb-cdaa49d38969",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d7a457f8-2f4e-4360-95f1-60fcc7ce0635",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a144a079-adfe-4c18-9b7d-63e33121f228",
        "cursor": {
          "ref": "31b99cb9-c5d6-4cec-91fb-29f11703b78f",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "9b78fb03-4714-4bcd-9444-ff5923414161"
        },
        "item": {
          "id": "a144a079-adfe-4c18-9b7d-63e33121f228",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "245c7176-b582-4bc8-af17-9cd9d4c2e3cc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4bcb338-fd63-4159-9a0c-8edf49afd541",
        "cursor": {
          "ref": "483cc398-4d5b-4626-a809-5d1500ac18bc",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "6321dbb9-af18-4dfe-a309-273cad9ff344"
        },
        "item": {
          "id": "a4bcb338-fd63-4159-9a0c-8edf49afd541",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "f8b50106-5986-4358-9072-9b01fa97f54c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e3b5370-c169-4a2a-8e1c-705a354a9770",
        "cursor": {
          "ref": "44462a26-1500-4b57-975c-ebb729de0b32",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "36a5aefb-af1d-4d8e-9238-0743ef5f0d6c"
        },
        "item": {
          "id": "6e3b5370-c169-4a2a-8e1c-705a354a9770",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "065d5696-fe25-43b8-8eee-12ab986204e9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50985c4d-fd9f-4488-bfe7-2eedd4da1dfb",
        "cursor": {
          "ref": "b6f96b35-f26c-4875-9cbe-a41769b062fa",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "aa8c3b60-bbbd-4b73-ad3e-c06a090e08d0"
        },
        "item": {
          "id": "50985c4d-fd9f-4488-bfe7-2eedd4da1dfb",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "d82bcaf7-303b-469b-8dea-5a4b63fa3de6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ef73646-2784-4ad2-a47d-fee1c6be4665",
        "cursor": {
          "ref": "4cd80321-7a94-4692-98d3-8874b436f9bc",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "88351b02-bcc4-40b0-aac0-b999f8af7fb5"
        },
        "item": {
          "id": "5ef73646-2784-4ad2-a47d-fee1c6be4665",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "a058013f-9ff8-454c-8529-952f6104bdc9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a781d93-9f00-4a7b-9e4c-63bdffc5d5a0",
        "cursor": {
          "ref": "ff795597-5190-4890-8e38-96401704cfbc",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "71a0953f-a4c1-498c-909b-4160a1b67216"
        },
        "item": {
          "id": "9a781d93-9f00-4a7b-9e4c-63bdffc5d5a0",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "f0defafd-91be-4253-9022-5fa9bbd29a9a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67f06d01-2e40-4d7d-b5d0-35b97e1a9425",
        "cursor": {
          "ref": "6476d333-bcdb-43e6-ba8a-f7617b731b02",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "4d94697f-94e8-4682-b57a-16bfd0c63547"
        },
        "item": {
          "id": "67f06d01-2e40-4d7d-b5d0-35b97e1a9425",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "6715e3ed-88d1-4b51-91fa-02b1a15cfa58",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8027fca7-b1e5-49c7-81fb-74ccd4c3d1d6",
        "cursor": {
          "ref": "c14000ff-e0f4-4eb2-aefd-d7c868f4b3ce",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "2b391c12-6abc-4491-9f1f-1d64a6de75ee"
        },
        "item": {
          "id": "8027fca7-b1e5-49c7-81fb-74ccd4c3d1d6",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "df8875b1-893c-4e07-a8c4-3bcc626f891d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3e31a24-a09f-479f-a83f-0b5db5ff31d0",
        "cursor": {
          "ref": "5538e120-6917-4653-86e1-dd6ac43eebb8",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "e90c5809-c561-4659-a1dc-8e5611fa1e9b"
        },
        "item": {
          "id": "b3e31a24-a09f-479f-a83f-0b5db5ff31d0",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "204185b8-7b5e-4196-8f7c-04f859d3af08",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f40cf297-b98b-4f4b-a258-ed914a0f5158",
        "cursor": {
          "ref": "08a5baae-a85e-48a3-8401-fca58ec4e5cb",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "692cf1dd-a6a5-440b-8238-9e8cbe474cf8"
        },
        "item": {
          "id": "f40cf297-b98b-4f4b-a258-ed914a0f5158",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "5e6bfe34-57d2-4bf2-ae82-886a4a58e8c8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94ebd16c-b683-4995-8f54-c5e910244afa",
        "cursor": {
          "ref": "002b92d0-ecfb-4ecc-8d97-8fc5ec1ba9d1",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "24815b4f-111d-4542-94f3-8e0119aa9f46"
        },
        "item": {
          "id": "94ebd16c-b683-4995-8f54-c5e910244afa",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "9bbb67bb-6723-4986-ace9-b327961ae142",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53e311ea-ca31-455b-b73a-08653299d302",
        "cursor": {
          "ref": "6739c091-128b-4783-9414-a261caa0f782",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "23ad6a6f-279c-4e13-925a-1ff7d036f316"
        },
        "item": {
          "id": "53e311ea-ca31-455b-b73a-08653299d302",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "3216e0d7-d6f6-4ec2-8d4b-35893e070d64",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48a3861e-830d-4593-b0de-206685907cc1",
        "cursor": {
          "ref": "8f3f2241-e586-4f36-a3c1-82736a995584",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "735dd33d-c24c-4c4f-96ec-5e88828808fb"
        },
        "item": {
          "id": "48a3861e-830d-4593-b0de-206685907cc1",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "1c7646a3-5509-47d2-b93d-8ebf1ced1a1d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3d5b5a8-fa26-488a-9738-2c2c4b9b598b",
        "cursor": {
          "ref": "6a698dec-8623-4eac-b280-44efb23a0a1d",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "d62f4e0c-2530-45d7-aec3-6ca74805525b"
        },
        "item": {
          "id": "c3d5b5a8-fa26-488a-9738-2c2c4b9b598b",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "343ecec7-5584-44c6-bd9c-3c42fba3436d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38042f15-ec8b-4425-ac5a-cabedc4344dc",
        "cursor": {
          "ref": "c1756031-3bc9-4416-8ac4-52ab22270570",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "dae60c24-8d2a-414e-9b30-2f033ea53d98"
        },
        "item": {
          "id": "38042f15-ec8b-4425-ac5a-cabedc4344dc",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "3c3fd72a-c97a-42f4-a271-3f98b4b7599d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "543cf7f9-97e4-4d5b-9674-0746117e36ab",
        "cursor": {
          "ref": "c2e97f8a-c842-4e9c-b730-83ec61c427d8",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "8cf6bfbc-7f7f-4df4-a366-7872e384a424"
        },
        "item": {
          "id": "543cf7f9-97e4-4d5b-9674-0746117e36ab",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "7ba6379b-6b97-46ae-b5d3-562f39005c8a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fef3a2de-8a1e-4d24-9b8f-c6bb05a71efc",
        "cursor": {
          "ref": "729ab459-a702-4c75-8646-51d340b30fce",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "22b7693d-c1cb-4ed6-bacc-40b1033cdfac"
        },
        "item": {
          "id": "fef3a2de-8a1e-4d24-9b8f-c6bb05a71efc",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "09c33383-8855-4f0f-817c-7632bddfb9f1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e27e5bb9-4838-4873-b7cc-3bced3aab807",
        "cursor": {
          "ref": "62971a36-78af-4300-b77f-baa27dedb817",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "c1d6a481-2ba9-40cd-8b8e-591cc32ea599"
        },
        "item": {
          "id": "e27e5bb9-4838-4873-b7cc-3bced3aab807",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "f39a78b5-3c97-4bf4-b14d-0c1f517585a4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f90ce737-1c44-4967-90aa-21b62006ad3b",
        "cursor": {
          "ref": "45723d69-c1f1-4d40-bde8-b0c01db50e52",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "680ad90c-2cd9-4693-9670-3bfa67afd851"
        },
        "item": {
          "id": "f90ce737-1c44-4967-90aa-21b62006ad3b",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "2dd179be-d23b-4bc0-8dd4-a590be6eff8c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4469c0f-ffca-4291-aa7b-e9b807f59cc0",
        "cursor": {
          "ref": "8283b9b8-9338-4cd9-babb-6626ca9c897b",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "724e7265-9529-43c7-9bf8-830130f326d0"
        },
        "item": {
          "id": "a4469c0f-ffca-4291-aa7b-e9b807f59cc0",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "384a7fef-071a-4a57-b9bd-24d14a6b08c1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96631aa2-a2eb-43a3-9ff7-a4a827bed78e",
        "cursor": {
          "ref": "308e0cba-49e8-4ffd-a2af-be57cb5fa1c5",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "75b1d590-faa2-463b-b4de-5a089c11e65f"
        },
        "item": {
          "id": "96631aa2-a2eb-43a3-9ff7-a4a827bed78e",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "b248ae5e-c0cb-409d-b2d8-fd26f40cf233",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f872b95-ec61-4861-8506-e5b8c77a8089",
        "cursor": {
          "ref": "5f6c7726-a260-4939-a6fa-56bfa9ac6b51",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "9cb57c78-3872-4eb7-9ff8-3f0883d5f573"
        },
        "item": {
          "id": "9f872b95-ec61-4861-8506-e5b8c77a8089",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "0518388f-2387-44d8-b74d-0f976a045ce2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e73b191-371f-469d-85fe-e2c09cd3f506",
        "cursor": {
          "ref": "3335efb5-8a76-4b0e-acdb-1198bded725e",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "0d489cf8-47de-4476-96a8-58c2204fe1a7"
        },
        "item": {
          "id": "6e73b191-371f-469d-85fe-e2c09cd3f506",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "fcab77d6-dab8-47bb-aa3f-46fc3d18c36a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c336a407-e482-468b-8289-b0d9572390fa",
        "cursor": {
          "ref": "6507a339-c96b-4a01-aeaf-377b1da42d80",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ce3ea812-102d-472d-952a-1985605b9016"
        },
        "item": {
          "id": "c336a407-e482-468b-8289-b0d9572390fa",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "4bf8bdb2-3b5c-46b4-b73c-4999219f5970",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e620d42-5d04-4be6-9c0e-0249105fead0",
        "cursor": {
          "ref": "bba854f6-fe9b-443a-b70f-42ea0495fc4e",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "2144639f-a3fe-47c3-b011-fdb05baa5371"
        },
        "item": {
          "id": "4e620d42-5d04-4be6-9c0e-0249105fead0",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "371b62e9-1993-47aa-b467-d16723220316",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e37cc60b-e31c-4e68-bb09-7d8158565fb0",
        "cursor": {
          "ref": "0cd67648-e500-432d-af22-29a6679fd356",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "40e16b63-7e82-4fc3-a270-bff5eb073643"
        },
        "item": {
          "id": "e37cc60b-e31c-4e68-bb09-7d8158565fb0",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "2a2d3c39-9412-4268-80da-56ef9d95c345",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "720a9ab9-662e-464c-b4e5-2ebd3d03bffd",
        "cursor": {
          "ref": "19e18d7b-c374-4a11-bf1f-7a5823d5e03e",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "78db01e2-9c13-4583-bfa2-e351684eab9e"
        },
        "item": {
          "id": "720a9ab9-662e-464c-b4e5-2ebd3d03bffd",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "903f3ad6-ff57-40a1-967c-8b166636339b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f5cd84a-63a1-4a79-8fd2-750f579f7227",
        "cursor": {
          "ref": "65469a68-0f05-46a5-b3cc-8ea59d0bda63",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "33642b23-721f-4452-b842-389e954058bf"
        },
        "item": {
          "id": "2f5cd84a-63a1-4a79-8fd2-750f579f7227",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "3f4261dd-9c3f-482c-91ef-c57c870d71a5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4ed4960-7b01-4317-ac84-0b40cb1731e2",
        "cursor": {
          "ref": "c7a2fc1a-e0f9-405b-8d3b-2f390dd6c119",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "63817168-fe9d-4c2e-af2a-95f71f13bc12"
        },
        "item": {
          "id": "e4ed4960-7b01-4317-ac84-0b40cb1731e2",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "d3769051-03f2-49d3-a459-1913f7c2e93b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb681e70-53aa-41b0-9514-29cb18aa8709",
        "cursor": {
          "ref": "51f53ceb-e6aa-4597-9281-30f2323a19ba",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "4c91e593-29ed-43de-a7bc-a7852766337f"
        },
        "item": {
          "id": "bb681e70-53aa-41b0-9514-29cb18aa8709",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "739a3a01-71eb-41d4-8e8a-c176251ccb69",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29a129d9-c426-4225-b264-e25cbfe9af61",
        "cursor": {
          "ref": "7185120f-8524-41d6-b3ab-0bd041b0eda9",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "e83aff42-2b75-4c35-a672-657e15af3b9d"
        },
        "item": {
          "id": "29a129d9-c426-4225-b264-e25cbfe9af61",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "88b295bc-86f2-40b9-8acf-01eb34b08e3d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d44b9e44-9855-498f-b6b6-013e6a517054",
        "cursor": {
          "ref": "7f092872-80ef-4ae5-9524-fc229e38f989",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "7bfe18aa-fa54-4cc9-a6f9-255c14d70e45"
        },
        "item": {
          "id": "d44b9e44-9855-498f-b6b6-013e6a517054",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "cc4622ab-3f14-445b-a84b-afc6e34e6175",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24fc195c-9eb2-44b1-802d-e2e5ff6bedfd",
        "cursor": {
          "ref": "9eeb27fe-fb6c-4763-ae5e-0b98282757fe",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "21667e21-3a29-4b24-a441-74f03e6a75e6"
        },
        "item": {
          "id": "24fc195c-9eb2-44b1-802d-e2e5ff6bedfd",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "7708c4f0-e8d2-44b1-9457-099c4f0086b7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "147cb14b-dd6d-493f-86b9-dbbce709c3c1",
        "cursor": {
          "ref": "882db6f5-11a8-4ec9-aed7-d3b1b17c3597",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "d4800f46-aea1-49fe-b9c8-99bf5755c551"
        },
        "item": {
          "id": "147cb14b-dd6d-493f-86b9-dbbce709c3c1",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "ca7f1d46-6f53-4fd1-ba37-def644ec3b9a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3830d638-4d8e-4371-b1c9-60d031db7606",
        "cursor": {
          "ref": "cefefe30-5356-4eed-9e28-8cdc1d35d602",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "d17e0b37-52cd-490d-9d66-af2ecd7ba98e"
        },
        "item": {
          "id": "3830d638-4d8e-4371-b1c9-60d031db7606",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "13540229-5334-45e5-83b6-5f24f4d308fc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaf309c5-fb7e-4332-913b-0f2f0af14682",
        "cursor": {
          "ref": "292151f1-fe4f-4e9e-8976-518224e7e38c",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "949e4e3e-c6b5-4246-9d14-e9c993890479"
        },
        "item": {
          "id": "eaf309c5-fb7e-4332-913b-0f2f0af14682",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "978089a7-59fb-494d-aa4a-cff8c8ae6f57",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdd30b5e-bff3-4407-b1ea-9907f21dd599",
        "cursor": {
          "ref": "ab0f92c3-df27-428a-a1ca-6f38b71724fe",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "70272074-04ae-4e9f-84c6-0439846e31bf"
        },
        "item": {
          "id": "cdd30b5e-bff3-4407-b1ea-9907f21dd599",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "544408ec-c883-4c42-9659-714e898b8902",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc567fd0-f02b-4713-91fb-3ceb4f41690b",
        "cursor": {
          "ref": "d79338c2-c1ba-48b7-a67a-202093d92940",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "5b550d06-8e3b-432d-bedc-390770c43226"
        },
        "item": {
          "id": "bc567fd0-f02b-4713-91fb-3ceb4f41690b",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "e8466075-86e0-4a57-b4ca-ca676aef61dd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "248c27aa-d87a-4eea-8dd0-88bc3bed6e3b",
        "cursor": {
          "ref": "f00c0eaa-b6ad-408c-b93f-df302ad7b405",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "221813a4-d4e6-47ae-9e81-9af334a42212"
        },
        "item": {
          "id": "248c27aa-d87a-4eea-8dd0-88bc3bed6e3b",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "280ea9f8-32de-4cbd-b28d-ab0fa4d5925f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa0697ce-18dc-4ba0-b629-9554db1fefbf",
        "cursor": {
          "ref": "ea7902f5-9378-45af-afe9-0e6574367881",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "cfa258a4-2b78-4264-b9b4-d589d717fc7d"
        },
        "item": {
          "id": "fa0697ce-18dc-4ba0-b629-9554db1fefbf",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "ef57ebd0-29a7-4f55-a920-7e2e98f2c69d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1b8b9bc-673e-4ab4-9fca-462359745faa",
        "cursor": {
          "ref": "316ae136-de4a-4a2c-84a1-81c5cc8986a8",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "997409e7-6646-4f9f-9fd5-0136d4836a0e"
        },
        "item": {
          "id": "f1b8b9bc-673e-4ab4-9fca-462359745faa",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "7a58aa92-9ece-485e-b7c8-5baf870cda38",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f7a5fa8-4207-4b8a-ae78-3d6ab2b904ca",
        "cursor": {
          "ref": "b16c938b-2cef-4453-a609-680529d67e4e",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "fc58f5ef-73ac-49e9-8811-2d7bb71ae478"
        },
        "item": {
          "id": "6f7a5fa8-4207-4b8a-ae78-3d6ab2b904ca",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "81187589-abed-44c1-b33f-58872e5ee557",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "694ddf69-65a4-4b81-ad39-2ead7551feef",
        "cursor": {
          "ref": "8a5ede2a-01fb-4f43-a91f-01d82b6c36c4",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "c2b64c64-9f60-4ab3-8a80-819cd6968499"
        },
        "item": {
          "id": "694ddf69-65a4-4b81-ad39-2ead7551feef",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "137ae06f-5336-4159-a7a9-3e97b7a6b46e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaca4bb1-589a-4d0b-8b36-9aaafd5f0f44",
        "cursor": {
          "ref": "2010c0bd-6ca9-4db6-856a-94c310823ad9",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "4c632ba4-1358-4f5d-84c8-98b1010c464f"
        },
        "item": {
          "id": "eaca4bb1-589a-4d0b-8b36-9aaafd5f0f44",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "b2a66622-f1af-4a83-b8d8-8d0cfa532e43",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "880830a4-7ed9-4844-811b-7b7bde0b526c",
        "cursor": {
          "ref": "201711c4-26b8-43d3-a4c9-543dfea1f8d8",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "d3c77dfb-663a-4cee-9c7d-7ae843f56028"
        },
        "item": {
          "id": "880830a4-7ed9-4844-811b-7b7bde0b526c",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "f7a15b0d-9dc6-4f94-9f9e-b508f7f6306b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "388f9a55-4ad9-4a3b-9f91-ff6d6b1702f8",
        "cursor": {
          "ref": "4ed31696-3f46-4dc3-ad9e-e677c6dfbc25",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "4a0c16a1-1de8-4666-b4d7-c58b962cc035"
        },
        "item": {
          "id": "388f9a55-4ad9-4a3b-9f91-ff6d6b1702f8",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "56c6235f-4491-452e-8dde-17d0ad0ce2b2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caf61ce3-8170-4306-b3ed-9c0a3afceee7",
        "cursor": {
          "ref": "1841b5ff-d472-41c9-95e6-fb88b4ba0a05",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "e5bf4f3b-dd99-4c69-9cdb-081917557a9f"
        },
        "item": {
          "id": "caf61ce3-8170-4306-b3ed-9c0a3afceee7",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "9acfbb13-42a0-4ce7-9ea9-b17b9fe425c0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0d8fce9-8c7e-4430-95f6-68d05a169d78",
        "cursor": {
          "ref": "7be6ea6b-e8c4-4a2a-9463-5e81940726fe",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "3472db3a-d7e8-40c6-a1d7-e529d74d1cc9"
        },
        "item": {
          "id": "e0d8fce9-8c7e-4430-95f6-68d05a169d78",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "cf78f8ae-be29-484c-b2bc-c9970d3b1304",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f36daa4-6e00-45ae-a8ce-3cf6ffe0c10c",
        "cursor": {
          "ref": "598cdb2e-8ac4-4743-b95d-a459972826d0",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "ee2e3efc-50ea-47d9-9670-bd6082791a86"
        },
        "item": {
          "id": "2f36daa4-6e00-45ae-a8ce-3cf6ffe0c10c",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "5cd3686b-da0e-4f3d-816c-c04e39a1446e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1236b90-eeef-4d07-88d9-a709b808e580",
        "cursor": {
          "ref": "3e49a611-8f6f-46a3-97d4-d2c5efea1d91",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "53906bc0-912d-4ef4-a1c4-3bd5bebc5b06"
        },
        "item": {
          "id": "e1236b90-eeef-4d07-88d9-a709b808e580",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "859c5624-7f77-4fa4-a423-42a38dd529d3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca4c6c18-a75a-4ab3-a548-fd245ca6a491",
        "cursor": {
          "ref": "4edd395f-11b0-4033-8fe1-15432d28adbd",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "76c9b370-2732-45d9-be36-b6b1c142446f"
        },
        "item": {
          "id": "ca4c6c18-a75a-4ab3-a548-fd245ca6a491",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "a852aa60-7c24-40e1-a5ff-c422139ca428",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83252f64-b137-47ac-91c7-d517ea39cc52",
        "cursor": {
          "ref": "00dafcff-7179-4f38-986d-ad3dc2034d4c",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "b1bb866b-2e29-475d-88b6-3186bcc1998f"
        },
        "item": {
          "id": "83252f64-b137-47ac-91c7-d517ea39cc52",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "615a739b-2a70-4bdd-925b-8f41a241f06c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2819d1c4-1c4c-4b75-b292-b9a4a63e874c",
        "cursor": {
          "ref": "8f74b830-544d-4565-8c23-fdd6210c2916",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "d622869c-4e58-4a0a-8b08-c40174e6e11f"
        },
        "item": {
          "id": "2819d1c4-1c4c-4b75-b292-b9a4a63e874c",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "d0c60736-34fc-4c22-9862-5d40662708fa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a13728f0-19c3-4dab-a32b-2bf67509b3de",
        "cursor": {
          "ref": "af9e64a7-bb2a-4f66-87d4-7253dcd4cc28",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "6ba7b465-1270-4caf-aca3-19865f20df42"
        },
        "item": {
          "id": "a13728f0-19c3-4dab-a32b-2bf67509b3de",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "f0d36ead-b276-4157-a83d-77a8ecd3ea94",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f28a512-3e11-4da7-ac21-4835d5237b09",
        "cursor": {
          "ref": "587ea18d-3777-4eb7-a831-8ce377d201a8",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "403d2ede-cffb-4c16-8856-9c60d13b4978"
        },
        "item": {
          "id": "0f28a512-3e11-4da7-ac21-4835d5237b09",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "543167f8-4755-4cfa-ae35-0667a60bf402",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5336e5c1-0486-413f-ad09-67676a975e0a",
        "cursor": {
          "ref": "16cb062c-7e06-4e00-8942-f201d0d8a132",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "a3d8aca6-90fa-4820-9fda-e6e8ec5b2453"
        },
        "item": {
          "id": "5336e5c1-0486-413f-ad09-67676a975e0a",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "25c39790-17a5-4dd9-89a5-e57d11dd2b9d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8c4b7fd-293e-4aec-98c7-1a5bc5d5660b",
        "cursor": {
          "ref": "ace545e1-651e-43b1-8618-a276821a20d1",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "edc48b82-8782-49d4-8a30-7aa9401d79ff"
        },
        "item": {
          "id": "e8c4b7fd-293e-4aec-98c7-1a5bc5d5660b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "72074c1e-8649-471e-9dbd-2448d4d7a902",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83878593-dd50-49b1-9619-8d26a9fef3d6",
        "cursor": {
          "ref": "496aa1e8-e8f4-4197-ad2f-5716cf824a66",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "64e2da5c-0588-4903-9883-daaa8a00f4af"
        },
        "item": {
          "id": "83878593-dd50-49b1-9619-8d26a9fef3d6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "e1f8b6d4-b0d2-48b2-9b2b-3f273a4b88d6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc33d1c7-65a8-46e7-9b50-cbbcf404c488",
        "cursor": {
          "ref": "2046069c-afca-4532-8fd4-0e41452e6383",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "d259bf9e-b6ae-4ea4-8a03-7bb4e6d968af"
        },
        "item": {
          "id": "fc33d1c7-65a8-46e7-9b50-cbbcf404c488",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "82f7e32e-725f-484b-9a81-7d3a8f218758",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c76d16ce-df92-4250-ab20-7f3a02464e7a",
        "cursor": {
          "ref": "bd171665-580b-4974-9701-9275e55dfada",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "b38bc35e-49aa-48ad-9698-e09bb69f207b"
        },
        "item": {
          "id": "c76d16ce-df92-4250-ab20-7f3a02464e7a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "45e27421-b469-4713-b587-1c0d8ce6b213",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d91a8672-4ca5-4279-8d49-faad5f145985",
        "cursor": {
          "ref": "a1866580-4e7f-4251-971e-8ff04343b61f",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "f4ee2c18-7d2a-4692-ae8a-52d414b7aa93"
        },
        "item": {
          "id": "d91a8672-4ca5-4279-8d49-faad5f145985",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "f743fc88-9392-4661-9281-66f7c9c33a73",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c242397-008a-4a0d-9c7a-35ce70a23973",
        "cursor": {
          "ref": "6baac17b-bc8c-4a14-bc17-48028d35a4b2",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "9a276b78-9ff0-4dd3-8bc6-71a6df5c9fef"
        },
        "item": {
          "id": "1c242397-008a-4a0d-9c7a-35ce70a23973",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "c6b39753-fa2d-4705-b4e4-d39af21cd3b4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d88016b-b3ea-48fd-b298-96420390b389",
        "cursor": {
          "ref": "a2deb147-8727-4500-a8c3-5b2a749da360",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "6cfd5af5-2c2b-4524-836d-17928c5b96b3"
        },
        "item": {
          "id": "9d88016b-b3ea-48fd-b298-96420390b389",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "0c31e3dd-9b36-47cd-8d43-6157cd74016a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c67119a-c652-45c0-92a4-08a4c2695002",
        "cursor": {
          "ref": "10e3717d-d7f3-46e1-99af-cbea138a3efc",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "05ad5023-d846-462c-9f93-79a6dd5405b3"
        },
        "item": {
          "id": "3c67119a-c652-45c0-92a4-08a4c2695002",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "6846581f-27ee-429c-9ca2-3004ed279e0a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d481d8db-4d0c-4258-8d57-cdf43b2d71e2",
        "cursor": {
          "ref": "b436edde-5142-48c7-b68e-98e9139bbeda",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "2cfc0617-d15f-4c0e-a799-35987b652d19"
        },
        "item": {
          "id": "d481d8db-4d0c-4258-8d57-cdf43b2d71e2",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "e2d22627-1e36-4b16-9e9f-0585504a2726",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6db398e3-8a50-464a-a829-6bea1705d29a",
        "cursor": {
          "ref": "abe33e62-b610-4f36-8e31-5ee4ce127650",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "385d0432-7150-4d79-b309-8cdcbc82664f"
        },
        "item": {
          "id": "6db398e3-8a50-464a-a829-6bea1705d29a",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "57df2187-6094-41f8-8e97-af3e4a46c226",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57a78444-8611-4cdf-8076-f11846cc76fd",
        "cursor": {
          "ref": "16c99e4c-3c0b-49c0-b949-c47987aa0ebc",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "6884a512-54bf-45fb-a040-e75a454b4f7f"
        },
        "item": {
          "id": "57a78444-8611-4cdf-8076-f11846cc76fd",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "6ad089aa-fca8-4856-9194-545f1330e8fa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25017b87-f50b-4e24-8600-40860585485a",
        "cursor": {
          "ref": "a94743d3-6b5e-4a36-8890-c3071595131f",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "c1905203-982c-4598-ad94-9f5ff022b34b"
        },
        "item": {
          "id": "25017b87-f50b-4e24-8600-40860585485a",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "7c554416-e684-40c6-99ad-ebf5776840ed",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d51288a-410c-45da-a2c5-f155d700f935",
        "cursor": {
          "ref": "882a3e24-e0a7-45f5-91a5-21bc372590cd",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "f893d81c-248b-4bff-8517-eb3d29a84d85"
        },
        "item": {
          "id": "3d51288a-410c-45da-a2c5-f155d700f935",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "23966428-93d9-48e5-9784-69a7bf637f80",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f1ef1d8-ce5f-4768-995d-9bded2885329",
        "cursor": {
          "ref": "9b34acf8-3e44-41e6-b341-77c253e32291",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "f99f5bcd-2163-45f5-be17-82f50a85b5ea"
        },
        "item": {
          "id": "2f1ef1d8-ce5f-4768-995d-9bded2885329",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "a1adead5-3126-4a5d-b0ce-940183b5b3d4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fbb8429-4242-48b2-927c-160b81616b58",
        "cursor": {
          "ref": "a772920f-261f-4c29-962c-dd4c55ff0c8b",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "682f6f83-5278-4a19-b566-2d28c48592cf"
        },
        "item": {
          "id": "0fbb8429-4242-48b2-927c-160b81616b58",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "4ef620dd-876d-4a14-9ac1-ca318bd1b93f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "184e3a85-08db-43be-bd9e-5f9bb1fea758",
        "cursor": {
          "ref": "74d70aad-9529-48ce-8c1e-cd00230d9451",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "fc6fea96-27f9-4437-9793-23888cad2357"
        },
        "item": {
          "id": "184e3a85-08db-43be-bd9e-5f9bb1fea758",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "1001292e-d5d0-4424-903d-f7ca300dce8c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a941b35-ed85-46c1-b2f2-0b3d1d472242",
        "cursor": {
          "ref": "e68f0d0a-8d28-4dea-8f84-fd9c919c71e6",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "bbf97d5a-7b09-45ea-8e4e-ec6394dad968"
        },
        "item": {
          "id": "6a941b35-ed85-46c1-b2f2-0b3d1d472242",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "18ce32bd-9f99-4b8e-9e25-dc030c767b7c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a27ad27-5b6d-43da-857b-3634b1a65b01",
        "cursor": {
          "ref": "19990a44-953b-406f-ba59-1141b4a0cc18",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "e85e4813-8c26-48c4-a485-6aabc3ce9309"
        },
        "item": {
          "id": "4a27ad27-5b6d-43da-857b-3634b1a65b01",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "aeb069ee-5be3-47c5-88ce-0c5ac90b4972",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70332277-bfed-4168-bc70-80237f9c8575",
        "cursor": {
          "ref": "678f5682-9355-4e8b-88a1-36feba2a71ae",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "16477c06-2c94-4ed3-ab0e-cf64f3f20775"
        },
        "item": {
          "id": "70332277-bfed-4168-bc70-80237f9c8575",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "f7e4791f-0c18-4d38-8f0a-e8e769ff88c0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dddbaa5-03f6-4854-96ce-f7976e2c8022",
        "cursor": {
          "ref": "0ad0c5a3-90e9-45d1-aada-a999be4d252c",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "818a9ac3-5f04-4a36-80f1-6df3cc513d6e"
        },
        "item": {
          "id": "1dddbaa5-03f6-4854-96ce-f7976e2c8022",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "2f6743ac-81b4-4e4b-a82f-0e0fe8478d4c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e9e7ce5-44b2-4e64-a577-5bda85a0c039",
        "cursor": {
          "ref": "60902942-f952-4a73-9071-eec2cfb51bfd",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "d0ee1446-2c3e-4c34-9994-59404cee48e8"
        },
        "item": {
          "id": "5e9e7ce5-44b2-4e64-a577-5bda85a0c039",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "90e6f968-db42-4be4-8760-cc7413fa52f7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "911c191d-2d7b-486b-a816-9c4218d62117",
        "cursor": {
          "ref": "36c49c23-2e08-4960-847f-759d8c631472",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "4ba1f594-d0ef-4a8f-872a-5d3622216232"
        },
        "item": {
          "id": "911c191d-2d7b-486b-a816-9c4218d62117",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "680f34ab-1efe-468c-9a79-e850583cb152",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60d6aa20-d044-40ad-a4ea-98a1881a91ed",
        "cursor": {
          "ref": "427339e9-fa6c-4993-a58a-6ba84dbcda5d",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "9564c422-074c-44aa-8995-c738cd8c91e5"
        },
        "item": {
          "id": "60d6aa20-d044-40ad-a4ea-98a1881a91ed",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "4b519b76-bf0f-4e05-9ba7-5e05ae9291de",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95d3c01f-5326-470d-93ea-50dbe6dc050b",
        "cursor": {
          "ref": "f70a7b32-4302-49d8-8b3b-a5405fc5add9",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "68e840cb-259f-4d5d-8c2b-032e1432b2ee"
        },
        "item": {
          "id": "95d3c01f-5326-470d-93ea-50dbe6dc050b",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "5af13ef0-b79f-42dd-92f8-9d9e7266c30e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1877233-cb94-4211-ae29-b339ec5aac7b",
        "cursor": {
          "ref": "11ab1f12-a76a-4650-a602-a13d411e0d81",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "7a0d09f5-bd21-4617-8170-47ebcdf884fc"
        },
        "item": {
          "id": "b1877233-cb94-4211-ae29-b339ec5aac7b",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "b1164860-0f7b-49da-b950-ffc23bcc9556",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "882a4b6b-f729-40bb-90cb-4e641f293965",
        "cursor": {
          "ref": "f6d5937d-6e96-4b3b-bad9-65a4950e3792",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "7b84d029-a149-4deb-8b3d-42c9ccb21399"
        },
        "item": {
          "id": "882a4b6b-f729-40bb-90cb-4e641f293965",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "8be40359-530a-4d74-a602-fc625d39b7ea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f13fb7b-cdeb-4c5f-a0a3-a77d806d9aa2",
        "cursor": {
          "ref": "cf7dc4d8-8cfb-4a92-9016-82999780f84d",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "e41293d8-e5c4-4ff8-8c9c-9de6e8f50814"
        },
        "item": {
          "id": "2f13fb7b-cdeb-4c5f-a0a3-a77d806d9aa2",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "432b7b6f-bc4c-4deb-ba30-f54d6ade7311",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54312a50-9caf-4300-bf0b-8b93bc5c0b78",
        "cursor": {
          "ref": "8e64a051-122b-42b4-9080-85023ee6549b",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "47221e00-da21-456e-9f97-99263fd62367"
        },
        "item": {
          "id": "54312a50-9caf-4300-bf0b-8b93bc5c0b78",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "8848c63b-3566-4232-9872-b8b8bad84721",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fc76895-440a-4ed4-91d1-c974fe67d79f",
        "cursor": {
          "ref": "68b1debb-983c-406f-a578-a9820d30d8a2",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "94d8b97c-bf7e-4d3b-96e6-d10f090b6cc8"
        },
        "item": {
          "id": "8fc76895-440a-4ed4-91d1-c974fe67d79f",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "f0b197ef-929e-4bd2-a919-51df62d47ebe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46de10f0-1336-4d44-8877-2b153dde26f8",
        "cursor": {
          "ref": "bf263b54-b9af-4e2f-ab64-d8ace4a85c07",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "423f71b2-98f0-4416-bd55-acd1b4203a7d"
        },
        "item": {
          "id": "46de10f0-1336-4d44-8877-2b153dde26f8",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "d61e61ba-7027-4ec0-a1f4-42e9a5a28e73",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7bdd286-31a2-4ffa-b8d6-46d9ee82754a",
        "cursor": {
          "ref": "8bda2844-3a71-4c63-8565-d629ec2490d0",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "73caaceb-c953-426e-b41e-6a718cfef104"
        },
        "item": {
          "id": "a7bdd286-31a2-4ffa-b8d6-46d9ee82754a",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "2c89090b-5f02-456d-8846-924797ef416b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5f40a85-3757-4efe-8443-93d1e817009c",
        "cursor": {
          "ref": "321f58a2-3ec5-480c-b14f-2ae4e7b154b3",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "7bcaa554-6f3d-4e7b-8bfd-77116fa5d041"
        },
        "item": {
          "id": "e5f40a85-3757-4efe-8443-93d1e817009c",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "23f52ffb-d082-41b2-853b-d9c7c48cb133",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e22dee62-f1ab-48fd-8a9e-2e0d04abf4d4",
        "cursor": {
          "ref": "36616a15-598d-44d1-85e8-4d4f51ff31e2",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "4859c799-29c1-455e-8aae-f9f04ef47c08"
        },
        "item": {
          "id": "e22dee62-f1ab-48fd-8a9e-2e0d04abf4d4",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "40437eaa-9ad8-4ca1-b0a2-2e5f70713643",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62e9bde2-5029-4c61-b8e6-d96af32eda02",
        "cursor": {
          "ref": "350844f7-72cc-44a5-ac49-ef95b521c7a4",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "7a673bb6-69ea-4b41-85f6-f6ba0dded9d4"
        },
        "item": {
          "id": "62e9bde2-5029-4c61-b8e6-d96af32eda02",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "38367f53-700d-476b-9c5c-97c63529d65f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50fb3952-2a6a-49f8-8c08-2566101d37f9",
        "cursor": {
          "ref": "f2710b92-12bd-4faa-8643-d422379dcc00",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "e10687e5-2385-4762-a067-8537b37fa258"
        },
        "item": {
          "id": "50fb3952-2a6a-49f8-8c08-2566101d37f9",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "370e3d52-5302-4e02-88c6-21553f2d7d33",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "905d1711-78e0-409f-8a3f-0e6a6ed3687a",
        "cursor": {
          "ref": "b9bc246b-9ef2-4374-b66f-bba4b4d48892",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "b7827a9d-6c40-4c5f-820c-c1ead9827293"
        },
        "item": {
          "id": "905d1711-78e0-409f-8a3f-0e6a6ed3687a",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "15a5f050-bea8-48b8-8a94-795a36169957",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68c733c9-03fc-4233-9502-f8a33fd7a4ff",
        "cursor": {
          "ref": "a732b92a-ec33-4928-81c8-6e481cfccf32",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "5a6c5ce2-222b-4347-832e-c8856399409b"
        },
        "item": {
          "id": "68c733c9-03fc-4233-9502-f8a33fd7a4ff",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "637b3ec3-151b-4c91-9cbb-4fcfe4eb7eee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "9ffaf5ec-ffa5-49bf-892b-ba089e632207",
        "cursor": {
          "ref": "549bfc2a-d61a-4cd1-ab69-fcfbb2ccd49b",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "2707e1a3-bd57-43af-9e1c-6bbbddd71492"
        },
        "item": {
          "id": "9ffaf5ec-ffa5-49bf-892b-ba089e632207",
          "name": "credentials_issue"
        },
        "response": {
          "id": "bdf62b6b-199e-4f29-ab37-9c34ceedc696",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 159,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "d62c30ef-b419-4841-9895-86fc04771049",
        "cursor": {
          "ref": "497f3baf-a47d-4b75-a80e-d57ab01a702b",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "8f4fb9f6-9e7c-46d3-bd7e-51fef6a9514c"
        },
        "item": {
          "id": "d62c30ef-b419-4841-9895-86fc04771049",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "c2909e2c-3d50-40da-8613-4a0507ae6ab3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "f4982e84-acf2-4b8b-9ce1-116635a42f55",
        "cursor": {
          "ref": "3d7f9c01-9a6d-4fe6-ac4a-8379d0fa3f77",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "da0ad30e-4975-4c05-955b-ceb522f50456"
        },
        "item": {
          "id": "f4982e84-acf2-4b8b-9ce1-116635a42f55",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b68e9d24-9d41-4e12-97b5-98ffdcf29fa2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "56ec9a3f-fd4b-442c-a722-2ed90b6f8678",
        "cursor": {
          "ref": "1ce158cb-c2df-42b4-8a6b-84a8cf4619f5",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "0f341744-00f0-4c17-84e5-c9e532c83d4c"
        },
        "item": {
          "id": "56ec9a3f-fd4b-442c-a722-2ed90b6f8678",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "2d077c97-ce08-4ba3-9079-418cccc65111",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "fc97ce54-d2bd-4523-9c58-573424f0dc0b",
        "cursor": {
          "ref": "33e805fd-5af2-4c4b-a3b2-73946d7ab308",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "54839166-bf45-4c03-bbf5-f8fe64054766"
        },
        "item": {
          "id": "fc97ce54-d2bd-4523-9c58-573424f0dc0b",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "372207b1-3574-46b6-9377-6f0d97022288",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "37a4bb82-c4f7-4034-b29a-9bbd98003447",
        "cursor": {
          "ref": "e4844433-d5e8-4bbb-ac3d-52bb079b33b8",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "bf870218-e0a6-49c5-90e4-8c19c8345a8e"
        },
        "item": {
          "id": "37a4bb82-c4f7-4034-b29a-9bbd98003447",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "18e7f49e-f71c-4bc6-93a5-e621cdb4182f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "a5da1e3d-e74b-4e63-b0c9-a2191e3b9c40",
        "cursor": {
          "ref": "028e2550-1fe9-4421-bed6-4cb71321c2a5",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "244c5d5f-cb92-409a-948a-f51436f63133"
        },
        "item": {
          "id": "a5da1e3d-e74b-4e63-b0c9-a2191e3b9c40",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1f6f1c3d-dc5f-4e6b-ac3b-a1b25bd4a560",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0abe4163-12af-4ede-95f4-be3153f1111f",
        "cursor": {
          "ref": "af10cedb-914b-4a98-917e-e15738d011a2",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "e121f254-8a18-4c42-bd27-f443c99fa90f"
        },
        "item": {
          "id": "0abe4163-12af-4ede-95f4-be3153f1111f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "b9c0b597-15ed-40ed-97f2-9c889c4d8933",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ed073f7-ad2e-4a2f-af7e-2907fb16b087",
        "cursor": {
          "ref": "2d26a7cf-64b1-41e4-bed5-6f1275989661",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "4b54b3f9-bff0-4cd6-81d7-75d4066aa0eb"
        },
        "item": {
          "id": "1ed073f7-ad2e-4a2f-af7e-2907fb16b087",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "1c3479b6-710d-49c1-90fa-00873fe3ec31",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "453d9cfc-3089-4026-a005-00a6f473c2cd",
        "cursor": {
          "ref": "425e9d61-87cf-4c2e-873f-7fb2389f3b32",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "3f28d9ae-fa71-4345-9219-058ad562e9ed"
        },
        "item": {
          "id": "453d9cfc-3089-4026-a005-00a6f473c2cd",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "5ff1c70c-9314-434d-9b82-d0ac4d83cd23",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1015149b-fa76-4b69-b0c2-abc80295f638",
        "cursor": {
          "ref": "5c8bf31b-e02a-4b28-a7fd-b3b1b965f2b0",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "69f80c50-9898-4c6a-97a1-d29640469550"
        },
        "item": {
          "id": "1015149b-fa76-4b69-b0c2-abc80295f638",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "d39fba8b-176b-4a40-b0c7-aa7b82be0cc7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8899ab3-4eae-4a15-8709-8a9126510f9f",
        "cursor": {
          "ref": "ad5e659d-b6df-4231-92b0-2186dfe861fa",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "13bdf54f-9c91-4240-b766-c8e298b1075a"
        },
        "item": {
          "id": "c8899ab3-4eae-4a15-8709-8a9126510f9f",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "cd93432a-5044-4be5-9546-3a5422e6035b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd085d23-4c08-4a32-a0a9-31b8cbb2eb29",
        "cursor": {
          "ref": "7a2295c0-c075-4653-894f-501e8613b967",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "773f1392-feaf-4fe2-bf88-861d76e0106a"
        },
        "item": {
          "id": "fd085d23-4c08-4a32-a0a9-31b8cbb2eb29",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "36b989e1-d2a6-4410-8ef9-3153c8959e32",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec8dae1b-769e-4f1f-ad41-8cc7f4c7f03b",
        "cursor": {
          "ref": "529f1ff0-aa29-4084-a9ce-9789291a9721",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "b79ae71c-0eb4-4e23-899d-6006f6e0ec62"
        },
        "item": {
          "id": "ec8dae1b-769e-4f1f-ad41-8cc7f4c7f03b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "f6d94cec-eb80-4605-88e9-af5cc245988a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2e9ba66-511b-4100-870b-e4ab0a0836f5",
        "cursor": {
          "ref": "7a972110-a8f0-44dd-91a9-2f3add71237f",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "1a3c4657-4703-4993-8a43-ee6dcb98a781"
        },
        "item": {
          "id": "e2e9ba66-511b-4100-870b-e4ab0a0836f5",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "15a90bb8-9cf4-4e0c-9f59-218e62b92866",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e5a26b0-a8c6-4336-8f7e-1851c43247fd",
        "cursor": {
          "ref": "fe0d7cc8-4003-47b4-8bc6-c71462a49a7b",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "dae864dd-9042-428b-8518-2dce69ccd261"
        },
        "item": {
          "id": "9e5a26b0-a8c6-4336-8f7e-1851c43247fd",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "a4b2fe63-375e-4fda-bf54-e1716cd49e62",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71674a7a-e439-4616-b542-267d7348afdd",
        "cursor": {
          "ref": "9ce5ccb0-eccf-4632-85ce-b8b5f861241f",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "14769b47-26b3-4ca0-8473-33610f8c991b"
        },
        "item": {
          "id": "71674a7a-e439-4616-b542-267d7348afdd",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "781721a5-dc78-4b31-a006-6a3b852d33a2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d699a687-195d-4d81-964c-a59675aa17d1",
        "cursor": {
          "ref": "0d59ed73-80a8-4a95-b27f-f07594d66998",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "7c553d08-d132-494d-95da-149c4576ef37"
        },
        "item": {
          "id": "d699a687-195d-4d81-964c-a59675aa17d1",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "3e2e7442-538e-47b8-a04d-0fc5be324220",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6120fa05-5ff3-4929-943c-01bdf2ce4ac5",
        "cursor": {
          "ref": "6e64d770-097e-496f-a578-7afaf86a7e45",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "16b1c283-3082-4994-a149-857348e25254"
        },
        "item": {
          "id": "6120fa05-5ff3-4929-943c-01bdf2ce4ac5",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "167965ff-4bee-48d6-b285-7230b3628a21",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1378dbe2-225e-4602-bc78-4bcaece5b83e",
        "cursor": {
          "ref": "a657391c-5982-4e09-935c-8895ccc72d25",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "a01a38bd-dfb9-42e8-bb9f-d9049adcf6c4"
        },
        "item": {
          "id": "1378dbe2-225e-4602-bc78-4bcaece5b83e",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "bac60e13-1810-4bb1-95b7-eef6bc99cf02",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6868344-89d6-4ba7-b73a-8beb5f2e201b",
        "cursor": {
          "ref": "a1ceb2c9-d461-4a3e-bc42-de1c4575056b",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "ef7ba93c-7f85-4494-9dd2-d05be8d4b74e"
        },
        "item": {
          "id": "c6868344-89d6-4ba7-b73a-8beb5f2e201b",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "e7754204-6062-4eb7-b0dd-a7bb48282602",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e82d7dcf-d989-4ae7-bccc-fa35ea8253b2",
        "cursor": {
          "ref": "7e2c98ee-9a8b-44e8-ad75-14cec27c69ff",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "eb235706-2f7a-46d0-a4a1-d84c91547ad2"
        },
        "item": {
          "id": "e82d7dcf-d989-4ae7-bccc-fa35ea8253b2",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b653586c-f1c2-40bc-a7c3-89ecfa13ac19",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2aea3a3-9cbc-47c6-904d-c7333c432c8f",
        "cursor": {
          "ref": "8512529d-a32a-4430-8ec6-091e9c27288a",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "14b52455-38bc-43b2-b487-7885c3119860"
        },
        "item": {
          "id": "f2aea3a3-9cbc-47c6-904d-c7333c432c8f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "daf5d4e9-cd11-4bb9-b699-317ebf52964c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c44dc80-9fcf-482b-b3dd-6da3401fae58",
        "cursor": {
          "ref": "388d60fa-5deb-4d70-971e-8d023a8e00df",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "5cab2b41-0e5c-4e82-a084-4f939f612df3"
        },
        "item": {
          "id": "0c44dc80-9fcf-482b-b3dd-6da3401fae58",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d6f8847b-3b16-43db-8649-1df38f69d0b3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a732f11a-221a-4327-b5a3-d2070481a70c",
        "cursor": {
          "ref": "c9e8ed39-b933-41b6-8e64-4ec972f32b25",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "b2727d03-9f60-4e45-82d2-30fbc974b09b"
        },
        "item": {
          "id": "a732f11a-221a-4327-b5a3-d2070481a70c",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "026626b7-af45-43a6-b3da-9de97f1ea7b0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a56aae9-481f-41fa-ac57-33a7b3c90b6b",
        "cursor": {
          "ref": "4bb22bac-0b8e-4982-b19b-6b13bdd4b2bc",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "01ea9f88-e421-41f9-b70a-6dd351eff30c"
        },
        "item": {
          "id": "6a56aae9-481f-41fa-ac57-33a7b3c90b6b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1ad14530-eef9-4436-9142-5d6976288724",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b50ed82-a55a-4168-9d0d-56a09667298c",
        "cursor": {
          "ref": "3a0ba6d6-dcdd-4b91-8aa4-b947e61bdbbf",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "a2461205-efd8-43a6-8156-0b055f765706"
        },
        "item": {
          "id": "3b50ed82-a55a-4168-9d0d-56a09667298c",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "27346dc3-84b3-474e-8ccf-fcd8dbc663cd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b66cb5c4-3086-43fe-bbbe-9cd084659802",
        "cursor": {
          "ref": "0932f7a7-cc6e-4216-97c3-29bebba5eabc",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "ca71b288-bbd7-4027-8199-19f3a22556f3"
        },
        "item": {
          "id": "b66cb5c4-3086-43fe-bbbe-9cd084659802",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c6dc76f5-4713-4f2f-915f-e6d67faf2e55",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db5dcfe6-fbf6-4330-8a9d-a3d4c92bf2da",
        "cursor": {
          "ref": "ef2bafa9-bd5b-42ac-8068-171eb0d1255b",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "fa85494e-9131-4c74-8e74-f9bcfc0a4311"
        },
        "item": {
          "id": "db5dcfe6-fbf6-4330-8a9d-a3d4c92bf2da",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "87cef3af-25f8-4bcf-8396-ccd076d056f0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "987003ef-62a3-4924-b9cb-f7c4f90b5248",
        "cursor": {
          "ref": "b76f2a53-9666-4fcb-9121-b799f575d0f8",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "245cd36a-730c-4e67-85b7-005724edb236"
        },
        "item": {
          "id": "987003ef-62a3-4924-b9cb-f7c4f90b5248",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "f1bc9a5e-6257-4fdf-80ae-5cff54369fa4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0457318a-25c9-4628-877c-b4c208eb9627",
        "cursor": {
          "ref": "f189c0ec-647b-4fd7-aaac-1e1d4002c0c0",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "6f604c4b-855a-4270-bb22-2d43a41feaa3"
        },
        "item": {
          "id": "0457318a-25c9-4628-877c-b4c208eb9627",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "cad30a28-4c51-41c3-b8d9-7883b99c1f6f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0274d00-bfbf-4272-a79a-8022270fb67a",
        "cursor": {
          "ref": "318f6a27-7835-4f4a-a944-b6fdc534e6e1",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "80b33507-7a45-4d83-abea-e79a59aff7ae"
        },
        "item": {
          "id": "e0274d00-bfbf-4272-a79a-8022270fb67a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "1bb8a413-febc-4bf5-9596-c4fbc79aea3c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2ea2b32-63e5-4390-99f5-90c6eef61336",
        "cursor": {
          "ref": "6fa077c0-ec06-454c-b393-43648ddc427d",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "f2ccc7b7-a239-4bff-aabf-f479b4eb3e34"
        },
        "item": {
          "id": "d2ea2b32-63e5-4390-99f5-90c6eef61336",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "d0a2f2e9-279d-45b3-94d8-5ab340848dc6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d89f773-133e-45ef-9fc4-a3232d584898",
        "cursor": {
          "ref": "637d9728-5bc2-48df-8b92-e547f4dd5de1",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "2c77f1a7-eeff-4f65-b600-1a592d651f2d"
        },
        "item": {
          "id": "9d89f773-133e-45ef-9fc4-a3232d584898",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "28c5621e-60b3-4abd-b0f9-b61e31db748b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98c670d5-c6d8-45fc-9be2-35dd0d385dd1",
        "cursor": {
          "ref": "fd60d072-6cc8-47a5-9b2a-f5c07914ba20",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "8ed2dc3a-69d7-4dc1-abbe-24d31044377a"
        },
        "item": {
          "id": "98c670d5-c6d8-45fc-9be2-35dd0d385dd1",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "8320fe89-664e-4ce9-8d3f-e46caf609112",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fca90bc-d23f-4045-9f30-ee23a53e058a",
        "cursor": {
          "ref": "7bc6b617-3367-4da4-a79c-dd4be11df50e",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "6e96cc3a-66a6-4744-9106-2aa5684639bf"
        },
        "item": {
          "id": "7fca90bc-d23f-4045-9f30-ee23a53e058a",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "d0688d9e-1865-47bc-91ce-795094ca944b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5373bfcc-6a77-4509-9741-9b8ccb5f4675",
        "cursor": {
          "ref": "7347861d-af93-428e-9988-b523d194aa15",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "973bd2ac-be36-41cb-9e84-0e48cb40601b"
        },
        "item": {
          "id": "5373bfcc-6a77-4509-9741-9b8ccb5f4675",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "52bd8d7b-a8e7-4887-b116-9414368e704d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a9e5476-9549-4535-a54f-402e6fd42b25",
        "cursor": {
          "ref": "cb1ad278-d259-4c65-be49-47357ba9014c",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "e7141a75-32f9-481a-a5f0-16d1fbd2f99f"
        },
        "item": {
          "id": "5a9e5476-9549-4535-a54f-402e6fd42b25",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "81d0c551-ac0b-48cc-bfa6-091f7f26472b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9745866d-6998-4dba-8d3b-c5e320b4346f",
        "cursor": {
          "ref": "884a826d-b172-4c32-b384-1d5317888830",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "6307a802-88a1-4b91-b5df-8e7ba808a105"
        },
        "item": {
          "id": "9745866d-6998-4dba-8d3b-c5e320b4346f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "613a1204-8d4f-4bda-acbc-4614e86381a5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b0f607f-c1a1-4287-897b-020c306627d9",
        "cursor": {
          "ref": "0b331f8b-211a-4cbe-8385-1886327be855",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "d9f5581a-7cb0-4735-94d1-292d342e85a5"
        },
        "item": {
          "id": "5b0f607f-c1a1-4287-897b-020c306627d9",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ec9b82a5-1b99-488e-9d32-3af9d7e67963",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d40853d-0f3c-43e0-a6d6-4924732a081b",
        "cursor": {
          "ref": "25f662dc-4e5d-4d25-8772-bf6dc742b627",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "47d38c17-243b-46b5-81c2-a16f77246ed9"
        },
        "item": {
          "id": "4d40853d-0f3c-43e0-a6d6-4924732a081b",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f32b05ca-d5b8-4b84-957d-afe3204f055c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a03f3de-8a40-4197-81b9-134610026cfb",
        "cursor": {
          "ref": "15f21c7e-ebe9-419b-863a-017c3715be78",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "edd70e4e-ab0d-48f2-973a-ca774fd3b4a9"
        },
        "item": {
          "id": "8a03f3de-8a40-4197-81b9-134610026cfb",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "8a8f93cc-38bd-4bee-b19a-538c9f4ed4f2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ae2f85f-cad5-4b6a-80b3-916a98d14573",
        "cursor": {
          "ref": "14a605cd-879f-4681-be5a-5b3837ae2876",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "8519d906-a762-4df8-b48d-a4d2cf0cef1f"
        },
        "item": {
          "id": "7ae2f85f-cad5-4b6a-80b3-916a98d14573",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "4ef2d5fb-edf3-4766-b329-d7aea7b2806c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0243fd1-c80e-4b5b-833e-8496717742c6",
        "cursor": {
          "ref": "9c960baf-7e30-43d0-8026-cb101b28da7f",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "c87afb31-9e6e-4f11-9b12-c3f617910b2d"
        },
        "item": {
          "id": "f0243fd1-c80e-4b5b-833e-8496717742c6",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "becd9b46-81a2-4e6e-99cf-5a323fd86db8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a471a2a-67f3-48fc-9ca3-f4b8ea609592",
        "cursor": {
          "ref": "5788355c-4bc8-40c7-819b-7ad66d0a761f",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "1961543a-e968-4d6d-b463-704d8a1ea0d1"
        },
        "item": {
          "id": "5a471a2a-67f3-48fc-9ca3-f4b8ea609592",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "dfe3c503-1b38-430b-ba59-d508fc3e063c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d418efc4-7057-4081-b895-e64b2b773805",
        "cursor": {
          "ref": "7893fd6d-8bd0-4388-bf1c-b837e4c43ded",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "418fb233-99e7-496a-b1a9-705e4e8f61e9"
        },
        "item": {
          "id": "d418efc4-7057-4081-b895-e64b2b773805",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "fd62d02c-15c2-4f0c-82c6-30bb06940ea4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ade45362-cbfa-41ac-837d-0c3acace99ff",
        "cursor": {
          "ref": "2435f716-3343-41da-8427-83c08cbea639",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "6eefd6e4-5fc6-401e-a868-2865a0782b33"
        },
        "item": {
          "id": "ade45362-cbfa-41ac-837d-0c3acace99ff",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ec6fd091-7f66-496c-9df3-6da79b8b0a78",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2117cb9c-50fd-4eb7-bc16-1a2bdd93b869",
        "cursor": {
          "ref": "555d1960-d2dd-449d-ba07-6a62c2b54780",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "7947b6ad-2d0e-4c4e-8b42-ee2da58ddf01"
        },
        "item": {
          "id": "2117cb9c-50fd-4eb7-bc16-1a2bdd93b869",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "6b4b3e4d-14c8-4df5-bfd6-a950a8034de6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e83b8fc-4635-4ca1-8425-e527188718d6",
        "cursor": {
          "ref": "4de42695-cb4b-4042-84db-94ae0e2c9b58",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "305badb1-5f59-4ac9-b420-940b2c417cba"
        },
        "item": {
          "id": "2e83b8fc-4635-4ca1-8425-e527188718d6",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "54f953d3-cee6-4add-91a3-8ca8ff7e68b7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f362cf6-5b87-4094-8bb3-9eb06afd24fd",
        "cursor": {
          "ref": "6287f376-d021-42fd-b170-633f09a4e2de",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "39edd490-9a3c-4668-bb1a-3abab4f5e485"
        },
        "item": {
          "id": "1f362cf6-5b87-4094-8bb3-9eb06afd24fd",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "634f38b2-b86e-4faf-addc-fa93ce665e7d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b341ba0-d966-4b08-922f-1645b2a533ad",
        "cursor": {
          "ref": "04f9055d-b88b-495f-a1e4-86001f1d112b",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "8d8f6baf-2085-435a-ae99-22bc5fb0b7b8"
        },
        "item": {
          "id": "6b341ba0-d966-4b08-922f-1645b2a533ad",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "55ab40af-a8ab-44d0-83ed-66e981ee18c9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf2e63e7-4565-45d4-94f0-8f7cca457a1d",
        "cursor": {
          "ref": "0a176cfd-da85-45ec-a79a-b38ee25a7727",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "55fe8f9d-f44d-4117-8ce9-f8e566e96993"
        },
        "item": {
          "id": "cf2e63e7-4565-45d4-94f0-8f7cca457a1d",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "dc65abc5-a26a-4466-aafd-2823dfc22e03",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c88be9c-1951-47d0-b2a9-4be2bbadc3dd",
        "cursor": {
          "ref": "b0b0dfa4-5438-43c3-983f-5209c5e7494f",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "16f8a454-65fb-4e5c-b91a-2c85ac088a7b"
        },
        "item": {
          "id": "5c88be9c-1951-47d0-b2a9-4be2bbadc3dd",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "6c18ea8c-2aad-4ab9-8037-30484856dcdf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fcb1152-9c01-4f9e-95d6-197dfa097087",
        "cursor": {
          "ref": "f82cbd54-0d96-4107-9ed4-3536c514d266",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "5b1a3f87-1d9a-463c-8c48-2c7972d9ea40"
        },
        "item": {
          "id": "3fcb1152-9c01-4f9e-95d6-197dfa097087",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f57a97ea-bd12-4082-9ef0-35967e0aa84c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b45a6799-0284-436d-9d6c-bc23673dcef5",
        "cursor": {
          "ref": "1fbb20e4-b6f0-4133-8894-c2344b20b1d7",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "4c292cb5-153b-426b-9da4-3c1499984ba5"
        },
        "item": {
          "id": "b45a6799-0284-436d-9d6c-bc23673dcef5",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "1e7d38dd-3ae0-4383-a915-cf5881db5e3c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e25242b-3fe0-4455-8edc-93a35ed94707",
        "cursor": {
          "ref": "79868239-e878-4ee8-bd49-10a0c2b52650",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "f663e67c-e59f-4572-93f1-674ead6e4bd8"
        },
        "item": {
          "id": "3e25242b-3fe0-4455-8edc-93a35ed94707",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "34ab151f-2f2e-493e-8dfe-736dad8b8b5c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddd5f7b8-8682-4430-87d2-55754b9c6123",
        "cursor": {
          "ref": "d9f1423b-0f47-4d87-802f-9a0c254b0e39",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "4ea197d0-740c-4d75-a9e2-802003d6c701"
        },
        "item": {
          "id": "ddd5f7b8-8682-4430-87d2-55754b9c6123",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "a503fe2f-ec46-49fd-b785-e902961c2067",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6720665e-6607-4f5a-bbab-0ed45586cf66",
        "cursor": {
          "ref": "be06648b-1804-4189-aa81-3740695b7c77",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "853b8fc9-e905-4715-96e8-967e05a64e70"
        },
        "item": {
          "id": "6720665e-6607-4f5a-bbab-0ed45586cf66",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "3127e83c-a342-49c6-99ce-c6de9709915c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7af64a7-3755-41be-8b1f-9530fe9ed81e",
        "cursor": {
          "ref": "72552a06-cdd9-4c0a-b345-8a2e62536294",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "97246b80-4ba9-40ce-a776-082ee479dd65"
        },
        "item": {
          "id": "e7af64a7-3755-41be-8b1f-9530fe9ed81e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "97ce3f77-5822-4da0-97d6-ec88bba61983",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a0e0f14-98c6-4ecf-8fb3-b768b359ef75",
        "cursor": {
          "ref": "21b1faf0-2dc2-4d9c-b204-bfc47302d9a7",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "c7f5c38b-bd44-4cca-a6e8-e01f3977dfba"
        },
        "item": {
          "id": "3a0e0f14-98c6-4ecf-8fb3-b768b359ef75",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "3b111c00-85e4-4c38-b91a-39d257b88a75",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d8e887a-9180-4261-86c2-f6732df0df04",
        "cursor": {
          "ref": "86cb94ab-65ed-4d60-9b74-bcf1a15f9e83",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "1eab2d89-5538-45c5-895e-b2a5a9926795"
        },
        "item": {
          "id": "3d8e887a-9180-4261-86c2-f6732df0df04",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "1bbdd92d-db3b-447a-af61-783ca6731758",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90102fb0-174b-4313-a9b9-d3e023b1d0cc",
        "cursor": {
          "ref": "588eb6cc-c37b-4045-b1c1-813dea142794",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "22d09a88-6360-4fe3-80c2-69dfaf8ea0a6"
        },
        "item": {
          "id": "90102fb0-174b-4313-a9b9-d3e023b1d0cc",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "ddf9c789-9acf-486b-982e-531562e9bd87",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fed9f676-86fc-4cee-8556-7b9a7488b745",
        "cursor": {
          "ref": "ec757553-c5b9-4029-aaf2-3bf04a0ea3ce",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "e9db1d5d-9ad7-43c4-8e1a-999a2dd84940"
        },
        "item": {
          "id": "fed9f676-86fc-4cee-8556-7b9a7488b745",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "137c58e2-a8f7-4027-9312-610bfd9a4c72",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c761f7dd-de0b-4256-ade9-6a739cf58ab2",
        "cursor": {
          "ref": "ebac2d42-2ba0-4f18-9855-a3f727ec7378",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "39861db3-d9bd-4826-9448-9cf79f894948"
        },
        "item": {
          "id": "c761f7dd-de0b-4256-ade9-6a739cf58ab2",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "de6f5aed-01c6-476d-9e21-d5113a86849e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc6e7400-93dc-4a17-81b4-a3b73e2447a5",
        "cursor": {
          "ref": "bb486765-2298-43dd-b723-74c35b8d8cd9",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "dadfbc71-e15f-4165-a489-dc78f0db1904"
        },
        "item": {
          "id": "cc6e7400-93dc-4a17-81b4-a3b73e2447a5",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "2ead8904-e639-40e2-8bb9-9541ff960ad5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6b82518-af97-4707-b53b-68140ac022d4",
        "cursor": {
          "ref": "e05d2d1e-2e9f-46e7-9d17-ee1eb82be9f4",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "df61f19f-2612-4b83-a857-2a3a28be7de0"
        },
        "item": {
          "id": "e6b82518-af97-4707-b53b-68140ac022d4",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "33dbb1e5-ea24-4b55-8ac0-56430dd70253",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a2ac1fc-be3e-4d6c-b0a0-c90e6639e150",
        "cursor": {
          "ref": "60822919-89fd-4dab-b744-2d28ea66d35e",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "01ac0a5b-f2f7-41d5-b06d-f484ae9f716a"
        },
        "item": {
          "id": "8a2ac1fc-be3e-4d6c-b0a0-c90e6639e150",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c746c3ef-0108-47a3-af31-5c6ad5300782",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bae891ef-2f54-47c2-9c1e-2ae695f49048",
        "cursor": {
          "ref": "10e1cd69-9f34-438d-80c5-f57ad382346c",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "2760e905-1c0c-47af-8bd6-79e1d2e834b9"
        },
        "item": {
          "id": "bae891ef-2f54-47c2-9c1e-2ae695f49048",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "4ec2f1ec-c1ed-4e3b-93fe-768609fc4e9b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8789ed02-8d7b-4cf2-b526-8c94d96e4d05",
        "cursor": {
          "ref": "dbdf00bf-d2ce-414e-b120-0e34d14f49a7",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "dc5fb6b9-3f11-4abe-8390-8ef5e9a12f80"
        },
        "item": {
          "id": "8789ed02-8d7b-4cf2-b526-8c94d96e4d05",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "49fe8260-958b-4333-86c1-01f59198180c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01447e92-c664-4279-ad8c-79e7d7ffdc0e",
        "cursor": {
          "ref": "501bb8a8-83e0-4174-a95d-70611d780fea",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "53fd61ee-f51e-4e46-8910-dd7e5dc7f60b"
        },
        "item": {
          "id": "01447e92-c664-4279-ad8c-79e7d7ffdc0e",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "691957e3-9653-4ec7-8238-26a38d4b4eb7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97ffa0d3-141f-4629-8929-78bcdc04eae3",
        "cursor": {
          "ref": "82422a81-5338-4218-aea2-b73978060a73",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "b530b254-bdfb-474d-906e-227784469d5e"
        },
        "item": {
          "id": "97ffa0d3-141f-4629-8929-78bcdc04eae3",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "8581ec85-8a51-47af-a4db-238c2512fb1e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "040f9a49-b32b-4442-96bd-d516fb9f9ee1",
        "cursor": {
          "ref": "cbf5958f-2060-40d2-8823-0934ac720a08",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "b84522a9-db8f-43af-aa43-a01ad1779612"
        },
        "item": {
          "id": "040f9a49-b32b-4442-96bd-d516fb9f9ee1",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "d1edaa2f-52b7-4485-a28a-d1425a4a8719",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d36903a1-d348-4a4f-8a12-fc3b0d7d92a6",
        "cursor": {
          "ref": "ca6bd524-d2b0-4196-8563-4419830ea9fd",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "7570f7d8-50cb-45e5-aa4d-718ded64583f"
        },
        "item": {
          "id": "d36903a1-d348-4a4f-8a12-fc3b0d7d92a6",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "0870c5c5-f135-4eb3-ba91-0504266ed2bd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7b1671d-bf68-45b0-9504-2882d4eb7dc7",
        "cursor": {
          "ref": "b6fcdc1b-fa6a-4072-b8c2-962b1ff01259",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "3800ee98-2601-496b-af7d-826e272e59f9"
        },
        "item": {
          "id": "e7b1671d-bf68-45b0-9504-2882d4eb7dc7",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "928d2a5d-bcf2-4d94-85c6-ac6add8f2a48",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e9609ba-3fe8-4ddc-b337-fda9336db7ff",
        "cursor": {
          "ref": "f6c00a0d-b947-4c63-a529-288bcb21eeb5",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "210707c1-4619-4dae-8127-d509dceacac2"
        },
        "item": {
          "id": "0e9609ba-3fe8-4ddc-b337-fda9336db7ff",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "6ab6a9fb-ff0a-47a1-9771-05756a41ec8d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a900889-6ace-4f5d-a58e-ad209a36533b",
        "cursor": {
          "ref": "db4d74b3-872d-43db-82e8-70e0f2a0786a",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "a30b9553-89fa-46b3-9215-36bf92bd43a2"
        },
        "item": {
          "id": "0a900889-6ace-4f5d-a58e-ad209a36533b",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "af89573a-860a-42cd-afdf-59e1417cb011",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "703070bd-5644-4456-a25f-d334b8986357",
        "cursor": {
          "ref": "c8599a0b-158a-41c3-ace4-4e0c62fca7e9",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "d2faa3ab-2705-4e1f-b41f-f49dd9d2ea0c"
        },
        "item": {
          "id": "703070bd-5644-4456-a25f-d334b8986357",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "22c2c427-988f-4a6b-8d91-86fee481204c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fbc81ac-441d-4128-b00f-d640e24221d5",
        "cursor": {
          "ref": "4066fba1-d957-4cbc-b909-b923c5bb4017",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "21abd975-5b5a-410a-a8d9-5085b32c3e0c"
        },
        "item": {
          "id": "4fbc81ac-441d-4128-b00f-d640e24221d5",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "fc7e4fd8-0597-4329-a5d1-2a9379754402",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00b0015c-2d98-4d24-b2c9-a1b6ec3132e7",
        "cursor": {
          "ref": "e8a1dfc4-f9f8-4acc-bd5a-f5700a37a472",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "c60928d1-67bf-4140-a6f5-1348dc304049"
        },
        "item": {
          "id": "00b0015c-2d98-4d24-b2c9-a1b6ec3132e7",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "1e2a9f01-20ca-4631-86fd-5b94d1add326",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2388772-a84c-4f0c-a275-2a3ac10ffcd7",
        "cursor": {
          "ref": "f7ad341e-1f7f-4ae8-9796-bb2f78a02ded",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "893a0c34-7fc5-443e-9ad1-140bc04570fe"
        },
        "item": {
          "id": "d2388772-a84c-4f0c-a275-2a3ac10ffcd7",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "8c32252f-494c-41bc-b388-00b9f193eb0b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fee09923-0a74-4871-af18-32e576c15a76",
        "cursor": {
          "ref": "def73e0e-76e2-4feb-8b3d-b081bf616011",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "af368581-cd48-42a1-89c7-1167297be9b9"
        },
        "item": {
          "id": "fee09923-0a74-4871-af18-32e576c15a76",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "c33aa55a-edf3-41c0-8d44-5d0fe2aab422",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa8f1264-96b7-4b5e-ab55-9e64065930cf",
        "cursor": {
          "ref": "69bd759a-c7f5-484b-8b41-f6c29b0291e0",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "50c4349e-afa0-4660-ab27-04c624c368c1"
        },
        "item": {
          "id": "fa8f1264-96b7-4b5e-ab55-9e64065930cf",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "29be8c3b-5555-417d-9561-de4dd3df239e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "540ffceb-532e-4258-8bbf-0265a4249fb9",
        "cursor": {
          "ref": "3f9486fb-7b50-41c1-9855-17e2a6ed4c4d",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "f526bdc4-a19f-498d-b643-b992340b48d7"
        },
        "item": {
          "id": "540ffceb-532e-4258-8bbf-0265a4249fb9",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "308cd4bd-66f4-4ad2-b246-add6f2d76766",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9d122de-4fc4-4dff-bac2-588059083392",
        "cursor": {
          "ref": "ca8ab59d-c9fe-4514-afde-5c588b292ff6",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "df93368c-0f64-491a-aa95-f7a05fb34d6b"
        },
        "item": {
          "id": "a9d122de-4fc4-4dff-bac2-588059083392",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "a9f551e3-de10-4e34-a4c5-ef5144899d69",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2143d603-9e11-425b-a6d8-5e89d8e5b761",
        "cursor": {
          "ref": "11e0ced2-abc4-487a-9ec2-5f964a905d4c",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "159735ef-9f2c-4ba3-98b6-7477149187da"
        },
        "item": {
          "id": "2143d603-9e11-425b-a6d8-5e89d8e5b761",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "81755627-59e8-4576-be49-2104e0f24575",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66a0381a-14e0-4672-9c0f-cbfe9520a84a",
        "cursor": {
          "ref": "af953a7a-3a9c-4a8f-9504-d43d75490211",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "2e335dfb-4798-4dfe-8221-d6374ab2cb5b"
        },
        "item": {
          "id": "66a0381a-14e0-4672-9c0f-cbfe9520a84a",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "ad690a0d-04da-4514-8d28-bc77baae8086",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67e06a90-3aa9-4ede-b375-c4982ce0d436",
        "cursor": {
          "ref": "ac0654b3-ef46-420c-965e-25fccc93351a",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "dc70f525-0ce6-4263-9169-ae75e01fa101"
        },
        "item": {
          "id": "67e06a90-3aa9-4ede-b375-c4982ce0d436",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "9f9a65a8-c40d-4c40-a7f9-fa61401bbef4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "572117c2-a9eb-43bc-a6b5-ef509a719b45",
        "cursor": {
          "ref": "a4fb4578-dd45-45d5-aa70-dcd1dd73ae30",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "2a8d5c3c-7ac7-4e54-abac-12fc63e06100"
        },
        "item": {
          "id": "572117c2-a9eb-43bc-a6b5-ef509a719b45",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "5fd5fdc6-7f89-4e42-9f65-1d7362165bf1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12f088cc-8f8c-4f55-a1f3-cfde97eaa12e",
        "cursor": {
          "ref": "50048ebe-bb0b-409e-81c3-7d61c276b2af",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "730224f2-c79a-49ea-9ce1-6e850290d9cf"
        },
        "item": {
          "id": "12f088cc-8f8c-4f55-a1f3-cfde97eaa12e",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "a468ebcb-e6df-43ac-babb-a97f912c4d01",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19d6d7bd-e8ed-4e6a-ba03-2a6914b3d5cc",
        "cursor": {
          "ref": "64d4343e-27e3-4c36-931e-7ab0dfe17c26",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "0b130bca-cce3-4ed6-8ef8-194cf429f986"
        },
        "item": {
          "id": "19d6d7bd-e8ed-4e6a-ba03-2a6914b3d5cc",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "9a2b001d-09bd-4550-a0ea-77c5825585c6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7db212db-d8e7-4746-b913-b2feff4173e8",
        "cursor": {
          "ref": "c690feb1-6411-42c4-aade-648258239d90",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "bcae19df-c803-4d42-a09c-8bbafdebc1ba"
        },
        "item": {
          "id": "7db212db-d8e7-4746-b913-b2feff4173e8",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "d07e67ea-a776-4285-8090-52fd45504e36",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9b979d4-d394-4247-97bc-5d7f264bf9c7",
        "cursor": {
          "ref": "ec5d7b3b-3aab-4974-a00c-f2d2869c82e6",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "bb0d589f-823e-4e21-b2a3-63771d79ccd2"
        },
        "item": {
          "id": "a9b979d4-d394-4247-97bc-5d7f264bf9c7",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "55dca3ca-998a-4444-9455-2a8df531cadc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc2c4dcb-7c49-42eb-b999-e0dee7e730bd",
        "cursor": {
          "ref": "189c781f-4be7-4cc2-a091-11c0c441c829",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "287caba5-b0c9-43b5-88b2-b24183336d58"
        },
        "item": {
          "id": "cc2c4dcb-7c49-42eb-b999-e0dee7e730bd",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "844d0328-369a-4eee-80dd-869a2c5449ce",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "511d7db9-fccd-42ba-9e1c-55688a672bee",
        "cursor": {
          "ref": "2fc18891-0f24-4643-b00d-91e97f1d6538",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "a4d91ac8-9b6f-4766-8455-4e8a67ee1e99"
        },
        "item": {
          "id": "511d7db9-fccd-42ba-9e1c-55688a672bee",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "75d3efb5-8dba-4e57-9fd6-4693f3a9ed45",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1841007e-f78d-4d84-84d3-f749db007a81",
        "cursor": {
          "ref": "1a6e74ac-0bb3-4461-b7c3-5870ac86bfbc",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "71666b14-6823-40d7-99af-b86e5b9f917b"
        },
        "item": {
          "id": "1841007e-f78d-4d84-84d3-f749db007a81",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "7b59bf47-6c05-4b91-8efa-501b691bd9cd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e071525-b340-464c-bd1d-6807cce33e9c",
        "cursor": {
          "ref": "aa603379-7740-468a-9043-a9d99b1b29a7",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "7ec6807f-d464-4fac-9e61-8bde4c1d94ab"
        },
        "item": {
          "id": "1e071525-b340-464c-bd1d-6807cce33e9c",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "b9ea5a90-6bcc-4889-8d37-f35f69225e10",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13b94bc9-5f2a-422c-b0c8-d8208a18c312",
        "cursor": {
          "ref": "e984e03a-e32e-4968-ae18-e3fbd136e301",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "41f1395b-8a5f-44c8-9825-cf1b976bd8dd"
        },
        "item": {
          "id": "13b94bc9-5f2a-422c-b0c8-d8208a18c312",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "785a2d31-0488-42b1-86b6-df9b67d55aec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8294c205-b1c2-4efa-9f99-bcdabff335dd",
        "cursor": {
          "ref": "a340f052-3e23-49ef-9f3c-f3bd53a228fd",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "bbf8600a-275e-40ea-a556-cfebff7712bf"
        },
        "item": {
          "id": "8294c205-b1c2-4efa-9f99-bcdabff335dd",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "5bd9b366-59e7-4d01-8f43-58de0b98d4ad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "207842f3-40b3-4517-b4f1-b27b92f82176",
        "cursor": {
          "ref": "46976a7c-6275-4864-8348-025a7cf83395",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "b9451018-e09e-45d9-bbaa-d4eb8e34edd2"
        },
        "item": {
          "id": "207842f3-40b3-4517-b4f1-b27b92f82176",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "ddac78ac-2774-4393-8054-fcc4b6125cae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5638e3b1-40f5-41eb-a726-b27d04f279c8",
        "cursor": {
          "ref": "e96b8cad-df79-44bf-8cbb-ae14b2b29279",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "fa200851-808e-4cde-a4fe-358d4fe57533"
        },
        "item": {
          "id": "5638e3b1-40f5-41eb-a726-b27d04f279c8",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f8f2b920-c654-4e29-8c16-a0bc231bd9ce",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09200771-2982-4bf9-aae2-263524752aba",
        "cursor": {
          "ref": "bf96b4fd-da88-4037-b7c5-efa1db2e58fa",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "7150c2ef-66cf-4bc7-ab72-cc3bed38e596"
        },
        "item": {
          "id": "09200771-2982-4bf9-aae2-263524752aba",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "cf0e2b72-a668-4679-b9ab-a111a47305e6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 176,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80aa211f-9411-474b-9503-fae52bae81af",
        "cursor": {
          "ref": "bef523c9-6fc7-4244-99fc-cb08a2b24da7",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "62b2a65f-bc32-4aa6-b33e-86a7159c288d"
        },
        "item": {
          "id": "80aa211f-9411-474b-9503-fae52bae81af",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "99a9faf4-0fd7-4d0d-beba-148a897cfa38",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a827d045-699b-48ac-a9c9-7d8967114560",
        "cursor": {
          "ref": "772bbaf9-1cf4-48e8-a71c-421d77454d34",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "7b1517c2-3d39-4748-be4a-488d3b8ad5f4"
        },
        "item": {
          "id": "a827d045-699b-48ac-a9c9-7d8967114560",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "0a5eb666-0672-46df-b928-e9a63648a57f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "522efdd0-bcf5-4db1-a745-a8085a8d4b02",
        "cursor": {
          "ref": "59b0517d-cb22-4d07-867d-bb55c3787b96",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "6ad1776e-3131-493f-95f1-37eab6bee114"
        },
        "item": {
          "id": "522efdd0-bcf5-4db1-a745-a8085a8d4b02",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "7ec5bce5-1244-43ad-a312-e55da3468beb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "554fa44e-d27e-419f-8c50-3a34833e9939",
        "cursor": {
          "ref": "52024a58-157c-4992-bf86-e821d001c874",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "2bd215da-5621-47ae-bb78-929d016f5f89"
        },
        "item": {
          "id": "554fa44e-d27e-419f-8c50-3a34833e9939",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "cc13efcb-58dc-4802-86d3-b8fd2cb643bc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "140a06a8-4986-4a82-8fc0-b92bf6fb9b7b",
        "cursor": {
          "ref": "32cfb244-6ea7-4837-ae8d-8e1578012050",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "85720933-0a51-49e1-a3d2-1ba69c517763"
        },
        "item": {
          "id": "140a06a8-4986-4a82-8fc0-b92bf6fb9b7b",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "f8424c37-83e8-4f73-a012-a18ca79fd8a7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f4bb30a-aa6d-491c-8028-d3bc0253f58f",
        "cursor": {
          "ref": "d556de37-26fb-4461-9bd7-a7016801ee9d",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "221376b9-0e77-4a06-a860-d0cf8425da6a"
        },
        "item": {
          "id": "5f4bb30a-aa6d-491c-8028-d3bc0253f58f",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "e5361d58-7db5-4352-8bb8-42b7929e6518",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c16bbb05-5b3c-4592-b60d-f910aeb6a1a2",
        "cursor": {
          "ref": "e9765448-c604-4847-8f6e-aa52f0c88e81",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "41e13fde-65ed-4df1-8bec-2ef9efd08776"
        },
        "item": {
          "id": "c16bbb05-5b3c-4592-b60d-f910aeb6a1a2",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "79d19f74-029c-4508-b01b-c35c78133806",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56e48652-939c-4a0d-b091-81b93fd21a77",
        "cursor": {
          "ref": "158c5a00-ade0-435e-ba54-f005fc2eea68",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "781260a2-34ee-4131-92cf-6461cd4c114d"
        },
        "item": {
          "id": "56e48652-939c-4a0d-b091-81b93fd21a77",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "7aecc73b-b562-41fd-adb4-3c14df787883",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71eb324f-5f64-477c-9471-cc8821a80d5d",
        "cursor": {
          "ref": "489aa973-c8b1-40e3-aa5d-0baafa218666",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "646d07c9-fe40-42f2-9460-fdbcd4a7df92"
        },
        "item": {
          "id": "71eb324f-5f64-477c-9471-cc8821a80d5d",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "c3814886-ef8f-4942-91ff-80145b468e00",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6a1268c-85d2-4fce-87f4-8ea2a7799277",
        "cursor": {
          "ref": "be8e3e6b-7846-449f-bf1f-1895ceed0ed6",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "f97b1ab0-a8da-4a8d-8160-1603711c4aef"
        },
        "item": {
          "id": "b6a1268c-85d2-4fce-87f4-8ea2a7799277",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "697b7cca-f410-4c04-804f-45677d75fb49",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5ac7187-4d00-463b-ae7c-c098ffd7da5e",
        "cursor": {
          "ref": "8404face-2488-4c89-a9c0-ac98fdf43c33",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "f8739dd6-5114-4e04-b720-99440efb857e"
        },
        "item": {
          "id": "b5ac7187-4d00-463b-ae7c-c098ffd7da5e",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "83f88c6a-ea2e-4f78-9edc-d1424618feb3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c8553aa-5031-452a-93dc-bffe464b71ad",
        "cursor": {
          "ref": "fff2291d-d167-4121-8495-0c7ca74327e8",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "95024ecc-46ff-4dca-8f5c-a18e3f254ba4"
        },
        "item": {
          "id": "7c8553aa-5031-452a-93dc-bffe464b71ad",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "c54fa867-a5e4-40ad-b106-218b95793c75",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e776d239-a67c-4297-ba4a-99e17fa37d70",
        "cursor": {
          "ref": "c71aacfd-1c4a-4129-bb13-0b660ec531f2",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "df29e042-abed-4d1a-8ce2-a43c281bdd2f"
        },
        "item": {
          "id": "e776d239-a67c-4297-ba4a-99e17fa37d70",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "aae10931-a9eb-49ae-8222-5a1b0c8a80db",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0e552ff-79a6-48ba-af77-c712d77e7c9d",
        "cursor": {
          "ref": "b868d70e-7d9f-436a-927d-cb9ab219f5d9",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "268e8244-4cef-4305-a812-6a104a297371"
        },
        "item": {
          "id": "f0e552ff-79a6-48ba-af77-c712d77e7c9d",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "8068a6b3-b0b9-4993-be06-bb2c02d783d7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2e596a8-204c-4f23-881e-0c2a18c035e7",
        "cursor": {
          "ref": "41a8089e-44eb-4bdb-8fd7-9288d7d5c003",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "31e6c743-1be6-4536-bc39-e6b3dbdd94c2"
        },
        "item": {
          "id": "d2e596a8-204c-4f23-881e-0c2a18c035e7",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "6f0e4e92-a765-4a33-af04-6d8f0c4eaf3f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa4ac073-4088-4db7-b47d-f080e70a3a4b",
        "cursor": {
          "ref": "224506d1-c505-4ffb-8657-b4df497ffbfa",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "4e567479-54fa-4d69-b02b-3ec24489261f"
        },
        "item": {
          "id": "aa4ac073-4088-4db7-b47d-f080e70a3a4b",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "7362a78e-61d8-42f5-b049-5b089fbf4a60",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6dce455-a004-46c8-9c7b-7452c40328af",
        "cursor": {
          "ref": "2f13f952-e462-4ccd-b061-f7156f2f642a",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "abd44905-d9b3-4e15-be9b-6267620e9876"
        },
        "item": {
          "id": "f6dce455-a004-46c8-9c7b-7452c40328af",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "7078434b-d7e9-4966-963d-19bf18c30f41",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5024efb-efd7-45b4-b2f7-df9d2a1d1359",
        "cursor": {
          "ref": "5bcf19e4-8ccd-45d2-8e3f-2f6ec331f748",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "29c1ce8b-b06d-4a46-9b3e-2ac5bb14b149"
        },
        "item": {
          "id": "d5024efb-efd7-45b4-b2f7-df9d2a1d1359",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "346f397e-a55a-4d64-a1da-89bed4a8030d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "479daf9f-122b-430f-ac89-3976b5812269",
        "cursor": {
          "ref": "a02733ea-1653-47a4-80ae-2b49d5a3d5c4",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "9e513a3d-6511-4087-b0e5-b030a65dd693"
        },
        "item": {
          "id": "479daf9f-122b-430f-ac89-3976b5812269",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "647430d3-c3d8-4318-98f6-ac7708df5446",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcdf6201-a77a-4fd2-bd68-3dd67ed81239",
        "cursor": {
          "ref": "a0b36c32-bde2-473b-85e4-da2c81a1dfac",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "a785bcde-f6d6-4e92-909c-0ae4a6d409f9"
        },
        "item": {
          "id": "bcdf6201-a77a-4fd2-bd68-3dd67ed81239",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "4ff25a43-9cc3-42b0-b1bf-7bafcc03d035",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1004c098-9a67-42b6-99b1-ae5addf61e64",
        "cursor": {
          "ref": "b72989ce-ae92-441a-9da2-2cc4264ed79a",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "3438a87f-faef-47eb-a13a-35001c3b3922"
        },
        "item": {
          "id": "1004c098-9a67-42b6-99b1-ae5addf61e64",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "213e0498-a7de-4f25-9404-5f8865442693",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b86c227f-a1fe-41ea-a8c5-f2ecc74ce8aa",
        "cursor": {
          "ref": "c2a931b7-da59-4e14-aed3-7206c79d6bb7",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "bef7fc1c-1d91-457d-9bd2-ee76b59be47a"
        },
        "item": {
          "id": "b86c227f-a1fe-41ea-a8c5-f2ecc74ce8aa",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "707d33d9-6c2d-46cd-8397-0302307ed2e6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cc47b55-f7c2-4778-8538-c8f529bb0276",
        "cursor": {
          "ref": "056556d2-d88b-459a-9373-d8b3731deb33",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "409e1cbf-a667-4a8b-9259-8bc2c2e89b98"
        },
        "item": {
          "id": "3cc47b55-f7c2-4778-8538-c8f529bb0276",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "d1fa5545-ecca-4faf-8c3f-e6ca492cb9cc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10738754-0cf8-4c01-93b1-e19c3ef0d8bb",
        "cursor": {
          "ref": "6f762610-cc86-49f4-bb96-89999f2d1d75",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "a82349ec-0d76-4d4c-b8ba-d395b548fb9e"
        },
        "item": {
          "id": "10738754-0cf8-4c01-93b1-e19c3ef0d8bb",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "c2c50073-0511-4ed5-9b41-1696523bb3bb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c8a3f7a-ba53-4e56-9f24-eb631b765712",
        "cursor": {
          "ref": "7684eb0a-261b-4168-b191-3c886326bca3",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "4cbced32-7e04-435e-89d0-72017acab806"
        },
        "item": {
          "id": "6c8a3f7a-ba53-4e56-9f24-eb631b765712",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "ed56cce5-53b3-48d8-807d-38e9ba51b19a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0465db1b-8592-4088-b677-d718a941c959",
        "cursor": {
          "ref": "9721792d-cd91-4af4-a6a5-d31f3077226b",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "4b201ad2-eea6-435c-8731-c186b6bbfe04"
        },
        "item": {
          "id": "0465db1b-8592-4088-b677-d718a941c959",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "99bff4a3-bb28-46c7-860b-7cc0ad627b19",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8008aad-3404-4e94-aa77-ddd319766764",
        "cursor": {
          "ref": "1bd27f5d-2b5c-41ee-9190-7beb671738d7",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "96076c36-990f-4e9c-99c2-cbba988acce8"
        },
        "item": {
          "id": "d8008aad-3404-4e94-aa77-ddd319766764",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "5017f184-3297-4c35-a51b-18b7bf9a1284",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d703995-64bf-41e2-8f3d-7a79e66e1743",
        "cursor": {
          "ref": "2e123486-8bd3-47fa-b508-81956925b401",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "ca1bb011-ece3-4902-bebb-2a26b26d6ebf"
        },
        "item": {
          "id": "7d703995-64bf-41e2-8f3d-7a79e66e1743",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "a4b2970a-6452-4f05-9029-d7892897667d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b78c8c3-5b51-4632-945a-c93fab70b9f1",
        "cursor": {
          "ref": "800a3f6f-9065-4207-a18f-fbb0e9e88a6a",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "8e037188-735b-448f-8810-c0af010b54b3"
        },
        "item": {
          "id": "1b78c8c3-5b51-4632-945a-c93fab70b9f1",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "1e926234-4812-46ca-81ff-422926021bca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bd3e0aa-d51b-4e33-a952-852f57817a4e",
        "cursor": {
          "ref": "b3258c1f-aca9-4161-9a3d-26196656983a",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "636242bc-da4c-4f13-9f52-45bba4fb935e"
        },
        "item": {
          "id": "9bd3e0aa-d51b-4e33-a952-852f57817a4e",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "45ff1378-bba3-4a02-84a9-11bbac3c56a4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f1f8a72-efc2-4507-a9a7-97a061eb9b8e",
        "cursor": {
          "ref": "27513273-de21-48da-a4fa-4ee84a4129fd",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "7dfae271-815c-4f12-bac1-3cf22df114f2"
        },
        "item": {
          "id": "2f1f8a72-efc2-4507-a9a7-97a061eb9b8e",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "10bf1274-28fd-45ea-a05c-162a8df52f0a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc0fd8ef-d30a-425f-b386-aec1ec895edf",
        "cursor": {
          "ref": "64770aac-a46b-4224-a70c-e3a62f093c78",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "d8e8005d-5f2f-4ced-a7b5-0bff2b3e766e"
        },
        "item": {
          "id": "dc0fd8ef-d30a-425f-b386-aec1ec895edf",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "40d34f16-8269-4072-81cd-4b9d070ffc62",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25c26738-ebe1-4f06-98ae-32eec62cc7d3",
        "cursor": {
          "ref": "a2414920-8cc4-463c-8710-3d28b8605cd5",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "e2427070-022a-4e00-8d7e-fe354aa5776b"
        },
        "item": {
          "id": "25c26738-ebe1-4f06-98ae-32eec62cc7d3",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "163d253e-3c68-46db-94c4-8ebf0950c630",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4558647-3ca1-4eb9-bb5d-65b1c61c2315",
        "cursor": {
          "ref": "65fadb9d-332b-4616-9c50-ceabf04fa090",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "3bc21551-0c23-4d40-a299-da2923611c47"
        },
        "item": {
          "id": "d4558647-3ca1-4eb9-bb5d-65b1c61c2315",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "e6cbf728-d600-4401-bc8c-d05851fa801d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b7980ae-8a5f-4f2a-b1a3-c8f1b6d069cb",
        "cursor": {
          "ref": "c35f9386-283b-409e-81fd-61283963c4b0",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "8828a055-8761-4fe1-87ae-ba685c83545c"
        },
        "item": {
          "id": "7b7980ae-8a5f-4f2a-b1a3-c8f1b6d069cb",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "164a92d6-0810-4f5c-ae02-ac0d154a66da",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e501d16c-0014-489c-8440-0da13ae194ab",
        "cursor": {
          "ref": "855cafa0-dd70-4ecd-8e3c-ea3aa2e8fab2",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "49ab9c5d-7835-4ddf-ac82-b83f39a5d695"
        },
        "item": {
          "id": "e501d16c-0014-489c-8440-0da13ae194ab",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "7118ae9a-8089-40e9-b587-ff9f4117ac65",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13be353b-1c66-420a-b45d-7d41d810bb51",
        "cursor": {
          "ref": "b8f5636c-cdb6-4cb7-9375-f8b83dfa4b72",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "9b2774d3-2b06-4d31-8d80-ba3cff99200e"
        },
        "item": {
          "id": "13be353b-1c66-420a-b45d-7d41d810bb51",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "df512a29-2a6c-422d-bae5-13fc3862b628",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc26f559-8e8a-4ce5-b4d8-00a5f237fa31",
        "cursor": {
          "ref": "e3313db7-a80e-4bf6-8d6b-6244090feca6",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "6bfe1d6f-bd33-4007-8589-effc630d536d"
        },
        "item": {
          "id": "fc26f559-8e8a-4ce5-b4d8-00a5f237fa31",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "00cb501a-688c-4001-81cd-f0243470a395",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f3af569-43f1-4281-8ef6-84f1a2322167",
        "cursor": {
          "ref": "7108f66b-9bfa-4a82-8192-54462bf74442",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "96c8a459-a85f-4796-bf1e-6dfba7ef0290"
        },
        "item": {
          "id": "6f3af569-43f1-4281-8ef6-84f1a2322167",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "854e8a3b-fed7-4957-adc2-dd003d2da65b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dc55769-291d-4c77-823c-8185be26e5ce",
        "cursor": {
          "ref": "64f35865-60a4-4e38-8b95-7965905ecae0",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "6d2bb568-551f-49e8-b9f0-e871fb23339d"
        },
        "item": {
          "id": "4dc55769-291d-4c77-823c-8185be26e5ce",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "60f582aa-48b0-4737-8b9f-a4966b6cef61",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d070297c-df3c-48af-8552-7a0d5cb108d2",
        "cursor": {
          "ref": "835c5081-bed6-4c0d-a11d-2fed9d617612",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "6ed7e470-0653-4356-8905-758d6f9bc3b1"
        },
        "item": {
          "id": "d070297c-df3c-48af-8552-7a0d5cb108d2",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "48593f52-32e9-4f02-8281-1d2a7b753d63",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb0247d8-9d77-4c8e-8157-60ac1ac9e739",
        "cursor": {
          "ref": "82470bd4-8f91-475c-a860-fbfb76d19cd3",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "d1bb6c3e-2b10-4b37-a51f-d755bb324a61"
        },
        "item": {
          "id": "eb0247d8-9d77-4c8e-8157-60ac1ac9e739",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "f95d5c20-3552-4550-8f28-97954c58151d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b694d9e7-d4f9-4211-9351-20cbb2189242",
        "cursor": {
          "ref": "a5f3c0a8-d27c-43ba-a4dc-d318aafba7a4",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "1930ca83-a4ff-4c0e-8d3d-845b118b74ec"
        },
        "item": {
          "id": "b694d9e7-d4f9-4211-9351-20cbb2189242",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "fefa96d4-f757-4f8f-9e19-5e2f86528075",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c0c07b5-d197-4974-9f03-a31e50c5ae20",
        "cursor": {
          "ref": "58d33a7a-df44-4d80-a213-0887aba869b6",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "6b695426-667a-4fde-ba46-163472458fcd"
        },
        "item": {
          "id": "6c0c07b5-d197-4974-9f03-a31e50c5ae20",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "6b18e353-dbb7-4c10-b904-fad8413a94ab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4fc3879-4b25-4ab2-9a31-89a6f103c399",
        "cursor": {
          "ref": "87d00755-4d29-4492-a692-78d28c4c71fe",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "dcbe999c-128c-48d3-858e-d55fe0dbccb9"
        },
        "item": {
          "id": "e4fc3879-4b25-4ab2-9a31-89a6f103c399",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "a9fa1f1c-5c8f-412f-91d6-a771d0bb1c52",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc706613-cfe5-4898-9075-25157f0c0005",
        "cursor": {
          "ref": "3040f514-cc8a-45ec-b456-2133c7953fcc",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "9df678d1-d3a2-43d2-941e-266e905ef8ce"
        },
        "item": {
          "id": "bc706613-cfe5-4898-9075-25157f0c0005",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "a9498364-6b6a-4759-b7e6-fed08c7aeeca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57056616-348f-44f8-b112-db04a4e987d4",
        "cursor": {
          "ref": "75d94396-210e-4a0a-8e8c-3eba10e6af3a",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "1ca129f1-8abe-4ca5-a626-4af0f4b22544"
        },
        "item": {
          "id": "57056616-348f-44f8-b112-db04a4e987d4",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "cb30ae39-01b4-4d24-a98d-30c6d68aabd7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dee535c-93f6-43fc-b10a-00c8cb062484",
        "cursor": {
          "ref": "2fb07389-df3e-44f3-92ee-a69ccb161552",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "717604f1-ddb2-4bc7-8c66-6ef12974ae63"
        },
        "item": {
          "id": "6dee535c-93f6-43fc-b10a-00c8cb062484",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "73762506-8790-4172-bed0-fb5493c2e38f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54c96011-59f7-4848-a6a5-bd19104983c6",
        "cursor": {
          "ref": "e761bc8b-400d-47d8-85a0-d4db68713c3b",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "cafc0374-6b74-44a3-91dc-67d192f9768e"
        },
        "item": {
          "id": "54c96011-59f7-4848-a6a5-bd19104983c6",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "f565eeaa-067b-4abd-ac70-5f92fa1149c2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70f0f8c0-deea-427d-8443-dc920db83164",
        "cursor": {
          "ref": "4ebec1bc-21ac-4654-bed9-e8482849c43f",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "3e28e705-1cb2-4073-ba1c-72639f16cfe2"
        },
        "item": {
          "id": "70f0f8c0-deea-427d-8443-dc920db83164",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "57d58889-4203-4b41-b476-6be135297ec5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c67a9486-2edf-49e1-9a98-d6562e1dca91",
        "cursor": {
          "ref": "ecad06a6-05f1-44b9-91cc-ac2c1fad5e34",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "6849fa11-d383-4cdc-8832-9d98a7f63d9b"
        },
        "item": {
          "id": "c67a9486-2edf-49e1-9a98-d6562e1dca91",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "a14e1957-07e4-4d89-9695-a61af699b0a0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6456b754-780e-4828-9dcb-19413abd4554",
        "cursor": {
          "ref": "1569ff5c-a46e-4894-9e00-e9eb660934b1",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "d9b1fb0e-f619-4bc6-9d91-bab8ad0a687f"
        },
        "item": {
          "id": "6456b754-780e-4828-9dcb-19413abd4554",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "ab16195c-ddf6-4402-b3e7-360bd726c353",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "555d9471-2e00-48bf-ac5d-a62c85179718",
        "cursor": {
          "ref": "fb90bc7d-05b4-42d9-a77c-0d5ba7dbda63",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "3457d5b5-022c-45b3-89bf-883936934e8d"
        },
        "item": {
          "id": "555d9471-2e00-48bf-ac5d-a62c85179718",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "c0ee781c-c5bf-49c9-8ead-82db129399e7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00bf8031-4641-4e49-a73b-76ffded006cc",
        "cursor": {
          "ref": "9b363c17-49e9-4b65-a558-0391ba8d9e56",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "9f21df6d-a84f-4d5c-8385-bb9a597e673b"
        },
        "item": {
          "id": "00bf8031-4641-4e49-a73b-76ffded006cc",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "63286d29-ad5e-4375-9f41-01b1641b2ddf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f4fdb5d-0c31-41b6-b76f-e0e405cd6653",
        "cursor": {
          "ref": "fd318882-b4b2-435a-b118-bfc1437083fd",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "e0a4e895-60ed-4adc-bedc-2f543ca35ef6"
        },
        "item": {
          "id": "2f4fdb5d-0c31-41b6-b76f-e0e405cd6653",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "699b610c-54f0-4b28-a865-ec0218ac97d6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91c1e4e3-f3ea-44ca-a533-4cea3f3b9d76",
        "cursor": {
          "ref": "6c3a152f-d0c4-48a6-a50c-a940929e0202",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "83d4b956-f2c6-4afe-a4cd-1d43d93d3e9e"
        },
        "item": {
          "id": "91c1e4e3-f3ea-44ca-a533-4cea3f3b9d76",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "9b28ed1e-d86c-42b6-b60e-4711a7b4a6c9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c8f7be8-3bfb-4f50-b7ea-6e1c3c4f3517",
        "cursor": {
          "ref": "fc9633a5-3ff8-4583-bcbd-7bb0e886eb4d",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "c2216c08-6f05-4be9-b640-aa1487ffd5c6"
        },
        "item": {
          "id": "0c8f7be8-3bfb-4f50-b7ea-6e1c3c4f3517",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "30e6acb9-2a91-4a41-9da5-1db52dcf6c78",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6786b206-bf2f-4f49-ba8b-9cf2a981466d",
        "cursor": {
          "ref": "7cd56da7-3637-4c64-8112-8cb396ca76ad",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "b5a80d2a-030e-4786-a5bc-15983db317e4"
        },
        "item": {
          "id": "6786b206-bf2f-4f49-ba8b-9cf2a981466d",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "51ff45dc-01a9-4d9b-a011-05956afd8896",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ef12625-310a-48dc-a095-397d8a5d4928",
        "cursor": {
          "ref": "ccf3bed3-6bb0-4da0-9ee7-219fa73d3431",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "8ca699e1-56a6-4f33-af2a-bec58e845559"
        },
        "item": {
          "id": "8ef12625-310a-48dc-a095-397d8a5d4928",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "cc0be3a0-71fb-4e11-a7ad-ecdbccef3a9d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fef16db-70fd-4579-b6f9-ec52ff64530b",
        "cursor": {
          "ref": "5901b205-4b58-41b3-b789-30ea52291ce0",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "8c59ff5b-cf9a-47cf-9ed0-2447f66a9aee"
        },
        "item": {
          "id": "8fef16db-70fd-4579-b6f9-ec52ff64530b",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "8c618b81-cceb-4f38-a086-a6d5b1a61ebd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f0ca068-65c9-4b4a-b1ae-e235dcdcf489",
        "cursor": {
          "ref": "0b09dba0-af1c-4a5b-ad25-ee1e21441063",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "a1f58b4c-e139-4668-afe3-145dd8b89618"
        },
        "item": {
          "id": "0f0ca068-65c9-4b4a-b1ae-e235dcdcf489",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "05e520cb-a763-4100-b8c6-67be4bfd449b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3d25d06-6190-40de-902b-3dbe185b597f",
        "cursor": {
          "ref": "9b091e3f-ca96-4b50-ac93-c199e1915cce",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "3f58c7f4-b7bc-4d45-9aa6-11889c87b84f"
        },
        "item": {
          "id": "b3d25d06-6190-40de-902b-3dbe185b597f",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "0618754a-4c73-4d4d-bdb1-f06eae14317d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fce18da-b141-4722-894e-3ef074b42022",
        "cursor": {
          "ref": "026dfc11-8c36-4ac2-813d-3b500a2416f9",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "68260543-255c-4203-8954-ca5f09125715"
        },
        "item": {
          "id": "9fce18da-b141-4722-894e-3ef074b42022",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "7894fc83-c69e-44f5-a4d2-05ae1f85659e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15f4da1a-8f0a-4d26-a6d6-0821ee1223e8",
        "cursor": {
          "ref": "ad5eceb1-51fb-4d13-b51b-150c9c7a364c",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "49542245-da6d-4c80-8534-8fdd764a70ca"
        },
        "item": {
          "id": "15f4da1a-8f0a-4d26-a6d6-0821ee1223e8",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "fff9538d-2594-418f-9007-62303f0c8374",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d83fe5ef-881b-43b0-888b-9d1403b56b0d",
        "cursor": {
          "ref": "250f2fc1-8cd0-494d-8a5b-0023f5778389",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "02c7fa94-1780-4894-8b13-890b65c0b18a"
        },
        "item": {
          "id": "d83fe5ef-881b-43b0-888b-9d1403b56b0d",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "9617448b-f17e-4a50-9218-42b5416b14c6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c96d9a7c-7d24-4e35-9d45-8fea3a1fa50f",
        "cursor": {
          "ref": "fe11fc69-669f-42c6-b4d2-a06e529b091b",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "f943c07a-d1f3-44ce-8d86-1aecc203cc39"
        },
        "item": {
          "id": "c96d9a7c-7d24-4e35-9d45-8fea3a1fa50f",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "d95ece27-761e-4932-b714-ef22deb2d298",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec4a4b74-5fa1-4e89-bf43-ccca31c7517f",
        "cursor": {
          "ref": "3dc10179-893f-4b77-82fd-5c28bd82befd",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "4a7cd7de-df03-44b3-bce9-815bdb060a32"
        },
        "item": {
          "id": "ec4a4b74-5fa1-4e89-bf43-ccca31c7517f",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "1b3cf002-00f3-42a9-9b56-918786e475ad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ce73be3-c11a-4605-832e-debf83da3078",
        "cursor": {
          "ref": "95b9bcc0-06fe-401f-83fb-af40ca5f1b90",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "64eadaa1-2077-415a-84fb-22dae6662f61"
        },
        "item": {
          "id": "8ce73be3-c11a-4605-832e-debf83da3078",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "178efe88-ec2b-4301-a2ae-4b41bb62e215",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93ffa11f-d22d-4dd8-bd8a-d4615b52a625",
        "cursor": {
          "ref": "1ceca4dc-a170-4090-ab08-2af96ffb4715",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "3f7bbdd8-1c88-4799-9fec-059048d1d36c"
        },
        "item": {
          "id": "93ffa11f-d22d-4dd8-bd8a-d4615b52a625",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "bf9cc2bd-81f5-4be9-8adb-189c3992815b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12090d8a-adfb-49d4-83d4-9c973a420a8f",
        "cursor": {
          "ref": "aeec543b-8800-4535-baa1-381641544191",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "9e92121d-6dbe-4e11-b670-f6d06a7eec39"
        },
        "item": {
          "id": "12090d8a-adfb-49d4-83d4-9c973a420a8f",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "301fa4b0-36bf-42e0-ba2b-a1d00455db92",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "997793cb-9f4f-4a6c-8f38-e9df89d9de8e",
        "cursor": {
          "ref": "1ec2e80a-ed9d-4b4d-94f3-ed6cff415eee",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "443510cf-b255-43c7-9e1f-783e0e1aafe6"
        },
        "item": {
          "id": "997793cb-9f4f-4a6c-8f38-e9df89d9de8e",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "5a9fd7dd-d3c4-4a8a-b46f-88e13e78b34a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12e40b93-1afc-47d5-ad1b-b9ce7e66e7fe",
        "cursor": {
          "ref": "3ef5e9f3-07b5-41bb-8139-e520ef3778ca",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "d928ea48-57f5-497d-847a-0c7222585447"
        },
        "item": {
          "id": "12e40b93-1afc-47d5-ad1b-b9ce7e66e7fe",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "d098913b-04e5-4a3c-a494-1b87109be853",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f83bfbc-e56c-4966-9e52-2e7ed54df6e8",
        "cursor": {
          "ref": "3265e227-1c3e-42eb-9225-0765764911cc",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "80c05d92-040e-4029-9c41-387db6edf1a1"
        },
        "item": {
          "id": "4f83bfbc-e56c-4966-9e52-2e7ed54df6e8",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "07438f0b-e26f-47a3-883c-e2acf62f85b1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29c122fb-fdfc-4d6b-b0dc-3caecad5a348",
        "cursor": {
          "ref": "91575f3d-6e2d-44a5-b1fa-550bfc83b8ff",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "81610f94-6511-4abf-a3f3-4b2c0189365d"
        },
        "item": {
          "id": "29c122fb-fdfc-4d6b-b0dc-3caecad5a348",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "f43902dc-a6eb-423d-b523-662570efd957",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f936e630-93a2-49c4-9b93-b1ddf7e902b0",
        "cursor": {
          "ref": "2b74935b-832d-49de-ad2c-173959a1687a",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "388d34fb-7fd7-474e-b440-ad8fc1ed2a99"
        },
        "item": {
          "id": "f936e630-93a2-49c4-9b93-b1ddf7e902b0",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "c48f760b-4f1c-43c1-ab61-8819dc619bbb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "02cfbee8-9820-4aae-88af-c19246a3c1f9",
        "cursor": {
          "ref": "b56ae25b-3ad4-4869-b90a-cc71642ec293",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "8f2dd25a-0444-4e56-be62-f96dadae056a"
        },
        "item": {
          "id": "02cfbee8-9820-4aae-88af-c19246a3c1f9",
          "name": "credentials_verify"
        },
        "response": {
          "id": "5542c07b-ec93-4799-a1bf-d5484ff66fe2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "3e80dbf6-d07a-4aff-8842-8864eebfffff",
        "cursor": {
          "ref": "d5758cdd-e90d-4643-8132-887a18ade584",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "5f4e1537-7d5f-49df-8459-860c643f2e02"
        },
        "item": {
          "id": "3e80dbf6-d07a-4aff-8842-8864eebfffff",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "4708d9b4-49d7-42c2-bfaa-95a14e7c4cbb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "ccbf8dc0-9b9f-4701-81e2-f08de0418189",
        "cursor": {
          "ref": "16e3cbbb-d30f-48ab-a579-16bc534d9065",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "6c701aeb-8f55-4cf6-bb55-82c3ea45a16c"
        },
        "item": {
          "id": "ccbf8dc0-9b9f-4701-81e2-f08de0418189",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "174226a8-a6ef-4282-a75a-309a4f64c840",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccbf8dc0-9b9f-4701-81e2-f08de0418189",
        "cursor": {
          "ref": "16e3cbbb-d30f-48ab-a579-16bc534d9065",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "6c701aeb-8f55-4cf6-bb55-82c3ea45a16c"
        },
        "item": {
          "id": "ccbf8dc0-9b9f-4701-81e2-f08de0418189",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "174226a8-a6ef-4282-a75a-309a4f64c840",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ff5d2bf-6b97-4138-a724-dd6fb272cf11",
        "cursor": {
          "ref": "83c77c7d-0738-4110-8d91-509eea96c4e5",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "5b2b44a8-e901-4b81-acb6-ae1fb0a44037"
        },
        "item": {
          "id": "4ff5d2bf-6b97-4138-a724-dd6fb272cf11",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "967da297-6765-4458-9635-5693fa3d7490",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:282)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0c0e52e-bbec-441f-8c0c-2c43a14293f3",
        "cursor": {
          "ref": "179db262-61c3-4176-a7ce-27091d0d9ddd",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "beb409e7-776f-4f09-a4c4-12983d080224"
        },
        "item": {
          "id": "b0c0e52e-bbec-441f-8c0c-2c43a14293f3",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "2a86ade2-ef2d-4247-b7b5-569b0145dae4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:283)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}