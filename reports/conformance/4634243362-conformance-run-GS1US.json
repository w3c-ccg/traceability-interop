{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "d9219419-7ad4-4569-9859-bda063c9a924",
        "name": "Clear Cache",
        "item": [
          {
            "id": "eca5b5b4-ed76-43c9-9074-fe586ced78f4",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a26ffd2d-2d63-44e4-a50e-b98a7add3059",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a7cee169-24e8-4437-b1c1-a3b4f356ee98"
                }
              }
            ]
          },
          {
            "id": "99a75102-4659-43e6-a76b-c775a4fcef74",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ef4f1f1b-02cf-4106-bffa-864ec6fb547c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2f4f1704-e8a7-44d6-b70f-cd97af8cc423"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "602f083e-c550-485d-9deb-b95685ca8f41",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "1f5e4c86-dc98-415d-b452-f11425743f14",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b27686d5-8df3-4b6e-b94f-e4126b59ff40",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "387efe73-9593-4a38-a318-ffc82336d879",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5a7720a5-5733-4029-9237-51495d87a850"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "22c62720-0e2b-4f5b-aee8-0046508580f9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "da59063f-0cea-413a-a707-0247896b68cc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fe4546b9-6ed4-45c2-9726-62a988f75424",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e23d56dd-89dd-430c-8a11-88c21d5268b3"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "72538a5e-2eac-462a-afcf-a1727c13f575",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "715cb2f9-af3b-4cf7-a7f7-45e15a6fe33d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "12d259be-cf61-42e7-a59e-1b8e5cf7fdbc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5a809618-a7b6-4e86-896e-959e83b02c73"
            }
          }
        ]
      },
      {
        "id": "d4ada86b-ad2c-4e17-8cab-8aca9231b733",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "1ba504e7-b1aa-4d79-97af-a5a82180a689",
            "name": "Negative Testing",
            "item": [
              {
                "id": "040beb4f-3f7a-47fa-a2d8-f25cea78391d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2938e377-ffe8-4d9e-9911-934cca14923c",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "814ae53c-ec0c-413f-b9f1-099e720d21b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "80895f73-6ccf-4697-8ca0-32a21ddd3911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc7925f7-1ca1-41cc-bc42-8b4093c13ffe",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdb55a34-7ab9-487a-9021-38f76431f833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f54ac13a-ab4f-4a7b-a0aa-346b00372644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a029c3e-cc2d-4171-b121-a7b5fd95ca39",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "697ad3b8-65ec-4940-916b-8b57f1a6e5a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ba17d9ce-8123-4f42-b6fd-2f34aa065248"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e36f4f38-0de6-4a2a-99ea-8e8b8cd43f75",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "744c725c-39bb-452c-9fef-d64482938596",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfa1cf6b-289d-4d8d-b7c6-c8c923e42545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5ba2c3e4-5f74-4088-927e-780377854f3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dc10c22-6076-4a00-93e3-249661c35c46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac9a8178-24b1-4783-b2bc-26f5b5bfdf20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a91e9676-eb09-4279-892a-3b67fbae3f93",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3ecfeaf-1771-4199-bab9-ed0a863c1815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "07a0741b-abe8-45e5-b9fd-4e36132c697d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a34de82-a046-4e20-bed4-077bad0a2f33",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "fbf81be4-d4f8-4486-9d4f-de97d800a013"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "997bb37f-80e6-4378-9a91-acba99257071",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f97cd99c-1fff-4406-8bd9-fbcd8ddc6f7d",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f08f6b33-5f87-4aac-a4c0-723de32f7d95",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "796f38ce-3857-4f14-8caa-f5dd0bf73a0f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a62016ec-03d2-4625-983d-fe370496763d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "905fc6c0-b77c-4e07-8a93-8588d87a2187"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "75d4f786-9c1c-439a-8486-cbd20e6394f8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a835fc37-fcda-432c-840b-17fc65732a79"
            }
          }
        ]
      },
      {
        "id": "cd0cb18f-ec76-4f59-af1d-023f1147283f",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "1538e9bc-4a32-498b-ba1b-d6956c067232",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4255aca3-4c5b-46b7-8170-52b956cbd1e2",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "95459d53-689f-4a29-9a00-ccf724df0817",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcae3f5d-00c4-4793-bc62-5066f25a971c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b55ed4e1-6558-4592-8b34-06cad4efd0b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33c129f6-a9ee-43c7-af3a-2888a4c58465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "32065344-e169-4564-a3c9-3d44df529f76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "048e9b65-1072-40d5-ae88-a98baa1134ce",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a36a094-1c67-4cce-a76d-66f6474fd80d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d120ed8c-b29f-4e4f-964b-f42602aac317"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "650c4894-3773-40b7-9dcc-b1be4a3fe34e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f2e07950-6be2-45d3-89a8-c02e6c987ebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71a5df83-e510-4995-bbb0-d7d20951de7e",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a25a2ab-059e-40d5-bf47-ea22d2438b1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18f00b5e-551b-4f64-8415-55516acca0cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09b03af5-ac8d-403b-b4ae-971938435ec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a710aaad-9285-46a5-af99-b0cc6473320c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89daf6f7-ed3d-465d-a2ca-25257c5cf0f0",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5dad15d-deb1-4705-af3c-42456c87f7a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79931336-82c8-4310-89a8-b8715aceceb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "788166cb-ddf4-4b6a-96c8-f655ed2ec8a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a8bd6f5d-5907-4004-bd3e-a61b7d4d4cf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98d3582d-939f-4711-83ea-b228d6ad21a8",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0dbd74e-b708-4c00-84c3-6afdb1e510b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9525da03-6b14-4d92-9590-736e1a1b5bde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "745559f4-4bed-4251-aa2a-5620656688e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b0ef5f9c-df33-4eda-a17c-50a2821a9f4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ebff4b7-9a22-40c3-9945-058e6dc65771",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad9b9284-dee9-4fbf-a05c-e21f38d95b41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ec2353e-3749-4fed-b93f-2921277108cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af8fa6ce-0137-43c2-8427-603de161ef6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "999b084e-cc14-4179-a339-52db7bcbed9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdac827e-1dfa-42ba-aa13-37503f2179e4",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baa61a6e-8c98-44a4-96f2-a7c69eded2cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f20fa6f-9294-494d-b6f9-709c2a1ad670"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7d2449e-2b8b-4f09-abd7-d6cdc2206457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e2c02ff7-b404-4538-926b-0d833a564a7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0fa0b12-6d63-4850-a6e7-2bb84e7262bb",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c0e258f-0f86-4525-81d7-05efd759ba2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4782afb7-4e92-40ad-994d-46feba206037"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bedd75f-09e6-46be-864e-b991a8440906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "082da27f-498e-4fc1-abd4-2a5670ce5a16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45a54cd9-9b05-4864-9607-0f54e5c6e262",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c1328d9-6ff2-40d7-bc09-7009f9bdf212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43865249-7386-4614-9574-51bdc6488326"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de648404-bb9f-4bdc-8e2a-3a284534cf1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aafbd448-7736-4af3-abe2-146652982a97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5770d613-b7ef-49ad-90a1-7c2311fd311c",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94054d18-f6b2-4319-9a92-352cbf43d207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a93e521b-2dc9-4b59-a228-bb688024d6da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abd96bd4-5ba7-4556-908c-509ebedae95b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1722e481-8104-4ff2-8a7e-5cf1d0470e8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1492f051-2aa9-47fd-8e83-7b0d7db96763",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3c19300-d078-4324-af0f-052e9d99ead3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8b7e674-ba83-41f1-8858-ff0569fb95f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "394c38d1-7081-41ee-8192-595fa401f803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3ebe9763-3c39-4670-bff1-557501816302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77f58563-b4f7-4d7f-b747-cf6efc6dc89a",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40b72153-4e14-4c2e-8f2f-c52d45f7d63a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f7ca001-d1e5-4e95-8197-fd79d1d2ed1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d22caee5-fc7c-4689-b899-d835817ec6f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7cc0e3da-44bb-4c61-82cf-9f11d8ac1bd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d497d39-a9f6-4af4-a0fb-8034debd53ec",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "952d9ff7-aaae-48a0-8f24-4676338e89c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5faad18c-cdaf-4dc1-bfda-f0b26f699737"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10b5dfb7-d7bc-40a4-98ec-8cb152c90ea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9e305896-6470-4fbf-a6c5-c2cd27f7ce65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76302bdf-47b4-4eab-83d2-22f728a17692",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee151b90-ff01-47db-b175-014f308e7976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d3be2c9-13e3-41f3-8f7a-65669fda0e5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbc8a081-3dc5-4ec8-8b8d-619804d8fcc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f9943fe9-52ca-45dc-844a-728dc869954e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5c821a3-7af7-4f61-85b4-bf79e1d97daa",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14612054-d874-4d2f-8b85-1856f5b89e41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a8da619-edcf-4dc7-8f45-9d33ebf73bde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1a68a51-a80e-40ea-a559-c4357148b035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "90e2891d-46a3-4e6c-bfa3-feecebd031bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92f1b6de-abbc-48a7-8431-f8c468cae826",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99b380af-933b-4007-b8cf-d1a05efd1595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c5b941c-4d5d-4a53-867d-8687284415c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7e09115-4147-48bb-a917-17d2adf8e31e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f30318e0-46a6-4f4c-8a70-e543827a8a5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efebcf54-984c-490b-b179-e60ee8623f82",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c6d68be-6733-41e5-bb65-b5f82d0d623b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daebefb0-0ae9-4bdd-bf02-aafe34c1bc22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd9749a5-d419-4ef6-b159-116b4f8388e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1b4f380d-11d9-4798-ad4a-dd915ad3476c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8359b84-d6a2-4942-9f3b-4edfa8462ba8",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c328e4ac-7c2c-40b8-9a75-a87f9295ab73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6acf9a07-b302-4d90-a698-1053b82ec450"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18bd432f-55da-4b10-8bf1-7eaee94ed325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "22355d3f-29c5-4637-96f8-f69e2c8a8d59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54eeab47-2f72-4f6f-a70e-0d5da552854c",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "295392af-d09a-4328-8c1d-ac47bf9c7c37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "534182f7-b89d-4ec3-b5d6-2df6e5fb4f3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8fc4289-8ab3-4af9-b6b0-6580a9d8ff18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "21f7cd5b-ebbb-47d7-9d1d-30dc65862e0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79cc951e-bcf7-41c2-a6f5-c05c518ca31d",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e683fb03-6d2b-4a2b-acee-a7eb4ec67e93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be88ddb8-ce50-4b18-92ba-bdd59d4e1615"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c859bc5-224a-4a99-8a2f-3c42652e4356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "02edc453-a037-4c72-ad26-f0128b5098de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "089de157-7104-4317-b8ea-70a832bb18ad",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4c7eb9f-4b34-46fa-9608-ca368d993b78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9aa04de-3cc1-4db4-a020-bf197d5a96b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4e493f1-5840-4395-b637-2446295b15a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8798e7c8-9a98-427b-b429-9cec208c00ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c6c9f4c-784c-466c-853c-a90fc68a98ea",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eda70777-0900-4c70-939e-f36400acb06c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe42b286-3aaa-4f09-9b7a-d0332e9f8ce0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac0d9604-ca15-4b77-8d1f-a5cfb3162902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "567f2f28-f590-46e5-a4a2-7caf26d1efc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c75393ff-3f31-46a8-b9e4-56e8f380a2ad",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dcc1bee-ab20-4825-a4db-450bf1a87e51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf12679a-3ab0-406f-ab19-e8a2a254bd6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd72d8af-3540-4728-a827-118582c48d2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "64f03448-045a-4304-83e1-5b92d5b144e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fc88b18-9dea-4b6a-8e0e-a6ea58d68291",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c6e302a-a757-49b8-b159-e8fb8493c636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c311c76-0fdc-4fb1-a676-3f116e78526f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "714fefa3-e5a5-4429-9b1c-ec5190c0fe49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5c4db15-d5db-40db-acfa-616e10da7c6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9135e30-1eda-4fad-a708-c4bebf276eb3",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a24e786-b375-498d-9e81-738e32c8a87e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fd781c3-e3f7-459f-9086-94c73147af4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea493154-9e35-42ad-8bc2-e27503f0f9b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "41fae789-2649-4cf7-abe9-b4a4e895716f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c667c324-cc3e-4219-8654-7183668b9bf4",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec2ddc1a-fecf-42bd-88b7-33fc96b5b4cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c97ba9e-83ac-4313-8317-94f8fec2097f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9d83602-ab83-4c85-994b-ea87a3ab1ce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d12b521-c88d-455d-85b7-51344850bbd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb0d346a-7b87-4484-91b4-fe53b6266ab9",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dab33ae-abc1-4bf8-a74a-79f91e7a7dd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29a9341f-dceb-44cb-971e-d27c35dafb41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acce3929-30e1-4e32-b4d1-cfd3bac5a740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "361460ad-e58a-4017-b158-98d999829b33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9ec97cc-2718-4187-9cf0-e9e7c77dd238",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a2ecfb3-ed9d-4db2-8a39-d20e1f575b69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5678299b-50ee-45a8-bb41-4fcf97246779"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47df0d92-6848-4982-8d4b-8dee481ded3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ebace5d-0139-441b-b468-c94a2a62bf2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef19290e-4ba1-497d-8ae7-8d92aa438f6a",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42f6c420-8828-4e35-84cb-6517f84b29c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cb71906-279a-414b-8afb-c83d703bca35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa2f9510-6e56-460a-98cd-011eb6e89f28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0c18d58-96eb-4bb1-a3a7-f6156453b5eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67a5057b-a22a-41fd-b750-05a1f905c32f",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12519ccd-cf59-408b-b1ea-f14ea84de255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8949d1f0-ecd4-4a0e-a7cc-b256df48dcfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aea7bc8b-83eb-4ec5-a850-ab24b81c38a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "24471246-6ec9-48d1-8f11-3bd9e2a0db1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7faf311a-cdbb-4fde-ab06-96aebd21ef06",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2a64fae-725e-4695-8f00-be1f8feac7a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "883bc7cf-735e-4fd5-8e4e-c03c6214f07c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "152bb9d4-4bcf-4016-b9e3-5d6d6200804f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bfe387c5-5ef6-40c3-9024-f001c462be7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3de81141-5a4a-4151-93c1-0de61abcad7a",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df4b41f7-e59c-4c3a-8a08-af8aefe80f61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19ad77f8-460a-4e77-8a1f-c83c51db759a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcb48a8f-e179-4f97-a0aa-f9c1d90dd0d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "15f3836c-45e8-4f2d-8d4f-8855b2ee7877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0a8aa26-3766-462c-a382-593f15efa537",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1ebd263-737f-40c4-8be4-26e04bb83f53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49731eef-684c-49af-aa8b-3ab526f7072a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "410fb3eb-e8fd-41d0-b788-e76eeec63e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6165342c-ad8b-40b2-8705-829beefd734b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f29d5ca-43da-46a7-8d5c-d252eeafeca0",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44688f1f-c97c-4f2d-998e-8625560c165b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5f15ca8-4649-4e0e-97f2-0e16c2033507"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "079249eb-cfc7-4f56-a2cf-a3721753898f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c078745-0273-452f-a974-055336adfdbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "244e0d48-faee-431b-bdbc-bd8bd762581f",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09596b92-6e49-4c5c-b2c6-7e59a565160c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1817ef62-7d1a-4374-bb3d-b823dbe01d64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98dea0c7-876b-4293-ab00-0d9522cfccb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "9092ff3b-daf1-4232-837f-3acc58fa9eb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62bff84e-f798-426c-89ec-fad2a5ee17cd",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4c229cf-01f2-4cf0-bba8-d698a13c11e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "00611dd1-db93-4578-96bc-20f29b4e97bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd71e5ad-6456-4d11-b98d-17185299c623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cb65853f-92d1-496f-a3dd-4ed30a6c697e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac7415b8-a481-4e2f-b44c-97f0bd1e153f",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c6850ff-a925-4ac1-8591-59d7de4d96bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "782735eb-e100-4d24-b27a-f54529715639"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0427ada5-6feb-4493-868a-96ea0660b094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a2f7244-3b67-4ba5-9852-fb77ac2c1784"
                        }
                      }
                    ]
                  },
                  {
                    "id": "703aa56d-69cd-4334-a021-10d4db7dfc5a",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b950efc4-3b92-4085-a0c3-f2813b22bb3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2a82581-6751-4959-8330-6e26974b7fde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c49bf296-1e46-44a8-9b8d-963b90a36170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ca05207-1b6c-4cf3-897f-bfb50a9a1091"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daf8123a-72f1-45e6-a3ca-845a66fb5aed",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc21bd77-57e4-48e5-9894-524e5157e326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "314018de-952a-4dd9-b780-d3f7e4e39ee8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a059506-1a2b-43c8-b9c5-fc0034c5ff0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "98a10a9a-8379-4160-95f1-74b23e962ba3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e982c74d-5408-493f-abfc-2a23659740f5",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4479a824-b0c6-47fd-956a-e8cf1b1be318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45170411-fa10-4f36-a551-f6a5e974b8e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7af1d6f1-ed39-400a-a271-1d9585487a2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0cd8057f-1868-4862-bbaf-2b75690506f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "651b2acf-ca64-4b2a-b0ec-0743bdcb5cd0",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d00b01cd-fae6-4da5-b8d4-f100c46f6214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00603060-184f-42a1-850e-bf8a02585447"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b88eb8e0-94f3-4ba2-a0af-221bb882ffea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d30f8419-a06c-4091-9123-da9f0d67a7f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "254a5967-df18-4ccb-bd6d-7717a62b290f",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "897d1c85-3123-4aa6-abe8-5bf62cd29647",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c2c016a-70d8-4fc7-b28d-c49442efa1f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c79eaa1c-a9a1-42cd-b6a3-fdcf02fabadf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "83024da4-b41e-4616-a2fc-1c245d0d2cd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "339b5b60-7cb7-42af-86af-f5a5ff828a4a",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5325cfb0-8763-4252-bf25-5a6c856542e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abcf4f14-978c-4535-8daf-4d3d447203fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "195da05f-8e29-4146-a961-5e501a7d4f05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d728fcc5-1117-498d-b992-568fb9374c1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18c42337-3a3c-4ec1-a5af-8ecabf521205",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acdb3682-1a9b-428d-8e28-428fd04b0e3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8413868-e093-4da3-b999-2237e0760add"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a5e95f4-d017-4f0b-8f0a-b9c2a2b2a352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "2181c585-f05a-44f6-a454-0f14b3046157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b58c06b4-7581-4038-93ab-d08df8e2b1ea",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7a74377-d43e-4741-a08b-8055226f3166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a3730d3-222f-4751-aab6-25b25e82dedc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba09d051-cc82-45b8-a2cc-ee62bc2eba01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3e3650c-c0ba-4799-b920-39a57d64ca07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "353f6cdb-c40a-4931-ae46-2969fd267bf7",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f875e88a-8a40-43a3-9cb2-43fc6782c1fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6cc2b76-acd2-4003-b8d9-e96c8677d853"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43defe09-27e7-4e6c-a1b5-8a2e4934260a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "202737d5-0556-4503-b81c-89f0893b2bae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5b9c251-2c5c-42f3-bfad-fb840599e7b5",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff912add-9628-4e19-8fa8-668d8986f87f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d5beff6-d2fc-4bd8-b904-4e0ebaee0cf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a632060-82ad-449f-8c20-616fee6ac78e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8622c59-7bbe-4d37-b706-14dfca6c7957"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6958997d-8d54-4a08-8aa9-ae333ea6b5b6",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a2cb107-d0cf-40ae-b975-afcdcae13515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ede2ae9-a70c-4173-8c64-0ae52b3bb2bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08f4b981-a2bf-47f0-9351-2fa3040e0835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8dd8a18f-6672-4ebe-b0dc-2d5ef5024f1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d108ec2a-f2cb-4e67-9fc7-9e4bf1ebcd91",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bf67fd9-71a9-45c7-99ac-153c664fd1d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0d52ca9-2d52-4b54-85bc-e45dd3f2767b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d4b0e31-d10b-4dfc-8089-ca5054519a94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d7c58aa5-d9bc-4117-9698-a99e3cf3d67c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0af8401b-50b4-4abb-9d72-5f765fd16293",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef17af8a-4072-4af8-926a-87c5a521d61e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "190aa72a-a866-43fa-9e3a-0e419807af66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f33fcb2c-6668-4fe9-8c9b-bef7cf215511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "395b4672-c871-41bc-ba86-acaef9f0c6dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89b26027-ce4a-4e31-8b4e-003c5267f1aa",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c0e4fbb-e5f4-4d7b-93d8-1d98376ea25a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f9514d1-e909-49a5-a24e-37d45470966f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f35a73c-8b8a-42fa-9266-5ebc1dc16bff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "f232a426-7b0c-471b-8102-744207a1ccec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0adbc8ea-5966-49aa-820f-8e40fed5bdc5",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27f3d7df-1034-4308-9fd0-e0762539d452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6e6247d-3db4-4f45-a281-a1eba73351c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3af75a76-e869-406b-b32d-b88779306aeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "53e3525f-e031-475d-a443-380af33fdecf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82d1aada-afa0-42e0-92c9-b10873f710be",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b318c586-3316-4bac-8ae5-88086e0bec49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73288fc3-bfec-4d82-9af4-ea024f487080"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10f3af26-5d3a-4384-984c-10ccb1a33730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "58ec9f71-02db-4d6a-ab61-95951917e52d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d612d9d9-f6b4-466d-84c1-2b4534de236a",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c91565a9-0341-44d1-87cf-c65b92048970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2b102e9-6646-4e07-b0c8-5f8351610e4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28519e5d-30c4-41ba-8fb1-7f3769a2dc9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dede87ae-c2e5-4053-80d6-967470a88e7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c7caf80-487b-470d-9850-0026761e38d9",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d057aaa-22f8-4416-94d3-caf6e291c130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38965d47-5ad0-4e65-8ba8-02d50b86f794"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "801b901d-c22f-4eae-a34f-60d02add978c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1aa4ea0-1088-41ba-8a1c-b5cf0c951672"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbdb36cf-e6d3-4169-9818-50e366ee06a2",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83393bf1-e01b-4e80-9666-03093353c4f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9fe6892-a187-4221-b916-e2f68500ec9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65901b3d-804e-4a72-a47a-1547c2413f90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "62ad7ecc-e4cf-4ea9-adb7-24b1433aec68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23b01bf8-c999-40f5-957b-ec36fc2d5086",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5fc992e-9874-431b-b80b-b8db037d4e26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74d2ee7f-c1c0-42e7-b63d-4084ba5c05d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e04ccc0-d101-4a79-994d-480e4ae4e139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1e2eef7a-f088-4cee-91cc-11e572f4afa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd0a726a-14d8-40c9-b4bd-a55cb795ec66",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3b9463e-04ec-4a2e-9fac-b2f3b61bb3ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0922b2a-ccc2-424a-bacc-d571582131bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68f7df5d-aaa6-468b-8040-671ff6c8626e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1869c891-e286-4590-8ea9-29017dee2bf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6196072-ab8a-4318-9b92-211240e70a77",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3922893-cfcd-47c3-a495-db3dcbca1cb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54af7d92-c0e4-4252-8acb-e5229058cfa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36e9e5e7-8a8e-4a31-8c21-237e5192317b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "57fb5a62-3fe7-46cd-afb7-dcf912b5b2b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "846baa55-ffc7-483f-bbd9-6d71ffaf3308",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0289ab2-bfd2-4aeb-8c0d-85c7aba63918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a67f323b-4174-41fd-99a7-0fbddfaba557"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03bc1974-d50d-4c6d-bb17-e9cc3c1c31bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3e209282-90e8-4e04-9109-81f47e5d0b61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91b32c85-fb6f-4ac9-9e5a-447b9dffbb3c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd35ffd6-98ef-4ccf-aa78-de4e1be7d3c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b72d0f6-701e-4807-9c3d-8c3e94bdfb2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9daa904d-03c7-43fc-9db7-bda9e6c465e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6747fa50-9709-49ef-8868-bc01b95a5789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24001ded-20af-4ee7-b46b-bc7cd101911b",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "780b339c-3b57-49b4-b131-b8ef44192caa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b0c39f4-fb9e-42b9-8f52-966d27b3ab6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6af46e91-b5fa-4d6c-9fae-ab6c78e7f172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5096659-a507-4781-bbbe-515034f85512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f9b0d82-6c29-40ae-9ea3-c0c561ff5eeb",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6dd104e-fccb-4dda-9448-c22fa4fddbd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbd204d0-5100-4063-8228-09062b455047"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31e35cdd-7b25-45d6-a296-7d25d85add8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "139a4f35-ef77-4bf8-b40b-e559c8df6160"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a470aad5-050e-444a-a394-fd22d7e713ea",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9153ba5-5aca-4bc6-a01a-fc50599fb651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f8fb782-66b6-4bb1-9535-12c55f0aed87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36b1695b-51f6-4ebd-ae22-4821c1240b7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "01d24985-b5ef-4229-a8c4-0d2091600e77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfbe6e78-dee3-4fc0-b4b1-52e387eb02b6",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cbc43c7-bd21-4a7e-a196-688cf702130b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb26ab8c-bd42-47db-9ddb-77cafdfbe551"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84091b28-d13c-4494-8a8b-6c32ef0669f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "42ac73ed-ba83-4202-a096-6393d7fec6bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "814b5d7e-1217-4ffe-8c2e-93b628d8c204",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30c0ab79-930f-48c0-ae1d-194669aa9776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79c33b7e-c165-4935-8677-a99b4a81ed32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31780154-db97-4443-bf0f-cb0f484cadda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "510d88f9-94f8-4b3e-a0ac-4016e51017fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86e6ce14-f9fd-420c-9330-9682dcddfb05",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4eacc6d-cdb4-42e3-a498-c909d594d2e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "458679ed-32b2-40f1-8d16-1bcfe2d06393"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76adac79-5a18-4180-b320-bf123c676ba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "987004df-af84-4260-a6a3-8ddc3e1b0de4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "122eeaa9-ca42-4dfd-8ad5-fbce4d875ba8",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55055c9f-c350-470c-9de5-afa8143a3378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0569f47b-ffd0-434e-a379-ced27dcbe1be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24f5543d-1cf7-4dfe-aebc-cb091f90b79d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ff11b04-29fb-4eae-98f0-0a82eafd78fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "805d1416-9a14-4f2e-b032-180410869f1e",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68e89210-1aaf-4eaf-9f02-58be5b2f23f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ad7eb29-395c-49db-88fc-dcd599b86a27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f590b84-ab59-4354-ac57-dea457f3bd55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0cbf8c3-5bd6-4894-ac87-85db5a01e8c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2392b1f7-cb1d-4997-b727-85c9d3649792",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8e6b7f7-ff17-4c2b-9d66-8d3595178099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77067d3b-d6d2-48b7-be2e-c5f98bddd0ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4957b2e6-6d59-482c-a771-042d66c52989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dab5b0dc-39ad-4605-a8a9-8dfaf679a98d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "500505aa-7332-44e7-9f36-3c60a9b5cf36",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19bea0fe-8718-4146-a0e8-90d972d53fa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84265fec-f6b4-4d27-a4fc-8b0b738faea6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba687a9a-d888-4c3d-b8b1-d70eb61d4f75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a3d907c-59fe-4974-b35d-f57fc3cda8cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b180f93c-2f85-4cb9-be79-7ec835170d22",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "929afe92-4b75-41f6-b120-a1c0b3082b0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "594d0fe6-403e-4a8d-9919-aad5ecdd657a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "019f38a7-995b-46ed-ad83-bfc9ddb4950a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c49a439a-72c6-4f00-aed5-9a7aed4f07a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9de1bb78-7361-4e9c-bb9d-05f74ce3c1c9",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "183d8eb7-9083-4ebe-84b8-d9fc9a4c209b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0660ce5-f40f-4465-9a2a-13e83467d684"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "214906f1-ca8d-4a1e-a91a-9f2fa538303e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d04a7173-a562-4d3b-aefa-61f222397eb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ae4c411-feb6-4f0d-876f-ba831fab5eae",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92d57db7-b80d-4b64-a945-bbd53479adfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5cf0b81-7821-4b63-bed9-dcf1a6694483"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94217878-333b-40f4-a3bc-b6096ae0d758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6aebfb5c-7df9-4118-a773-25600317a17c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "975b48c8-e6fc-42f7-b594-630968431f93",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58fcf160-8dae-4049-8c50-f3a7aa7cd020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bab0421-77cc-48ce-8884-4d4293534627"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92d9f6dd-4ab1-444b-9a69-9f4131d6db46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "796c9c82-17d2-4177-a228-aaf5e7b74ad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79bc2a44-7c7f-4dfa-be71-e4a31b6f93f1",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2b68650-28a3-44e2-bfda-4fb0828ea503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7b2ddeb-9291-4543-88c8-d688c4941d89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e8e304-fcec-4ab6-a29f-0c01197c9080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "05045cb5-03fe-4f0e-a6c4-7cd25858e94b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6a60d59-bb88-4833-bf86-b6b3582cd018",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc28c783-2042-4e5f-a0f0-8b354dfc1b4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02a8884d-2197-4ce7-976a-28b6d032fad0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d274c14b-fe66-4484-be91-fc219cad5530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b10bd30-788f-4f8f-83b4-46b45cd74f1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2c7682f-82a0-44d5-a7d9-7e2ef1532fff",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eea25e2-a790-4b4c-9c52-242d654792d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74a8a36b-028c-4bae-9761-076716f43bf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9225ea3-4ae3-4c81-b4f1-a890a90c63e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5158695c-405d-4841-94bc-a685f30b0531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f769f7e-60eb-495d-99fa-ed4ae4dee9fc",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51b74ca3-2749-48ec-8ebc-c399e8cfaf88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "643e7fc4-7493-43ea-948e-ff36e91c7fb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c070df1c-ec0a-444e-8614-587c4c0f37c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2ceec7a7-699d-4082-8ef9-6c8ea62ffa10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "905b92f0-ce36-433b-ae50-b9c231b20fef",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31373542-a536-41bb-9dff-ef6c09a23486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e3152aa-522c-4bdb-b6e7-776e2024da07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aea60b4-44c5-4b5d-a57a-e8b5059843b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fd6bdf15-09af-47d5-9ae5-cc05aa1b1bcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5922d49e-1abc-4caa-96f5-6b7388254622",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55cd6f88-a75f-456a-a746-bf1dd19be8e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de137a17-5520-4430-aa20-b99726dd87a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ed88780-5d77-4060-ac19-64f4193663d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9649692-f902-40a9-bcef-7ad6e41ea800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06175714-8352-40df-94d5-282ff0769fd6",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "368c6d43-0c8e-4574-b015-922c9291629a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3683a97b-afa3-48c6-bf6f-8db616deec81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e22a951b-d64c-426f-b545-77aec00aefd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e9eedbf-c45e-4254-90c6-fab5d68fceee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "285e0a76-4c9a-4ac3-8c8b-0d00b9404fad",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eff9099f-6f87-40fa-8ea1-2bb76cdfac65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54ad7444-9989-45e6-a80f-0c56e0b9be63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "268dcd7f-364c-4ff1-8bbb-031b78660b41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab1faff0-9aa9-4b03-bf20-6ff4b55f560f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ab44924-1b55-4ef5-b5f4-281fda6b031e",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e88e7031-a038-4d3a-b866-c22243b409cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a53b3a6c-0486-4d56-b67c-3b7bd5e9a944"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e8dfa17-8a69-4573-bc5a-d6dc4a294438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e23b9e80-3d51-43b3-a423-de4df69fd8ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98a9ffa6-3d5a-4bfb-9e52-ede0323ecbce",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f55d9d8-e27a-4a11-b398-d974b32ebca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2f350ae-942f-4de5-bfe3-b3d6200c3f01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f47d1bf-b700-46b5-8750-fa7c25376bfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0197379b-a56a-4d8e-9ab0-2d6a65cd3808"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f51df0e-c74a-46a2-8527-229c5e72271e",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "594a22f7-9131-4c4e-9c9e-9695ae74c118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4634d8ef-a205-43c4-9cd3-642367c33918"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b77990a8-2218-4f40-8647-5a952ca1ba91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ba338a3-bd50-4b68-b4c2-c586d21e57c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da5dfd90-1238-43aa-a71a-2835bf60e0de",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7635bb81-67e7-4a14-bde0-96f15bfe4f60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4227acc2-7692-431b-a650-6d707a5c8fc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05beaecc-067a-415c-8f14-762548bd5349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c9f2811-a7c0-4897-963d-7f64410c0592"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ff75418-01f8-4733-826b-3bf91772f9a4",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d37cf66-b3d7-4ac8-8ccf-e2680f813364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15dc7de6-11e0-4cfb-a1af-a1986bfe073d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f73a5f5-6f94-4bbb-974e-0a5be888245b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ad8ed1d-2945-45ee-9228-b08073e37b3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "955736ef-07f9-4763-b6f6-90f7f7374eaa",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ea6a2e5-250d-4907-a82f-ef64a679aaca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abaf324c-756e-42c0-8354-cd4b26829db9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f540ac0e-e914-47c1-9e90-edfcee2c27f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "498fe02a-e711-482b-a2a8-81b19c6f9eaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5e57dd6-142d-4e78-8b5f-6a116ad62d17",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78a5ff2a-af82-47a3-8fe5-09e9a1197cba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea2751bb-2d79-430f-9a38-08601a22f0ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb368ae6-fb9d-4f12-92ce-190ada5e118c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "01574d6d-63b4-4583-a1be-9a8e609dcea7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "093e5864-284e-4b3b-b0c4-ab64f1b596d6",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9053df50-9dab-4c3b-ac92-559b8ba28dea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce14cdac-993f-4fa3-b46e-0ea244e4bbab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0562b467-2a1c-44ab-974c-a86f45e35f74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "394ba1de-030c-4de0-acf4-29b85ac0c2da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "337c3e2c-0ddb-44a0-9ed1-e521ccea6fc6",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eee46fef-bb35-4cf9-b24e-88465444c1d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "8e9bcda4-409f-41f4-a7e5-6e6a73ed000a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a82d9476-f7bd-44a2-8d22-a0f1b830a661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9c515a64-719f-4dc3-ad5e-802ed3943ba8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "eeb71a16-f389-4619-bf33-81293c007028",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "810c09ac-59d7-4f67-886b-e04fb0789eef",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e60d558-dba0-4211-83bf-acf8c88aed16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9fb9adea-cdd6-4dd2-b868-eeafd4c54110"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b985b6d-b49a-49cf-a3dc-6dc4187d8f19",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cca041eb-4534-4b1d-a811-9a7f06473d79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11ad30ab-7a30-456a-80cd-939e8f6fe768",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94f53661-b42e-43be-bb30-00f25c252a11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dc2ea2d3-cba3-4044-9063-9e887527ae61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f1d896b-22e3-485d-a951-13ff560a7acb",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "710d9725-dc3c-4961-9f33-df4ee918a490"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "adda01e6-a18f-4123-971d-84839ca81640",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8910bdd5-563f-49bf-a80f-4a39ae7b5d11"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "89699c1b-5506-4a53-8734-6090da9534fc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "96c1135c-d3ca-4333-8157-7c93ec78d3a9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "35d979bf-f2e4-4742-b69b-aa1332d5ea17",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b066c9a1-80e4-4f78-b965-a76b98a6eb3a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "06859f10-b31f-4142-a016-67d9425811e5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c45be9c9-aaa9-4b54-bede-63e31b082770"
                }
              }
            ]
          },
          {
            "id": "72895d63-ece8-4e8d-bc32-bc879c952fff",
            "name": "Positive Testing",
            "item": [
              {
                "id": "01491a4d-15dd-46ce-9362-3c32e2eca594",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eff2fcab-baaf-47dd-8682-4ef9c652b3dd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4b7d6fc5-7ea7-4302-9578-2f437e69edb7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d0e22404-3993-4fba-b35a-6a269aa3fc52",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1a2c75a5-c822-4c94-987f-11a9fa3b2f60"
                    }
                  }
                ]
              },
              {
                "id": "8d473494-8799-491a-84ed-7fd19238bbd4",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1cf81cdc-44ca-497b-be1e-5f7661ecfde6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "89eb13a2-00a8-4ebe-9451-9dd2dabda2ef"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b133bfaa-45d3-498c-97e6-33d2e78740b5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "121c8ce2-4f82-4509-b429-554c26002430"
                    }
                  }
                ]
              },
              {
                "id": "85b73ea7-c116-40e1-94c7-ad372585ff68",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4f7606a1-3476-490e-9c3b-5ac5b4f0fb6c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "da79444f-2a91-475b-b932-45c6cfaddede"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "92ce4dea-eb22-46db-b8ea-160cda77f45b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7c2873a2-bddd-4716-a648-44a659ee3115"
                    }
                  }
                ]
              },
              {
                "id": "bb7587e1-dfa0-4af1-8fd1-90a8e6d9ff5c",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a7085d2e-1f3b-4e10-976b-bf88c2068151",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b5d392e5-8ea5-4d24-bd72-f928506fe10f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "af3d8d45-4721-4e42-a9b6-04a142b72278",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "9f34f830-9164-4684-b5f9-b43ef6ad0a72"
                    }
                  }
                ]
              },
              {
                "id": "9994c620-1a11-4731-8250-a60d610f07a8",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "763a8cf6-5ae4-4af0-b312-e0e8e0d08b53",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1c35f3b3-2a95-4cab-8e73-73276f3f639f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7a601db8-e4eb-4336-a500-876701d2c32c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "5262811d-8df2-48e9-b1fd-7316de2e7048"
                    }
                  }
                ]
              },
              {
                "id": "a0486eab-e588-4c6d-a1d0-43603c869474",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0246f232-a8f9-46bf-af85-0db854eef376",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e796fae5-f70b-4cfa-84e0-4616e5079579"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "84ca6673-4780-4574-9bb8-8ee8bd824392",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1b0f4c80-e551-44d1-a78a-ee8f3cf68c5b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "50e89096-39e4-459e-b9aa-759b6a2e4ba1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "10d242bd-e434-4b11-82a3-b39551ffe6ac"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "daeb1ac2-da7a-48f3-9a83-3ec616388279",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4d4d0967-31d4-41d1-b65c-01c3c89ed9bc"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "67a4c1f2-430e-4a50-a8ea-7385832c0281",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "d851456c-3626-4ea8-b4ce-a0e8d6a353fa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d55240ad-ac5b-435b-a9d2-d751316b4b4d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ced75f86-9a1f-4c09-8957-5cafdb9656e9"
            }
          }
        ]
      },
      {
        "id": "aa38fab5-53c7-45d7-b6fe-2d8b2ef4129e",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "2ae209bc-c6c8-4983-8622-617af13b7536",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d96ba9a9-48b0-4363-b9cc-04228956fe89",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5eee7a09-fe5b-457b-9ed4-ddaef18e78f7",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dfa91b2-310f-4ba9-b981-28e7a1143585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2f47de6-0a75-4524-bea0-45fb267bdf2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3866eeb-c1e1-4ef8-bf10-a29f29f86a8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb41da34-8c52-4199-bcce-0f95e724332d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da47c777-7e5c-471e-a368-39c290624215",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e445f2a-ddca-48ae-b4ad-90c37d5071b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cea14c6d-98e5-46c5-8645-f15e55672c82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "775fef7e-8031-4acd-bd3e-37f433755c01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0b11539-ae4f-4429-9e69-7bb86c942d5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f9b7918-71da-43e7-8e15-490e6ae4450f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7052e5a0-b0f4-480d-99f3-0037376cc3c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02dd0746-6aca-4163-8857-d23b07b0d6d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48518f69-15a0-4071-b068-a3e40a3031b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4cb4f65b-a3e6-4581-b08f-0a78cc76962d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4baf7080-654a-4ab2-bc6e-f9494670f965",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26ec51cc-891e-4f79-999d-ab31396093ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74f58160-db51-4502-a950-11f0efea98c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc878206-b997-4d59-8553-6914828f088a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6623cbc5-ffb7-4219-9364-48c55cf6349e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98310d6b-ae35-4df0-a03c-f7d227c5b715",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69beaafd-85ea-45bc-8bed-e818f2d67ddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "febcffd0-592d-49c8-956c-d75c7d151321"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8146917-007d-4b6d-8c01-9bcc71b74b1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "90072f02-6175-438b-ae15-60bdb45bcd00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d53037a-929a-4e1e-b5e8-d19ec51dbea6",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b1302c9-54af-4f3b-bde1-dc532f3b4244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "579ba4ed-9b40-4f1b-aa32-8c4d712e7b7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebd5d1a1-2a09-4dcb-89a9-2589f076b8c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "338f7b19-3813-45ca-af95-5957a0390bfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c34139e0-f4d4-410b-ac96-b0bad3badef0",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96e1ad88-42e3-4b45-9476-d54044eda72c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd74618b-54b6-45c0-9515-9ec45a88c7bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c7bea4d-1785-4bab-b3f3-a0d9261e9481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f33f222-4075-45d2-86c2-1237e7c6d7b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db9e1557-f04f-44f0-9bc6-79d1d071f8f6",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25218d06-0ec9-458b-8782-d47f41b9ab10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8c62b59-a640-4db3-8eb4-93637c2c92c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc1ece74-42ca-406a-aacd-0d904d8dee51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a489ba5-23f0-4606-8e31-223bd661ace6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d52fdb31-5a3c-44b8-8e98-f2c5c2e731f5",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20bcf3e7-56ee-4b14-a32b-93e7ac66bde2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24913f6f-4ef7-4c16-9c91-ae3f16f9c18c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2310aae7-b8bb-49a5-bc7f-4c99863a0c46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "793e47a6-01b4-43d9-a47f-122b1f334c07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1575c416-ba1f-432a-a5e7-ef636fe0cd84",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d81cbf54-2c39-45a4-b753-2f98cb049e5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c5756a0-f135-4545-a644-81efc8de0d0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "054ce563-f4d5-44ce-a51f-c87167c9a7dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e6ac2e3-0d99-4906-94c5-237be14aa0bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "873f61ff-c7b5-4aa5-98a0-9b666b6bf7ca",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d70212e-795e-4542-96dc-7638c337e4d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5717394-7566-407f-96fc-b3526c46076f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27511401-d696-4ea2-add0-e4877a698957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "afbddd5e-8c93-4946-bae9-f0b67c26d6a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "337c4ede-65d6-4ddc-ab3e-8d9ea7dac0a9",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d1d554f-9bd9-4283-b430-9288ca2c286a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58642b10-d2c5-497b-80bb-b39cf5430b3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3169206-1420-4306-9e28-9896c45b358f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "00a16fdd-7e6f-4281-a9cc-43417006bd61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97c35a5a-26b9-495c-b364-e57628c624e1",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "156c6d85-9fcc-4efe-8ae5-2e974da2ac72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44fcf76e-35d6-4824-93ce-d3b2c2047957"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12432d19-c85c-4418-90d8-27e0a6b05d10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "58c38b26-3961-489e-9529-f65a5666f6a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7f0a5ac-acc5-4fcb-8f4b-b92441a1011f",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "736a69b9-93c7-4f7d-ab42-6efdb1f718b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5677a2f-5724-4ed1-919f-b31ffcc130fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78bee960-65ff-44fb-9414-28391fab9619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee6238d9-6780-41a1-b7ad-ea31b9f356f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e57e76ae-bc30-4c31-b138-9d8eb37ddf85",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a392ff1-526f-44c2-9443-b65d10c8a5ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25a0964a-9564-4c3f-8172-953aef2fa3b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7408fce0-1dca-4c09-9d19-27c62d3f70ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "94998fa8-83d7-48c1-a41a-711f7ee7c3eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76926e80-686e-4a3e-a25b-da7288f84a12",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12f9863a-f289-4f61-ad85-474fcc108f45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c9d9928-c838-4edc-90a7-4eb7a29ed61a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f99637b7-806b-49af-bbb6-dff38acded59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "8909d6e0-0e09-424b-bf76-16cefee9db2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99cd7d9d-97c6-4aff-b960-07c9bc492c2c",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bc92c9a-e489-4a08-8a75-d5845cc41127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9d8abf9-0a3d-4696-8a73-81d8fd501a88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35ac15b1-297d-4acd-857e-f83a109f1b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "057ba63a-51d1-4377-89ef-c095b76cafcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9d38250-adc5-4040-9735-42e8765da423",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93976ece-c7f5-463b-92c9-99075af9f66c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ef21ac2-de0f-4653-983c-40bdadc7c315"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1135baed-b760-46d3-8841-f57977d69c0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "99eb6381-289b-462a-8cb8-e11ddb05ad99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "033455db-564c-4b70-a95f-afaab868b879",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f10962e-78f7-47dd-a2b5-2ee0d89a6831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fe5b642-23be-4acc-aaa4-1157f21a7524"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "455d79c6-2a21-4cea-bb66-9f7bab91359c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff44f88d-f483-4038-aca5-514405f75188"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a350193-7f59-48e7-8417-9728e5881f12",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f535fae-f8d0-4a8a-a175-8fd6c1b839de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b76baf9-7288-470d-8944-7fc71986d6be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e8c2b69-2648-42c3-a71e-6955a3bc0f73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "85ac7664-2bfa-4b87-87d5-ea9ee84a8020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d30eee1-8758-40a7-9a41-c032c21da0e4",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "191b6131-8032-4826-861a-a9678ed679ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "696fe884-9e79-425d-9216-26bc26ceb228"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff86ee4a-6e36-4b15-aa48-9920aa0eb31c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6763235-278c-4390-a073-2b717c6d81eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ffe7169-524b-4079-b22b-3019602688e9",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37377111-f298-4b9b-aa81-6c9b85f848b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e98ab16-7dab-4704-998c-5ba98be3abd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a67aa4c8-90ea-4135-ac03-4a050dfafd4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8422c8cd-11c6-4117-907b-0da9dc5bb059"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ca51ebd-82ae-4a78-9171-9a4cd9a8e5e0",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72116ee2-a162-4e16-ae5f-7485361569a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dd8bda3-88c7-4c03-ae54-9b990b5b8b92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f225c399-ac82-4ca9-a8f1-1b801c66a61c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd5bbf3e-e57b-424a-928e-2c1ed6444c8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f62e6e2-762f-419c-a354-3c46d7a1fd97",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27fd910f-223d-4504-bc81-dd0a53c04112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d4ac669-7866-4418-b9b1-8196847185ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1375fb1-339d-4158-8d66-c4be3e9e7ec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "44e845a7-1ddc-475c-8fc1-8998ede95a5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d43721d-0785-4ed1-a764-a9b9a05546a3",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ffb7d75-51bd-4201-bc3c-7477c2c02292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08ecdff3-6841-493d-8828-9ccf059d6d63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cc562f4-68db-43ee-8a1c-45375e19a1e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1627518b-ec8e-406f-a67a-7f10e5d1ede2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81351d11-2313-46de-84ca-943495317647",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a599d349-63c7-4eb7-bd53-db06490b0c67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2bb892f-b3ce-478c-9a6c-5a1e456b8bc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab11833c-a4a9-4cdb-80e1-5274d18d1a50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ab4aa95-a912-45e7-9358-94894ae55949"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb2dc0b4-ede3-48f1-b72f-68b095509222",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7d65535-f587-4bc8-80fd-88b259c6f15e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45e08737-4166-4ded-a62f-5a5f421ab799"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfd9f83e-9a1a-4455-894d-fdd6fa21d0de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7465d5e-4ceb-4cc5-85e1-8c5474e84765"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e84ffce-577f-4149-af60-1e13534cb801",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69b90cf7-d44d-4885-aa22-3bc7a6585afc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "870d1dd8-c9d9-4a7f-aa3d-3227149b107a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "999810b8-ca05-4322-be17-aa0a2959401c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e33ac7a-101b-41fa-b2de-e0126b1e7b08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bad15390-da28-4af2-a73f-a184c996e1ce",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "709f2f00-60fc-4cfa-93d0-f3fd19165a81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afe37a76-662e-4c79-8923-f1e446bf020c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59b6aa3e-f163-48d9-96f8-0b05af00cb66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "08086e20-156d-4599-987f-54688d20cdbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32023a3e-95ca-4a15-b289-6682eb2e911d",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "166c463d-2c11-47d2-8631-4875c6e6ea47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b6f7b7c-c1ec-4cd8-98ca-21df98114a8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75ef6c82-e7b7-4fd3-a2d0-5f08f9345e4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3162ba38-0d5e-4bd4-82c6-dc5f8a51de32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6189a6a9-7033-4be5-9b6d-52f9ddcbaa75",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db6e96c3-6d04-4abf-accc-a94693618054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d2c4309-3a4b-4e90-bf5c-3a289f912d76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d8e0404-76bd-4401-8ab8-76d80b54144a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ec1e007-4626-45c0-a5c5-bdbd63910000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e8d5c58-0fa2-42d2-a81c-34ea6dbd0211",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a5a89ef-3d7e-416b-bbf5-132f8e239f37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2fbdeaa-b414-4f51-973f-4a41c2719fe8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5291f376-d1d6-4705-a008-095eb7b03252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ccfc4f7-bd73-4c51-b3e0-260c4c4de992"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "01ca0e90-f012-4b88-ae2c-210503c3ea5f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6fb54e08-3c84-4279-b1c6-9c1e34b920f3",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b87801d-7aa6-4ef5-9bf5-2db2520595fe",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "53829f5d-b6da-4381-90e6-ac0a696ea6e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dc2f6ec-d671-4972-9dbc-3f5e643f273f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5fc557a0-ac1e-4366-9cfe-15f35831a99e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e56c1716-1e7c-4171-addc-78e0a552a16f",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87b7de0f-1259-4fbe-ad42-da8de3bd554b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "2877f960-1eaf-4ee0-a8a3-6620c9e50bb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d6731ee-583e-4399-b373-1eb06515c225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d032dfab-8362-4727-bcb5-7252bede5ba4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6dc082df-bbfa-4e62-b81b-2427af2ff21b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5418b57a-3dbf-434d-a51c-55f8fa9329b1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fd7c1849-fbe5-4ca8-a57a-afe41aab9137",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6677bb85-286c-4ca8-8bba-aa454e731ccb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b55a2f62-22f0-40ae-a61b-754db8a7c95c",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0060e6e9-2e18-4645-a02a-016cbe509915"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f089d308-2d7d-43c4-b022-4f9bec1b4e62",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f7748eff-2000-47cc-b522-906ae5cd9edd"
            }
          }
        ]
      },
      {
        "id": "bba1ca75-901a-4861-bfbf-fb750a7aabaf",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "fae65579-ab6c-4dcf-bf3f-b0fba1f5c698",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e4f00afe-bb69-4861-8783-13ffad80fdb7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7d8e94da-ce30-4ef7-a9dd-9b139ca1b6c7",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38e83dfc-5cf9-4feb-9a66-b2f764011053",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c42eb81b-58d0-4534-8b58-e29e1d85f345"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4da75852-212b-47a1-be8a-b23392dbab36",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1161730a-55a2-465e-8439-814b3e583a1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6725f0f-7864-467f-9ac3-fa0d99db04a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b02772f-8fd9-4826-b7fa-9f4ff356a01b",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66358b15-377e-4759-bf07-e02eacaea789",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92723aee-6240-4631-b766-60c4be1f4fc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f49d98a-6149-4894-8432-8bfb68840db6",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48086b49-77cb-41f6-8113-d5e86e06b7dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c1e0379-9062-4f40-a801-c430f2dc6f28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f80cf9-5ac7-45bf-a013-83cc658001f6",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7723c967-4453-41be-9399-87664b187066",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30aa87a9-8f50-4163-a5ca-f6960c988ad2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "225d272a-7fb4-45cb-bfc8-ae8e1033115d",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "371e3ef5-8e8c-44b8-b17a-0c571de41810",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "957d488a-b0dc-4bb5-bb28-443fc6ed6526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66d0f798-3cc3-4b1d-9c9a-d2256147809a",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bec62ed-9af9-43ad-bedc-6778af9d5327",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9ea3d6a-5ce3-4750-b5d9-cc4f55bc9b72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "366fbe46-deee-4faf-a693-f3ab8bcdf1f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3905941f-813d-4172-b52b-fa4d5eeaf50e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2c64099-7dab-482e-8ed7-e35e9ed91113",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cbb6b8a-56f7-4e52-80a3-ab8a6ae8cfeb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36a19e9e-5c94-4b15-a985-78f934c7fc20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16cd7c64-bfd3-45a1-ada0-1c0dac493db0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdb264ca-fcc1-4e6e-a557-845dbdcfd2cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7631fda0-c7b5-4dc5-9fe4-744f91ab226a",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86f91c75-c8fc-4cab-a9a9-aabc84806a31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0157c80-8bba-451e-959b-9b61a5e5fb29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8dd48a5-ec01-4565-92d7-98b0b922912f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "436b6bfb-a097-4762-bacb-e43ac9aa8fef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93a4d547-f1cf-4c97-a892-8f64ff5dc790",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caeef1f5-9e31-464b-90ab-fd561566c475",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c299f6d7-b455-4943-a38f-320bb315d341"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccbc18e4-58b9-4e7d-8e7c-20964391ce84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edcacbbf-2f78-4b13-a783-a9db373ecdfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f54de8aa-b43e-4ad7-9a03-90b85ec1f2bf",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81f53b68-cfac-40ae-87d5-9ba9032485bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1323407-87d8-43a7-83f2-5a226741ce73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe46c1b9-112a-4cc8-91d0-9b005634fb90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85c0f4e4-68d1-4273-91e7-5b4ba0cfbf36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c40ae76-c851-495f-a95f-4b4576bd79aa",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aa13087-2651-4ca6-a7ce-6d02a80d9e17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aedbce1c-86d3-4027-89e2-b7d294a11e96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d1f7bd8-e981-4aa9-9599-cfe09db7aad9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d93a581-ef7e-45c3-93f6-0a30cde6a86d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "774a9918-e892-46d0-8ebe-7aff3971aaef",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c21fd7a8-c0fc-4446-bd61-0a4740729749",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dab49d15-5653-4f78-a614-cf58bfd0ad34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "deb79cd5-fc22-46e3-b62d-2ee173268c12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74c22c26-7684-4585-9338-dbf53e24b9fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8250aa1-2d13-474a-bb88-db0c075b7fae",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f70957df-3880-4923-b31b-bd198b9582d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35309f2f-b026-4b55-999e-2b38f91b828b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f5ca43d-3790-4782-87e2-a14354e11abf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3ac9558-5010-43cd-baf8-7654c9a89e11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68cae2c8-aa92-471a-859a-9365b7cc6030",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6db62420-8e14-4fce-b08e-17bc7028299c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59562ffb-960b-44ac-b8db-d9a87cc65ac2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48b23d64-9c21-4a9e-a8c4-88ca22add333",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d56ba5b4-06dc-4f4b-a534-054f8bfdb25c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a8d0c91-5bd6-46ef-846f-eae5f00b8804",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc4b09de-e371-42b9-9bdd-8e471a4054ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47ab9b10-eafb-44ee-b91c-9f00d434a7ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d1e665f-ac55-4fc5-9be3-b9746e8ec39d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60445ada-869b-4bf3-8f52-9323e024faf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c51e77ff-382d-4314-8da9-6316228f8159",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67d3d540-8dab-447c-8c73-bd09f6a102c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0359a1eb-fff1-4696-9b7d-a9ca2fbeaa71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b382db09-b791-45d9-a878-51385cda2ece",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac472d90-3ed0-49ce-933e-1ac8cc6548ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c26171e-eb4d-4aa0-a200-d825cafda1c2",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7541d660-bfd1-480f-854c-cc0d8193c525",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a306196-7ff5-4e33-bfde-3c5470af8cb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3195d4ef-ea46-4359-82e6-6c4ee2f7a41e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe36ae86-71cc-4bb1-8b7a-215a70f6ae9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4eeeeea-593f-40f4-8897-dfd9b5becbbc",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "615b9c5f-50bf-48c4-a5d4-c158d14ccba9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "802e62e8-27fc-4e7f-97d6-db054ee55917"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06d5ec7c-1d38-4d5e-8361-5b9d04c48771",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c7b2a85-c546-4242-b68f-88d8342239d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a33e47a-84b0-4ec6-8dce-68d91bf9dd36",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a43f8cb-5461-4eb8-9dd4-cb26f50deba3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "297ba97d-90b7-41b3-9842-f464bfbd5363"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9934bb5b-7180-4f25-9f34-80f20dc40ca0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba77772a-3c78-4d53-b010-4c4dd32c0dac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "569ea4a5-3ac1-43bd-b98d-6d2acedacddd",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab39ccd7-2f64-4c2a-a822-f85ca17f0d6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad3f1001-c13d-4acb-b4d2-a7132852c480"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7519ea4b-fd00-4919-a6ba-b9e6beff5c43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30ae87f9-4a63-4c10-8444-e7a1230aeead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1195bcf-ce37-4076-b8d2-86bf843000a3",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97a36d4b-b93f-48ca-9604-e2554f3b83ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1b005ba-25a8-481e-bcbc-c4060b2990b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "060b12f6-6568-42d9-8c7d-88e1b94258c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59213924-5fff-45bb-af37-92cef3dcf91e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c8ee153-dadb-4e1c-b3fd-3a5714333e39",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0867097-0168-41e3-976c-c7b9e2868d55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ace9f76-d960-488c-a157-dd2805d7f63d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75aaaf92-6c44-4490-b041-99eaa713c6d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "003311e3-8bdc-4b67-8d32-70248ebddf55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c05492e5-f759-465c-8f8b-a6204e82e2d1",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab8e3a1f-bd4e-41e7-9086-4c284ffe0977",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d87bbc8-532c-4787-946d-6b5519a091fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aac740fa-9806-46b4-b8c7-2e8ca6b81e95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f79f3c5-097f-4ea2-b128-ef961c926f3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "927a1516-8b20-47d8-a4aa-80433f3db34a",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f40adf4f-a2e6-4647-9e83-f9373c7539b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c9aeaeb-57b5-4054-956f-4877ccdf178d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa464536-2f94-4105-85c9-2f7e11286a42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccea8a70-060b-4d63-8f3c-6f9978fc622f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc6a9763-691e-4e78-9c0f-7b28a6191fda",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fd00f3e-dda2-4bbe-b9da-333f5433ba1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b555567-a4b3-41ce-83d0-2765c37f5223"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "230a0816-f007-44fb-ba14-41179a66c0d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf5de695-b55b-44dc-aa2d-18895a40de0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97b4c75f-e6d7-4c5c-a191-537a68ad0bd1",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc640ada-986a-4778-9465-7ccc07ef065d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04f8062a-0dc6-471f-bc00-9c817b08bba0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd1540e1-3b2d-4af1-bf91-ebf523891b8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f40183cd-1593-4764-8dc9-79879b2dfb3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "024f1cc6-bbb3-465b-8b53-4b6ef77cc7e2",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c0abc51-cd85-4457-a2d9-70f90b3ec449",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3af2e7c3-18e6-4ea4-badf-1882ea975631"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10a9008a-a136-40f7-b68c-3c18e459df84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "546d274f-1296-4ce4-b42e-b20db2fba126"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7a55761-96e1-4000-983b-eb9cc14a04ff",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c46876fd-2548-4f5d-914f-3d63651b23b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9633fd40-fa1d-4598-81c9-f0e51b388eac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0abe5ecf-6723-4229-923d-1b2f5dfe3f7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea6df6be-eee2-4fbe-99c9-2775d1668f67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "236ef0f9-30b5-4750-bd0e-6d5a57f4505e",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3768c3fc-e08d-46f6-99c9-09bb57b0dcc5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c009af95-3674-4daa-a838-2b0bd5ed28bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d0ad50b-3953-40ba-8532-e59f1f2f4079",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eea4012-c05c-4d55-8d70-5b1eba097083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37655a4a-c079-4ba5-b5bb-f69eab3a7858",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bbda800-8067-4784-baa3-1cb6f7d6f9d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d31e49f-3e44-4f68-869b-43845624dba5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc4fd30a-1a1e-43ed-9bfa-02b17d1d2945",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b4b8e12-db90-4f9a-bd63-fa044c6a45be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85fe7735-17c6-4e30-8353-83bcf395242c",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5dd0bd5-c3fb-4e90-a773-467989b668ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "345e42b6-426b-45b9-9445-469fa815ee39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f9a993a-58b5-4358-9876-9297344dc7bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1590d42d-f765-47cf-a2af-6c3faeec3089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7016eeac-9e52-4db4-a47a-ec27aac2ebfb",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19f20e50-8a87-4738-b47b-507d50bd3d34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5837dc1b-8a30-4db3-a22a-297669e6eeed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d598eeb-675e-4edd-b5f0-2c87c1c76a98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "508b190a-b8ef-484f-91f7-a7203c09a208"
                        }
                      }
                    ]
                  },
                  {
                    "id": "322fa832-a1f3-4a8e-8cd5-9e5c085f8ee1",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa17ea2b-3041-42bc-b774-5151e309b3df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "267c280f-28b6-4fe7-a191-aacb1d7bb651"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b23e99e-95a4-4bd2-bb4e-2bdbb34b2ce9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "772e3adf-d151-45ca-ba51-e30a83857816"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84743cc1-2f98-404e-828f-421b21f3b690",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1f893d1-c683-4f2c-af79-043b198d1da5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1709f40a-2112-4276-aea7-116845ac0f39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05e7f53e-1150-4549-bcc1-f22941b97d9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38fc8547-4a12-4062-ac58-33c5ccb0ce5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "748205be-75ef-4a3e-9c3e-312090a68b44",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80da8315-1f70-4cb5-9c99-ebba09f06d4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "814b0cef-cfba-46ae-adbe-0dda466cc8e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e927d26-a48f-4c98-9c01-83ca0e77a067",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eb69dee-e304-4f8e-9801-e93e49f8abb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07ba6a00-5562-4176-9f37-2ec2e8edb649",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d7859e1-e03b-4bfc-9642-3b2a2579b54d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d64d618d-7869-4149-95e0-df5c8f25891a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfbae0a7-fc08-4d6e-947d-f2df2ee01506",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9c8b7c8-c33f-4a13-9e77-adb8d5fe2aff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "802f4ab3-281f-4e89-8b0c-18cdf91f5ee4",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8ac6c52-8dd8-442a-83fa-1db9e1fbb825",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0191b4a-e3f0-4ac8-9c5c-eb1a1fbb3940"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3f05297-4f52-4dc9-b9dd-313dde9b8aeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff2164f9-fcbc-4583-a89b-773d1fd4f5b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b560075a-8758-41f4-9743-11a34a2f4a1b",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8990c97-e8c1-4478-abcc-03a14ac7005f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7b1d82b-c23d-4bd9-bfca-217d563c4467"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48cde789-176b-4f62-a772-0396a1378800",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2c04b87-b879-4072-87f1-f4496eb28b1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "befdb2e8-8faa-4ea3-8cc8-f591ca13a83f",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aee80c04-340d-4154-ac56-e2eff70835bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35bab7a6-9aac-49ba-99f7-4ef9a860c050"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77d1aa88-ff60-499b-b478-7231247f5cc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ad9d8c9-51c7-4f64-808e-ce0304540856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38f0d82f-909a-411a-81c2-52b2c733c33d",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f042634f-7cf0-46fb-a311-52db7fe77658",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9d629ca-3030-47c9-86bd-50765d73dfbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e0ef7fd-2ddf-4665-832a-45ddc0815ff4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d2fac4d-c86d-44de-a8de-4bd3a9d58e60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fd477ff-6060-4509-a771-5d4fedbf4784",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82924d1c-95d9-4ee2-93ea-ddcd19188ace",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "810ac311-f2d5-472a-aa27-72a4a566ed10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b726ad8-23c5-4513-adb2-cc2f38adf795",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cc01c39-3e91-4d85-918f-4e64fde89a2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11b21ad9-2a38-4c02-981d-2d9ffe6aafea",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c91eec8f-31ea-41de-af89-58cc3e84a856",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ee2ba68-3abd-4733-b1fc-7c1f6b1e861c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3760c3e3-f4c0-4324-b459-a62e6542bfcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb24fefb-2492-43d1-a1bc-e4ec731c2f05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8286950-59ee-4bfa-9396-6870d735b35a",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aacb27e-05b4-4674-b037-f4ff55eb6798",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92ef33f7-3022-45f6-b834-982139a87fe4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b78a63f5-23a7-4817-8bf0-ca223553db1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42389e2f-45cd-4d7d-9e21-c8bf4ecac0a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47ab3ae6-6f91-4b8c-854e-d045801cc47c",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec57fc1b-29ee-4cc0-8f2a-d680af5adf45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "587368ee-42b7-4ffa-8654-5a56d0243d0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ced85cfb-65c7-46b3-ba9f-03ee86e6cbf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7063826d-425c-4317-88ac-d3afd830efe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40fdb10a-f8f1-428f-bd07-a6386d35cd9d",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bdde615-707c-43ef-b271-f91adad11837",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "341bcfd6-adad-4fa1-bfc6-a73f97d3224e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34ee64c0-8225-478b-866a-cae0a6c76c05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "744b91bf-71a7-4f43-b40e-23532e22c9a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebb4e0a7-eb4c-4d51-a2ad-cc04d5a8293d",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd69dce8-c1ec-4faf-a468-fad7affa78b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7a9fec7-e587-42f7-9927-410bacaeecc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ffbfe1f-ec34-4748-b5bb-ec3e9f5d41d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6953525-34c6-492c-a23b-ad27a622759d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73c8b981-81d0-4800-9cd2-9a1208f10866",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b397d64-a92a-471d-97ab-3de6a1d60769",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c6c7389-2ef6-4be1-ada8-721cb65d6c82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0d65c06-5c22-464b-9faa-2cd925192853",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82516cde-1636-40f3-b059-c8841434b7ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeea7dcf-00a7-446e-809c-8d48ded3b698",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "351d97d8-d28f-42b4-bd54-06beb8914b7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16736193-e6fa-4e37-9ada-e370f54da3ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "768d9677-2599-4376-9dd6-5a4473a8ed5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d75baabf-771f-44b7-8961-d927a252a609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a4af16c-5751-4a48-b6e9-bd5ce0f7f862",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f90af54-c0b8-4f77-866d-66e3794bd50a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7133c1b-8a50-4f98-bcb8-4646959abace"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a1d987f-53fc-4e62-aa2f-80e5fa7b7121",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfb66546-426d-45e9-a8f0-a49e794ef879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "135085b1-ec39-4dbf-aca1-2a2dae5f4266",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5663f29b-8233-4267-9bb1-7d4f3702ea8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc0ecc6b-5b43-474f-8151-66b3ae945737"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0026edf4-c23f-4559-aea8-9b2608f9377a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a07746d-7f3a-40e6-b0b3-6918102d3ff8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c98c8eb-b25d-4d90-bfa1-e3d7c37247e2",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bc3eb73-b3f9-4c9a-8068-8e75da061d87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b97ab5dc-bebd-4dd9-8419-1043941d2b2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a52fcc87-3e33-46b5-af71-f7ccde11e936",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64831523-9fcc-4482-9048-3a942c3b1e93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a866724c-c104-4abc-87cf-2e2cdb428569",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8815d5a-2c3d-45f7-9647-c64577c3c684",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79a33762-3fae-4ba3-a028-75a7b8ad67bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fa6406e-fc22-489d-a5b3-bd81d7dd9acb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d70bc46a-3112-4454-ab11-d69c09f19440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80eed934-5fb2-414a-9eac-88c462f4d9b3",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54522f8d-b89d-41eb-be7b-5e5d3b4e794b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cb1320c-a92c-420f-9081-a4c0846d4432"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21dc1e91-d8a2-4d02-9bdb-33a130909a8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9db3a62-e850-45b3-b57e-a9af887c6966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f49761c-5351-4257-ad14-6dbeadffe943",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d6e7b98-cc08-444d-bda7-0477ff2ce41a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "453ec9bb-312a-4fa9-a0b9-b8fd17f47492"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d7f2262-77a5-4e8a-9acb-373225d16232",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c56f1586-2dfa-481b-86c3-a771a2fcd7e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d2647da-e22f-41e9-99c0-f8fc0c1ae788",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "412e5429-2c3e-4103-a562-c5ab1cedb76d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f94c32b2-8380-4fbd-9d69-12d241cf5698"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f85c5d30-e535-4fba-8d4f-336bdb462632",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02968271-dee3-40a7-af41-e274749e6033"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8b063d8-87ac-41ed-ad7b-d427c3b0c991",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e5b9ddc-38b7-44b2-9456-82d1aef5a9a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c138c1da-c761-4f27-b606-62edd052201b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ef48079-05e5-4465-8361-9f16b272adff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb5aeb08-114b-48d5-8793-5d654cf6dd0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "477c4389-bdc4-4879-b8fb-2777628253d5",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "179d54e4-8ae0-43de-8f84-dff13a1da069",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73ba4c62-257e-4f5a-8165-abd3dcb81e52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bbfe059-6972-4907-ae5c-20eb0c7b9ed1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcab3d14-b363-44d5-8b42-7ae72a416c77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd0d1eec-339e-41b9-9c65-a48fb55e9916",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b501387e-9b10-4843-b717-c57f32a76017",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a173279c-2954-4192-aa95-db16a8484ecb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1996cf2d-ac49-4c9e-9f9c-e6172cf725e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72c10297-6035-43cd-b49d-2784284437ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd7b0f8b-242a-4f8a-b5d2-4a75e9d4cb78",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7314552-212d-4063-8f58-97a5399140d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0037240f-3728-4fed-93c1-ed6ba6a7e351"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "899de3db-5e18-4780-8833-0032cb98c445",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc70bee6-370f-424d-9d04-7dfcb7df2dab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0432c3b0-c1e2-4eba-befd-bf5d9cfb4a14",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f1a3cc1-28bc-474e-9b30-d23c56b7a712",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7d3073d-5e9b-47b5-b337-d17643963be4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeb30de7-1c6f-4610-990c-b8fc386a7abc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59eb2613-bc84-4fab-80f8-5c8669d03e14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f113c8f-780d-4a5e-9b7d-e08a2d6baaff",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e544efb6-f098-4b74-babf-a4c108236478",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf2feaa4-4bda-4b38-8c18-c1ee850687bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0931078c-c371-430d-8f88-f3ccaa3962f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab9a50ba-b9c5-4486-8999-b149be6bb74d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9ce26be-41c6-4d4a-9b1b-8a8ce02942a8",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b524d23c-d72b-4976-af41-36c972ed2d36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "133d5ba4-b6dc-4bbb-b171-9a1ed468a6b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2873cf4b-4be4-44ac-aa3c-50c3e12676c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b98bad9-bdb1-4040-a114-5a547678a099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99381f38-98fb-4019-bb0a-e1d047f57dcf",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04ed0c55-112a-412f-835a-fbb243797bbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c02fe78-c184-413b-b1aa-2f2550b9f209"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9d1032e-115c-4b12-b8a1-aab15159b17b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb5fc956-b4e4-49a9-b11f-9e2247aee966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53457519-65bf-4ce8-a2f2-08327e8d8920",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc481d51-00ac-4faa-adf7-17f7dd900810",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7859bc78-d2f9-4f0d-ba5c-e703350c19ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f02180b3-afb5-42c7-9621-b8b427afc82c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a25639a-e89e-4184-8d5e-8a50b78a9913"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4af25b28-8bfb-4800-adba-0aeee4a7961d",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c91f9375-98ab-4a77-b7dc-a97d1c058622",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5a0b0a6-e7a3-4e1d-91e0-af596dcb5ae1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf6f1cf5-257b-4eb5-b782-85ce5949ecaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72b73d40-88d1-46e6-bf15-9382133f7ecf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cf47f24-0dad-4a43-bf01-d01bf41345d7",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "881f20a2-85e4-45a4-ae1f-9a5835c247a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b609d428-f892-4702-9b89-6ed73ec28c9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e13d4f37-b28d-4fd8-ac6a-27c932c41668",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6049881-b3f2-4283-b047-7d717af4f52c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec2604ef-f062-4aa3-8a85-479dbe194e81",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "479a6b45-b63d-4a4e-af5a-1bdaba4440c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49cd45f2-0fe1-4775-9676-0dd3ed69ef00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aefecf8a-113b-4a5c-89b9-fbd92f890a11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7104ca1a-9a99-49cb-8209-684e8c3908ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b49ad50a-4070-4170-9e53-6bc8df6aecaf",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28bd6d41-7d0e-48f0-95da-43a5ad6494a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea10870b-c370-4f15-98e9-861dc3561e03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e2aa088-3fb6-473d-88ab-35a541475385",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "595e6788-f7c8-46eb-86c7-2c58abe95907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5204c73-3a67-4ba4-a85f-17c13f75ee4b",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6d7c72b-8908-4565-b526-b735cada1058",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab3b64c2-4068-43ab-894a-88132f292723"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ced892b2-b6d2-495c-ae25-87a6d55863ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "166899d2-78c9-4292-9207-3d5d746dad9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e373061-8b1d-4ee7-8fe7-8595e2d0e147",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eee80d78-7d2e-459c-9c3e-a1bc9b3a8e65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc33f81f-bba3-42bf-90f2-a9b40a421527"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba222da6-60ab-4cdc-834e-d249bbbc93cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40036bf9-7e26-40f3-8876-3bfca565c16d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39572fc9-e9f6-41e1-8fd7-7ccf81b76b20",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47690f9f-e1cf-418f-af44-876ee52d7825",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7f2ffa3-117f-449b-8ef5-3313676cf57b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4800dbf-0cd6-4e1b-a6e7-f1161b35e8b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "313dcd07-c4bf-4185-bc0b-ea467857be0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3391ac50-1765-4ead-b83b-ce47c7b1712e",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4235246-d588-418a-856d-10cff5bab160",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24416de5-e2c8-4d87-b852-0c0fd5993606"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "babc0fce-0bba-4edd-96ad-c32cf1de6abf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86a3e4d0-fae1-4223-adf3-d26b84a64c82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86f267d0-fc75-4887-bdec-18a81217ffc0",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5e08e69-59fc-4bb7-8e46-d1d6403f65ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9150b8da-25d1-4e46-9644-c0b1ee0f6d48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13579b6f-4bcb-440b-9256-be4bd1d60eb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c29c4ebf-b906-49a5-b036-32d3e4f70220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12ccfdf0-21a8-445b-8801-93b947bf1d72",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "632eb346-6fa5-42cb-8624-5f83122f73f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6d551ca-8cca-4648-a389-1886624d62eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1706d67c-02b7-4f5b-807a-919a8a9d248e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e10b3b7c-b418-4611-86a7-f46bcc326c9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d96438e-6016-458a-a2b9-49850c1dcd16",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "854c987e-5770-47aa-8cfd-2d1a10aa7043",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de49e102-1d13-4447-b3d6-1053393b39f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "baf7ada0-bf75-413a-ac74-1a6b6a769b04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d86d2433-028a-40d3-97ce-ab7a62356e1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c2bd0e8-3cd7-4787-b8cd-a7f622a60e4c",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f6d4f60-646c-4c50-8d75-09a45003604a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb51ac26-4770-4396-9722-04c84364c0b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c864e5fd-e2a2-4851-834f-f29cca5f2af5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ffebd10-7888-4462-b846-f7724c680a34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b99ab66e-32b0-4a65-a856-bdb8bb9fbdfb",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c581c4e2-dcef-45fc-96c7-db34a7961c3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f012a07-5e9b-4185-9d79-e27943100e8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c73f4bcf-e38b-488d-94a3-4a16ecafbfbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6335fbec-092e-4b08-98b1-b7ce998ec717"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5087f456-85cc-44e8-8217-1ff842aba1b7",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22cfc2d5-046d-4c55-8ec6-9e2c8024941f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d7584fa-ac3c-41e5-ac6b-e2f8da67d6ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70b76b0e-13c1-4b37-9775-907585b293b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daba1544-d4f4-4cdb-afc5-2d805b652ab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b9826ca-d1e6-4a2e-9686-d0bb0def6cad",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4e93245-5af1-4dff-a32d-cb10fd0bb797",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3e5c317-ab29-4435-ad3f-6c1733413cdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36e500f0-a9aa-4e03-8fb3-fa2aee9fb9ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "671dc5e2-301b-4931-9164-885627a3b142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13bff021-c71e-406e-86df-1cbd476ac768",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72a3d5a5-df32-4c82-b752-a250432ef74d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "085eb73a-b68e-4c55-8997-60d269ffe210"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "466952e2-8991-47b5-b861-d92cf12b5f7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd008c4a-6a8b-4234-8464-c2925a1d1457"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4553e198-cf11-4d9d-9637-7776231f2c2f",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e897b247-b008-4c56-be94-741a46ea6abe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbb78926-0b5c-4ef1-9ea4-5428f67a6cc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afdfa6ee-8211-431d-b924-7dc422986ac4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81e33bcc-f939-42ab-931e-8ec06ee8a821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "099bc1e1-6fee-4dfb-8f4e-36f2ad8a2fb0",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8e96076-30b6-4686-9234-b44ec91e6c01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60845fa3-89bd-4e17-8ef9-c2fa5457460c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fe24277-6cd6-43fe-a974-61eb49708f88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31fabd47-5ffb-412d-b9df-2e8b967f29fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5189c85-cb10-4658-b4f5-fa6f18fbba4c",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b352ae95-f001-4fdb-aadf-3c8ed656a5cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec6b30e1-1d01-49b0-96c4-c87c7c349e4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d33d475-5b55-44cb-a8fc-fa7c2cd82914",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7cdd8db-6ece-493f-b8fd-73c7ac04aa97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03610f02-1eb0-47cb-babd-d952b2ca1665",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e0cdb0a-a85f-47e7-91fc-90ff9a4fcc43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e35c3b0-765f-424e-84a2-bf685ef5d734"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e63592fc-49fe-48f5-bf2e-29afce9999bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d68fbdeb-7882-42f2-8080-3ade4bce6f4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8798cc36-a2d7-47ef-a1d6-659834f6158f",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9ec15c5-b0b7-4293-bd2b-87ad355fffbb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71ec39bf-70bb-4397-bd79-cfde38b2e785"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6a3ac9b-e281-4aaa-9c3c-19a2e79e06ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd860ee3-2e58-4031-8bb8-ebc812ec30b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4d04656-0049-4dc4-9456-9fe2917cbb3d",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79ca390a-2329-49bc-b246-2e0bd34ee8a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9c80ac9-d14c-4614-887f-2f398a0d18dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c260c334-6e7e-4030-be7c-bccf7f94f852",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ce2a9c1-faa3-4ed2-a426-2a7de471d6c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd53fabf-3aa0-47fb-8b99-2c220112a125",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72d4b3e1-2db4-4384-8b55-f796b73df81d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93658df6-cfb0-4e81-a006-c259791c65b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66c084a6-75e3-4315-b7f7-7ba3334e3132",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cac0439-c2bf-40a0-ac7d-c4a27f70535a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33fcd25b-e2dc-4317-9602-fa6ccad4dc16",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf4b0904-6fda-4585-931f-93c55e128f6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4debe376-32a8-4f8c-a628-f62554e6f717"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef409008-97ae-4fdc-8d13-225feda9120b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e3e0a87-5b69-4b6b-a982-52a29d5f0c9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f146de5-b34e-48c2-b994-d335a14387f2",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ca3d3a9-8821-4d71-9141-7b6784e08a53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb6ff44e-a61c-4ec8-89c3-ae61ed6fee54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73f71f6f-1d81-44b4-b0e3-6cb9a73eeea6",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1590fb26-62d3-491c-8bca-3e665db4be6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4e4ff70-2411-4d40-8817-1d5d23eca424",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0e2ff1e-abf5-4832-be93-20dc581e4c89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "395fa3d8-0d10-47e3-955f-7e6cc4e2b0d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa8041b3-ca42-474a-8120-1f6ea7c9e3ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "221e250d-0683-4f3d-a169-438d45719a89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72ae46a9-fb4d-4e1e-a2c8-39fc881841c9",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "258f5cb2-074f-43cc-bf62-c42b699b6ddc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fee73c33-9f30-4f15-a8c2-fd69ea972576"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bedaf111-9134-4638-b8b9-f15ba284f272",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61c459e2-e1c4-4cc5-9a54-03da2232d07a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7814d417-3c3c-4ac5-869e-636051489aa4",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2db3f844-4a44-4d84-a635-a1c6eabf5e7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af099c78-4dcc-46b6-b3e1-846f2f54e252"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "531767ab-21a1-4257-a907-ca45d6ce6a3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d3f0ffd-6476-4350-b95f-91a4aedfc0ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c57b35dd-e41e-4012-ad16-a45008bd95be",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bccb5ae2-2765-4ff2-9248-f561150f2f4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "382f4faa-3e3c-41c2-be31-cc356101b78f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c11b85cb-b111-4818-8cef-ef7e6f26f740",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da756dfb-fb91-4106-95d3-2afe9f3e7291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2bb09e9-fe39-49f0-b8b2-98e83b311e37",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48d022d7-c712-4f8e-9449-140840ac9843",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ebf0d29-3aa0-4d66-8989-62a24340491f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "904fdb03-cb03-4965-8fea-7b87b5dbce7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc0334e6-7fca-463e-bbba-587cabdd972d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b070968-a717-418a-98c9-80550dc30e72",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d1bdde7-eba6-45e1-9408-21878cd7ffa5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ccf04bd6-adde-4242-872c-abdeec810e57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eb6f0f7-c0f6-493f-bd1e-8fa82c876baf",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0047d3f4-4e88-4476-8d59-8eb642bb3bd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e24f96f0-9afa-4162-a4e9-d790da8d033a",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5ea7f4a-4d56-4b25-9d82-1c8e4f16b16a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6897b252-f5b1-4fc6-ad23-dedefa980554"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e3afa30-13dd-4bfe-b8ec-f069108af874",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26d0af42-61e3-4ced-a15a-7ef27655faa3"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dc730415-14ff-4f64-989f-78ee039c72bb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "274e92b3-1fc5-4e30-8c91-a4325a76ca69"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3cf69d54-f568-436e-ac42-a668ac224201",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e2df0b07-e711-47b8-b4dd-088e7e2e9750"
                    }
                  }
                ]
              },
              {
                "id": "fba3894e-2527-42f8-ace9-e31c6df2243e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9b553e8f-c00f-4945-967f-c1a181904082",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "851461de-1afb-461d-b0ce-a8ba0e13563b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "e82e71e2-c592-47a9-9d36-61fce17c14cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4f2a28c-b2cd-4476-b959-843616b67dea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0b2a06ce-4598-4a4a-aaea-3b6d5e1147c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74dffdee-4f31-4177-8788-88005f17d6c3",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5c5b497-c9fd-4b17-8c8e-fa9010207ac1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f9718708-c45b-4cd8-b0e5-f273aa4f33e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8132ba1f-ab47-4c83-bc59-83c55c2f5aa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a0b4324f-fc3d-4b09-9af6-97c42a567901"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "04a2fe7e-5f45-43be-a4f3-be6b0fc45042",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e65c0b85-b428-4e14-b723-8989644d248b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ff2f39d6-8473-4453-93ba-9dfec8a924d1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "00d46457-d65d-4de8-b42d-f0a83aff616d"
                    }
                  }
                ]
              },
              {
                "id": "4f2710c4-9a31-4836-abd1-9a3b0b77381e",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "52c9d4c8-857f-4d64-abed-ca4459762f1f",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47497bf6-a603-4d8e-ba8a-831ff30866d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "4efb11a2-5824-47b6-9bfa-41e62a2b1f12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98994145-75f8-4699-b68c-2313a89c40af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5e08a28-cff7-4c07-9fc0-4c5fc813a7e0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "29b88cab-0b80-4fe4-bd81-468a0751f5e0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "221ca2e7-23f7-46b7-8553-2c4f72c5e978",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4ce45f52-57a6-4e9b-94a5-a6593fb03f11",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "6dded262-219e-47a5-80a0-5118d07374dd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "92f1ddc6-5d35-4d9b-85d5-47f38d68f20b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e90ced46-5b15-4259-a4c2-1c96fb560dfd"
                    }
                  }
                ]
              },
              {
                "id": "4bd2204f-501a-40ec-8edb-39c6bc73b016",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b1716d9c-8294-495b-8660-2efb5abffebb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "04c638c3-07f1-4c99-b4a6-3be925860b09"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9b00e745-b5e3-4232-be81-8d3cfa7c3965",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1aaa2c37-f27e-458f-af7d-2295d26f9fef"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9269f83c-48b9-4ad4-9406-1c3562009eb6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "626cbb44-9c21-44c3-8bc2-a4db007b05d6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "61feb60e-b873-405a-8693-41721ebb0d32",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "30ee5d8b-317f-4433-83ab-88866214d144"
            }
          }
        ]
      },
      {
        "id": "bf6d8d29-a940-4a04-bb19-f76cd2e46e92",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "382422a2-65e0-46c8-8ee1-61c634446082",
            "name": "Negative Testing",
            "item": [
              {
                "id": "40d84974-443f-424c-917f-90bd822aeda1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "74909163-9508-4204-a31e-69a339fe96b7",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7717b077-72fe-441a-8142-72116669a92f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1a2a1912-4ff5-47e5-bed6-b03d547b6bbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10adf529-a749-49c3-abed-1fbe7a14b463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3b40e137-82b6-4399-83b7-cfe165b4bd7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0114a4a7-658a-4c57-998f-a440dfd66c47",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "633a4a1b-b0bc-4e68-9452-1ed58a0bea75",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "69d17b3f-b083-4d30-b162-3e9594328521"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eeb9aae-240b-47cf-bc0f-a00dcc9f210a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f24d8c12-3b40-40c4-875a-9b8086a216e3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3bd6845d-38c9-4bfd-b53f-7cc5730eaef7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "610105b8-3821-4c0c-ab8e-0e100fd93705"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7958332e-2242-4ab7-b0de-7119c270a4f3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "72322702-a244-4b29-96d7-2dfca5c4de1b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c166417e-0b72-4703-8c4f-14bd49a37fba",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "9fd7e723-d369-4cf4-abd8-e7bc9f93f1b5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fec45a71-cf49-4d09-9948-28e0659b5ba4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "22fd7a06-8c5f-4819-882c-c3e6b51d1f4e"
            }
          }
        ]
      },
      {
        "id": "b0da8c3c-4a93-4a23-b04a-e62f8d2384d2",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "26d452e0-87b2-4ef6-8795-3ff4e571376d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d8e139ef-699e-4ffa-9b44-cf2700b8a218",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7cbef47e-8b4a-41c9-a4a9-2bee34773bb9",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3857c6ed-4379-443d-8ceb-8c3a9ac1c2c9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b0a9fec3-8c93-4dd7-aa4f-4152739f02eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cca15d6-c316-42a9-893a-12b77e13fa70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e40837d4-4f9e-45ef-90f5-3d13b74d2d7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f18ec8de-850a-4e5a-a631-ab18b1098e4b",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6751e333-af1f-4c83-8e7a-84a03efba795",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a86a6480-716c-4dd0-ba0a-3db71e9165fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eebe346a-fa5f-45b9-b644-47f526cd340e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "86977448-4d30-4187-81b4-ee79e224150e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "60db4676-46ed-42cc-8276-8414b1eb0401",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9fadb1ff-699e-43df-9b8f-69e9ad5deb1f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "020b6fd3-1be0-4327-9fc9-6d5c0c36b8f0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0f4e0121-b6ac-40fc-a160-0a8ded0610c6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "80136c60-0a2c-4f1c-92a8-eaacf06992ab",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f9db5748-f558-4821-b177-a4d44fa9faf6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4bc06f62-b1fa-4a1f-961f-8587a6eebd07",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "40c55e57-3db9-4f18-ba31-df5b27ca4a0d"
            }
          }
        ]
      },
      {
        "id": "6749f70e-8704-42a2-9619-699b1bf55881",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "593199e7-20ec-4cb2-8b21-80bf7dd34164",
            "name": "Negative Testing",
            "item": [
              {
                "id": "40ccc6d2-ad57-4b58-91a6-8c4b8cffad58",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a5181586-2b4f-4824-b61b-127cb9616cd8",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f69f3522-7516-4891-ae74-21c7871e00d9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7d27ffdd-1923-4567-bf4f-825301ab8609"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f51449e6-bdef-4bb5-a64d-784f8a99c161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d7f2e8c7-d785-4cae-8d57-3e7a07f6e477"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89789dec-2fbb-4f42-ab11-4f6f52ed0f24",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50142f95-f80c-421d-bba2-c7207ccd92aa",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b6c93b0a-5287-4a3b-8557-47eeeea90654"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffc594b2-c3b3-413d-b119-01f029d2346a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "74897ba1-afb7-4cff-b226-2c20d7810a76"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e06a8d56-e037-4b62-b851-624bb451937a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ea0d8d23-89c4-4e9d-aed6-47a4a52d7748"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2868f502-e379-4f9a-b604-45a8de958573",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b7490434-c6c9-4bdd-934d-eb4823025424"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6800073a-0eae-4e63-a9db-81b03f58f264",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1779e783-2399-4426-a212-312793572ac6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fe1fa4ed-5177-4397-b988-9fa73c062d5e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "16b0dcf3-1eab-4685-98c9-64093cba86b4"
            }
          }
        ]
      },
      {
        "id": "5cf5caa3-fe40-4482-b116-4c29f89fc1c4",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ea4a57e8-f2d5-4a27-82b7-c890e0c7aca0",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0a3bc2e7-9758-4fe1-8596-9e33286362f0",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "3a30133e-2383-46c1-ba75-0ed8c36973a6",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "df13651b-f6d1-49bd-9e6f-02f2febfa124",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3dc7c1a7-acb6-403a-a33c-4b8877578739",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 246.69230769230754,
      "responseMin": 9,
      "responseMax": 5379,
      "responseSd": 668.5736119203434,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1680827576509,
      "completed": 1680827651607
    },
    "executions": [
      {
        "id": "eca5b5b4-ed76-43c9-9074-fe586ced78f4",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ccba1ff8-3e8a-489f-be05-6f57436f67b0",
          "httpRequestId": "f7c711ec-073e-402d-8f50-26313e56a864"
        },
        "item": {
          "id": "eca5b5b4-ed76-43c9-9074-fe586ced78f4",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "ef52f972-96b3-4fc9-a87b-531ec291ba9f",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 0
        }
      },
      {
        "id": "99a75102-4659-43e6-a76b-c775a4fcef74",
        "cursor": {
          "ref": "956a02f3-e611-465a-909c-b3e8182415a1",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "493ce8a5-77fb-4daf-88c9-d48545a427b2"
        },
        "item": {
          "id": "99a75102-4659-43e6-a76b-c775a4fcef74",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "caf02be7-736f-4ab2-aba2-ecf40565e44d",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "b27686d5-8df3-4b6e-b94f-e4126b59ff40",
        "cursor": {
          "ref": "018bf1f9-40e2-45e1-9fc8-3e9c7c0a8d6c",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "69ef4bfc-7174-4b3e-8559-9f393c7fc785"
        },
        "item": {
          "id": "b27686d5-8df3-4b6e-b94f-e4126b59ff40",
          "name": "did_json"
        },
        "response": {
          "id": "285dd26f-d7f8-4d74-b64e-63f07a8071ae",
          "status": "OK",
          "code": 200,
          "responseTime": 348,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2938e377-ffe8-4d9e-9911-934cca14923c",
        "cursor": {
          "ref": "10f42e9f-7496-44ca-8594-508713ede208",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "52de9c5c-966b-45fa-9a25-db9c01939843"
        },
        "item": {
          "id": "2938e377-ffe8-4d9e-9911-934cca14923c",
          "name": "did:invalid"
        },
        "response": {
          "id": "c223df48-3b96-4d8f-8ede-2b1970105603",
          "status": "Not Found",
          "code": 404,
          "responseTime": 2235,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "2938e377-ffe8-4d9e-9911-934cca14923c",
        "cursor": {
          "ref": "10f42e9f-7496-44ca-8594-508713ede208",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "52de9c5c-966b-45fa-9a25-db9c01939843"
        },
        "item": {
          "id": "2938e377-ffe8-4d9e-9911-934cca14923c",
          "name": "did:invalid"
        },
        "response": {
          "id": "c223df48-3b96-4d8f-8ede-2b1970105603",
          "status": "Not Found",
          "code": 404,
          "responseTime": 2235,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "dc7925f7-1ca1-41cc-bc42-8b4093c13ffe",
        "cursor": {
          "ref": "19b67e86-d74d-4311-bb92-562a187b617f",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ecca9b94-7a5a-4890-9a3e-a9bebc6757cb"
        },
        "item": {
          "id": "dc7925f7-1ca1-41cc-bc42-8b4093c13ffe",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "3046a5d7-9bb5-4b84-bd1f-edf75a38b023",
          "status": "Not Found",
          "code": 404,
          "responseTime": 146,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a029c3e-cc2d-4171-b121-a7b5fd95ca39",
        "cursor": {
          "ref": "9afd662b-a24a-42c0-b56c-7cfae43fe650",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e2147533-2089-4577-9df1-975dced4a86b"
        },
        "item": {
          "id": "6a029c3e-cc2d-4171-b121-a7b5fd95ca39",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "37104237-5e94-4c53-9121-bf55a5b05ecf",
          "status": "Not Found",
          "code": 404,
          "responseTime": 42,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "744c725c-39bb-452c-9fef-d64482938596",
        "cursor": {
          "ref": "343c2901-f188-4d69-adaf-6330a69d5e52",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "6db35f9e-ad93-48ee-899d-5e16867f7864"
        },
        "item": {
          "id": "744c725c-39bb-452c-9fef-d64482938596",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "2e467c26-1b01-4d32-94bf-e4645dc44cb0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "a91e9676-eb09-4279-892a-3b67fbae3f93",
        "cursor": {
          "ref": "ab20d0f4-b390-43a9-ba2b-1c62bd2d6aff",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "87a36073-5c45-4fcb-bbda-6c886c36d7cf"
        },
        "item": {
          "id": "a91e9676-eb09-4279-892a-3b67fbae3f93",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "e17b02d3-9832-4111-8978-71b88eb822e4",
          "status": "OK",
          "code": 200,
          "responseTime": 58,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "a91e9676-eb09-4279-892a-3b67fbae3f93",
        "cursor": {
          "ref": "ab20d0f4-b390-43a9-ba2b-1c62bd2d6aff",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "87a36073-5c45-4fcb-bbda-6c886c36d7cf"
        },
        "item": {
          "id": "a91e9676-eb09-4279-892a-3b67fbae3f93",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "e17b02d3-9832-4111-8978-71b88eb822e4",
          "status": "OK",
          "code": 200,
          "responseTime": 58,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "f97cd99c-1fff-4406-8bd9-fbcd8ddc6f7d",
        "cursor": {
          "ref": "86c3eacf-e8c9-4a7f-8d43-051d023a6e75",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "0b5b1af6-3fb5-46f2-933f-34b5f965eacd"
        },
        "item": {
          "id": "f97cd99c-1fff-4406-8bd9-fbcd8ddc6f7d",
          "name": "identifiers"
        },
        "response": {
          "id": "967486f7-a7b9-468f-ab99-1420cdc31190",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95459d53-689f-4a29-9a00-ccf724df0817",
        "cursor": {
          "ref": "e3b7c2fb-5457-47c1-aa39-740ecd4f439f",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "eaba2b79-8b78-42c8-acac-8d7fbde75f4e"
        },
        "item": {
          "id": "95459d53-689f-4a29-9a00-ccf724df0817",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5a1cad96-7ddf-4f12-af5c-6356b1ad2ebe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95459d53-689f-4a29-9a00-ccf724df0817",
        "cursor": {
          "ref": "e3b7c2fb-5457-47c1-aa39-740ecd4f439f",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "eaba2b79-8b78-42c8-acac-8d7fbde75f4e"
        },
        "item": {
          "id": "95459d53-689f-4a29-9a00-ccf724df0817",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5a1cad96-7ddf-4f12-af5c-6356b1ad2ebe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "048e9b65-1072-40d5-ae88-a98baa1134ce",
        "cursor": {
          "ref": "1512ed62-eef5-425b-b794-74221f2f0751",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "86336faa-4f64-4d9c-a73d-556f6854126a"
        },
        "item": {
          "id": "048e9b65-1072-40d5-ae88-a98baa1134ce",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "f8d43231-ed6e-4b5e-8759-3ad37c3c46a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71a5df83-e510-4995-bbb0-d7d20951de7e",
        "cursor": {
          "ref": "02cba02a-327d-4e19-994c-55d065317535",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "b3ecae78-19c7-4078-8101-86fe28da85c6"
        },
        "item": {
          "id": "71a5df83-e510-4995-bbb0-d7d20951de7e",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "b694ed08-797b-4514-b569-7b1fcf8e0579",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89daf6f7-ed3d-465d-a2ca-25257c5cf0f0",
        "cursor": {
          "ref": "fa9a965b-ea07-4271-9cae-685ecd734a83",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "21fc3cbf-19a4-45f8-9657-6a26b1e50464"
        },
        "item": {
          "id": "89daf6f7-ed3d-465d-a2ca-25257c5cf0f0",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "6714eeaf-cf96-4555-90b8-c0d0efc18bdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98d3582d-939f-4711-83ea-b228d6ad21a8",
        "cursor": {
          "ref": "4c183ca0-de05-4c8f-95e1-9100f04656dd",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "55dd1093-35c9-427a-a6b9-cce97ed47bd8"
        },
        "item": {
          "id": "98d3582d-939f-4711-83ea-b228d6ad21a8",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "43f1e24c-3ad3-4f92-8fd6-f9ff5987a67d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ebff4b7-9a22-40c3-9945-058e6dc65771",
        "cursor": {
          "ref": "cb812555-2e4b-43d9-9cf7-79ee85317ce6",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "dffd69c7-d2d9-4dfd-8bfe-4356f4c2c8a7"
        },
        "item": {
          "id": "4ebff4b7-9a22-40c3-9945-058e6dc65771",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "d5cc2a16-adf0-45de-bb29-cd0eaf51df26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdac827e-1dfa-42ba-aa13-37503f2179e4",
        "cursor": {
          "ref": "dbb2f05e-1a02-4a7b-af16-c5084b8b6517",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "76fbac59-beec-4664-a672-433868f2eef0"
        },
        "item": {
          "id": "bdac827e-1dfa-42ba-aa13-37503f2179e4",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "d38424d2-592b-4485-92ca-698bd2eab60a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 584,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0fa0b12-6d63-4850-a6e7-2bb84e7262bb",
        "cursor": {
          "ref": "bc81e478-ef96-4529-b95e-3cd6286478bf",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "a38021f9-e5c2-472b-ab44-43d05e1b5161"
        },
        "item": {
          "id": "e0fa0b12-6d63-4850-a6e7-2bb84e7262bb",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "6a9ba966-7a9b-4fa3-af88-aa0a7d249545",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45a54cd9-9b05-4864-9607-0f54e5c6e262",
        "cursor": {
          "ref": "99dcc74e-7e75-43cc-a792-06bdf5150705",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "dc6dec15-676a-4584-8777-84e22cc75a74"
        },
        "item": {
          "id": "45a54cd9-9b05-4864-9607-0f54e5c6e262",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "4324d49b-70b4-4806-be22-b8d8bd690582",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5770d613-b7ef-49ad-90a1-7c2311fd311c",
        "cursor": {
          "ref": "720c8c3e-4733-4e5f-843a-8a3835b1360e",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2bd0ee29-99c9-416d-beb6-e76b87510d8b"
        },
        "item": {
          "id": "5770d613-b7ef-49ad-90a1-7c2311fd311c",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "07a6608d-7b9a-4f11-a036-1f17b7dadcfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1492f051-2aa9-47fd-8e83-7b0d7db96763",
        "cursor": {
          "ref": "74ffae3f-84a5-497b-946e-c48d98f58f0c",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "2b0dc80e-67da-4ab1-b351-fc1b2d5fcb38"
        },
        "item": {
          "id": "1492f051-2aa9-47fd-8e83-7b0d7db96763",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "a5a72ccf-395a-498b-868e-615bb25f873c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77f58563-b4f7-4d7f-b747-cf6efc6dc89a",
        "cursor": {
          "ref": "2cb042ea-552e-4329-83cc-98ac1711ba9d",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ee313a39-6730-4018-9252-121425911784"
        },
        "item": {
          "id": "77f58563-b4f7-4d7f-b747-cf6efc6dc89a",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "0366adc2-def2-41c8-ac71-04b260b2f2df",
          "status": "Created",
          "code": 201,
          "responseTime": 2422,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "1d497d39-a9f6-4af4-a0fb-8034debd53ec",
        "cursor": {
          "ref": "805cab22-2242-48e9-b0ac-8ddc6178144a",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "d07d6814-0263-4001-9c28-f212f87a35c6"
        },
        "item": {
          "id": "1d497d39-a9f6-4af4-a0fb-8034debd53ec",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "23d90905-abf8-4d65-b215-5da4c7d19799",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76302bdf-47b4-4eab-83d2-22f728a17692",
        "cursor": {
          "ref": "3dae2f12-9add-4535-9908-d82f356d80bb",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "cbdedd7e-9010-441b-9b1b-5f735a008d21"
        },
        "item": {
          "id": "76302bdf-47b4-4eab-83d2-22f728a17692",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "b7d132c6-8a97-4b12-908e-cc4a1caa389a",
          "status": "Created",
          "code": 201,
          "responseTime": 5379,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "b5c821a3-7af7-4f61-85b4-bf79e1d97daa",
        "cursor": {
          "ref": "e0a2fd93-1b10-4b9d-ab9a-e6d995b3c4db",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "7e734745-7f96-4846-80cb-39bc11dedc63"
        },
        "item": {
          "id": "b5c821a3-7af7-4f61-85b4-bf79e1d97daa",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "5261e937-7865-4f69-a7b4-c55af7ee589a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92f1b6de-abbc-48a7-8431-f8c468cae826",
        "cursor": {
          "ref": "11d63778-60d1-4778-8230-0d80d48df169",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "7a5ec24f-3e79-4690-a478-faddea1f1ba1"
        },
        "item": {
          "id": "92f1b6de-abbc-48a7-8431-f8c468cae826",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "2835b557-1c2e-4b28-b297-8558206872d8",
          "status": "Created",
          "code": 201,
          "responseTime": 2716,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "efebcf54-984c-490b-b179-e60ee8623f82",
        "cursor": {
          "ref": "95f87e22-1dde-46c9-b97b-a28de03b34a6",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "6df5843d-5976-4a05-b85e-bbd919aa94fa"
        },
        "item": {
          "id": "efebcf54-984c-490b-b179-e60ee8623f82",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "34ae434a-7a73-4eb8-be9f-e373a2e1aa63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8359b84-d6a2-4942-9f3b-4edfa8462ba8",
        "cursor": {
          "ref": "cb1aa4f0-f1ea-4b9d-b4a5-eb73ee096e08",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "55a5b514-a3fb-4fca-af1b-152bd778f21e"
        },
        "item": {
          "id": "f8359b84-d6a2-4942-9f3b-4edfa8462ba8",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "8b2f7f30-09ac-4d9a-b09c-ebdf3edd7eef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54eeab47-2f72-4f6f-a70e-0d5da552854c",
        "cursor": {
          "ref": "e85b10d4-62df-48cd-8f87-ea5cabacd77f",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "e565d62c-89e3-4609-b2f7-75ef7011cb27"
        },
        "item": {
          "id": "54eeab47-2f72-4f6f-a70e-0d5da552854c",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "23798030-90ec-4bcf-8d5b-ce2b59131724",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79cc951e-bcf7-41c2-a6f5-c05c518ca31d",
        "cursor": {
          "ref": "d08c8ad3-cba8-47eb-80bd-54f028dd743f",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "d8f293f5-0cdc-48db-afcc-2f30f79f2484"
        },
        "item": {
          "id": "79cc951e-bcf7-41c2-a6f5-c05c518ca31d",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "76d49920-1e79-4c89-a64a-b373dde11aef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "089de157-7104-4317-b8ea-70a832bb18ad",
        "cursor": {
          "ref": "1a6ff70b-78a6-46f2-a683-0fd149712fc3",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "196783e8-7e17-4640-8d67-e3b897dc80af"
        },
        "item": {
          "id": "089de157-7104-4317-b8ea-70a832bb18ad",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "96a47deb-bbdf-416b-8217-32127587418f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c6c9f4c-784c-466c-853c-a90fc68a98ea",
        "cursor": {
          "ref": "d8779ac4-0084-48cd-87f9-53189f5a3688",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "177645f2-6628-4266-9a0b-d73e2e17149e"
        },
        "item": {
          "id": "3c6c9f4c-784c-466c-853c-a90fc68a98ea",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "e4bb61dd-f006-44da-b09a-40ccca719045",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c75393ff-3f31-46a8-b9e4-56e8f380a2ad",
        "cursor": {
          "ref": "ee8ac78a-1080-4f6f-9106-1c679eb2d4f6",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "70f62de1-153c-42b2-94c6-1b454bb2481e"
        },
        "item": {
          "id": "c75393ff-3f31-46a8-b9e4-56e8f380a2ad",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "9afc938b-40d1-4199-93a5-d0331d926127",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fc88b18-9dea-4b6a-8e0e-a6ea58d68291",
        "cursor": {
          "ref": "c50fc17e-b5f8-4f1c-b732-7cdf1849608e",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "b90c3821-cd17-489d-bd0f-ad9c94fa4d7e"
        },
        "item": {
          "id": "9fc88b18-9dea-4b6a-8e0e-a6ea58d68291",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "c9b0fd64-4f1d-46c4-a687-a96f4ea8a423",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9135e30-1eda-4fad-a708-c4bebf276eb3",
        "cursor": {
          "ref": "4bac1f30-3e4f-4ed9-81bb-535fad359dca",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "60fb15da-e452-45f4-be1d-13e3b625571b"
        },
        "item": {
          "id": "b9135e30-1eda-4fad-a708-c4bebf276eb3",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "871e66ef-4e3a-4864-880e-ba44652f7e57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c667c324-cc3e-4219-8654-7183668b9bf4",
        "cursor": {
          "ref": "c7177700-6091-46f6-94c5-0a373a5b902a",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "c835e5b9-1ed0-4546-ad7e-2742435b7c8c"
        },
        "item": {
          "id": "c667c324-cc3e-4219-8654-7183668b9bf4",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "5ba17aca-d07a-4c14-9db5-0161e88a18da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb0d346a-7b87-4484-91b4-fe53b6266ab9",
        "cursor": {
          "ref": "7bb02304-473d-40a6-9e67-deec704fa7e5",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "f3d7fe86-bf6e-45c6-bd4d-584d23a1dfd8"
        },
        "item": {
          "id": "eb0d346a-7b87-4484-91b4-fe53b6266ab9",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "d431248a-a213-44f9-85d7-35339dcb9712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9ec97cc-2718-4187-9cf0-e9e7c77dd238",
        "cursor": {
          "ref": "b2481213-85b9-4c28-9d8a-2b1917d67f2a",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "7c97cfba-da08-4c14-919b-2cb62c260eae"
        },
        "item": {
          "id": "e9ec97cc-2718-4187-9cf0-e9e7c77dd238",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "97a29f99-7dd6-4081-8c3d-544722d86a58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef19290e-4ba1-497d-8ae7-8d92aa438f6a",
        "cursor": {
          "ref": "3f4a29d7-3edc-429c-bcf9-db005dd1838e",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "e4ae93a5-b8c3-4159-ab05-d8b2cf357f31"
        },
        "item": {
          "id": "ef19290e-4ba1-497d-8ae7-8d92aa438f6a",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "9b7bb848-020c-416a-b77f-a154339b3c9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67a5057b-a22a-41fd-b750-05a1f905c32f",
        "cursor": {
          "ref": "bf4d334c-6e80-46f9-bbdc-6b93e9d8d323",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "a75884fc-8728-415e-85ef-b5dcc5d0e5e2"
        },
        "item": {
          "id": "67a5057b-a22a-41fd-b750-05a1f905c32f",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "b0c1eea8-4bc1-49de-b4fd-5431286198fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7faf311a-cdbb-4fde-ab06-96aebd21ef06",
        "cursor": {
          "ref": "f9d089ea-e082-4f0f-86bb-2733e03c0bf3",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "a4d25b42-7515-4707-836f-e94104017292"
        },
        "item": {
          "id": "7faf311a-cdbb-4fde-ab06-96aebd21ef06",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "da99a122-a4d1-459e-92bd-01dcc6fe6e1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3de81141-5a4a-4151-93c1-0de61abcad7a",
        "cursor": {
          "ref": "9548db33-867a-4c31-b9f2-57fcc53b56f2",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "8e370a2e-bd1a-4c4d-9708-9b977e02cd14"
        },
        "item": {
          "id": "3de81141-5a4a-4151-93c1-0de61abcad7a",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "0ac273de-1956-45f8-be0b-3cddc22f1ee5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0a8aa26-3766-462c-a382-593f15efa537",
        "cursor": {
          "ref": "0eb7296d-b0f4-478d-9096-1fd906eb5aab",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "0788f6f4-18bb-4e77-979a-9dc1a2e49ddf"
        },
        "item": {
          "id": "a0a8aa26-3766-462c-a382-593f15efa537",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "1ce4f961-7583-4ba3-b723-1e5893e09f2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f29d5ca-43da-46a7-8d5c-d252eeafeca0",
        "cursor": {
          "ref": "9a89596d-0b1d-4fc3-bf99-e4d3d6a04a7d",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "ff6957b5-ae9c-4558-a1c7-d4aa2bb06f78"
        },
        "item": {
          "id": "1f29d5ca-43da-46a7-8d5c-d252eeafeca0",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "6f3581a1-7223-438e-adbe-c587e57e09b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "244e0d48-faee-431b-bdbc-bd8bd762581f",
        "cursor": {
          "ref": "9f53f8d0-f813-4254-849a-fd5a2a97ccb0",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "da5e1766-20c1-45a8-b785-4bbb2aae15ec"
        },
        "item": {
          "id": "244e0d48-faee-431b-bdbc-bd8bd762581f",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "5d4e6fbd-272a-40a4-b18d-69711171e5d1",
          "status": "Created",
          "code": 201,
          "responseTime": 2597,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "62bff84e-f798-426c-89ec-fad2a5ee17cd",
        "cursor": {
          "ref": "91370c7d-6ab7-4d40-ad2a-8a6519f74675",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "64fcc36f-293a-4572-bdba-6d42c7dd5d73"
        },
        "item": {
          "id": "62bff84e-f798-426c-89ec-fad2a5ee17cd",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "8e05f804-79f7-4bb5-a4b6-22de59bb807f",
          "status": "Created",
          "code": 201,
          "responseTime": 2468,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "ac7415b8-a481-4e2f-b44c-97f0bd1e153f",
        "cursor": {
          "ref": "9bc95dec-d640-4f16-a59a-0763daa8c968",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "d493ad86-a341-411b-adc3-e096ee46431a"
        },
        "item": {
          "id": "ac7415b8-a481-4e2f-b44c-97f0bd1e153f",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "e1c184c8-9d41-4dea-80d6-f66cb3f3c527",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "703aa56d-69cd-4334-a021-10d4db7dfc5a",
        "cursor": {
          "ref": "228d58be-9c27-40c5-ac92-b628c3498d0f",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "b3b6e272-b326-441b-b734-8a65ef3f2cbb"
        },
        "item": {
          "id": "703aa56d-69cd-4334-a021-10d4db7dfc5a",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "136c18fe-ec67-4c51-80cf-5e8820ba987a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daf8123a-72f1-45e6-a3ca-845a66fb5aed",
        "cursor": {
          "ref": "059cf813-8fbc-4414-abb0-4e25a108a2f6",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "49d89dc9-fcce-41a9-a30f-bd69c53661ce"
        },
        "item": {
          "id": "daf8123a-72f1-45e6-a3ca-845a66fb5aed",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "35dbb53d-8683-4fa5-96d6-0f70254d4e69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e982c74d-5408-493f-abfc-2a23659740f5",
        "cursor": {
          "ref": "d2782638-b81c-47ba-8227-a6000cd68e82",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "e3aef212-0010-4cc3-bfc8-d22391f6d595"
        },
        "item": {
          "id": "e982c74d-5408-493f-abfc-2a23659740f5",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "e171141b-13df-4861-bc54-ff202fe46670",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "651b2acf-ca64-4b2a-b0ec-0743bdcb5cd0",
        "cursor": {
          "ref": "d3e342f1-34a5-4da8-b5d4-f0ca40cb3d5c",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "d6f6c36f-8cbf-431c-aaf9-32b8f6035414"
        },
        "item": {
          "id": "651b2acf-ca64-4b2a-b0ec-0743bdcb5cd0",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "85bbe154-c2a4-4376-ad6b-041fafb7e64b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "254a5967-df18-4ccb-bd6d-7717a62b290f",
        "cursor": {
          "ref": "93c62efd-3f88-44b7-9598-6f982c01da09",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "7747c300-671e-4906-8f1c-81ec21ec7cfc"
        },
        "item": {
          "id": "254a5967-df18-4ccb-bd6d-7717a62b290f",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "ad424797-260f-462a-b2ca-38832bdad3c9",
          "status": "Created",
          "code": 201,
          "responseTime": 2218,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "339b5b60-7cb7-42af-86af-f5a5ff828a4a",
        "cursor": {
          "ref": "602c5e75-f2f5-4152-9378-41731becf5cd",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "e9ec6042-dd09-49c5-82f4-7881b48f4f74"
        },
        "item": {
          "id": "339b5b60-7cb7-42af-86af-f5a5ff828a4a",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "ea18a0c1-4f0d-4137-be6d-57dedb5a5bf4",
          "status": "Created",
          "code": 201,
          "responseTime": 2257,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "18c42337-3a3c-4ec1-a5af-8ecabf521205",
        "cursor": {
          "ref": "80a95110-c41a-47da-a514-d677ae53af0e",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "70340add-bb3d-4309-8347-5d3f818dc5e2"
        },
        "item": {
          "id": "18c42337-3a3c-4ec1-a5af-8ecabf521205",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "5743ebca-84c2-4ea6-b6ae-187af3363e9e",
          "status": "Created",
          "code": 201,
          "responseTime": 2605,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "b58c06b4-7581-4038-93ab-d08df8e2b1ea",
        "cursor": {
          "ref": "0b81b317-24ae-4360-a641-7cdd1f7dd66a",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "b9ae6781-c5a6-4361-87b8-6f4cc062ba8d"
        },
        "item": {
          "id": "b58c06b4-7581-4038-93ab-d08df8e2b1ea",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "f189877b-91e6-4f59-8007-2b32a310640f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "353f6cdb-c40a-4931-ae46-2969fd267bf7",
        "cursor": {
          "ref": "fc6d463d-50b2-4800-b3d8-f92d687b064a",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "3eac6f18-4c28-4c84-8575-aad9c2e6e8d4"
        },
        "item": {
          "id": "353f6cdb-c40a-4931-ae46-2969fd267bf7",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "55dcdad2-6fde-4bd1-b60c-36767c2c7e5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5b9c251-2c5c-42f3-bfad-fb840599e7b5",
        "cursor": {
          "ref": "28ce5e73-396e-4c68-876d-2f7ce86a29b3",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "838b2114-cc36-4b42-9dd7-128c3277837e"
        },
        "item": {
          "id": "a5b9c251-2c5c-42f3-bfad-fb840599e7b5",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "bcb0250a-ab58-4237-ac47-1f61c231d37d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6958997d-8d54-4a08-8aa9-ae333ea6b5b6",
        "cursor": {
          "ref": "a355284d-367b-4c8d-bb2b-4d8a0ac6ef9e",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "f26e62eb-051d-40f0-bc59-7a7857f72efb"
        },
        "item": {
          "id": "6958997d-8d54-4a08-8aa9-ae333ea6b5b6",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "93f4d0be-5ad0-472d-ad13-8989f9a5d335",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d108ec2a-f2cb-4e67-9fc7-9e4bf1ebcd91",
        "cursor": {
          "ref": "2b2972f7-4ef8-4db9-92e3-f19624775154",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "c1a7baa0-7382-42b5-8882-2c4de148da74"
        },
        "item": {
          "id": "d108ec2a-f2cb-4e67-9fc7-9e4bf1ebcd91",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "1fc37e8d-ff24-4183-8bc3-b5e4ac116edf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0af8401b-50b4-4abb-9d72-5f765fd16293",
        "cursor": {
          "ref": "c4b0078a-27ae-4aae-8890-5b230a89bdea",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "f65a7dd1-981a-44ee-85cb-dd51c4a416cd"
        },
        "item": {
          "id": "0af8401b-50b4-4abb-9d72-5f765fd16293",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "5b6d97b1-7ce8-4c4d-be68-c2e67801a31c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89b26027-ce4a-4e31-8b4e-003c5267f1aa",
        "cursor": {
          "ref": "41dd82d2-d4e7-4ada-bca9-764a70829aa9",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "8365a9a3-f9a6-4c07-804a-a7bd1ed68077"
        },
        "item": {
          "id": "89b26027-ce4a-4e31-8b4e-003c5267f1aa",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "7aac2975-5d45-4866-bbc9-41af1010fcb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0adbc8ea-5966-49aa-820f-8e40fed5bdc5",
        "cursor": {
          "ref": "2b106719-55df-4555-afc1-c0944b5b3f5f",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "3b0db4dd-d6b5-40b9-9c2c-73a9cfa406f9"
        },
        "item": {
          "id": "0adbc8ea-5966-49aa-820f-8e40fed5bdc5",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "28cc7850-8a85-474b-95f1-756427ecd653",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82d1aada-afa0-42e0-92c9-b10873f710be",
        "cursor": {
          "ref": "44d99d4d-fa16-4f35-aede-24d7f60d44de",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "5739f7e8-9033-40ad-bb64-fe4f3ab34c64"
        },
        "item": {
          "id": "82d1aada-afa0-42e0-92c9-b10873f710be",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "acb598fe-4f14-458f-be78-0ef42484810d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d612d9d9-f6b4-466d-84c1-2b4534de236a",
        "cursor": {
          "ref": "eab13792-b925-413d-b4c3-2eb2d99e7199",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "a8d5d99c-bf88-403f-b782-ecfe1301a13f"
        },
        "item": {
          "id": "d612d9d9-f6b4-466d-84c1-2b4534de236a",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "5afde41c-6faa-4e2f-8082-9c408d3d4eea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c7caf80-487b-470d-9850-0026761e38d9",
        "cursor": {
          "ref": "241bb2cd-62df-4c67-b57c-f79e3588834c",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "df261830-4795-4628-8ae0-138b1d4d8f19"
        },
        "item": {
          "id": "1c7caf80-487b-470d-9850-0026761e38d9",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "10d6266b-ddf8-4b21-9713-ffb34a40fe3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbdb36cf-e6d3-4169-9818-50e366ee06a2",
        "cursor": {
          "ref": "967b9c7a-a947-4e9b-9e7a-abc3c2c46cdc",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "8c016fab-87d3-4af2-a04f-17a2189a34ca"
        },
        "item": {
          "id": "fbdb36cf-e6d3-4169-9818-50e366ee06a2",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "5e8acf54-8420-49a4-9aea-f3c36cc3b2a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23b01bf8-c999-40f5-957b-ec36fc2d5086",
        "cursor": {
          "ref": "4f9b35ab-1162-4b03-aa0e-df79e14365dd",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "46008cc3-5b32-4723-bcb3-99560bf0e10b"
        },
        "item": {
          "id": "23b01bf8-c999-40f5-957b-ec36fc2d5086",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "08450f17-3461-479b-a033-b5c33a6be482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd0a726a-14d8-40c9-b4bd-a55cb795ec66",
        "cursor": {
          "ref": "47616cdd-7766-426e-8237-c29afda881db",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "3abd2cae-71c7-48c2-87f0-82bc14064f46"
        },
        "item": {
          "id": "bd0a726a-14d8-40c9-b4bd-a55cb795ec66",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "f5f28c3c-0bd6-42a3-88b1-e9f6f025d62a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6196072-ab8a-4318-9b92-211240e70a77",
        "cursor": {
          "ref": "53e0bbae-a402-40da-8ef3-4d8f49c182f6",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "bbe405aa-6e33-490d-b779-8405da672227"
        },
        "item": {
          "id": "e6196072-ab8a-4318-9b92-211240e70a77",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "92f0a4c4-4a9a-4f70-92ff-59a5d20c66d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "846baa55-ffc7-483f-bbd9-6d71ffaf3308",
        "cursor": {
          "ref": "c06504b2-50d1-434e-9b8b-7c9a4af6f8e5",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "81f9de77-7195-4083-a455-9a75e75ede85"
        },
        "item": {
          "id": "846baa55-ffc7-483f-bbd9-6d71ffaf3308",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "84cf11a6-db78-436b-a35e-e06027005bd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91b32c85-fb6f-4ac9-9e5a-447b9dffbb3c",
        "cursor": {
          "ref": "eeccf1d2-1ee4-41c0-9827-9651ff5b7a82",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "06c5c5b5-3617-4570-a10b-6ea3ff86f301"
        },
        "item": {
          "id": "91b32c85-fb6f-4ac9-9e5a-447b9dffbb3c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "f40c24ad-1c82-4065-a6df-c7d03575859b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24001ded-20af-4ee7-b46b-bc7cd101911b",
        "cursor": {
          "ref": "a3e9e2d7-a3c5-4ee5-aaca-ac332fc1e5d5",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "c0903a96-868b-4544-a2e3-6bff7bca329e"
        },
        "item": {
          "id": "24001ded-20af-4ee7-b46b-bc7cd101911b",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "90c46a36-f96e-4e38-8c46-dce790d1f621",
          "status": "Created",
          "code": 201,
          "responseTime": 2511,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "0f9b0d82-6c29-40ae-9ea3-c0c561ff5eeb",
        "cursor": {
          "ref": "7929e829-49aa-48b6-9515-b22922b4c34a",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "0abf94ff-c096-4b0f-850b-70988477e2d7"
        },
        "item": {
          "id": "0f9b0d82-6c29-40ae-9ea3-c0c561ff5eeb",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "8a1741e5-900b-4478-8aa4-3980707e9cdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a470aad5-050e-444a-a394-fd22d7e713ea",
        "cursor": {
          "ref": "129c9769-c795-404c-b1db-9e11ed437420",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "f4ff8646-1c18-4b1e-a0c6-53183de547cc"
        },
        "item": {
          "id": "a470aad5-050e-444a-a394-fd22d7e713ea",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "bc668c98-3cf0-40b4-b31d-e64bc5e38c65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfbe6e78-dee3-4fc0-b4b1-52e387eb02b6",
        "cursor": {
          "ref": "2c8694c2-f6cb-4bee-a9b6-670837e6d862",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "e18075fa-4203-43fb-9116-ab78b58644fe"
        },
        "item": {
          "id": "cfbe6e78-dee3-4fc0-b4b1-52e387eb02b6",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "6ec6f1e4-27ab-429e-a2e3-8c1f2fadc001",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "814b5d7e-1217-4ffe-8c2e-93b628d8c204",
        "cursor": {
          "ref": "59c07e57-eb33-485d-9ff2-f24cd1b2414a",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "d45110e1-07fe-40c0-bfe1-5b113e78940a"
        },
        "item": {
          "id": "814b5d7e-1217-4ffe-8c2e-93b628d8c204",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "4765b888-4964-4ca4-a816-9aeb23c5f955",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86e6ce14-f9fd-420c-9330-9682dcddfb05",
        "cursor": {
          "ref": "23b8fb7c-9320-4645-9bdb-46d541cf28c2",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "462bdbe2-5bc3-4580-b453-ebe7a2b6d5f7"
        },
        "item": {
          "id": "86e6ce14-f9fd-420c-9330-9682dcddfb05",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "d54e6713-c9f7-4109-bf7d-6ae7415ad0c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "122eeaa9-ca42-4dfd-8ad5-fbce4d875ba8",
        "cursor": {
          "ref": "edff42f3-eeaf-4d9e-91d6-118e3826a662",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "aeb4b9ed-7397-4dfa-9f93-60b776b7834e"
        },
        "item": {
          "id": "122eeaa9-ca42-4dfd-8ad5-fbce4d875ba8",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "f786afd5-8e99-4a4b-a0cb-be3d2a2495ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "805d1416-9a14-4f2e-b032-180410869f1e",
        "cursor": {
          "ref": "2e8b707a-f9e9-4879-8fbf-4c336f86d504",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "64e72a81-631e-4e82-bed8-8b92ebb861c7"
        },
        "item": {
          "id": "805d1416-9a14-4f2e-b032-180410869f1e",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "b606d3f3-7c5b-41f9-bc38-ab1bbc022162",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2392b1f7-cb1d-4997-b727-85c9d3649792",
        "cursor": {
          "ref": "b1032057-d8c3-47d0-9636-05b50747e2fd",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "9c833374-3588-4809-8b98-17da2f01926d"
        },
        "item": {
          "id": "2392b1f7-cb1d-4997-b727-85c9d3649792",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "5fcac590-aab0-4d3c-805d-2ac54236a1d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "500505aa-7332-44e7-9f36-3c60a9b5cf36",
        "cursor": {
          "ref": "851bdac2-68fe-4ca0-a62c-d69e8dd1783b",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "11e7e965-ca67-43f6-8639-58b1530f1119"
        },
        "item": {
          "id": "500505aa-7332-44e7-9f36-3c60a9b5cf36",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "252591ea-d2f5-4104-889a-ac4d7bbc5590",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b180f93c-2f85-4cb9-be79-7ec835170d22",
        "cursor": {
          "ref": "32102fce-f167-43db-965b-1a00cdd118e7",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "64f0be54-6e64-4ab4-9f95-68965748a3b2"
        },
        "item": {
          "id": "b180f93c-2f85-4cb9-be79-7ec835170d22",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "e85d705c-9a26-4873-aa0e-7be73ea28e3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9de1bb78-7361-4e9c-bb9d-05f74ce3c1c9",
        "cursor": {
          "ref": "bb22734d-1727-4109-8b2b-a25da003deab",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "895c3cd5-8d11-4ab6-9efe-23a5d04f312b"
        },
        "item": {
          "id": "9de1bb78-7361-4e9c-bb9d-05f74ce3c1c9",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "f9b0f98f-4bae-48ed-8732-046a5b009dc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ae4c411-feb6-4f0d-876f-ba831fab5eae",
        "cursor": {
          "ref": "bb48c679-73ed-49f9-b8d1-96b57135a6b8",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "751a5c7a-ae35-4923-8c37-048a483f3040"
        },
        "item": {
          "id": "6ae4c411-feb6-4f0d-876f-ba831fab5eae",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "2dedb40f-e39c-48dd-a3d7-faf065a91f1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "975b48c8-e6fc-42f7-b594-630968431f93",
        "cursor": {
          "ref": "adc57d17-d7fb-4295-9893-ee658cfd6e5c",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "2e3b94ce-4085-4577-95fc-3af5c75d9595"
        },
        "item": {
          "id": "975b48c8-e6fc-42f7-b594-630968431f93",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "869c20d4-51e5-477b-8f8b-3be31252f466",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79bc2a44-7c7f-4dfa-be71-e4a31b6f93f1",
        "cursor": {
          "ref": "0f741822-8dec-42f9-a588-a372270bfa10",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "073e1abd-a3f5-47f6-961a-9711142b43ca"
        },
        "item": {
          "id": "79bc2a44-7c7f-4dfa-be71-e4a31b6f93f1",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "9ac33596-82c3-4924-8e21-99069595f9c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6a60d59-bb88-4833-bf86-b6b3582cd018",
        "cursor": {
          "ref": "d71a4d2f-767b-45e0-8014-659a6eb77bdf",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "40fc2f76-4adb-4951-aa85-438cf3188087"
        },
        "item": {
          "id": "f6a60d59-bb88-4833-bf86-b6b3582cd018",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "8404f301-d351-4f22-b2f8-e43d060d269a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2c7682f-82a0-44d5-a7d9-7e2ef1532fff",
        "cursor": {
          "ref": "ad3bc12a-f2c3-490a-b346-177347c39f1e",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "08c4f154-dcb4-4511-b677-7c61e993afef"
        },
        "item": {
          "id": "e2c7682f-82a0-44d5-a7d9-7e2ef1532fff",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "607e37f6-1424-4d02-a8a1-996a908a9ec6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f769f7e-60eb-495d-99fa-ed4ae4dee9fc",
        "cursor": {
          "ref": "5f716254-8350-4e77-8f2c-e60bc16b3486",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "b4255bc8-9142-4384-ac5d-7b75a9a823a9"
        },
        "item": {
          "id": "5f769f7e-60eb-495d-99fa-ed4ae4dee9fc",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "dfb4780d-caa4-4ca5-9154-a1d4f876492d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "905b92f0-ce36-433b-ae50-b9c231b20fef",
        "cursor": {
          "ref": "fe9af993-bbb1-492e-a205-4039b6b71cb8",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "03004633-4e48-4eda-bec3-9235c330248d"
        },
        "item": {
          "id": "905b92f0-ce36-433b-ae50-b9c231b20fef",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "b5e0f1b7-98ff-45d8-8fc8-f57c7ad7596c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5922d49e-1abc-4caa-96f5-6b7388254622",
        "cursor": {
          "ref": "4005395c-2a7f-4652-a1a0-43f815b4efe2",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "443f3555-7efc-401a-bbb7-61996b313f09"
        },
        "item": {
          "id": "5922d49e-1abc-4caa-96f5-6b7388254622",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "23d22fab-79a3-4be4-b053-8b362cd5be70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06175714-8352-40df-94d5-282ff0769fd6",
        "cursor": {
          "ref": "23dc2334-454e-4da7-91ed-d1ddd62705aa",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "8cf802c3-765a-43e3-a2e0-a72af2a1adcc"
        },
        "item": {
          "id": "06175714-8352-40df-94d5-282ff0769fd6",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "61719b96-51c5-4aee-8b87-01bcbe04eee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "285e0a76-4c9a-4ac3-8c8b-0d00b9404fad",
        "cursor": {
          "ref": "8cc34684-50c6-46b9-baad-59147ba80d81",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "884dcfa1-6151-4935-b713-8763b7893592"
        },
        "item": {
          "id": "285e0a76-4c9a-4ac3-8c8b-0d00b9404fad",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "093dd0bc-f1c9-444b-8571-df8881f54fe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ab44924-1b55-4ef5-b5f4-281fda6b031e",
        "cursor": {
          "ref": "85b36240-46ae-4b12-827f-649d9693b6b3",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "43136633-40dc-487b-9153-bd7fc538787b"
        },
        "item": {
          "id": "1ab44924-1b55-4ef5-b5f4-281fda6b031e",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "36a11748-dd37-4ce7-b2b9-8d4f65192b5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98a9ffa6-3d5a-4bfb-9e52-ede0323ecbce",
        "cursor": {
          "ref": "0780beb6-7160-4ec3-97bc-c1282423f88c",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "a8154d89-8754-402d-9116-702dc0209020"
        },
        "item": {
          "id": "98a9ffa6-3d5a-4bfb-9e52-ede0323ecbce",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "40c4a394-3aa2-489a-aaf1-1f250ee10b4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f51df0e-c74a-46a2-8527-229c5e72271e",
        "cursor": {
          "ref": "255d2949-f19d-41ad-8e33-f9487c1ade36",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "b862fcc3-c83d-4fd3-a406-d830415c8108"
        },
        "item": {
          "id": "0f51df0e-c74a-46a2-8527-229c5e72271e",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "ef54e12d-a31f-4976-8840-d06e1c05d66a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da5dfd90-1238-43aa-a71a-2835bf60e0de",
        "cursor": {
          "ref": "24792115-3780-4c46-8631-17b01183801c",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "dd592890-8504-42c5-b843-352a8a19bee0"
        },
        "item": {
          "id": "da5dfd90-1238-43aa-a71a-2835bf60e0de",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "c5ed2f50-9cf4-4d78-8ace-ca82e3fa24c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ff75418-01f8-4733-826b-3bf91772f9a4",
        "cursor": {
          "ref": "bd3c0e0c-d29e-469e-a1de-9a2fe25b7cfa",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "c3b94e81-0e0f-4083-85bd-2bd56dd8d1d9"
        },
        "item": {
          "id": "2ff75418-01f8-4733-826b-3bf91772f9a4",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "38605b53-5d1f-4c89-80d6-308272e8d83d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "955736ef-07f9-4763-b6f6-90f7f7374eaa",
        "cursor": {
          "ref": "2f731e35-3f78-4113-987d-24f78cf47a7e",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "87963cff-a3fd-45c1-b40b-3280bbf1365a"
        },
        "item": {
          "id": "955736ef-07f9-4763-b6f6-90f7f7374eaa",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "251be860-93ad-4b77-9cc4-f7b9028b44c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5e57dd6-142d-4e78-8b5f-6a116ad62d17",
        "cursor": {
          "ref": "0dc89317-3e89-4357-bcd4-6bcc0bd97551",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "54713abc-af07-4e22-9969-e0490a456924"
        },
        "item": {
          "id": "d5e57dd6-142d-4e78-8b5f-6a116ad62d17",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "6b18b5d0-f08b-45c3-b09b-ef1caa0f7651",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "093e5864-284e-4b3b-b0c4-ab64f1b596d6",
        "cursor": {
          "ref": "be1a5bce-2867-4d0e-8c8f-efbecbb17040",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "47ff3b1d-cff3-4cd4-8ef7-548c229ce0b4"
        },
        "item": {
          "id": "093e5864-284e-4b3b-b0c4-ab64f1b596d6",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "c8022500-ebd2-42c4-8eb0-cd1ab4c43552",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "337c3e2c-0ddb-44a0-9ed1-e521ccea6fc6",
        "cursor": {
          "ref": "a5a92214-49bc-421f-843f-632ef5b04cda",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "db6ac4e2-f9d7-4796-a053-4bfa01e177ee"
        },
        "item": {
          "id": "337c3e2c-0ddb-44a0-9ed1-e521ccea6fc6",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "680cdbc7-8b0b-4b2b-8924-6bb3567a09fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "810c09ac-59d7-4f67-886b-e04fb0789eef",
        "cursor": {
          "ref": "212c6c56-da32-44ee-a757-c677bbe2c80e",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "ceb3e5eb-9007-414b-9c50-f7d4f92c2f81"
        },
        "item": {
          "id": "810c09ac-59d7-4f67-886b-e04fb0789eef",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "3b0f5e5a-645b-4df0-98a3-040fb04e4260",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "11ad30ab-7a30-456a-80cd-939e8f6fe768",
        "cursor": {
          "ref": "1f340cfe-516d-4ba3-a968-5698b2951bbe",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "eae6b8bf-faf2-43b1-bb5d-b47ee25ddd38"
        },
        "item": {
          "id": "11ad30ab-7a30-456a-80cd-939e8f6fe768",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "af1e6e41-15e5-4628-96e7-9e19d3b8d7d8",
          "status": "Created",
          "code": 201,
          "responseTime": 1801,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "01491a4d-15dd-46ce-9362-3c32e2eca594",
        "cursor": {
          "ref": "0b126c41-4648-42e5-a4fa-3d2c2ce19190",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "6666aabe-cd0e-467b-8ab8-8931cfd63a8c"
        },
        "item": {
          "id": "01491a4d-15dd-46ce-9362-3c32e2eca594",
          "name": "credentials_issue"
        },
        "response": {
          "id": "f522c4ec-0753-4917-9d40-cd409cb6adf2",
          "status": "Created",
          "code": 201,
          "responseTime": 2281,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d473494-8799-491a-84ed-7fd19238bbd4",
        "cursor": {
          "ref": "2820a0ee-94ec-4825-9060-080d28595cab",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "7e920d7c-8cc4-4d47-8468-1610ef89d65e"
        },
        "item": {
          "id": "8d473494-8799-491a-84ed-7fd19238bbd4",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "d6bf2004-6a5e-4170-9448-10d60c7f38a1",
          "status": "Created",
          "code": 201,
          "responseTime": 2189,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "85b73ea7-c116-40e1-94c7-ad372585ff68",
        "cursor": {
          "ref": "27820cd2-7d21-4dea-bbbe-e8d295d21a5b",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "a4b97bdf-37bc-4847-87f3-bc8d2dc9739c"
        },
        "item": {
          "id": "85b73ea7-c116-40e1-94c7-ad372585ff68",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "3952ad18-e2d0-4f75-95bc-1c72abe8cedc",
          "status": "Created",
          "code": 201,
          "responseTime": 2262,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb7587e1-dfa0-4af1-8fd1-90a8e6d9ff5c",
        "cursor": {
          "ref": "3ae940dd-bfb5-40be-a4d0-1285af55e761",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "8d031737-f20c-4253-b9ec-5ff8f5712e1c"
        },
        "item": {
          "id": "bb7587e1-dfa0-4af1-8fd1-90a8e6d9ff5c",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "186fc703-3fe1-49c2-b6b6-0b65349829a0",
          "status": "Created",
          "code": 201,
          "responseTime": 2348,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9994c620-1a11-4731-8250-a60d610f07a8",
        "cursor": {
          "ref": "07beb5e0-ae62-4e78-8e9e-2f0116a2d402",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "f5400d12-528e-48b0-9cb1-f8ba4b6c800c"
        },
        "item": {
          "id": "9994c620-1a11-4731-8250-a60d610f07a8",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "81421a19-066b-4dd1-821e-881c9ff87540",
          "status": "Created",
          "code": 201,
          "responseTime": 2240,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-04-07T00:33:47Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-04-07T00:33:47Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "a0486eab-e588-4c6d-a1d0-43603c869474",
        "cursor": {
          "ref": "44ba3e0d-096d-484d-b427-ffd6e5904583",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "6952f4f0-b98c-42ec-a9e1-9d7341776a2b"
        },
        "item": {
          "id": "a0486eab-e588-4c6d-a1d0-43603c869474",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "5c3bb8f7-5e7b-4273-877f-1153e3b1f0ba",
          "status": "Created",
          "code": 201,
          "responseTime": 2448,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eee7a09-fe5b-457b-9ed4-ddaef18e78f7",
        "cursor": {
          "ref": "fc3fadee-85fe-4a5f-8d56-9e8e823cee1b",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "db814846-be75-4172-8421-2daf1819e057"
        },
        "item": {
          "id": "5eee7a09-fe5b-457b-9ed4-ddaef18e78f7",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "115e6a9e-0548-4c59-b091-67718d0245b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eee7a09-fe5b-457b-9ed4-ddaef18e78f7",
        "cursor": {
          "ref": "fc3fadee-85fe-4a5f-8d56-9e8e823cee1b",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "db814846-be75-4172-8421-2daf1819e057"
        },
        "item": {
          "id": "5eee7a09-fe5b-457b-9ed4-ddaef18e78f7",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "115e6a9e-0548-4c59-b091-67718d0245b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da47c777-7e5c-471e-a368-39c290624215",
        "cursor": {
          "ref": "a4678a91-af3e-402f-a4b3-b8556712a1b4",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "332b8d59-5b86-406a-8c63-db5d38870a90"
        },
        "item": {
          "id": "da47c777-7e5c-471e-a368-39c290624215",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "300f18ac-915a-465c-ac46-7569eaccaf4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f9b7918-71da-43e7-8e15-490e6ae4450f",
        "cursor": {
          "ref": "583adfef-66e4-441b-ab69-43d0e3dd1d43",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "532630fb-3df0-4d32-9635-8ac8bd0c1172"
        },
        "item": {
          "id": "8f9b7918-71da-43e7-8e15-490e6ae4450f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "77a71c43-ebe4-4826-a5f7-ad0d388b7271",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4baf7080-654a-4ab2-bc6e-f9494670f965",
        "cursor": {
          "ref": "2d428034-c8a5-4cf9-b22e-7ebbb101a7b7",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "9a8eaf3c-c038-4715-8112-31e40fbc8741"
        },
        "item": {
          "id": "4baf7080-654a-4ab2-bc6e-f9494670f965",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "c7bb64df-e27c-40ad-a4c5-8f0ae3ac23ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98310d6b-ae35-4df0-a03c-f7d227c5b715",
        "cursor": {
          "ref": "db2834db-8b44-4b2b-8af2-99f617d4eee8",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f7647e7b-e66e-4035-8e6c-4eaf575899f7"
        },
        "item": {
          "id": "98310d6b-ae35-4df0-a03c-f7d227c5b715",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "b087ffab-a550-465e-a9f5-ff9785c2ebe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d53037a-929a-4e1e-b5e8-d19ec51dbea6",
        "cursor": {
          "ref": "dd57e3ab-1db9-4f89-bcb9-0b0f199d1f51",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "be8f6795-a2ac-4d22-875e-34e335cc2776"
        },
        "item": {
          "id": "1d53037a-929a-4e1e-b5e8-d19ec51dbea6",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "5d294480-18d3-4c59-b76f-98af71ba200f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c34139e0-f4d4-410b-ac96-b0bad3badef0",
        "cursor": {
          "ref": "37f441a7-6c57-499a-b912-8a0b239932cb",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "3806109a-09aa-4463-b02e-72b801acbfbe"
        },
        "item": {
          "id": "c34139e0-f4d4-410b-ac96-b0bad3badef0",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "64d844d4-2c51-42f1-95c1-5a75ee07d86b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db9e1557-f04f-44f0-9bc6-79d1d071f8f6",
        "cursor": {
          "ref": "671f4b00-bf98-42f7-b811-6c65bcb9ef68",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "cefb510e-64d0-44e0-8556-5856c91c5cf1"
        },
        "item": {
          "id": "db9e1557-f04f-44f0-9bc6-79d1d071f8f6",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "a0baa82f-4990-4ead-9e8a-71a6ad51ea65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d52fdb31-5a3c-44b8-8e98-f2c5c2e731f5",
        "cursor": {
          "ref": "ee68d18d-4db3-40dd-9789-f1f200bc5c96",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "3ec402f4-802d-4fa4-a8a7-325303a71623"
        },
        "item": {
          "id": "d52fdb31-5a3c-44b8-8e98-f2c5c2e731f5",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d40100c4-200c-44b6-bf8b-404ada7d45e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1575c416-ba1f-432a-a5e7-ef636fe0cd84",
        "cursor": {
          "ref": "37e755ee-0c01-42eb-8840-bdf502d9646c",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "d89e023f-da68-4067-8ae5-54eb73774018"
        },
        "item": {
          "id": "1575c416-ba1f-432a-a5e7-ef636fe0cd84",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "cabd5b14-1df7-4994-84ec-6c2cb18d432d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "873f61ff-c7b5-4aa5-98a0-9b666b6bf7ca",
        "cursor": {
          "ref": "45568687-4a73-4883-9566-39cf3c790c96",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "cd7eebb4-770a-4017-9b64-bcc4d88d6ea1"
        },
        "item": {
          "id": "873f61ff-c7b5-4aa5-98a0-9b666b6bf7ca",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "375770a9-ff8d-4ecc-9599-612c961f329b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "337c4ede-65d6-4ddc-ab3e-8d9ea7dac0a9",
        "cursor": {
          "ref": "a7f0c3b5-57bf-490e-9e75-ed9d79c8d0d7",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "54b8f8db-8188-4ce3-be5f-938c4ffd6891"
        },
        "item": {
          "id": "337c4ede-65d6-4ddc-ab3e-8d9ea7dac0a9",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c17d2901-a388-4157-b6e4-effeb125bc5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97c35a5a-26b9-495c-b364-e57628c624e1",
        "cursor": {
          "ref": "c5b92cbd-1889-4e5b-996c-ada4df865596",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "72a449ec-9247-46c5-8b70-e8096d5cba97"
        },
        "item": {
          "id": "97c35a5a-26b9-495c-b364-e57628c624e1",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "abf443ef-d4f1-46e0-89b6-7cc136004d35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7f0a5ac-acc5-4fcb-8f4b-b92441a1011f",
        "cursor": {
          "ref": "dc07fd17-3ec7-4598-b983-a8924c9d9314",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "fc4dd65f-8265-4334-b622-fc28397d7c99"
        },
        "item": {
          "id": "d7f0a5ac-acc5-4fcb-8f4b-b92441a1011f",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "02e25a86-3ce6-4d01-8e46-8a5df4923158",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e57e76ae-bc30-4c31-b138-9d8eb37ddf85",
        "cursor": {
          "ref": "c188e2a8-49aa-4f8b-a5fe-18f31f39196a",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "9d41d5cc-7480-4fb0-9461-223c2496afd9"
        },
        "item": {
          "id": "e57e76ae-bc30-4c31-b138-9d8eb37ddf85",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "bd58dd3f-f136-4219-88f5-43e929b81064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76926e80-686e-4a3e-a25b-da7288f84a12",
        "cursor": {
          "ref": "a27dbd17-83d7-47e5-b518-7ba9760e9e82",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "ce21d6ec-35d3-4417-89b5-967c963d56d3"
        },
        "item": {
          "id": "76926e80-686e-4a3e-a25b-da7288f84a12",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "e8e0cbd9-ca65-4768-aa1f-012a4ac49335",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99cd7d9d-97c6-4aff-b960-07c9bc492c2c",
        "cursor": {
          "ref": "cdc89cc1-237c-477f-8c40-fa431db77a6a",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "2344520c-1cf3-48e5-b01d-040f3407ed3b"
        },
        "item": {
          "id": "99cd7d9d-97c6-4aff-b960-07c9bc492c2c",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "fa419eaf-541c-4c5f-b013-2fa35990c8ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9d38250-adc5-4040-9735-42e8765da423",
        "cursor": {
          "ref": "c58bf15d-0d78-40d5-8692-0ffb46b69856",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "d7677999-7939-4296-b52f-691f15d2a108"
        },
        "item": {
          "id": "f9d38250-adc5-4040-9735-42e8765da423",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "740e31fa-acca-40b9-9d5d-bc72dfc2542b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "033455db-564c-4b70-a95f-afaab868b879",
        "cursor": {
          "ref": "4d100f56-f41a-4756-9c4f-8d43768156b6",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "208222a8-20d6-4b51-aacf-45508a37178c"
        },
        "item": {
          "id": "033455db-564c-4b70-a95f-afaab868b879",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d7e2b99a-26ad-4606-b94e-428881e095fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a350193-7f59-48e7-8417-9728e5881f12",
        "cursor": {
          "ref": "5e6a19ad-4aec-40e4-b604-1cb55b04ea84",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "114c5e74-8b58-4894-93a0-1f23bd8174f4"
        },
        "item": {
          "id": "2a350193-7f59-48e7-8417-9728e5881f12",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "9b5db096-5556-45d4-aaef-4b03c408b33c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d30eee1-8758-40a7-9a41-c032c21da0e4",
        "cursor": {
          "ref": "0d74b271-90ad-4068-90de-213edd4da108",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "1c5cb1cb-31f3-4501-a69b-c3a7e45eefff"
        },
        "item": {
          "id": "0d30eee1-8758-40a7-9a41-c032c21da0e4",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "2449fced-dd15-487e-bab2-e619f5bb7e07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ffe7169-524b-4079-b22b-3019602688e9",
        "cursor": {
          "ref": "dd4dba0c-65c0-4bae-b89d-c1e70316f551",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "77874435-db20-4788-8ae6-4a0c5c54ab2e"
        },
        "item": {
          "id": "9ffe7169-524b-4079-b22b-3019602688e9",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "08da60c2-a025-4ed0-9aa2-e0ff08853593",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ca51ebd-82ae-4a78-9171-9a4cd9a8e5e0",
        "cursor": {
          "ref": "74e66f23-ba2e-4da8-bdf1-3224db9162eb",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "9867f46f-ebbf-44a6-9b68-2cb29465d55f"
        },
        "item": {
          "id": "4ca51ebd-82ae-4a78-9171-9a4cd9a8e5e0",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "d7fa27de-b32b-4d09-b0a4-c16c7e773920",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f62e6e2-762f-419c-a354-3c46d7a1fd97",
        "cursor": {
          "ref": "68d74ccc-7799-47e6-95a2-6ca3a7e5f894",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "ae626a85-f50b-422f-ba61-d1d1d5a8e387"
        },
        "item": {
          "id": "9f62e6e2-762f-419c-a354-3c46d7a1fd97",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c50fb854-2a4b-42a4-b944-f0de5ac9db36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d43721d-0785-4ed1-a764-a9b9a05546a3",
        "cursor": {
          "ref": "52e52e26-4708-44bc-bcd7-28ca66ea3f2c",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "034e3d4a-5c3a-4f7d-b6cc-02b629631202"
        },
        "item": {
          "id": "7d43721d-0785-4ed1-a764-a9b9a05546a3",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "5fcd972c-b9bd-4da2-b173-cd49fe972476",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81351d11-2313-46de-84ca-943495317647",
        "cursor": {
          "ref": "ed950e01-d972-41ae-93ae-d2b90e05533d",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "413e160e-47e9-4e0e-aea4-a5cc1fa72db0"
        },
        "item": {
          "id": "81351d11-2313-46de-84ca-943495317647",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e7ea959e-0f09-4556-bbd9-b5eb6ea21fdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb2dc0b4-ede3-48f1-b72f-68b095509222",
        "cursor": {
          "ref": "f93c4773-0d24-484b-bded-96b135215366",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "406d5f5f-8ca8-4f23-b15b-dd8df74ad040"
        },
        "item": {
          "id": "bb2dc0b4-ede3-48f1-b72f-68b095509222",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "7f065830-4d34-4c03-ac67-54b60f71cd8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e84ffce-577f-4149-af60-1e13534cb801",
        "cursor": {
          "ref": "a4bb5b4d-aa76-4a36-a9ec-84892376830e",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "59b07d9e-3822-47e5-821d-ec9551d1c506"
        },
        "item": {
          "id": "4e84ffce-577f-4149-af60-1e13534cb801",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a6111066-08b2-42be-bd97-944f7f34f93b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bad15390-da28-4af2-a73f-a184c996e1ce",
        "cursor": {
          "ref": "dd64b5cd-c32b-4bed-b705-a6411f056031",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "4f786a21-8dcd-4c41-862e-c8d524f1446f"
        },
        "item": {
          "id": "bad15390-da28-4af2-a73f-a184c996e1ce",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b5f6adaf-9c9d-4db0-8236-1a7ec24a8798",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32023a3e-95ca-4a15-b289-6682eb2e911d",
        "cursor": {
          "ref": "242b1409-1b8b-45c0-8b6b-96eb5858b594",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "47aef4c7-1c50-404c-a3b8-0faea7e3ea1c"
        },
        "item": {
          "id": "32023a3e-95ca-4a15-b289-6682eb2e911d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "b384b85f-07b1-411c-9266-072c8b009caf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6189a6a9-7033-4be5-9b6d-52f9ddcbaa75",
        "cursor": {
          "ref": "935348ec-190c-4bb7-99be-eef791a1ee08",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "f99e17a1-f13b-412e-94aa-53f85d38bf75"
        },
        "item": {
          "id": "6189a6a9-7033-4be5-9b6d-52f9ddcbaa75",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "c4c0be3e-30c8-4592-b4b4-2013dd6ef722",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e8d5c58-0fa2-42d2-a81c-34ea6dbd0211",
        "cursor": {
          "ref": "c70452c0-f09b-4896-a139-82feaba7822f",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "0d9e96c2-9471-41f3-936d-bc2b48414f0d"
        },
        "item": {
          "id": "0e8d5c58-0fa2-42d2-a81c-34ea6dbd0211",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "cda5e830-aad6-4251-a1d1-9c47ee3e6478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fb54e08-3c84-4279-b1c6-9c1e34b920f3",
        "cursor": {
          "ref": "0fd6b366-5df2-42c3-b3f4-794ac1e4bb16",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "f065e3de-cf14-486c-b130-616ab1881d9f"
        },
        "item": {
          "id": "6fb54e08-3c84-4279-b1c6-9c1e34b920f3",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d0cb8431-d34d-42b1-92de-445b18a838e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "e56c1716-1e7c-4171-addc-78e0a552a16f",
        "cursor": {
          "ref": "ef499018-811c-4119-80b8-e1101c184333",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "cd43bf30-ae26-4a46-8e0a-7ea93ad77a45"
        },
        "item": {
          "id": "e56c1716-1e7c-4171-addc-78e0a552a16f",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "407b2bb6-2fce-45f1-9030-ff342d1882ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "7d8e94da-ce30-4ef7-a9dd-9b139ca1b6c7",
        "cursor": {
          "ref": "4a23f8c3-dac5-4715-977e-07b7226920a6",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "2f3d8182-13ff-4043-bb46-7a1171119105"
        },
        "item": {
          "id": "7d8e94da-ce30-4ef7-a9dd-9b139ca1b6c7",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ec20c70b-ab65-4b22-bfaf-8ad6e1b9745c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d8e94da-ce30-4ef7-a9dd-9b139ca1b6c7",
        "cursor": {
          "ref": "4a23f8c3-dac5-4715-977e-07b7226920a6",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "2f3d8182-13ff-4043-bb46-7a1171119105"
        },
        "item": {
          "id": "7d8e94da-ce30-4ef7-a9dd-9b139ca1b6c7",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ec20c70b-ab65-4b22-bfaf-8ad6e1b9745c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4da75852-212b-47a1-be8a-b23392dbab36",
        "cursor": {
          "ref": "9fb25970-2606-4749-9679-e5c144a6a99b",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "05ea2bbc-c649-41d4-9e03-4ae116c24733"
        },
        "item": {
          "id": "4da75852-212b-47a1-be8a-b23392dbab36",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "ffc3b8ff-3a57-49fe-8a74-b33bdf37d381",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b02772f-8fd9-4826-b7fa-9f4ff356a01b",
        "cursor": {
          "ref": "5c23ef83-057c-45fe-b87f-229d376e30ba",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "c475485c-79c3-47a4-bc8c-906b43cb2d76"
        },
        "item": {
          "id": "4b02772f-8fd9-4826-b7fa-9f4ff356a01b",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "dbd342d0-e2f2-45fb-92a9-fafe65ff9972",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f49d98a-6149-4894-8432-8bfb68840db6",
        "cursor": {
          "ref": "e8b6ce0e-c193-43ff-95f1-1c966f1d1af1",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "b83ddeae-cb12-4b57-b4eb-1b5beb758c56"
        },
        "item": {
          "id": "2f49d98a-6149-4894-8432-8bfb68840db6",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "1ec6c29b-1817-457c-aa77-206ee96a0544",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50f80cf9-5ac7-45bf-a013-83cc658001f6",
        "cursor": {
          "ref": "7924d87a-380a-43b2-9af8-b22974b716b2",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "1c5df1e3-0893-43f5-b738-8ee0115c0186"
        },
        "item": {
          "id": "50f80cf9-5ac7-45bf-a013-83cc658001f6",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "aeb63836-f250-4e83-b6e8-942322c9a871",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "225d272a-7fb4-45cb-bfc8-ae8e1033115d",
        "cursor": {
          "ref": "5436aba5-a10c-4daa-9ce9-b9c2dec6ca5d",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "7ddfc8f6-65ea-4205-9743-f6e3b27eb6c7"
        },
        "item": {
          "id": "225d272a-7fb4-45cb-bfc8-ae8e1033115d",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "36160259-ccd7-4a72-b894-b0516d5a3cd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66d0f798-3cc3-4b1d-9c9a-d2256147809a",
        "cursor": {
          "ref": "9c81acb0-cab2-447c-8d5b-003dfc8ec500",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "cc0c65f4-7adb-4197-adea-0796242ad8f8"
        },
        "item": {
          "id": "66d0f798-3cc3-4b1d-9c9a-d2256147809a",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "0eccd936-91a0-42a9-8364-1d57b6f1704a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2c64099-7dab-482e-8ed7-e35e9ed91113",
        "cursor": {
          "ref": "663208a8-262d-44dc-9a0d-f6a43116a165",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "ac093168-1d7e-4ad0-9a31-c68658ed3168"
        },
        "item": {
          "id": "b2c64099-7dab-482e-8ed7-e35e9ed91113",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "af50d844-3ebf-4e45-9c68-e5353a28659e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7631fda0-c7b5-4dc5-9fe4-744f91ab226a",
        "cursor": {
          "ref": "afb75a68-56c5-4879-a7ef-6c60dd1b6022",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "5cf13bfc-8a58-4525-8dd4-a8ff8a578f65"
        },
        "item": {
          "id": "7631fda0-c7b5-4dc5-9fe4-744f91ab226a",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "7d84df93-771d-4717-8c07-640e5b15b1f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93a4d547-f1cf-4c97-a892-8f64ff5dc790",
        "cursor": {
          "ref": "5e559298-aa89-4096-ac21-35e3c24214db",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "62f07736-3ad0-4e3d-bd55-a4734b1d46e8"
        },
        "item": {
          "id": "93a4d547-f1cf-4c97-a892-8f64ff5dc790",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "ddbca457-ce6a-4d7a-b7a1-6f135f9e6c54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f54de8aa-b43e-4ad7-9a03-90b85ec1f2bf",
        "cursor": {
          "ref": "6d1c46a9-02ca-42e4-b229-b6ef1fa6dbda",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "662b1a28-dd68-4f35-a959-f733324ff2b2"
        },
        "item": {
          "id": "f54de8aa-b43e-4ad7-9a03-90b85ec1f2bf",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "30980fb9-6da2-419a-9c85-6998b6cdaccf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c40ae76-c851-495f-a95f-4b4576bd79aa",
        "cursor": {
          "ref": "eeed094c-cc76-4d33-823a-fb077e451127",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "39fb3f37-6349-4e03-abce-c2f0041f36f7"
        },
        "item": {
          "id": "5c40ae76-c851-495f-a95f-4b4576bd79aa",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "662183a3-ffc6-4ffc-b4a4-84b54333b712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "774a9918-e892-46d0-8ebe-7aff3971aaef",
        "cursor": {
          "ref": "d70480e1-a550-4ecc-ad9b-ccd0802c324b",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "e12fa626-1408-48a5-8a7c-5ae6f5ad9005"
        },
        "item": {
          "id": "774a9918-e892-46d0-8ebe-7aff3971aaef",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "b80e4181-7b3d-48df-8b72-418cd9a1514d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8250aa1-2d13-474a-bb88-db0c075b7fae",
        "cursor": {
          "ref": "391626af-6a7c-4d1f-95cc-b7903569f467",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "1f38f1d4-edde-48d0-8475-2799a32c8bef"
        },
        "item": {
          "id": "f8250aa1-2d13-474a-bb88-db0c075b7fae",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "bf8f4ddc-649c-41a2-a9f1-c3618615ed2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68cae2c8-aa92-471a-859a-9365b7cc6030",
        "cursor": {
          "ref": "04355c38-b078-41e8-914d-a67d69d9e1a8",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "bbbf4dd5-bacf-4046-abe5-fcf2b5faded7"
        },
        "item": {
          "id": "68cae2c8-aa92-471a-859a-9365b7cc6030",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "2a7fdfc6-611e-49c3-951a-9390a1918ca2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a8d0c91-5bd6-46ef-846f-eae5f00b8804",
        "cursor": {
          "ref": "13688484-3edd-4af6-a42a-90118bc2e535",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "5abe827e-c872-450e-98e6-9382b435373f"
        },
        "item": {
          "id": "8a8d0c91-5bd6-46ef-846f-eae5f00b8804",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "fa840c8f-dbb3-4ecb-b661-e0dfa471182c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c51e77ff-382d-4314-8da9-6316228f8159",
        "cursor": {
          "ref": "8aa3eea6-45bc-4006-8681-3cbf8673f0cf",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "34e9d38e-9066-4dea-add1-12e185d8700e"
        },
        "item": {
          "id": "c51e77ff-382d-4314-8da9-6316228f8159",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "ea4afe0f-1f3e-4e70-b3c3-f40c0f39c735",
          "status": "OK",
          "code": 200,
          "responseTime": 233,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "9c26171e-eb4d-4aa0-a200-d825cafda1c2",
        "cursor": {
          "ref": "79406e76-ecc0-4310-b57d-3371d6302d7a",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "32d90d54-5534-4cdb-813b-74de37c46881"
        },
        "item": {
          "id": "9c26171e-eb4d-4aa0-a200-d825cafda1c2",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "22702f61-8a2e-4b07-b548-344124f00895",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 963,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4eeeeea-593f-40f4-8897-dfd9b5becbbc",
        "cursor": {
          "ref": "992c2c1f-8d95-4421-b1b8-2bacb3be8812",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "a9cbe89e-0f69-45e3-bf20-acb2494697cc"
        },
        "item": {
          "id": "e4eeeeea-593f-40f4-8897-dfd9b5becbbc",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "f481cece-39ac-451a-82e5-bbe8553ced27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a33e47a-84b0-4ec6-8dce-68d91bf9dd36",
        "cursor": {
          "ref": "edd3268a-a666-4b3a-9495-d6924d8d7694",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "19222745-5ca5-44e5-8b19-f30c0dc3c0a5"
        },
        "item": {
          "id": "1a33e47a-84b0-4ec6-8dce-68d91bf9dd36",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "368f6f6d-ebe7-42df-a4b0-8278bbec7bd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "569ea4a5-3ac1-43bd-b98d-6d2acedacddd",
        "cursor": {
          "ref": "36baac0b-87a9-48ae-abe9-d12fa03c3d52",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "504bee4d-543b-4940-987c-f1b9a7132dab"
        },
        "item": {
          "id": "569ea4a5-3ac1-43bd-b98d-6d2acedacddd",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "4552939c-c208-4cdf-b3f8-d0b29ab255ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1195bcf-ce37-4076-b8d2-86bf843000a3",
        "cursor": {
          "ref": "46463e64-85d7-40c6-8bd9-4d4bb4fa87e0",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "0f4594b3-42eb-49ec-a238-3506f6769da9"
        },
        "item": {
          "id": "d1195bcf-ce37-4076-b8d2-86bf843000a3",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "9526ed87-e633-4e76-b518-379df908c983",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c8ee153-dadb-4e1c-b3fd-3a5714333e39",
        "cursor": {
          "ref": "c6cea2e2-2710-427c-8496-dd01a3a187a3",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "f0ea06ea-1e58-44a7-be97-545a3ac5dfdf"
        },
        "item": {
          "id": "3c8ee153-dadb-4e1c-b3fd-3a5714333e39",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "edf80320-564b-468d-be3c-7a1ffc0dc14c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c05492e5-f759-465c-8f8b-a6204e82e2d1",
        "cursor": {
          "ref": "6d27e991-b932-41ba-b065-62521fa6a4f9",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "5aa9c3e9-a5f4-4011-9675-603f571e73ac"
        },
        "item": {
          "id": "c05492e5-f759-465c-8f8b-a6204e82e2d1",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "fcc5067e-f372-4a0b-a91e-790ec16a31ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "927a1516-8b20-47d8-a4aa-80433f3db34a",
        "cursor": {
          "ref": "e861652d-6bc8-49de-aa37-8ff2e3eaf8d2",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "1e4eb6a0-4bac-42d6-9177-8de192902bb6"
        },
        "item": {
          "id": "927a1516-8b20-47d8-a4aa-80433f3db34a",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "c7064ea3-6cd1-4b4d-aa29-e94ed4dc8610",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc6a9763-691e-4e78-9c0f-7b28a6191fda",
        "cursor": {
          "ref": "779d50a6-1dcc-4a95-b2f7-1d43e2dada59",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "0ff5feef-e317-4401-ae4b-e085cbd95188"
        },
        "item": {
          "id": "bc6a9763-691e-4e78-9c0f-7b28a6191fda",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "ee4d2c9e-f88a-4a23-9b28-8bdd814c206e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97b4c75f-e6d7-4c5c-a191-537a68ad0bd1",
        "cursor": {
          "ref": "09973a87-861f-4e14-a51d-a71171532d54",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "81d2d476-1e9e-4bf1-a1f0-aa87a6ecb116"
        },
        "item": {
          "id": "97b4c75f-e6d7-4c5c-a191-537a68ad0bd1",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "f74b0b9a-4d23-4a48-a6b2-8e7b008ff6e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "024f1cc6-bbb3-465b-8b53-4b6ef77cc7e2",
        "cursor": {
          "ref": "ebf1ddb3-f67e-4420-a42d-a57a4fe1bca8",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "9f06ecaf-9f46-4596-92f7-07e595f12a72"
        },
        "item": {
          "id": "024f1cc6-bbb3-465b-8b53-4b6ef77cc7e2",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "71e37d5f-8dcb-4738-81ee-49b1d5beec67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7a55761-96e1-4000-983b-eb9cc14a04ff",
        "cursor": {
          "ref": "ec4d900b-ce7f-420f-b7d1-60369d6b1b04",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "8cc186e1-c30f-487d-a30d-d743fcbec884"
        },
        "item": {
          "id": "e7a55761-96e1-4000-983b-eb9cc14a04ff",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "07256a1e-ff34-4d4d-8a5f-5db8026c1289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "236ef0f9-30b5-4750-bd0e-6d5a57f4505e",
        "cursor": {
          "ref": "474c8406-94f0-4eb7-8a7c-50305dcec758",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "bb48a66c-1465-4fef-a76a-e3f7fb04760e"
        },
        "item": {
          "id": "236ef0f9-30b5-4750-bd0e-6d5a57f4505e",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "386d42c8-7043-4b89-a415-f8b2f15ae2b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37655a4a-c079-4ba5-b5bb-f69eab3a7858",
        "cursor": {
          "ref": "f4e44518-aeb9-4816-8ace-4ef8fb84712d",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "33806c7b-6994-41ef-b2b1-484a54bfb073"
        },
        "item": {
          "id": "37655a4a-c079-4ba5-b5bb-f69eab3a7858",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "996a9bdc-d79e-4489-8bf2-d95efe15b1ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85fe7735-17c6-4e30-8353-83bcf395242c",
        "cursor": {
          "ref": "e6b5af25-3573-4bdf-a257-158b14291369",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "0cf38d89-b475-414c-8394-59bf953efbf5"
        },
        "item": {
          "id": "85fe7735-17c6-4e30-8353-83bcf395242c",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "38cb4cbb-079d-4735-9c8a-45e560a8b296",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7016eeac-9e52-4db4-a47a-ec27aac2ebfb",
        "cursor": {
          "ref": "0e9c24e3-7b23-4136-b327-f86d7f0e54d6",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "04945723-8f59-4576-95cf-c2c7791d3fce"
        },
        "item": {
          "id": "7016eeac-9e52-4db4-a47a-ec27aac2ebfb",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "04954a61-4e2a-4fd2-bf73-2aeaabf672a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "322fa832-a1f3-4a8e-8cd5-9e5c085f8ee1",
        "cursor": {
          "ref": "edb6903c-819a-4cb1-b828-1b27d2129c88",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "cc51b41b-5da4-4cbf-94d0-a8a3773823ed"
        },
        "item": {
          "id": "322fa832-a1f3-4a8e-8cd5-9e5c085f8ee1",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "5b6b07f6-c18d-4b45-b134-9e36629c0c2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84743cc1-2f98-404e-828f-421b21f3b690",
        "cursor": {
          "ref": "0429d982-3ca1-42a0-be56-7325789880da",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "502e03ad-6a11-46af-957b-7e9605edb7b8"
        },
        "item": {
          "id": "84743cc1-2f98-404e-828f-421b21f3b690",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "046191ed-6343-45ae-baad-9a74357fa362",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "748205be-75ef-4a3e-9c3e-312090a68b44",
        "cursor": {
          "ref": "fbe660f9-1263-43c1-813d-923b7623ba0b",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "5ac65405-d679-480a-ae99-9ca0b4a88615"
        },
        "item": {
          "id": "748205be-75ef-4a3e-9c3e-312090a68b44",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "87d646dd-980a-4430-a372-9269a7dfd690",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07ba6a00-5562-4176-9f37-2ec2e8edb649",
        "cursor": {
          "ref": "2542f059-a485-4d8d-bc48-796cdfc7bb77",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "52c409b4-0947-4183-a47b-d36a3d15a6ff"
        },
        "item": {
          "id": "07ba6a00-5562-4176-9f37-2ec2e8edb649",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "844a5e82-88be-4ab5-a367-c889d4c3a173",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "802f4ab3-281f-4e89-8b0c-18cdf91f5ee4",
        "cursor": {
          "ref": "5240d9f1-a75c-4479-a3fc-f964ed72a484",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "423643cf-66be-4725-8a7a-4b0e86612565"
        },
        "item": {
          "id": "802f4ab3-281f-4e89-8b0c-18cdf91f5ee4",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "20f1e3a9-e0d2-4d24-997e-a918aed961bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b560075a-8758-41f4-9743-11a34a2f4a1b",
        "cursor": {
          "ref": "129ab136-dbd7-4d65-9962-999fe02a8705",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "2f17af9f-cf1a-4ba6-8c0c-652b9260ff24"
        },
        "item": {
          "id": "b560075a-8758-41f4-9743-11a34a2f4a1b",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "d52e63ed-e893-4fdf-a370-70cc6006da40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "befdb2e8-8faa-4ea3-8cc8-f591ca13a83f",
        "cursor": {
          "ref": "dce88729-9cae-4554-8867-472496bd71db",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "eaa8d2e6-0f86-4f5e-bdb5-bae7522c6036"
        },
        "item": {
          "id": "befdb2e8-8faa-4ea3-8cc8-f591ca13a83f",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "dad2debc-5714-4095-b0a5-8322ec2c026b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38f0d82f-909a-411a-81c2-52b2c733c33d",
        "cursor": {
          "ref": "0b220b41-0898-43be-97fe-3df4dd3acb7f",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "bd7caa1d-dfa8-4e68-8e8f-fc765d0dbbee"
        },
        "item": {
          "id": "38f0d82f-909a-411a-81c2-52b2c733c33d",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "e4ed001d-677e-418e-9f14-b1e2e7d2c1a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fd477ff-6060-4509-a771-5d4fedbf4784",
        "cursor": {
          "ref": "fbf1cb1c-8498-445f-9e3a-f6625c29004b",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "b088687c-b9b5-4674-b3b7-7c25ad23f355"
        },
        "item": {
          "id": "4fd477ff-6060-4509-a771-5d4fedbf4784",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "c22d36a3-41f7-435c-bfe5-7c1a7c668706",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11b21ad9-2a38-4c02-981d-2d9ffe6aafea",
        "cursor": {
          "ref": "8cd7bf39-145e-4487-84cc-5a6ec6ee90f9",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "2a5633c7-cff5-414f-8723-16a8232d470e"
        },
        "item": {
          "id": "11b21ad9-2a38-4c02-981d-2d9ffe6aafea",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "a1196f34-7abf-405a-930c-736e9a9fdca3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8286950-59ee-4bfa-9396-6870d735b35a",
        "cursor": {
          "ref": "2c8182a1-5da0-42bf-839c-378cc594894e",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "2896989d-98d4-4dd2-9c3c-c827391d3459"
        },
        "item": {
          "id": "e8286950-59ee-4bfa-9396-6870d735b35a",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "ffc8fc4a-f47d-48a0-978f-eefc27887563",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47ab3ae6-6f91-4b8c-854e-d045801cc47c",
        "cursor": {
          "ref": "7607a4cc-bf48-42b5-9ade-31d2a5478f45",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "97ca3d09-3fe3-4e82-bf96-1586d7d8b35d"
        },
        "item": {
          "id": "47ab3ae6-6f91-4b8c-854e-d045801cc47c",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "2bb21b5f-a73e-43b8-9560-dd161d1cf6c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40fdb10a-f8f1-428f-bd07-a6386d35cd9d",
        "cursor": {
          "ref": "8df624ae-6fa7-4b81-a146-c7798e45661d",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "b66416d6-d8be-4910-afad-5607ea9ae458"
        },
        "item": {
          "id": "40fdb10a-f8f1-428f-bd07-a6386d35cd9d",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "dc8586fd-6139-4004-9c95-641725c9c563",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebb4e0a7-eb4c-4d51-a2ad-cc04d5a8293d",
        "cursor": {
          "ref": "7fa535be-8bff-4903-be5c-67288a34aadf",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "3adade85-3400-4511-9090-af286e38ce31"
        },
        "item": {
          "id": "ebb4e0a7-eb4c-4d51-a2ad-cc04d5a8293d",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "e3417257-2319-4e1d-98dd-34e362988b43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73c8b981-81d0-4800-9cd2-9a1208f10866",
        "cursor": {
          "ref": "99df7953-3d82-4606-b0e1-ee1ce276d836",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "992e0979-3fd4-4c0a-9544-1d0875d1d550"
        },
        "item": {
          "id": "73c8b981-81d0-4800-9cd2-9a1208f10866",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "0537d54e-2af0-4b56-bf1f-ea1a5b941e9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeea7dcf-00a7-446e-809c-8d48ded3b698",
        "cursor": {
          "ref": "88ef2004-83d4-4062-be3d-9796230276f9",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "7ee88c0b-7396-445c-aec1-ce256019376b"
        },
        "item": {
          "id": "eeea7dcf-00a7-446e-809c-8d48ded3b698",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "ff801bee-8a47-484d-8d92-0d7fa553bd9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a4af16c-5751-4a48-b6e9-bd5ce0f7f862",
        "cursor": {
          "ref": "92f65416-dd0f-411b-a4ca-f260cd68a936",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "d2dd76f5-5e1b-4d3a-95bd-f33972252c71"
        },
        "item": {
          "id": "8a4af16c-5751-4a48-b6e9-bd5ce0f7f862",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "01c02842-131a-4ec4-b370-1bbc8203948c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "135085b1-ec39-4dbf-aca1-2a2dae5f4266",
        "cursor": {
          "ref": "411ef7c8-1980-402c-ac9c-fde94ddc4cb9",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "33ead5fe-9f7f-44c5-89c0-e17cbe453133"
        },
        "item": {
          "id": "135085b1-ec39-4dbf-aca1-2a2dae5f4266",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "d8624b92-0ed9-458b-9a13-7760ba79c096",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c98c8eb-b25d-4d90-bfa1-e3d7c37247e2",
        "cursor": {
          "ref": "a535ad99-75a2-4481-a3af-95fd15562890",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "eaa30e33-bef9-4436-aca6-768bef9aacce"
        },
        "item": {
          "id": "3c98c8eb-b25d-4d90-bfa1-e3d7c37247e2",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "f4fe139a-3990-4cad-a18f-1c7a7e852d8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a866724c-c104-4abc-87cf-2e2cdb428569",
        "cursor": {
          "ref": "036217dc-9467-4458-a652-0b74f1544029",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "5f247494-29b4-47d2-8611-d3155edaf663"
        },
        "item": {
          "id": "a866724c-c104-4abc-87cf-2e2cdb428569",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "26ffdb03-87fc-414f-abbc-9cddb0e7a5ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80eed934-5fb2-414a-9eac-88c462f4d9b3",
        "cursor": {
          "ref": "5b58479f-3cb1-4083-a6ca-aada55ca2998",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "513a4b52-502f-4edd-a35b-400d5ae4105d"
        },
        "item": {
          "id": "80eed934-5fb2-414a-9eac-88c462f4d9b3",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "874e2a84-5671-4210-9f69-b3f00e0236a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 625,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f49761c-5351-4257-ad14-6dbeadffe943",
        "cursor": {
          "ref": "8a037271-8180-4f21-987e-1762e135fd2f",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "d4605888-a28c-472f-a667-534e1239c1a5"
        },
        "item": {
          "id": "8f49761c-5351-4257-ad14-6dbeadffe943",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "aebc7165-446e-4f43-b949-ea34c9498157",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d2647da-e22f-41e9-99c0-f8fc0c1ae788",
        "cursor": {
          "ref": "9f14d1bd-e68b-4282-b4ab-97de8c7ac1d9",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "033525bd-c673-4f05-bc19-c486d894ce63"
        },
        "item": {
          "id": "6d2647da-e22f-41e9-99c0-f8fc0c1ae788",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "1ddc88e0-92a2-4501-b1bd-e0982c452c48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8b063d8-87ac-41ed-ad7b-d427c3b0c991",
        "cursor": {
          "ref": "b85e3ed9-ff09-42fa-bf7b-f1929961e3d3",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "3dd09028-13c7-4b52-ac69-63e81ebcf47b"
        },
        "item": {
          "id": "c8b063d8-87ac-41ed-ad7b-d427c3b0c991",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "4541a00d-c610-4172-8e08-2f4e88c57530",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "477c4389-bdc4-4879-b8fb-2777628253d5",
        "cursor": {
          "ref": "d7cd6959-12b5-4619-a4d5-bf87af1ddcf0",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "eed98a17-00e4-4fe1-ac6b-ac6b583f022d"
        },
        "item": {
          "id": "477c4389-bdc4-4879-b8fb-2777628253d5",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "814927ec-2980-455d-8a6b-e84e112da322",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd0d1eec-339e-41b9-9c65-a48fb55e9916",
        "cursor": {
          "ref": "033f7502-8fb8-4297-9268-786bf8d2cfc1",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "78676b63-2d32-4cd6-8f17-517282f27974"
        },
        "item": {
          "id": "fd0d1eec-339e-41b9-9c65-a48fb55e9916",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "865c56af-c1a8-4ab5-bacc-338cd9323b61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd7b0f8b-242a-4f8a-b5d2-4a75e9d4cb78",
        "cursor": {
          "ref": "71e6aa49-e687-412d-be48-a5bb21a2de3b",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "560f6b55-1b80-4b56-b236-5d8d57aea77d"
        },
        "item": {
          "id": "cd7b0f8b-242a-4f8a-b5d2-4a75e9d4cb78",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "7b2fa737-2720-4caf-9208-597edfcc8ab8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0432c3b0-c1e2-4eba-befd-bf5d9cfb4a14",
        "cursor": {
          "ref": "0c1e8b75-7e6d-4c41-8b86-b84ec66fcd39",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "47871318-1dec-4723-9c60-8a56becf633b"
        },
        "item": {
          "id": "0432c3b0-c1e2-4eba-befd-bf5d9cfb4a14",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "6a379d19-944a-4ec1-bcdc-fa63de8a485e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f113c8f-780d-4a5e-9b7d-e08a2d6baaff",
        "cursor": {
          "ref": "67dd935b-5dea-4634-bb49-d633642a6b64",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "2bc5ee40-f678-4902-8488-4e886129d1af"
        },
        "item": {
          "id": "1f113c8f-780d-4a5e-9b7d-e08a2d6baaff",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "36b8c309-ae7e-46b0-9a8a-09be9b2b75a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9ce26be-41c6-4d4a-9b1b-8a8ce02942a8",
        "cursor": {
          "ref": "60a353f6-140f-4009-94a0-317eece6a9ec",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "f2b2d08d-2618-4a77-b970-50e96f63c037"
        },
        "item": {
          "id": "a9ce26be-41c6-4d4a-9b1b-8a8ce02942a8",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "c6255d36-26a3-4c06-b559-b54be20ad859",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99381f38-98fb-4019-bb0a-e1d047f57dcf",
        "cursor": {
          "ref": "09fc291d-d3c2-44cc-918d-494274dbcafe",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "688fc7fa-fb65-477b-af0f-9d0425f096cf"
        },
        "item": {
          "id": "99381f38-98fb-4019-bb0a-e1d047f57dcf",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "629a8dbd-4d40-4a86-ac75-f107fb94f93c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53457519-65bf-4ce8-a2f2-08327e8d8920",
        "cursor": {
          "ref": "f2bb2889-aaa1-4afd-9cd1-aae29449767f",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "f8e291c7-1d44-4d4e-9afc-7c8eafc530c7"
        },
        "item": {
          "id": "53457519-65bf-4ce8-a2f2-08327e8d8920",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "001e2ced-026d-4cf6-98f6-897df6ddc327",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4af25b28-8bfb-4800-adba-0aeee4a7961d",
        "cursor": {
          "ref": "71771170-64de-417b-939b-02c3636df88c",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "cfc080dd-d90e-4cbc-be4d-99c6f91f9ddf"
        },
        "item": {
          "id": "4af25b28-8bfb-4800-adba-0aeee4a7961d",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "459ed9b7-9ea5-43d2-82e3-d228d6814728",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cf47f24-0dad-4a43-bf01-d01bf41345d7",
        "cursor": {
          "ref": "36f9fb62-bf6d-4377-b2dc-658472976aeb",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "676d8e81-b763-44e0-abfc-7f409f5cd68a"
        },
        "item": {
          "id": "8cf47f24-0dad-4a43-bf01-d01bf41345d7",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "8dcef7d1-48de-4461-a441-6e613fa8552d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec2604ef-f062-4aa3-8a85-479dbe194e81",
        "cursor": {
          "ref": "f19b0b6d-bbd8-4a94-85f8-3e2838c007f3",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "a42eabbe-925c-414f-90e3-4802ad479b62"
        },
        "item": {
          "id": "ec2604ef-f062-4aa3-8a85-479dbe194e81",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ea9cffb3-03c6-4131-b4a7-d2abceee0921",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b49ad50a-4070-4170-9e53-6bc8df6aecaf",
        "cursor": {
          "ref": "34b63f9c-2731-4452-8a7a-1908266fe730",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "84292bb0-2548-45c7-9892-35fb7b4e97a0"
        },
        "item": {
          "id": "b49ad50a-4070-4170-9e53-6bc8df6aecaf",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "fca60bda-e222-4696-a1c6-b530d96f51c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5204c73-3a67-4ba4-a85f-17c13f75ee4b",
        "cursor": {
          "ref": "f9f4f649-1f6c-4345-8a28-a30d48b137fc",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "253a10e2-45ab-4032-bb07-13750901ae0b"
        },
        "item": {
          "id": "d5204c73-3a67-4ba4-a85f-17c13f75ee4b",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "0d57659b-3493-4927-8a4e-93b00c06a53d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e373061-8b1d-4ee7-8fe7-8595e2d0e147",
        "cursor": {
          "ref": "033b7af2-b34d-40d5-8b7e-9c81d624ac25",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "a828b49e-b828-47cf-af22-59300158a5f7"
        },
        "item": {
          "id": "5e373061-8b1d-4ee7-8fe7-8595e2d0e147",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "7c11bef3-eb3e-4078-9cc4-127dc70a6086",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39572fc9-e9f6-41e1-8fd7-7ccf81b76b20",
        "cursor": {
          "ref": "d7874151-7d63-4a79-8d73-d65bf164edb2",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "b674cb42-64fc-4d34-b454-1ccfa57512ef"
        },
        "item": {
          "id": "39572fc9-e9f6-41e1-8fd7-7ccf81b76b20",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "afd0a8f1-0b79-4930-ae00-9c7829480b44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3391ac50-1765-4ead-b83b-ce47c7b1712e",
        "cursor": {
          "ref": "ecee93b5-308c-44a9-9f45-5ee6b41aa501",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "bfae02e5-2930-4acc-b28a-ef60fa1cc6e2"
        },
        "item": {
          "id": "3391ac50-1765-4ead-b83b-ce47c7b1712e",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "15fbb434-e471-47f5-8a23-f15afb64e495",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86f267d0-fc75-4887-bdec-18a81217ffc0",
        "cursor": {
          "ref": "21b2b62e-5548-4167-9e0d-6f07cd830be9",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "0d0f37a0-5131-478c-a12d-9fe1745bc03c"
        },
        "item": {
          "id": "86f267d0-fc75-4887-bdec-18a81217ffc0",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "cca23f67-e609-488f-948b-90be4d65f0da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12ccfdf0-21a8-445b-8801-93b947bf1d72",
        "cursor": {
          "ref": "7df7e4fc-e602-40c9-9fc6-0622ee753b11",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "e69aae9e-195f-4cf8-b678-d9441d4f996d"
        },
        "item": {
          "id": "12ccfdf0-21a8-445b-8801-93b947bf1d72",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "6126fc0a-97eb-4e9d-a8d9-b61ece7fa4cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d96438e-6016-458a-a2b9-49850c1dcd16",
        "cursor": {
          "ref": "ddb5d315-14a5-4f37-b7d5-5e8615912c5e",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "fd217a0a-90d9-4cdb-88df-703693791270"
        },
        "item": {
          "id": "2d96438e-6016-458a-a2b9-49850c1dcd16",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "62682705-0a26-440b-9ae5-8441baf67b8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c2bd0e8-3cd7-4787-b8cd-a7f622a60e4c",
        "cursor": {
          "ref": "b316b517-7602-4616-bdee-1323aac98252",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "8846e372-3924-4c66-af3f-d26cccf1a8cb"
        },
        "item": {
          "id": "3c2bd0e8-3cd7-4787-b8cd-a7f622a60e4c",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "163ae049-91de-4c78-b759-2b31b37d1e7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b99ab66e-32b0-4a65-a856-bdb8bb9fbdfb",
        "cursor": {
          "ref": "5dcaacd2-66fc-4de8-a80e-f757ac42eac9",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "8ca7f298-dd82-459a-a0d8-db04900f7a2d"
        },
        "item": {
          "id": "b99ab66e-32b0-4a65-a856-bdb8bb9fbdfb",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "5b5b338e-a17a-48c3-93b7-5c01c22b56d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 996,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5087f456-85cc-44e8-8217-1ff842aba1b7",
        "cursor": {
          "ref": "2e8d4968-cb41-4d01-979f-db661f7f3fb6",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "6eac9d8c-9587-44a6-90dd-8610b0414fc8"
        },
        "item": {
          "id": "5087f456-85cc-44e8-8217-1ff842aba1b7",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "b399f7c3-5ecf-46e7-83da-42d727ea0cdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b9826ca-d1e6-4a2e-9686-d0bb0def6cad",
        "cursor": {
          "ref": "fe28f5dd-8135-4ec0-997e-9ba5551c5c89",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "900cf38e-7c95-4e6b-9ec7-0e55c89a387c"
        },
        "item": {
          "id": "8b9826ca-d1e6-4a2e-9686-d0bb0def6cad",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "c422f76a-04bc-4d35-a316-8ae8bd26160e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13bff021-c71e-406e-86df-1cbd476ac768",
        "cursor": {
          "ref": "a7be09e9-31e2-4f72-b272-eb725463091e",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "cbe81167-bb03-42d2-8f5d-3e74b3ef8797"
        },
        "item": {
          "id": "13bff021-c71e-406e-86df-1cbd476ac768",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "4c8b04b0-29b4-40c7-bf19-c18598606669",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4553e198-cf11-4d9d-9637-7776231f2c2f",
        "cursor": {
          "ref": "77339e38-86b2-4288-bd4c-004af9a18325",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "d96583b3-9aca-4f59-b238-54c48b16e5fc"
        },
        "item": {
          "id": "4553e198-cf11-4d9d-9637-7776231f2c2f",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "24d0632e-bd7d-4ca4-be43-a8d704e7ac73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "099bc1e1-6fee-4dfb-8f4e-36f2ad8a2fb0",
        "cursor": {
          "ref": "1396fc3b-5f3b-44b2-8d69-7893ceed52c9",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "7adc3a53-c032-45bc-b183-1bfe43e56bbb"
        },
        "item": {
          "id": "099bc1e1-6fee-4dfb-8f4e-36f2ad8a2fb0",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "0d526fe9-62dd-43dc-a6d8-fab4d9180fb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5189c85-cb10-4658-b4f5-fa6f18fbba4c",
        "cursor": {
          "ref": "01eec015-a9f8-477c-aaed-5212394b2911",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "82d06390-33da-46fd-b9d8-1c2167e5bd63"
        },
        "item": {
          "id": "f5189c85-cb10-4658-b4f5-fa6f18fbba4c",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "8796a617-ccbc-4fc2-ba4d-0d9ebe663996",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03610f02-1eb0-47cb-babd-d952b2ca1665",
        "cursor": {
          "ref": "18f61969-7fb7-4757-8979-5a73ca7d8000",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "f9f7e4b7-ee9a-43ac-8ac1-57e6cf087ac5"
        },
        "item": {
          "id": "03610f02-1eb0-47cb-babd-d952b2ca1665",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "5820dfea-33cd-4017-a1ff-af704e985205",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8798cc36-a2d7-47ef-a1d6-659834f6158f",
        "cursor": {
          "ref": "f69891f0-00a3-4784-a8d5-e9ffebf5f6d5",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "461e3795-657d-4314-b50d-5d11d51511fb"
        },
        "item": {
          "id": "8798cc36-a2d7-47ef-a1d6-659834f6158f",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "c839b5aa-e90d-4722-9dfa-b7cee6337cea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4d04656-0049-4dc4-9456-9fe2917cbb3d",
        "cursor": {
          "ref": "5fb99eb8-e1e3-4c14-8e05-aad58100316d",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "e930a733-d52a-4df1-b7c6-84274297195c"
        },
        "item": {
          "id": "f4d04656-0049-4dc4-9456-9fe2917cbb3d",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "ff24df33-ec95-495d-b315-9cb9c543bd62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd53fabf-3aa0-47fb-8b99-2c220112a125",
        "cursor": {
          "ref": "a600edf0-a39a-4bd9-8fb8-3528b83f5bcb",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "0d366a6e-142f-4758-a8dc-bdce51dc738a"
        },
        "item": {
          "id": "bd53fabf-3aa0-47fb-8b99-2c220112a125",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "3e8b7ae7-d370-4d60-9629-40ac933b986c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33fcd25b-e2dc-4317-9602-fa6ccad4dc16",
        "cursor": {
          "ref": "b3ed350d-f5a3-4993-a9a9-20d6a5b3376a",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "8a9b1285-0bae-44fb-835f-3d68cdafdc93"
        },
        "item": {
          "id": "33fcd25b-e2dc-4317-9602-fa6ccad4dc16",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "77370b32-2283-44e2-9582-bb9e045e98e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f146de5-b34e-48c2-b994-d335a14387f2",
        "cursor": {
          "ref": "781ccb3f-6442-4f7e-8b33-7b7c602a172c",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "dfa64a27-9cdc-40f5-8bb4-8979802d1b4c"
        },
        "item": {
          "id": "1f146de5-b34e-48c2-b994-d335a14387f2",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "87f3149f-77b5-48b3-a3a0-47c3596da1c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4e4ff70-2411-4d40-8817-1d5d23eca424",
        "cursor": {
          "ref": "616405cc-65d7-44e0-832a-87ec132de73b",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "007c211a-6eba-49db-b1b7-f65b44096ae9"
        },
        "item": {
          "id": "c4e4ff70-2411-4d40-8817-1d5d23eca424",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "039703d5-bb72-43a5-9931-2ba233362f7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72ae46a9-fb4d-4e1e-a2c8-39fc881841c9",
        "cursor": {
          "ref": "c98f5228-430a-4890-af69-711014fd4fef",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "e5467cfb-608a-4be9-9ec0-158c4727e9ff"
        },
        "item": {
          "id": "72ae46a9-fb4d-4e1e-a2c8-39fc881841c9",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "24d44e5b-7418-43ab-aacb-16d1a64d0917",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7814d417-3c3c-4ac5-869e-636051489aa4",
        "cursor": {
          "ref": "1be73899-ae9b-426c-8042-3d23bfae3424",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "585be369-9272-4011-85c5-9497dba6bb32"
        },
        "item": {
          "id": "7814d417-3c3c-4ac5-869e-636051489aa4",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "a7c30d68-8157-4614-8b16-3c6d940caebf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c57b35dd-e41e-4012-ad16-a45008bd95be",
        "cursor": {
          "ref": "86fdb697-b2cf-4fb3-a37f-07fd5d43e73c",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "df7214f2-8ee6-43c2-9cf0-52019fb48842"
        },
        "item": {
          "id": "c57b35dd-e41e-4012-ad16-a45008bd95be",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "32cca2ba-4f17-436c-977d-c3ac71d6d97f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2bb09e9-fe39-49f0-b8b2-98e83b311e37",
        "cursor": {
          "ref": "63b6f151-7cee-493e-91d9-d3075961dfcd",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "f36fc5c7-c5ec-4e10-98ac-c0c5c23feefd"
        },
        "item": {
          "id": "a2bb09e9-fe39-49f0-b8b2-98e83b311e37",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "432d9e2c-57f1-4c76-bda6-75c01f1efe2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b070968-a717-418a-98c9-80550dc30e72",
        "cursor": {
          "ref": "86e7bc0d-b952-41ae-b2ea-f34c7da42e62",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "1e4eb118-44a5-4b8a-8327-43f6fdba5f4a"
        },
        "item": {
          "id": "7b070968-a717-418a-98c9-80550dc30e72",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "ea86682c-e1da-4684-a5b1-e28137f7d182",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e24f96f0-9afa-4162-a4e9-d790da8d033a",
        "cursor": {
          "ref": "5a97568b-1137-4683-8117-9ac582755c8f",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "26ff7b7c-9f87-4e0d-b2f7-3250a50200a7"
        },
        "item": {
          "id": "e24f96f0-9afa-4162-a4e9-d790da8d033a",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "9e3cbcee-56e7-4c80-954a-245c9c89cbda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b553e8f-c00f-4945-967f-c1a181904082",
        "cursor": {
          "ref": "5f0cd102-959f-4b38-abef-a72ea37ff5fd",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "027526d5-136b-41c5-848c-d376745b9ad0"
        },
        "item": {
          "id": "9b553e8f-c00f-4945-967f-c1a181904082",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "52f7b0c1-d530-4c29-9809-02194b21fddf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "74dffdee-4f31-4177-8788-88005f17d6c3",
        "cursor": {
          "ref": "5a180a00-b634-480f-8b93-ec97cc07bf5b",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "ba9b53e6-de9f-4e38-95e9-d96b98f708ea"
        },
        "item": {
          "id": "74dffdee-4f31-4177-8788-88005f17d6c3",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "f92617c4-3d94-4760-a769-8fc58f65d605",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "52c9d4c8-857f-4d64-abed-ca4459762f1f",
        "cursor": {
          "ref": "f6ac68fb-49ed-47f9-91ab-4200f2f3681b",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "8f607478-3a42-4cef-8e06-1817fc30ed68"
        },
        "item": {
          "id": "52c9d4c8-857f-4d64-abed-ca4459762f1f",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "9ae7ad10-13b5-4e48-ac12-98d3101bfdfa",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "221ca2e7-23f7-46b7-8553-2c4f72c5e978",
        "cursor": {
          "ref": "55f32737-d651-4121-88b1-c9d4515c8bcc",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "95ae8d73-4f83-445e-974c-757157ec51e2"
        },
        "item": {
          "id": "221ca2e7-23f7-46b7-8553-2c4f72c5e978",
          "name": "credentials_verify"
        },
        "response": {
          "id": "03498d1b-18a8-4780-ad1e-78ee1b118004",
          "status": "OK",
          "code": 200,
          "responseTime": 2268,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bd2204f-501a-40ec-8edb-39c6bc73b016",
        "cursor": {
          "ref": "836b9b22-07be-4f3a-9518-f5913798fd17",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "cf9ca4bf-91b0-4309-bbaf-2a14cf73870e"
        },
        "item": {
          "id": "4bd2204f-501a-40ec-8edb-39c6bc73b016",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "9d85d0a3-ba86-4608-ae1c-43fd128776b4",
          "status": "OK",
          "code": 200,
          "responseTime": 1697,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "74909163-9508-4204-a31e-69a339fe96b7",
        "cursor": {
          "ref": "3426f2b0-fa64-437c-b37c-55d95b425758",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "207c1c2e-ec11-4968-9ae9-79157fb6b9e6"
        },
        "item": {
          "id": "74909163-9508-4204-a31e-69a339fe96b7",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a7e59e3d-a20b-4acb-bfa1-51d8edb79283",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "74909163-9508-4204-a31e-69a339fe96b7",
        "cursor": {
          "ref": "3426f2b0-fa64-437c-b37c-55d95b425758",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "207c1c2e-ec11-4968-9ae9-79157fb6b9e6"
        },
        "item": {
          "id": "74909163-9508-4204-a31e-69a339fe96b7",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a7e59e3d-a20b-4acb-bfa1-51d8edb79283",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "74909163-9508-4204-a31e-69a339fe96b7",
        "cursor": {
          "ref": "3426f2b0-fa64-437c-b37c-55d95b425758",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "207c1c2e-ec11-4968-9ae9-79157fb6b9e6"
        },
        "item": {
          "id": "74909163-9508-4204-a31e-69a339fe96b7",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a7e59e3d-a20b-4acb-bfa1-51d8edb79283",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "0114a4a7-658a-4c57-998f-a440dfd66c47",
        "cursor": {
          "ref": "e531110e-79ab-41b2-83fa-1d9368c2dd23",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "bd5c0b4b-1ef3-4a4a-a985-71e00e5ab6d4"
        },
        "item": {
          "id": "0114a4a7-658a-4c57-998f-a440dfd66c47",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "3dffd0b9-80bf-4e24-af59-03c3454983a3",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "7cbef47e-8b4a-41c9-a4a9-2bee34773bb9",
        "cursor": {
          "ref": "dfe5fd67-579a-4879-8b7d-ec68e83ad00d",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "631ccfa4-6e32-4281-8a4e-25f6a839cdcc"
        },
        "item": {
          "id": "7cbef47e-8b4a-41c9-a4a9-2bee34773bb9",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "6b784002-87c0-4f4e-9924-c7e541d87f51",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "7cbef47e-8b4a-41c9-a4a9-2bee34773bb9",
        "cursor": {
          "ref": "dfe5fd67-579a-4879-8b7d-ec68e83ad00d",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "631ccfa4-6e32-4281-8a4e-25f6a839cdcc"
        },
        "item": {
          "id": "7cbef47e-8b4a-41c9-a4a9-2bee34773bb9",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "6b784002-87c0-4f4e-9924-c7e541d87f51",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "f18ec8de-850a-4e5a-a631-ab18b1098e4b",
        "cursor": {
          "ref": "2057586f-ee96-4025-84cf-9c062f42701c",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "9d761468-a729-4eaf-9d35-806f60934cb6"
        },
        "item": {
          "id": "f18ec8de-850a-4e5a-a631-ab18b1098e4b",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "cd46ab56-3d3b-488f-9d2b-62177485cf64",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 170,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "a5181586-2b4f-4824-b61b-127cb9616cd8",
        "cursor": {
          "ref": "601d4f33-1483-4f76-bce0-c44c5284ab74",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "c976c557-843c-40d0-9bec-871b5dc263d7"
        },
        "item": {
          "id": "a5181586-2b4f-4824-b61b-127cb9616cd8",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "6408758e-577b-4c31-a680-a248377bc076",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "a5181586-2b4f-4824-b61b-127cb9616cd8",
        "cursor": {
          "ref": "601d4f33-1483-4f76-bce0-c44c5284ab74",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "c976c557-843c-40d0-9bec-871b5dc263d7"
        },
        "item": {
          "id": "a5181586-2b4f-4824-b61b-127cb9616cd8",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "6408758e-577b-4c31-a680-a248377bc076",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "89789dec-2fbb-4f42-ab11-4f6f52ed0f24",
        "cursor": {
          "ref": "666c601b-e80e-4f6f-9643-5b35e8f87ce7",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "81114f03-2d4c-4404-a44b-dc185b549690"
        },
        "item": {
          "id": "89789dec-2fbb-4f42-ab11-4f6f52ed0f24",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "9be39d89-3e73-43c9-850b-2e989664cfb4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}