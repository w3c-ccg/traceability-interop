{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "c8025ce2-d1fe-4b8e-9cb2-dceecf52ae3e",
        "name": "Clear Cache",
        "item": [
          {
            "id": "69e865ee-2088-4349-b04c-7c534ceb40bc",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b1cca3c9-3357-4da5-919d-3c415c94a660",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8c2a344f-2276-4bf7-aaa4-b817c657d1e4"
                }
              }
            ]
          },
          {
            "id": "05af772c-1706-4c55-a685-b0a00f76eb51",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c01c7a2f-2fe8-4724-ad75-b34bdf0b0ba2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "76990fad-11c4-4b5a-bed0-4f142e2ad4fa"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "87b9d35a-1a56-4a9c-ac0d-3b2228708007",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "cfbf8614-458e-4842-9bb2-b318d60ffca5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "730eced4-7f2e-42e9-ae4d-cdaa4ff72a77",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a5bdb815-7065-4499-8753-e367bf83ad5e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8945e837-ea7f-4813-99d7-5594e3bfd910"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e40e5b95-16bb-4134-a205-a30c8655a5fb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5bf05729-199d-4b82-bea4-525805752f9c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b94d516d-794b-48c2-a7cb-12eb0beb2548",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1de96ab3-be5b-4a55-9de0-be52ae34c087"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e481c354-567f-4f2c-8d82-f30cfcd8a6da",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "3a391003-20ad-4ea5-9d75-9e2ea16440c0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9c764104-5f08-4a49-9a0f-ddb6e326961d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "260834bf-83b7-44b3-b5f0-e857a5f187a4"
            }
          }
        ]
      },
      {
        "id": "4ed32364-3c05-43ec-b536-e43d0f247cf1",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "fa46d2f2-7b29-4d79-9297-bf53472600fd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d090b873-3e71-4316-a95e-3bdbdea17962",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "eab7c46c-f023-4eea-8999-bce20f0dfcda",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32962e16-e5c5-4746-9fee-223212c731d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c69e8ecd-c668-4574-a0a6-a8fd55998dfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce07a23d-2de5-49d0-8dab-d6b5973ab60c",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "589c962f-5027-4527-9ced-731b9f9b238b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9b27ecb4-a94a-4192-8b0a-798721dc1f62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8a2efd2-806f-421b-9e51-e28daec8a626",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49a7141b-609d-43db-ab0a-48bec37df755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "74bbe83e-94df-4e5f-b5b9-c79a140c3c43"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b611e235-6d78-4e46-9a1f-a4b5f0b29c16",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e1d48e77-e8da-4403-a9a0-99b070b403f2",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53a57c5a-bed3-464e-a195-b2a9bdb020cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e19457c0-8b2f-4a16-a45e-571578852b8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "347af1f4-ca81-4324-8e2d-976b5e346009",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efe5f38d-c793-4456-ad95-87e73e059d0e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e048c97e-a7da-4661-9d89-bc31ec968d25",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bf02a93c-ccb9-4a11-8054-bfdf7c83c126",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ac822f89-f521-446d-8985-1cc592c74e79",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "602fcdcb-e8ad-4d73-85d3-c01fe394e0a6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "149cb580-5141-4119-a46e-4cb1cff3f41c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "37bd035b-365e-4d38-b2dd-bc36be41a50c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e53a7e12-b264-466c-873d-d93681f080f8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2fc58f5f-791e-4f3a-95e1-f0d2edaa5f7c"
            }
          }
        ]
      },
      {
        "id": "d640bec3-129d-48b7-a7b1-b7cac0852e5c",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "0bf795f6-5f73-4a6c-a491-b68e425fdb88",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bd56e8b3-ee43-497b-8574-4e7e0a34b233",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "813447f9-26a6-45d4-b2fc-ebc354d7876c",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "082aa5b1-7d8c-49d8-9c6c-8b4da2d0818f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c703a47d-c050-4706-9fef-8769a9fc1061"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15b3a9f4-a3b2-4810-9adc-85ea2f6131d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ccc38ec9-f329-454a-9219-b270357c2c73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65563e27-d3a9-4837-a177-8bab15303fac",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18268fb6-78d3-43f1-8992-60f2c13640fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1175c57f-2d3e-4346-9205-853a8308f98c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5090f11-c8ef-4e2e-9ca0-d08bfe9a5751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7c162ccd-7634-4891-8547-7f00ede98d11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54c76ed5-d510-4352-a9db-c166885c5eb6",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "958d6ae6-ff25-4624-8079-09cc213bbd69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e55470b7-c76e-4851-8e9f-94c41a6da728"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83973688-cad3-4500-8160-47f6b0543c65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "90e0a541-536e-4b7c-a176-8b9edad827c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b3fa10c-891f-4207-8e52-6bd056f10f6f",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe6c9640-08f0-45a9-b4b3-4ba3df5036df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ebb3c1f-5f2f-49b2-989c-8b6accdcc40d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d799513-4c4e-4428-a01c-ddbac9db26a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8cd396b7-981c-4b45-81ee-16d4c803ddfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eac11b7f-f664-4133-8976-0133e7a09c9c",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b84472e-e229-4af3-898c-5e4705e9342c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f6c91c6-dffc-4179-a095-2a98c61785df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e9c7d22-6596-4ec6-ad9d-33ba1d413d38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a875eea1-3217-4edf-b230-9ac3cb1696c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "892540f2-445e-434e-809a-98f3ca478c8e",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8829106-cb45-450f-bc05-0511d94c2844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd72b442-3bb2-46e6-bd05-97b5d2378efe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eeced7f-b38d-49ab-8b8d-e9337053a1b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bf83f8b2-176a-41d9-84ab-8de3b30701d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc9c8d70-84c6-4e9d-865c-8d1a71044886",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2112beea-36c2-45a4-ac1f-3022d15a856d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0864e19a-b5d5-4ef6-993f-c45ba75a6854"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3af47d6-a1d8-4060-9188-86b548baa064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "02fb645b-36e0-4fd6-aa2a-04ae16ab2cfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "063001f2-9602-40f6-85cd-5feb40a3b712",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5d83068-7a6c-4e7d-8ecd-78847a61fa7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa136fd2-5835-4265-863f-58ef5e5f8ea4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95301009-1ec1-4c77-8db3-de6ac01c2828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5d79cd65-fa6c-4ba2-bd24-180097d1ee5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19a7cc1e-f0b8-43f2-9375-e1db56ea2b4c",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78b76203-efbe-465a-b3b2-ff0190e5c9cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fddeca3-9cc5-4824-91e7-374d6b31bb88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c83974f-7947-4977-b7f9-bab5ae08f8ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c569315-b5ee-405e-9673-5b3965c5b521"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e783032-75aa-4f0e-8373-d9952d017bc9",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60948584-8649-45ee-9fec-3fe80728d412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14d6eb7b-8d75-4065-9a8f-94169ad5b4b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3109b020-0f5f-4b8e-b1ad-32caed4d3fcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62ca92a9-b26e-4145-b4c8-13ba988c376f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbcd9335-d307-49d8-a5fa-3465622157a3",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d09736af-51c0-481e-a95f-9e325d33fbe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "425fd30e-7bc0-4bd4-8638-750883200006"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45884e79-62ac-4179-8990-fb0fd9595797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "68b8d6e2-ea3f-479d-b318-977d6ce648fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fa06961-91d8-495b-b55b-6cbed64585f4",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49eb0f1b-c6a6-4e74-8343-330d3a9bab76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1930c76-ebc2-460f-a7d7-74306486a857"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a191dd00-6c12-4c04-a603-949bdce5d858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62a67e61-e556-49f8-9c98-3c9b4d43c44a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8dfb19c-e81f-455e-83f2-7d2ad12614eb",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e813f49f-60fa-4a1a-9cb6-564a4fc49b05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db4de887-ec4a-4465-b149-c12a17e10f94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36f34ae6-62d2-494e-9793-a940e31b7a75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ea27d2eb-09b7-47ac-b5c3-1b6f1c0c8988"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a555ee9-e96a-4a7f-ad11-fe02c1fe3961",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d54a0ecf-5c04-4984-9d56-a1f83ebcf7c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a3e3a66-f876-4004-9f8f-697a1f07e7a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee3c5128-dcad-42c5-b702-f5031f99b96d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a21853d4-4ba2-4a50-8308-866b13a32054"
                        }
                      }
                    ]
                  },
                  {
                    "id": "568da283-951d-4efb-9e1f-6605d39f96b9",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e47a91b-cb82-45e6-8c35-a1f4c65b91e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40a70871-ac0f-4eee-af02-bd053d99e999"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29728948-9c7a-4e59-9ff1-6ddfb364526f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1c5ec269-5082-4a95-8255-e14243f61318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c6ce8d2-59ed-4b6f-8a39-0af76d739783",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90824cf4-f869-46f4-8336-a803c5df310c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "265c827c-6a21-47b4-a95c-d248ea40af94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0fb9f5b-0de5-43e2-8aed-08b0bc3b8515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "84e30aa1-477f-4027-a219-60a5577443ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e101d795-2521-4ee7-9c75-fd86408ea27f",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a62dd123-6bfb-4644-a177-6fff467c79c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a94bb49d-887b-4ca8-aea2-5b3417dde11b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95804134-0529-4993-b81d-98e3b33e8de8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ca5a5710-d8c0-47c8-b4ad-abb9ea2e3732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbe67d59-ba98-4302-bcef-3c3f91ca893c",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9855acb2-9536-491c-9a5f-34212fa8fb2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae960654-5d34-458b-834f-df756017b8c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc288451-2de7-4468-984d-5aaa09b092e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "229e77cb-17af-4f67-999f-bb8a52ad5c6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2908949-7e87-41c9-8edd-0e39bcc2bda0",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90d6f15f-4990-415d-9058-5dc7f67444cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fc59005-e8a1-468d-a6e8-a9b543de0b28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ac0be07-4e7b-4563-a477-0c8284048561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8426724a-a25d-420e-ac94-a83145a8eff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ee86c0c-ecb2-4501-95d8-d7122b6a38c5",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22dbe702-318c-4aea-9c4a-7e3feb857d1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5960c040-bf0a-4629-b5d7-b737c9637056"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "191816c3-2b85-45e1-aff2-f56285c64900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0bbc8ac1-a69e-415e-a765-e7aafc80d273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f3bd79d-c62c-4199-9c72-058ddb427afa",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b878a09-f31d-4dfb-90a2-d4e6b397616c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ad1de61-da09-42e1-a13c-7c9da78d57f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40b14a8f-efd3-4c27-a986-1f9862f47e13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "619baa5d-17ee-4869-9c4e-92a068d3c30e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ce0f266-9f07-44f2-98d2-8ec46d9f2f80",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77997c91-62ac-404b-b25b-55f27f7ced26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90c91ec0-731f-4b7e-be4f-ddfe2f43b13b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1e8a7e2-db8f-4469-9101-13f0b1515bcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d90fcf6d-3e5c-43f5-9732-5cc2656acead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca949cd0-4250-41fa-889c-3f792c54f6ab",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a197969-4b89-4e54-ab3a-01ed054889be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adcdadcd-27a3-4f1c-8bc8-2a4edbd46ca4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "912e336c-3d48-4dcd-801a-9231be8d0212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "76c284e6-b09f-491b-8498-d2e00061f1ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5be5d09f-384a-4acc-adc2-6977b5651050",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54793ccf-b359-4bab-8c4e-082bef20eba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20329e35-ca08-4519-b7de-2396ed9f24bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e05a0b5-60e3-4108-aeb7-6785222f9dc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "95a05bad-31c0-44a6-9d22-e5223890654c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cfc0b67-b063-4ad6-8396-a40dc13bc0cd",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae1a8e0c-0233-4ac3-bba5-de64417bcb5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a808be2c-734d-4413-a609-7171a9833399"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b91d6ea8-84ff-44c5-b5e7-bab1eea37ccc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "88ed21d1-b811-46be-9829-c88928156263"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d273cb5c-777a-42c0-8b13-292d642773fe",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2530c7d9-3ab3-4681-95ba-e6fc14ac02fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfbf567c-f0fa-4d60-b734-fa709ac540ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8b612f7-afa2-4d9e-9684-b354c820dc39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f2d9115-26bb-4998-8e2d-cad6431cd08d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9ff11c7-63a6-4ed5-8bb2-c821a89de6cb",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "654b0faa-72e4-4ae7-a3d5-c8c2ece52e79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "500bc4ec-1fb2-41d5-a6c9-306e47429219"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa40f5c1-4231-44bc-ab77-26c6342dc8b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "30f4f361-41bb-4268-adef-a596eb87cbfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b34a5342-301e-45ac-9e35-c579599477e2",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65f2cf48-3f19-413f-843c-b09dbd497cb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb35dfc5-1ba9-4641-9fd8-fd0bcd9b3f35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ecc0ba1-7125-48f9-9825-8e36540b44b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7f90478-7e72-4579-967f-aabd20fee46b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7accaa25-066e-40aa-a097-8b9bf1dd89ab",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0597fb92-7393-4213-9408-2090505a6091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fc75169-b254-4c5d-bcd4-1d207f81771c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c27091d-c4e2-4994-b24a-3055110eec4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4acc57b-3b4d-4d4d-af4e-a43856b48bd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa0b75aa-044e-48cb-9711-7b3717823197",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c02bf305-1368-44dc-9fbb-f51842ba6203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "931acfa8-35d8-4a9e-8cd2-67f83ae96a96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c900922a-a4b2-4f63-a054-fa35648b9fbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "58d109b4-12b6-4320-b7a2-0a2768535baa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a002599d-2c63-4c7d-a7d0-943590c0fdf9",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed0ff738-9c2a-46da-badd-82b86465bab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e1f32d2-b257-4c8a-b8bb-f1830cddf6ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fb270c0-a78d-4231-ba8d-e1b6af8b4b9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a11af76-643b-4acf-a813-eced961ef9a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e04f8c22-fe9a-4511-891c-27e1ef3bfb8f",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e1288d7-f532-43da-bbf8-9e06e441b155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7f005ae-c3f8-48f8-9a3f-822946b55d0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cf0a5e3-6ea0-4853-bd21-1e313d098367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2bf20d8f-08a5-4817-81c5-44f99fb5354b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bff4166a-8d39-4a3f-a030-6233290cf443",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49243235-be1c-4a87-bd6e-edb904d5df77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e626822c-8d77-4d53-b4fc-ed74e7c65bdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4951dda-ba76-412a-a1ca-0dd32f4d9263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f50e0ba0-5d9b-4d88-88ca-d327b7e20121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "993fc2c8-b43a-4660-8a2e-06a453587bd3",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d8ca80d-20d4-4eea-aa7d-dfe2489a74ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82e41d88-837e-4cb0-9cd2-f5574ebce65a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae3503b0-92fc-4705-84a5-51430c380a34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "93672b8c-2820-456f-a04e-43ef963c78fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd65a9af-acbe-4130-a4c7-f380a1e91995",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b058c755-1f53-4ad8-a0ab-fa87b13d1182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74cb5031-1098-485d-976c-41dd2030c482"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b64f637-f923-493a-b099-8d977e398708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "5d65f0ee-5737-4503-b154-243aaf4b0044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cda38b7d-8505-4165-b586-937bcfe4d063",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0527c76-9a0b-4419-8d61-2b8cf3e11c1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3d837853-2b0d-4dde-b419-94ba1287ba22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a76955f9-4279-440b-92db-0c7643461798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9ebbde28-ce41-4e6e-b750-9d68c78b5f93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de7cba4b-21d3-4e53-bb7d-930fd380bfb4",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1e48e32-68a7-4d6e-a613-d07a4086a463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4809f9e8-6055-42b9-b5f2-6cd5b6f94985"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "078af68d-b183-47c2-923d-d763161e27cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3951db32-5da1-46ec-abd5-7053d9e3f0ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "badec737-bfc1-49b2-9a50-6afc55c74e0e",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e584eb2-5494-4eb4-b261-17d27323f5db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6adb650-bd1c-46f1-b0c9-f112a5b32471"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "684c4d7e-a2c6-46bd-a486-6dc10b21c964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "734e8796-3efa-4408-b7a5-a58d9a7f4fd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8ce8514-e1f7-4ac5-a0e7-760af716314b",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "513d2617-e6ee-4452-a65d-d803a43a23ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8aaf516d-e0e8-4ba7-a6ce-81dd9fb5a451"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f42471f-cacd-4100-b015-56e72330db28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "01ea933b-3858-45c0-a5ef-546ba97aa135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07ec5eaf-50ec-4521-b3bc-3981446f7e67",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96aded28-28da-4e03-ae9e-c4fbdec3981c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2aa006dd-9f43-407f-8399-e45ec99c5079"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a036064d-078f-4bdf-83e0-70bf13b5b926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab335b30-6698-4a29-baca-1100e180ae10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed873a25-2d1a-42c3-ad9f-36d1647a5ed6",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6f314cf-82ec-40b3-b5e5-75fa9d736846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48b86968-b8ae-4517-a283-8c02e36a8ed1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e7b01e7-e955-449d-aaf1-ed217067d524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a6ea7bd-cb36-4a09-8f39-39fe456abf26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0b94f78-9ae1-43b2-a70f-b5876eddca12",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1b34790-49ff-4aa5-8b7e-7fd3957b092f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "389663bb-b528-46c9-8ae7-f2eb76f75cba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5d57ed7-c0e6-4d5c-bbcd-ba33de6a7c88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "85a61ce6-57a1-483d-8284-4eda0298399e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99e5f154-6bca-4cef-a4e8-064a03749752",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e019ce0a-998d-4297-a969-0aed20373333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03531aa3-8524-43f1-9514-c30ad1bc7fa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f8427ff-db82-44ad-926b-de86a6c2fa0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "658c58ab-b8cf-4b0f-bb14-c5248ee3eeea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3590adc9-322a-469b-9970-3173a8ac4cdb",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f796aaee-e16c-4901-9ae8-799e2e11dc36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab77e7e6-0045-4746-925a-41ebb291152e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfdea78a-ff36-4c7f-aa10-d940d6d21583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c368fc1-4c09-4630-822d-0034187e21bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b366086-46fd-4cd2-a193-f707c90c5467",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4fe60be-f037-4aff-bea8-1601180c562f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "195260f0-cafb-4ccc-a74b-37a2034fb413"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee28a333-a09c-4243-8e08-c99649a33004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5ae75ee-086d-47cb-b218-4f608ba40874"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6437a91e-d205-41ac-bb1b-0a52b11f8432",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de0fd41f-28f9-4ccf-ab0c-63234f39530b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9650276a-bfcf-49e0-9532-1384a9dc1dec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3541620b-ed23-444a-8e36-c3577aa8d8bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "047238dd-6bf1-4921-bc56-324428176963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "218b3103-0e7f-4a4d-b444-0576b20ccaf9",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce4c711e-82ba-4656-8c12-fe9d50cb2f90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e27dc5ed-de11-4fb5-ba2f-75c3f41f079c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59c1afd8-7c74-4045-b3ee-7c86311ddb1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "db70b6f5-40ae-4fdb-9260-a581323ab241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04467059-dfad-46c2-bcf6-5c38b80837d5",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "136a911e-3bb9-4f3f-af81-2aafea6a2580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcc7fd26-e90f-4996-a2ea-ea5693ac7cc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecdb7099-f6e9-4369-8643-d55a773c5902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ebcbaeb6-bdb1-4d26-87ca-c555a2ab638e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2c5bd69-6594-40b0-b0da-36bcfe1b690f",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a71f302a-0117-47f1-ad94-27654b43696d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66f21ac8-dbe4-4721-97cf-c7ad1d44c42f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e60db01-15cb-4fe6-9d93-71e862515eb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "13102b77-0319-4713-be42-ba9f7c65d019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee5da445-3f4a-4fab-82c3-c9bf044f047d",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00dd4250-90af-4ed9-92b5-efba0139e79f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33a1d1f4-7da2-4a4f-81ce-c83ef047f267"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "418df11d-53d3-4204-9650-81424090f54d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9ec0766c-5f0f-48a4-86a4-571bfe5dd283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02ec02bc-fff6-4b16-aae8-9d767c7c725e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18ad1c2e-921b-4f0c-8094-7b2a4de07e15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be59eec4-bdb0-4c09-abb6-5f1e5b239041"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e640ff-8eb0-4a17-bbc5-98e207c41828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "8efbfa3b-d01e-4d68-a600-ef15c5c2dddc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac041587-5837-4a83-afb7-233e7afc6657",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "248be834-a1b0-470a-aa41-db2ed63cd63c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "640e1ec2-3336-4bb4-a8f5-f7b4d05fb5cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7df9f9a7-5dba-4b34-9ea7-811117607264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8dce736d-31a0-4ce3-aa94-2938ebb54390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcf3b0ea-3f92-4d6a-abb2-3b3fdf745352",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "940dc49c-ab1b-4e7f-a87d-03338c52240b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8560226e-c47d-4684-9b31-44768aebd4dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f733c774-92c7-4403-96e4-877926e02792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "279d7734-3947-4372-adab-bff1e3a49528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43347434-3b79-46a5-9677-61b4059dfc6b",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e522cd0-1bf3-4e03-b9ca-bcbab4271b06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d2e879e-99e1-4010-93ac-9edd4de0128b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5408468c-ae9a-436b-960b-167040edb2f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "058028b6-4de2-4a79-8a37-18f98035324a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc8ac89a-ae33-4fe0-86d6-8f1d4ab0688f",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2431a47-12a9-47dd-9c60-1768c71e8af7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c27aa4f-f59a-4e13-94df-1e0fe40d6ab7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f855f21b-f902-40bc-8d06-7e1a73d31d7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "be7d2503-b723-46db-910c-edb045e20fec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7512b3c8-45c4-4bb2-84c0-6de786d248f2",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2781a5f-8c2a-42c6-8a27-a1184b7b6012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af1bf9c5-0454-4ba7-80be-7d5fcd9ff8db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "346e0742-eee5-4205-a8e9-3488e3c886db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "942afdc9-2e2b-4c0b-90d0-97c1798d2a1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ef4c392-b996-4c16-a134-f6850259e1e8",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d3f214a-f0c3-4a34-9a66-06795a78dcc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9613d36e-468f-4868-9805-bec3a43529cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f280339-479d-4739-98bd-d2d3fcf2ae6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1d1871b3-9edd-451e-b145-eb546d9f6994"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73f2700c-a198-43da-ae78-f8907f3d5457",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70edebfe-b619-4fe4-bd95-5ec0a3ba92f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec8acbae-4a36-4e11-9dcb-007de495d988"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "861043cc-70fe-45de-9aa4-55cfb4c29a91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a907a4a1-84ba-4510-b841-cb762448f539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c6c9a30-c168-4636-bf86-b21c7b38682d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e91ccdd3-7649-4862-bd98-195826143905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77d0031b-a42d-41dd-9fb2-0e72fa29aceb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccbf34d1-96ad-4fe5-9c8b-189dd5cf4c86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6d1cdd3-860d-4abd-9712-119a4bab48b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25cf5026-3299-40ca-b492-93cb774292b0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de553305-4c99-4592-8492-92cc5fdc14f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34c03742-900d-43d9-8cb6-bf4bb6e6c93b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcac3584-b7fb-43b7-a0a1-78908e36fe39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3499a1b5-1d06-4c2d-8e75-91f87166deb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c685cd0a-8c29-4f21-902c-3e864d792297",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23ff6b24-8522-47a0-a3a1-7a680384f767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad41bbc1-4614-48d1-9fcb-8f0467eda89b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0100f4fb-ded9-48ce-b079-0c3f28d6ae49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "5947e311-18e6-469b-a511-f8691770edac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2498eca-2086-4335-929b-8725e79e46b6",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03f90972-15a6-495f-8541-685fe188c201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e809a47-e2a1-4421-9e2f-86a000e113c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b591f52-de92-480e-9536-411faf466ce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "41c5fd6b-c17b-4da6-b523-6a7bf4a3aa9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebfbdada-aff4-4905-95ce-f18fbf74f9f0",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5083b0b5-41c7-434e-9722-e297ec2b81b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5697b42a-bc76-4eae-8831-6b62575952de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8a8b83f-a860-4f2c-baaa-593fae4aa2b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "964ccd29-5c92-4713-99fc-dee2745221ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9eb7efa-c0f8-42a3-adff-37385a3a71ff",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d68e9fe-3b65-45e3-a8f9-ab1fa9bb7236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63d95272-5862-4fba-9a29-542289268aaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89b2a249-727b-4e27-b2d6-aed1ff72d6a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "47cf602a-9347-4c07-abbe-62e3983ee27b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47399851-5f7f-4f99-95b5-9a0b5300785f",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22b3b445-37de-47f9-8f05-371bdd90231b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14bd20f5-e53f-4902-a311-f3a654fbba4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d334d86b-b056-48cf-a581-c2d0e558a650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "82731367-80b0-45c6-bd5f-bf850b466d67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ac6344e-09f5-4d67-b651-7cd0b49165a2",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ae6144b-aedc-4315-a67d-9c9d45f75ce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e6867bd-c460-4771-80f6-d72fffe2ac1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc8074fa-1de3-4691-baed-16c1ee73bc19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6aca57ba-a9a8-4777-8715-efef99240465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c641e4c0-15f5-4d31-b79c-e53ee1520c67",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a826d63-9403-4107-a66a-6dcda2272ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a36bdbf5-8fa7-4d69-b211-682623eb9861"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9d0086f-643e-41b0-ba42-2530deb6343d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "51fd9808-53eb-4bbe-a53e-6e3e6017da81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "858777b3-2abd-49ff-9ad2-372f65a537a8",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "069efee6-7918-4c74-9968-56fe9d9e91ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbb17f7e-016b-4005-a8d5-7d6fc4ae522f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d7d849a-8c22-4090-8ff2-6d0af70431fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "523107ec-4d57-4ea6-872f-343bf60cbb7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc2a9fbf-79b0-4e4f-8dfe-1e97f7b03bf4",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43fee015-4cff-4d24-a4bb-b72deacbf287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1809f9ce-34f9-4c84-950e-82de2d492c5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30d18a49-6207-49de-87d4-f80ec46458ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "13c57d99-11f7-4816-acb1-8e02452c11a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43d5bfdc-8dd3-4fa9-a089-1631493578f7",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d67df788-d8b2-4492-aaca-dfc9c685e766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cde8dc72-e6c6-4ec1-94ce-ddfd41e5c2d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ac46457-d047-4756-ae0e-b61fa51672f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "94919ba6-35a0-4f66-90e7-8b6168b1d01a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c54ec9fb-e1be-4354-8170-af43438f2c44",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40fd207b-210f-4d19-9407-d6d470d7c48b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6b6b9bd-3c72-4399-a4eb-b537c6395d58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b4a48c1-7724-463d-af56-73713a2775f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8391482-df80-4ce5-b296-06535a37ff96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58b0ad13-ea44-4675-989c-b4057dcb0bc3",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b48976b-3d6d-419a-b91c-aada0f9e5943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd7c5e18-1988-4e22-af17-53d6c9a61a58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0779f0b-425a-46dd-afca-e8cf179408a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e51e806-c8ca-440f-8a08-6c780cc72cf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1f7d9aa-4bc4-4d4f-af7e-81a3916413cd",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad4f44b8-1cae-4a3a-9664-2d0fd577079b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32971d88-910a-4ec6-a655-18a9fc3c6550"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30884c73-15f7-463c-be61-b3e1ccde194e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5dc9ca98-4ba8-499a-9fba-1f04ca6a8af3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "591bffbb-34e7-49cd-bbd8-8216229cb310",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46e88ae7-a861-4d0a-84e1-829662a21e28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2ede373-6c1f-4a15-b293-046a0b2c1121"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0bf85f2-6212-4a27-8746-08a2f35b96a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "65149cc8-a862-447b-8403-c9440f956fc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0cf7d30-600f-4203-8a0d-92373334b3c4",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e6b5e29-ad3f-4f4b-9346-fffa10562e97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "509b2285-68bf-470a-81fa-40e92618bd40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfc35e17-7ff0-4b54-87ed-ac2b1297195f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f6e9e3f-ea24-4568-84b3-f323a1732d38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eee9d6b-e16c-4192-961f-65d0745daae8",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa6589ab-0ad1-434d-a164-a1c2cdc4159a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c4250e5-143f-472e-b101-49c99b34b75f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b2dc160-83ce-40d3-a9eb-c1ffe749ef82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5c41883-3bc9-4660-b2eb-d18d58e46310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15eb7f18-d65f-4efe-b63c-058a57c3f625",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5f5ec45-e6dc-4e78-bbeb-7e91887d0077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba509908-2ed2-4fbe-a6c7-2e59240f9e38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fe516c0-6bcf-47a3-a4d0-074ae5fcaa2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0caf252c-a540-4927-adec-6fdd9d71bdb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8161231e-c411-4930-a512-08e1234155a5",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73ef4762-3b05-4b6f-9357-1ebfd2d5ac91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff9636d0-b63b-4b69-97a1-a941b277f25f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9605c1d-98c7-4533-b1a8-ddce63a03e9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9cb607a1-10b1-4b0c-ae31-0c1b28bc65aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a526193c-cf7a-4e73-b983-37f189d39c39",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cda64b7f-2e5c-4f66-96db-b72859cb15aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b655ae5-3c80-425f-9809-0c0af1875527"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c246d0a-d3c9-471e-9696-a2c3c6a7f59d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ee1977ce-7bd0-46da-9fa6-c4ce4d7501c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c51a02d-8bfa-4199-8a0b-b92e102b3daa",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32c83e3d-af8f-4e0c-b5a5-9540e020c357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30c572fc-2638-4215-9779-88e515c8a45b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baca89e7-c100-4461-95fd-fc8aa52f6cab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d8284460-efb9-42ae-9f36-dc3b322bcdb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f053175-b10b-42f4-9646-00e55fd60fca",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "762323d0-c265-4603-ad40-eb5ea32dcce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5405865c-fcba-4bef-9f67-711c0c80d6d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d33a9d0-f252-4235-a45e-964916e3f95f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5f566b5-e056-4e79-ac36-2bf6adafbce5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2db1ffa4-e222-42b2-87b1-fde41bb37964",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d7f6d81-6b2f-443b-9214-a2c2278b3bd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c529721-7a86-4f66-981b-49ab8d9d9118"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34738cd3-e8e8-4760-92bd-9b260095b077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "65276fac-edf0-477b-94c7-226f3ac2fd40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e1559f9-d080-4d7c-819a-473d9af2a185",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14626aa3-e165-48ba-92c3-e7777f35106b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32570f82-7a42-4ae6-af2c-3f1ed9354ee7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec2b9798-cd74-4ffb-a4a5-943808cb025c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4958ee6-b0ce-4745-b53f-785d95f08795"
                        }
                      }
                    ]
                  },
                  {
                    "id": "776b6c08-53ee-477c-8d00-1cb72a9e610f",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17e83436-3db7-46b6-9193-cb5e5501dd28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0df55d3e-ef3e-45e9-8ae7-4a4b15237288"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "401eb55d-c9af-4ee0-9304-33afa7ba2798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f1d0ed4-509f-43ce-a1d0-78ea20e164a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e938bde5-f902-4a77-acf6-814ff915a113",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a78eb65-f698-4fa1-bcbf-b3ae6ec01dec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22d458d6-d9c6-4a9d-8bdb-fe822bc3ad20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dec1661-8dfc-432a-b58a-d10171d52ae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "38a58700-ceac-4688-b13c-1ff187f4cd59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0736b60-a02a-4c19-8623-283801e37251",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aae8d4a4-85db-4e9b-9af6-6a5d524e5472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a53b7722-2076-4510-855d-06cf801431d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b600ebd1-73c4-45e4-9ae1-9de9c4ad6005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f26eaa77-3083-4379-a5d7-e0c475e10818"
                        }
                      }
                    ]
                  },
                  {
                    "id": "516f716f-dcef-49d9-8032-9e73a1e8f0c5",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "042df1b3-ad4a-4e8d-8963-61a921541f4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8a73f17-f3b9-4b7f-9ac9-4f6c84315837"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb359624-d2b2-4bce-91f0-673dc42b4f8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d8a2f6fb-0423-412f-9cee-f42b725d7082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfc331b3-e6e3-4004-a75a-4004c4649aeb",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52e5e190-dab9-4e27-bc47-a1ac46149ee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7bc3bf6-1d5c-431a-9010-420d575c83ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19cb4332-8eca-4368-b10f-5970c2d57a66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7724c6e9-bcae-4a46-8afe-570deb036a12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf0454c6-8972-4817-ab8e-88b563bd92d1",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e43103e-1d6f-455e-a7fb-8fc6433f4274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6557b903-b8df-40be-8a5b-395e77408aa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee1434b1-7baa-42ae-a03e-bbb413242a13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1f72f7d0-ab4a-4109-9495-87317d97da9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a087353-c6d2-4f0c-98e9-231f643c0c4d",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6315313-f2df-403b-bf70-3e276c96d78c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fa0ce75-ab4d-4b0c-b38a-33360658d982"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66d8bae4-0892-4960-987b-83d014f17e7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8c681d49-40d7-40fd-9abe-518f3d2f8ae3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b436bfbe-a322-4932-8f56-72b13a2b3257",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44404a5e-242f-43c5-a514-c3c869649f04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29995b9b-c75b-44f2-98aa-1b322c2e1ac7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "101d9a43-190d-4fae-b77e-18a54744bf05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "dbc086ed-8e72-4db8-b8d8-e1abf227dc45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "191b2870-eccb-4db8-a8ed-4c93efa75d77",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c32a71c5-7e6c-483e-bd72-a0270dd465c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "0d683b39-e792-426c-a573-b27234aab5b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a149cfe1-d68d-415d-8d2a-656e49c8ec20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "39861a3a-444d-4cce-8b23-7d6b9b411aa3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ab07e1fa-8b6d-4925-9a76-3026ec3680ae",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d6cd0e0f-363c-4181-b8ca-9ce4527c1e6f",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6766076d-0cac-47f2-bcf7-b4bd5d06504d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dd10a03f-b4c6-4c18-bec3-c07e848e352b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b632426-ba73-4664-acd3-45cf0105d89c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7492f3ba-5051-441d-82a1-877890d58536"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3594938a-5772-4f86-a3f8-9125fb3b01e9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "13ce4117-7422-470b-b3ef-e1db744256cd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3554cf1b-1545-45fb-b622-f4fb1f2e51ea",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "21a93dc1-8751-4801-a28d-078efed624c2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bac29f09-6b3c-4bd3-a4b1-e3589f991458",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b68c2a41-c5e6-4df9-a690-da883a371326"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f06e9fbb-83e8-4865-9cc3-6e96027a5879",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e135d782-d3a8-485f-977f-393dab0a03e4"
                }
              }
            ]
          },
          {
            "id": "825a95e1-d7de-47dc-9366-cddf27f3b36c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7ae569c3-684a-42e1-802e-df955b5790cd",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "7b503a90-92e1-41b0-89f6-228482d612cd",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2d297f4-f9cb-4342-8c37-ad183ac54429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "3a3e177c-28a1-4dd0-a777-ba96410c1b83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b90a7205-4689-44b8-ad75-4cee17a30d58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e8c85cf-59f5-42e4-bf9c-8fdd45ed4dd2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "14b38bf7-3e84-48b4-8d68-d03236a6472c",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "26621538-8d12-4395-b39a-c58cca2039bb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5ab9c0bd-2fb6-45ea-8b03-fb27e08be5fd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b4bd5b20-f8aa-46a5-af3f-4c0fd4a5c293",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "54e30cd1-0e95-4d36-93d6-f798ef80a6f6"
                    }
                  }
                ]
              },
              {
                "id": "9e8280ac-95d3-421a-9309-95e9168d8864",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ec44bb7-e610-47e9-a4e5-ad6097218d68",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "076ee0b4-98b5-4e90-8aee-bbd023e28d3d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b636a81f-c8e9-41db-bac1-ecbcd4d1deeb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f9492974-4744-4aa1-b617-35fa57cc008e"
                    }
                  }
                ]
              },
              {
                "id": "0c30fb16-a1f1-4a10-8cfa-b23037fb0f2b",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e8e2ad72-c03c-4916-9d85-f02459357f21",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9315786c-5545-42a8-bac9-00d13d3df582"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0913628e-9833-4656-b562-00596ecd2a69",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ea74137e-c0c7-4b93-a8d8-21413445d8fd"
                    }
                  }
                ]
              },
              {
                "id": "0a260703-eb6c-46f3-9395-b139d348493a",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f42127a-a6bf-4fe1-964f-3384fabcd7fa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dbad47a6-1c28-4f89-9be6-375602d32b46"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9f5b29dd-7fee-4904-923f-36df96719e09",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "a3a0c310-48c1-4716-bfc0-b1226bd1cc6b"
                    }
                  }
                ]
              },
              {
                "id": "5c17e349-018b-400c-a4f0-3c3f9e921966",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "22a8945c-a995-428e-b90a-e891d02bc086",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8c5b67b5-27df-45ee-8e87-257e9d5531ac"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "290fc876-98e2-4df3-8fe4-84af4acad0a1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "26bb4b4c-7ad8-4d58-a229-2ba3aa5047c1"
                    }
                  }
                ]
              },
              {
                "id": "a3ce74a5-c663-4de5-9c9c-1eddb8466acd",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bc8e4ce6-6749-4bfe-8275-4b2de67129b9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4be6aef2-ec6a-4a0f-bdc6-cf5ce51e9b2c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cb9743f3-4e86-4705-9841-e62e853f7fcf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "286cc61b-1673-4a71-ada1-f23ea382fa0f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7f73205e-6e89-48be-9088-2825f1415eb4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "aee463c7-abb1-40b8-ba2f-4e658f5ff413"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e68fc4a2-9904-482e-b940-8179be32eaea",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0861b6e4-8080-41c6-bd86-a8d6e2696e69"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a713477f-69cf-4f48-a43a-110c5a64d31e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "e92ea790-81c2-4630-84e9-733c1e7ad9f7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "da874bb0-599f-4729-af4c-be401180ec67",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "04bdbd15-0a31-4816-bcde-049beefda319"
            }
          }
        ]
      },
      {
        "id": "a528b3cb-fa10-4e77-b0df-335c790534cd",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "d716a051-47cc-4326-9e8a-876017215e0c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f4cf0685-be77-4838-abdc-d17be9acf9dd",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b46902a0-d1f1-442b-beea-dc65376148e6",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "529b3765-f583-423a-962a-72b2c9e6439e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c168b5c-7715-40e6-b816-24e53bb8fe21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccc30861-12d2-4d04-8e70-38d0f0e6ea7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "f55282fe-880e-41bf-80dc-ec4e03c1f31e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fafd0fa5-c078-4db6-a1c8-6fb9ebe03493",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f6b41fd-4944-4053-9945-c71f0d945c52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af7c8c75-9138-48be-9f6d-56e4f72b4486"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4dc7c74-21a8-4cf1-9cb5-441b26d77a42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c49b352-710e-4e59-9535-f07f13516189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3356fe7-82e5-4669-a52d-cedae4696ee9",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c15a4a8-3049-4cd2-937b-a58fd3f1ea7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4f58914-fc8a-4d36-8299-a03a397c762f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f6b6533-c6be-40d4-b6c4-b2c433dee898",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4814ea35-6691-4496-9895-49a22aacdee5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "030bc201-fd33-41f3-9e69-c586427b5112",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78adc088-356e-4f73-82e1-06e5fe8c9b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "057fde3d-80b4-498b-bf23-8af7d5206077"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d40638b-deed-4058-b92e-8f616525b5c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e444ab15-9355-4bea-9797-765d4f7abee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "857e4288-4274-4440-9ad2-14f4772eab43",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30cd17bc-5f20-43f8-b797-47a8c4af4b5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27f7072c-d2d9-4848-8d10-ea03eb089f34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1db4482c-6643-46b0-92d3-fc05fca7d336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba40ac2a-30a8-4d6a-b44e-359372c537c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7feb5110-f509-4b41-b726-0c822a9ca4ff",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "567979c1-18fc-4960-8bdd-d02ab94087f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1104dd8-1d1e-47d8-884c-b967ae06276b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a514110e-e4ad-4b3a-8683-1595df9d60d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1423b001-9a7b-47ab-87cc-277108e46e5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d01eefa-8b89-49f2-94a4-46df43868704",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83f08efd-910c-4a96-8e66-280f607d76fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a385202-eb12-4625-bd54-07a934482b85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c27da8ae-54ca-41ac-9a20-2b607efeba7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ae48dea-e011-4430-af8b-d76ee90bf187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89812fbb-4d0a-4f55-be84-aff91ba7df59",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21b70ae6-82f2-4efa-b30a-50f7b9a4c2ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4450c4a8-0906-4aad-87ae-8b0e293fcec3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ad3e0ea-8b83-4240-bed9-4738640dab7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c572a29-9d76-491b-8e85-15f71e1c9f8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "902c7a06-8ec6-41b4-ab34-7ee1f036d120",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8538f76-cdb4-4b0a-b317-1872fa09341e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdb7d93c-da86-46d0-9a20-853ada97cf3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "806be4c5-1f67-4133-8edc-806211397dad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4ffbffb-fe7a-47cf-a298-00897f12e345"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5422d17-3c72-420f-bb17-5a2096d02a99",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca795114-6e3a-44f1-8617-750f10aaef10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5f0c54e-4ef9-4f4d-a5df-55d7d98e31f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33a82b16-c3ec-4097-97d3-6031640e6271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "64964d09-ae69-4dd6-ad6a-8d0c05cde233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb417883-ecb2-47ea-9852-dcd157c7feac",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ea911b8-0f71-4dd8-b61b-a715aed08eda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37c824c0-89d0-4a67-9e97-90407292199b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3dff46a-8ceb-48f9-a2a0-a1b4fcb57b44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "2c6e6461-89e4-47e8-ac54-36d14d2c0c88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da877617-d858-4f01-920e-6a1d98c9bf1e",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dae995cf-17db-42f8-96cb-1129b9450ee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "643d32fa-285e-4f52-8b7d-ca0c0ac31bdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbc38271-646a-4240-ad96-d33016479465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5c434580-09b6-4299-86ad-493e2f1c62e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b31176d-f1ab-4d74-8336-ab1ac479dd3f",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5ac9b48-321c-44de-99f2-da9ef46c13b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67e9898b-97ee-4e8e-9df9-9fb6fdfa1c67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b593c1b-e4b5-4bdc-9ee3-b15ded5cc56c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7398b54d-f320-498f-aa0d-ee2540e0b959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "501243c7-8f94-4a51-93b3-e306c09ce8e8",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91d27c2c-ceee-4891-9c6a-2213de01b94c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d6d5c65-66d0-4691-a505-718640b5629b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8cc916d-1dc3-425a-b675-c085039d31f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb29048a-6272-4fd2-8fb7-91b0ff18d7b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6433c9a6-1153-410c-819d-97eda870b2c6",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20074a2b-ae07-4082-b395-c5ceab35aeea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66038f32-b373-4e83-8e60-041ef3316ac9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59d62b87-d73e-41d0-9be7-58a2bbffdcde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "99827c9f-206f-43cc-9819-5cf2530f51a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c2177e6-86ab-4681-b50b-8c6868f5d289",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fc27594-81cb-4451-b7bc-5f85e9569bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08c5aa58-c32b-4fcf-861d-d4288922233f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28a366a1-24de-4e52-b6ae-5eb370142a85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb088ab9-f2c7-479a-b8bc-1a6448ac5de8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24954c76-9b67-4e2a-a4af-faf522b92aae",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dce67613-6652-4754-8dca-a334e9622cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de11e3db-fa26-4604-b38a-547c2252da7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f81d269a-7c7c-45f6-a027-75df72d44228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "30b8ce37-edd1-4dcd-a232-c9d6ae1166e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "143f776e-28c0-4fe6-b3f6-c8842911ab88",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10d737d0-7849-4491-bf4f-af8c50162100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbf627d5-aecd-4136-b298-8669faae6af7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8690d5ca-c876-4b8c-8dc4-79fdf7473194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "14d5b54f-ffba-40f7-9e05-b44695ff9138"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bbfb33e-82b1-4ad6-b340-82c5c2225755",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17a348c2-8eb3-438a-affb-7bfb155af423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "473193b6-5d48-4b07-bbf8-a4b48c76ae26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cf51697-0797-4bd1-9431-54f5430f1f71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "98b6d143-c435-43e2-a5b2-f5709aa46ef3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ccc4581-a113-4d71-b3e8-c5b17078fb26",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26b85141-3223-4b25-8de6-27ea5adc3286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb4f8f18-ddfb-4803-b33d-f32e19840289"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab7c7831-2166-4ad0-99d0-e71339089645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4c21acd-6eab-4421-963d-0d10f6768bf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3898fd30-8044-4bc1-aedf-7bfb93869e26",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "805f9aaf-60b2-4c0c-9d24-30441132d169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fadfa00-b7d2-414f-8dcf-9e6df9b38066"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9c79229-e99d-4323-bca8-589e07518b2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c69d1a43-ddd8-42f7-a63c-d8f8e9c63898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30373fe6-8a38-4b49-ac75-9788b9443b9f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "061ea36a-8c41-45d5-baaa-c9980bd8cc05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09f2e74f-898d-4002-b59d-fbd1557b14f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0d89114-c2ac-408a-9ba4-c73641123475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "429bdff5-e0f9-4639-9ec9-b26e7defbad5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "495c5f5c-70b5-4127-b38e-9dfa838a5d1d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee8350e-e67f-4ae9-aeeb-717274039299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a49f14df-df7c-4cee-afb8-140f0f15fd55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "979891ff-8a1b-4907-883e-efbadedf10fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "55a0975f-c3fa-4394-9fa1-214c3d62193b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f2fe49b-ca7c-47dd-b2b8-ba69f431a9a7",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf4df2c2-e6b2-4a14-a907-bc709e2f31de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d2a6b34-32be-47c6-983d-5dc31019f146"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a49ee2c-4934-4808-a9c8-3962102f68e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f94357b-3a14-4f5e-a3c6-a56abe00a017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8520a86-eb2b-4955-b651-b72aed6c2c03",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e29a7047-0f34-42da-bddb-be753b7459fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c527698-5623-4b98-ad80-a8c2527c585b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0312d337-3004-4cb8-98de-fc6b789d6606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee33fae5-e4b9-4c75-aada-1692b496815c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2f68220-ceb7-4618-a60d-430ba94f07d2",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eb4e552-b347-428d-84bb-118d2eb066b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f43b3bc-2659-4591-97ba-b1d6ec6b8963"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c58cb10e-4012-4bce-9a3e-d94a605f96c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "de8fa806-1ec0-4511-a6c2-54578b35452b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e030d09d-06ba-4e81-a1f3-489967adde8b",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a23602ae-9017-4f57-a080-b6e01f2fe261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50636c90-f49e-4101-b23a-4ef74b6f3a84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97e0aa40-9549-40e7-be2c-017313d80562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f46dfd7a-8c66-4fd3-a11c-9af594cb5b17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2da1918-16fd-4c22-a4e3-694ae14dbda8",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce071210-31d2-4c47-8bd2-3b9c9672a61d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19948b38-22c3-4365-b139-61ad43973055"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50c14f46-6559-447d-bea9-d49cd21b3565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9909a9a-1c93-4ed4-b92d-1de87fc34421"
                        }
                      }
                    ]
                  },
                  {
                    "id": "342023f8-8d24-4a18-95d1-3cf966ac8806",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68d09825-5201-4db5-aecc-c445d44f615e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a4eaa44-bc19-4c24-b651-4310133473c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dd42d3c-3915-4cac-a81a-a24b851a710c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c6b7fd1-d74f-465c-b30c-df79b52b26ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fd4ba2e-64b7-4adc-929e-e7ff8e6ebb2b",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf8c1793-ce60-4bcb-a34e-92cffa8e49b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f67bee8f-0256-4886-811b-adb0c6158df5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a86afd6f-683a-4e0e-ae54-51e86449a981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aaf53c6d-2e30-4f83-8f42-c2643fd4fcf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74326b9f-d973-4c7a-95dc-6fa029a959ee",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e10b848a-4e19-4fb4-ac7b-0290cc6db6fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c75c981-94ce-4c78-9bda-f0be640393fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "387003d8-1dc2-418b-96db-2ea2dd12d524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "87ab34a7-f324-4ee3-a56a-36049d9c8711"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b10675c0-5c2c-4f7e-8b0c-267d08c19ad1",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44a84c16-81d7-4746-a117-0fbbea0b71b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cee8011d-e079-4960-88cd-d1bf9aa87bf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f028fa4-a1d4-4133-bc8b-83e4e3edf449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "46bab9c6-32d7-4136-a1e0-10c1e6a9253a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2486c504-4df9-470e-9b06-329f2d48d25f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3a9832a3-8c96-4e47-b15d-7ebf98a83e0f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d43ef45f-e81f-4254-9826-181cb800b28c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "8632b147-18ed-4a78-b7c7-fe560c5c0732"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbee431d-5aa0-41d2-bc1c-3eaecb7aaab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f9a8af9b-6e46-4fcb-82e6-bc7985e75293"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f210a904-c32c-464b-84fd-b37b0fee21d6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ec405b68-7942-40aa-9af2-bbac865f7466"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "675168ac-cb61-4b55-951c-7259083ccab2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "92afa927-39ab-4aa1-ac60-c21912419109"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5c5046e8-1374-4eb7-937e-962caca6aed8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "907b15bf-38fb-42fa-9252-2fc2c9db4355"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f56ed3a2-b140-4ee3-8c5c-d514966be6ed",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8481645e-b858-4472-b8f8-11b1fead947f"
            }
          }
        ]
      },
      {
        "id": "172bc5e4-1a30-4e2c-9824-0a4859eb7233",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "c0251c40-96b1-40d4-afdb-c54f94767ded",
            "name": "Negative Testing",
            "item": [
              {
                "id": "314a253e-1f2b-4ef1-8eba-70166a8ba9b1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5343f8cd-ce9c-48f4-836f-37ce097750e3",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ba63cce-68d7-49e7-b6d8-36e5e6ee6306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e0ef314-9a42-41d6-852e-9735cee66761"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9752a09f-5e2d-4bb1-95bb-0650ec2eb2f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "18a699d2-137d-4d2a-92de-ab25bd3be172"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7cfa56e-9649-492a-b735-8348c637193d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28f6f626-09a4-4b19-a997-539fc4289972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc317c53-46f5-4f7f-a473-812f8a1434b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1e94187-5221-4218-95ba-baaaf46d38a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "53dbef7a-aa41-4110-ab11-ecca203b8eb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "453dfd3e-b008-4515-9d9f-f9f22c926309",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba67cac8-a946-4020-a32d-9007e9dd18dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d3e0efa-ceee-49eb-8c6b-5df4fdbd1162"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5725cf9f-be95-4d6a-a105-c1b8af7df242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b03d9e59-3532-496c-a1eb-887219ddffd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "744f7751-cc62-4fa8-a4f3-27131ba9eae1",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aacba1d1-216e-4800-988d-28d3fe4534d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66dc5e22-e34c-4fd8-b4bd-38e304a8180b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98baf238-961b-4816-889b-0d8ae42e2666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b983d3e2-7b5b-4bb3-99a4-341da5c77b86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "341e77fe-934c-4021-a0b8-80a8bb0cabb3",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06ff610b-d438-4069-86b1-1347f6c51459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c68d3f8-194b-46b9-84bb-d8316179d433"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3771f9de-0e4a-4bbe-9b9f-4cd076957355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c97c7b65-6d7b-485a-abfb-27818ee5bbcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ac1cc0e-ec8c-4572-a79f-68a1667d881e",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fbc6fe8-ad86-4f73-bf21-b4f086f7a006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae2478a5-dd17-41da-83ac-55859eb3d69d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81c285fa-c2ba-4ed0-8be1-b4bf61bdf899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9684f118-9a70-4cc3-bb25-51c1aae51ef2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f3b192e-95e9-4359-9a98-750fc5986be0",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe370775-4df6-4f34-8ec7-6cf85c6a9a84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc8b265a-4530-4824-8c1c-63e1e020b11d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e247e772-f703-4e1f-bb73-93981a5d9f2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "d710facc-d8ad-45e6-8107-777558c2b7a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d790cf3f-6a3f-4361-ad67-1592af19a714",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4abe74a-b7a0-4338-8dd1-64df7b298e02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03fcc310-3a50-4613-a83b-a94db8b66284"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5453a781-4fb0-4ae1-be42-36a59d3d78e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "62b7e6e0-ff08-400f-8bd5-7845118310d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d467920-28bc-43d4-94c1-c6c52c70a1f8",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31153ada-bc12-4a26-94ed-7fea4e69de94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee9ecd23-e3d5-4d3f-860c-5e9521b0584e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99eb1837-99d3-43db-9e5f-e0ddbe9f331c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c58465a-eebe-4f62-8556-39ba357a8794"
                        }
                      }
                    ]
                  },
                  {
                    "id": "984abfb0-ecaa-4f25-9ba5-ea80824e144e",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e059850b-2693-4f68-9fd2-9a2cb7718bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8205e64b-91c7-4e16-bba7-66e094e9853b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba50d1a7-7592-4f20-aadb-3102df884b6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "79ae5727-b809-4877-9d6c-a8b1110e521e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e38d5b19-03f9-4244-a8af-072afe2375d1",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56cec4a9-9121-4d51-b4bf-f2c07ce6aa19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a967300-6ca9-4300-a7b7-e251ccfc1215"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27126dd3-0b20-4035-867a-2dd5b16ab3de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e389c043-9a94-49e0-ab8c-78cc54f6a080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81a2a266-0e12-4b48-98f8-b515361f3128",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57edd41f-a65a-4ec2-b8f1-0ae43a04443d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d84a595-90d7-4463-8a9a-798097cfb63b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a26ec2f-58b3-4e1b-925e-d5c7b6da1a41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "82f56a2b-a438-46dd-ae4b-6247f56a9686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87d50a19-219b-4e60-9303-82f1c7cc50fc",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecd62c86-4da9-4bbe-b814-aade3ed1c703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8950ff6d-e56c-43d0-8b5d-f0bdb06a0623"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a380fb88-9573-49dd-8d66-4dff3a9ee820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "18cda0b9-bbce-4e17-ad39-86d356414e6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cc12067-19b3-4c5e-b447-00e37bef0b6f",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94d68eba-57f2-4ef4-be11-b292c9f218ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aeb78096-02ad-4b89-b52d-4df3ab48e461"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "910bc7ce-d187-4ea1-90bb-93dfb63850f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "81476365-fc7a-4e38-9a04-925c7a209abe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e531e30-8608-4233-95a4-4f88c5c2bfbf",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d2718f2-e41e-4c45-95f2-67d4c6258a83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "402e10bf-3ff2-4856-8df0-fcd07d438c00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b42ca32-cb5b-4ed8-8ec4-c0e8b24dd801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3a60c2d-4bfa-4a59-9c9c-47d916241a12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3076bb82-e281-4ead-9a70-c482f07740c5",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8f7c795-e03f-42e6-ba5d-49ae4c0dd7cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd0681c1-211d-491a-82b3-a36d30abe2ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed5b529e-4bde-4c3e-adc2-46dc3701beb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "3914024f-9e6a-43ef-a8c7-04ec666323b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa871416-0e03-4a75-8da9-5f023a36175c",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9112f8c6-7d71-4b68-a003-00e9953547e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2364c8b-d0be-4766-8e67-c80457d1aa8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d59a9367-8fdf-4db6-b9c5-5804519aaad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9e08c5c-5352-4559-8cc1-69fa9b109709"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41754870-87a2-49a9-af09-2fb47bcb393d",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d03d3b87-8888-4faa-9236-b1bab079cc39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46472b58-08ba-4a7a-aedf-7d1c13fe43d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14632448-9d73-4779-9bde-d659737ff7bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fff6f135-f2ba-49a4-84a6-3a309c61b54a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "325f6f6f-720b-47f4-8061-0ec2555cb99d",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a1f31d4-797e-4903-8e68-b99913fdc53a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40c5f612-3c79-4ace-ad13-7cd418d825dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f3eceb3-a8b5-4b8d-a455-500861f84837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a82a9de-00ea-43b3-8101-beb703dc19c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4958221-45c8-4f7c-8a47-b5a794deb6f1",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa9e2768-25a2-4cde-a1da-11d45701608d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "916d1f33-4159-4f0a-a6c7-36635fee44c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52e1bfbd-f8a7-4a10-8fbe-e51e5b0b1aac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "54292a63-421a-4e6c-8346-c9447eb6cee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0585bb5d-14ae-4ddb-9cb8-d32b2c29148e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff8a7208-02f3-46f6-a172-7956be8ef257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4c8953c-ea8c-4d0e-8a9e-6808a6e49d33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00230586-29a6-4a40-af86-43b306d703bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "409a8d2f-b926-44c1-9f4a-ec17c5d4c8f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb04e129-3191-4df7-b504-09123f27781d",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a984bdd-0a58-4446-b323-6e630e1b9490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0889e083-e948-4b80-85bb-b09c0b2aad33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26702711-b37a-4a91-b8c1-e3e2f0629233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cae96b40-27f6-44f5-910a-9ae284fd502f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0b8d2b3-b6c6-4d73-b185-f9b92e777276",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d602ac38-fd62-4270-b9b7-798caa923fed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24f3f33b-746a-4f84-a3e1-2d4c5ba5edd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b771f75-1f83-4a4d-8be7-c76d8e9caa77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d4fa65a-1c06-4f3a-9533-552dcc782a54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7db512f6-7fd2-460a-bdaa-87f4556e946e",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07bf0c84-f929-47e8-b561-0ccfeff19c8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b257a832-82ba-4076-a913-8bf651b27d36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd3ea13b-0eaf-47d5-a365-fa01b1979773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "71c92642-b498-4c88-8a51-2a6953e82c31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24492148-3323-4d92-a0cd-ba3ffa297598",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "367278fa-4736-4e90-9a1d-12c1b378bd4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6066d578-de05-48ae-9f6a-5ccf5ad22b46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2e25957-7fb5-49db-a4ab-ac8a70489a9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a934ed93-7dd5-4f8d-9a74-56a1418b0342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7dea6b5-df0c-4453-9dcb-53657966907b",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5345c5d3-f076-4b4b-a103-a04770a9ad7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ede3844-4929-43b3-8742-6ff503d64ece"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bedf5dd-8b9f-437f-b346-e513950f0046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7fc214eb-d020-4a64-9a57-6c6428932084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad5ae164-cb1e-42b3-89ec-4e335b3ae593",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "079c4a9e-e7a1-4398-a3d1-918b2296d40a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f443eee9-78d8-4d64-a629-06785be17fa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0349ea4-6ad7-45bf-aa32-59ce9e953a75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec29c08b-269e-4541-b282-304848632159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aa825d1-4d12-4565-97d9-aa3b7024ac12",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6165ad43-6793-43d5-9fe1-f9865f46316e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9c81582-3502-4129-8432-6c68a9e21d99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b52f3be3-ccf8-49a4-a6e5-220e1091cc1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d75141e-88cf-4b4d-bd73-5c20b2e5ce9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a23f5cf-515f-4736-9813-82ac593ff7d6",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04c4bde3-f15b-4eda-a9b7-513eab06c333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "974fb12b-b936-4134-a628-2465da0ec98d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7abe825-12c9-4248-909b-2fa6a571b16b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eeec3d29-eb31-4896-a0ab-f4d77f0de986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4868555-5585-42e2-95fb-8188fc5ca6ae",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eede011-8dbd-4c45-a6b3-73b1fa4ad6ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d99d3a04-b9f2-4578-ba1f-7c11bfebde86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91005e8d-3778-4d25-8b07-9ae984c6df36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "527bbd08-7948-4a5b-a0bb-dadfcda5e26f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad45bcde-1c14-4a57-beb0-33a26820a695",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df5c5c08-fd94-4466-bc41-bd4ed61661ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eba05ebd-15d5-4704-abc2-ab7b9fb42eee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d18ad665-7bda-4abd-ac97-1878201673b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa63dea6-a2be-49b4-be27-0d7063c662cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9bebf56-164d-4436-9a6d-7eb150748396",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d923c46-d764-4e97-a06a-775f72e30afc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c3c8023-89af-4022-8c69-a00fd5ea7293"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8723831b-6e87-476a-a054-ffd00265f862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1d90218-ab6a-445e-86a0-ccf0d026b84a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b630fda4-2bdb-4685-a90f-4f12d81d33ff",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25cf51ef-84d3-4a82-b678-4dcc04ec12d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb567f01-71ae-491f-a044-94b5d3cd1f1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aab7f704-35d2-4a7f-a366-154502b266d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dbb5d71c-bce7-4eb7-9f3c-7112bcd58530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4479aa2b-0d93-4ea6-8689-e25de0fba621",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b34834cc-ec5c-4bef-a13f-76093f763399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "821f04b7-9e8f-4944-bdcc-cf875a7eaa7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4625ff15-5e71-4a3c-a4d0-36c7c42bcce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "943f9fce-9e3e-45e9-b5eb-02b06dc1f9e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11a618ec-d45a-434a-bcf9-f4fc8544136a",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2acac0d2-a5ac-45bb-9978-bb2cea4b3ba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4d6886a-ef23-481c-ad21-75d5daedb5c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7defbf9c-9e25-4295-8fcb-5bb26d74ab9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bec70df3-a39b-41b8-8791-6aa2a9b0095f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc9d711d-3ad0-464b-afb8-7fa1b7859fe5",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95367a1e-8a46-4d38-a14c-ceb9133c4337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6b6c401-55de-41e9-8e5b-450cf87a8a2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16a2dc7e-3000-46a0-84bd-a0655ce10433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cdd97a41-1ed6-4dbe-ae10-2e1f4a808fb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68b019a1-18c6-4d82-98d4-bf98e9cb357a",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebc79207-8660-415c-84ca-ac3a15636359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2718a2e-3b75-4202-9d60-af99bea42570"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef240f14-a3a7-49f1-81b1-58bcefaa2520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "03f1e659-348c-4b53-ad80-335d4ee41687"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d43465ff-3b38-4959-8e26-f98f42bf21bf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e345c070-1c4a-4211-8c53-7314a47e3ed2",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1d8dc4b-4d5d-4737-b940-b8c5cbdc68e2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "0405286e-72ca-4c88-aab1-78e5a176a509"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4c8ee21-4fff-4afe-8289-97aedd8cfa0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1c245b24-b490-45c0-a037-b62737c0a46f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4c8b8d1d-3909-4b7c-8d8a-a42202fedce3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f474ddce-22fe-44b0-a9cd-c9430a9c8590"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b560c5aa-26dc-45b8-a09d-7ebb6590e960",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a286e618-07d9-4c3d-be72-27f0146da7d2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "404144b8-a22e-4a7a-bcc9-2dc0b3e5a5d2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6285cc57-e476-4e3a-98ee-4fe316f0241d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ed468269-5b7b-4040-9633-8224c547e7ad",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "38e0d25e-224a-48be-908a-7d9317eef2b0"
            }
          }
        ]
      },
      {
        "id": "f726754c-71b8-4aa1-aac6-38a43dc56892",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "8ab4f8f9-733d-4364-95c0-db36012f817e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e900ac65-0012-4129-8c1f-1da0d6b5251c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c73d24d1-76ce-4065-8708-5f8836435f4d",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3ed6750-cf7c-4e71-becc-542fef13a553",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5d954d5-ac19-40a3-b903-877ed632f7a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7299792-c579-4135-aa58-54915a5cb821",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c65637e1-8df6-4870-80af-65b1f789b9e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61d29367-fe10-414c-882e-943e60c9e34e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef9a9fb3-208c-4250-9b8a-71383ed6c4ee",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dfc2034-5b76-49c0-a154-7c2b6015d43e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37e36971-733e-4aeb-b206-bfc537e8ac69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b24fd53-de5a-4f76-94c3-34430ecf8532",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68e556cc-f38c-47f1-a3c9-ca737b19738a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f34cc55-f3a0-4ee2-bad1-64f27251ba1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e1e549f-bc70-4728-9bce-33fa22fa9a38",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28ea8a4f-d1d5-4a6c-aa47-d69da4c44a2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7b9e4ba-59b2-43fd-9646-b5e019149538"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08ead014-aac6-45aa-8667-3f041bb36947",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f6fec14-871e-43d4-8431-8f91e7c0d40c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e32217f5-5450-4cf2-b613-85d28ca7a3d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a9316e1-6258-42fc-9d5d-6feee43b370e",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4536edf3-94bf-475b-ab6d-333d753b3364",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7777258-30b3-42e4-8900-d6acacaa2d42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a7b9356-6307-46c8-bb3c-bc0ac19b3a1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "326f7313-8af9-4dff-8cfc-97502746c931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a3a7947-cea1-4674-a5a1-310002295e32",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed9f8ac4-c401-42a1-b539-476a12c230a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3c1f0f1-0652-4c89-890c-b6c6f3402f04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b75cb240-2caf-409d-8da0-7cb44f471e50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0da6ec6f-5339-4ba6-8aed-8149099f2ab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf8fc266-0441-4e07-a4a8-6e32aad75dfb",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90dd69c2-d6b2-4c81-bbed-f6105515a8f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3388016b-3bc0-4fe9-b602-45f4f4a61e69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5432ff1c-41f3-4223-b470-691fe21759bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faf0228d-ab02-4c20-a74d-b344f1980b47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae67bdb7-1717-48fb-83af-551af5195a2e",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22a3c031-1cc2-48e0-967f-a9463199693e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ceb29046-6c60-4537-aa80-176767a014df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf9b05fe-ee6c-4872-ac3a-b7272ed4f668",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "809e9dfa-06f3-455f-b73f-3dc05f5681e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cb726bb-36d0-4484-ace3-6e97fe076f52",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75db55b4-a63d-4666-bae5-89de81851ee8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c157273b-9f86-4f7d-a610-6ed49a99a628"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "556b9fbb-e4ca-4876-839d-92ecb1baf48a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e58fc36a-8669-4f66-a09e-9490c0ce1beb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8903bbf5-1f7b-415b-af6f-07f6ec393a1f",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8af64c9d-e569-49dc-8052-61635a422b6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7ba3622-cc18-457d-908d-6ca3fc4d7b81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43335236-ddaf-49cd-bafc-90600f50109e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1a3245a-d08b-4ab4-981b-993b00777692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a76020e-46d4-40c9-9d92-7b0967716217",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc6cd6d3-85a3-4e92-a45a-88408c5c99da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78c6b3b2-991f-4536-a4f7-65e5f9de402c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4760005d-e27d-4ce9-a28f-1f19a92d0dcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53fc75bf-78d1-472c-b601-49554eacfb63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f21ec8b-a767-4c48-8fc5-555859905ec5",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e1f4744-3395-45ae-8400-c6471291a66e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5275bdb8-b1b6-4fe4-8e4f-7e9d9cec1900"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "772ae62e-d5e6-49b4-9f42-0855368e0a48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7eec1491-e64f-4fff-a44d-23815a0cf95d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0df0d2e-ebe0-4e44-bc3d-1cab60e48394",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d0912eb-4936-46bb-869e-030ddbc37978",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "845eaf42-1c6d-4c14-bbf4-df9e89464658"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf0f7fc3-ea01-451a-a0f8-c945f57c31c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28fab7cb-04ab-4773-be99-c290422ee6e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "263fc36a-0331-4b98-b572-a197e377df08",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9847f24-392c-4dca-ad04-af64a3117530",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e535e0f7-ce54-41c5-befb-04bd61a9cb1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d413e23a-644f-4447-99d6-cbd19c316cc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "075bb206-47b1-4f30-b8ca-9ca3680eb94b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a3aa333-bf45-4ce8-8b12-b3c608e47186",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03f60191-10ab-4d5c-b3de-eb65bc159899",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2adb8184-9181-4a4d-b04a-312018f6a6fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ff2ac04-03b6-40fa-bc31-4c714602e536",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a379ed4-360f-4633-99f1-af9353232b0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8137e74-2dfb-4e77-be8d-026228f77ee6",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5393b35e-a729-4293-ade5-63d4dcd6a1dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e26a3f7-62c2-4ca6-8a68-405e24c556b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "219759a0-7285-4a59-b332-cba9b7f85d53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a3e25c9-4c6c-4c21-bcf3-e75d60b3ca36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74f57f7f-16b6-457e-8a93-6e1d474d9972",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73716d2f-5b51-4b76-a231-58d3503296f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ae6f5b3-386b-430e-a0f0-939ad4551e07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3320d10b-609a-4138-9b04-376e92bf3ee4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e568f2ec-2b7c-4773-b596-c03b0fc1089c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31ad14af-4818-4d33-bc42-936e620a3e5c",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "883e5d8a-abad-4d46-a291-acadeb43ab8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eecb63f0-eddd-4051-86e9-e22bd6688b2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0265e4ea-8e06-4b21-9aef-e0b165948922",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a8f4efb-672b-482e-b9d6-298b4ef66c65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2a0f266-65bb-4c64-9365-fd4bb040173d",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4796820-8e9c-434f-83ea-b8f0eb077a2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaae94ee-e835-451f-8a9a-539c2117243e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed38976e-dd47-4f28-923b-cbdee007f92b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bed07852-7d89-46b3-8dc0-f745a1aa8ec9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5545787f-4d75-4858-805b-c41fcb026694",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c942749-ccab-407b-b2f6-e20940028bb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f31b200-63a2-40db-92d9-c07416880832"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "443fa304-6635-475f-8982-d6f6f489a2d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3f48339-d19b-4706-8654-c76af5e754ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de8aeff3-2942-45af-a3f2-d9251bcc5752",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9b5fea1-bff5-49b0-82bc-0ab26ad5a995",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8819af5d-b4c5-4d07-9874-62ee04623374"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "166614a2-9446-4c1d-bf25-5022ba6012db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4a70e43-add5-49e4-a56b-d3ccdec45d4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04ad3627-3058-4515-b706-39102ebfdf8b",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d68f8170-3d46-4079-9369-0ac7e3ccaa7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6af83fdb-a39d-4d86-908f-703b56062a28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67ab5528-4195-4b5e-bf6f-7f1f90757bba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93b560a5-c887-42b4-af38-6d43d70d81d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df42fc10-470c-4e6e-b1ef-54bf7eecc4b8",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bd82374-7a54-4b4c-9ed4-17cdaa6ad67b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4752497d-9aeb-44e8-bd74-7735d0701870"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7136a70d-7ebc-48ac-aac0-8c533c2bca3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b1417c2-2331-4aec-a298-8a350c674fb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c57fa0e-c60c-4c2d-9c05-42ca2cf3a32b",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "181862d3-fe6e-45d2-80d7-aaa480e38ce9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ba3e290-c5dc-4ab5-a054-8d15a3a8a2d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fffe0b19-4d78-4826-b284-91941b07af53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0eeb132d-fd28-4a65-90c9-36fdc8a64a39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5f67645-da76-4753-8ba4-c0a3667cda50",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dc8a154-012c-4009-9906-776be6964e8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a15b195-b7af-42be-b618-ed9910e21994"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c4cf7f7-3660-4394-971d-0cef9bc4128b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2df63e4b-b403-42b1-bc55-35188b9d41e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6d9616b-860f-4242-8a59-b5024df52916",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d84a970-4966-42ce-9a51-23703dad5c01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14b1ed8a-b089-42b6-887e-a4aace7b64b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8341f31e-284b-499a-bea0-64d3dd6584a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df3fae5a-e8f8-4156-9695-bb5225e92a27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37f6e545-7274-4564-b078-55b12f099eab",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5914e483-bb78-4956-a4f5-468e0972676a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0dd2f42-39ee-4db7-bc1e-41ca6a14849f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "827d4ca3-2a61-400a-b787-4d9ffb27a00b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89034a76-682e-4e20-9ece-cb185c958002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a00e0867-9ec5-4af8-8ba2-958bb433587d",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "442f3374-15f4-4fab-b4fa-98984f8501a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43c6d3d2-0646-4611-a7c9-d7d4d74ce8d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6301cf0b-0e75-4d38-8c42-9f08ea185812",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa791747-07bb-4e9f-b9d7-941ddb3effdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8099fd00-8e14-42b7-951d-81f9fc32ca7d",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "334a3d96-b444-42d0-9bd8-f59968c61f92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d57c937b-8d1c-48da-9bf7-068da326130b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e701c9c-8b0b-422f-b3a8-24122bbcab96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6fc86e0-aaf9-444b-842e-b1d3cdc8458f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07140b89-b417-4225-abb4-47eb990ac2e9",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef0a8447-80a0-40cf-8aa4-ab4d5f34b3fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c16f2871-f582-433b-b4cd-689802e7e9ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e05dca28-db84-452c-a5a4-36f768ff31e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7bac055-e0e7-4df2-90f7-6b6388f16f72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d17e1c1b-2ada-4984-b5bc-a50dac65726e",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2a467c3-e0b6-4758-973e-a0c69f441244",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "872471fd-c05c-4b90-bbea-2b5c7ec4daa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3025dbe9-758c-4f3a-a62e-b7a2fa3e725a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ae394a3-df32-4988-bb7f-c34a6e250420"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eed6869-e678-4841-8e11-2aa98fa092e7",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e3443f8-1d8a-4003-8d10-8ac752c61af1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31db6c78-b737-4923-a09f-cefd9c218f1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46c40e0a-81e5-4fb5-bf80-ebbdea666278",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a60c9b9b-62f1-4348-86e8-cdd19476a84f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5df2efef-6195-42ce-81ef-d148a2d608d8",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "420f95f9-a203-41b7-8570-3a4ff222bb89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d3f7f53-ffa4-4232-9cf8-3af41b27b64d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51042245-4360-4919-9f2f-fce2344e1e84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa068e5d-91ce-4b9a-afdd-169af050b6f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "822459d7-ea98-4959-a916-038f3466d038",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56653e04-34d2-40b2-8362-825c407c4bad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0639a970-21f7-470c-84be-c2c0620c04f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06cb43b0-42dc-4840-bcb5-9b7db25c8f93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c19198e9-b7c6-4c1d-996e-203c43dce135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c877d82-c975-4792-800a-d679c35aecf0",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3be3d588-9bdc-4c25-b4f0-c085edec137f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd86fb3a-3201-4f22-9ea0-844ef74df458"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20b80341-f25e-4342-80a6-6ab253e0f9a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbc2c740-33d0-44e0-aede-faa99b881efd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c42f5e51-977c-47dd-890b-7c4e23dc6d66",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60641142-e110-4bb9-a34b-7686ec6ab8c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a023fc1e-dc61-4166-bd69-d09fb1437631"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa3f70c9-6a54-4f38-9320-f1a4ad03aa45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14991203-8237-4719-be18-da92750c4075"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ab6fe18-66d9-4418-8809-2f7406cf7ec7",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d841a0a-008c-4e90-97b9-5b9e65a7eaa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "662de4f5-07df-4493-95ed-b7e5a9318de8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e10ddd3-8816-4eaa-9c21-266c18a6f780",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e28eb4b6-ee7f-4111-a3ec-366ecad1f6fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "083f7f51-3245-4791-adad-9cd21cea100c",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5853e28f-5798-4957-b2c2-a47c045bef4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c704ec9-8116-4bfd-9d59-4d7fdbfd3688"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45f9ce2a-3cda-4282-ab08-5f52232fc4f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd1c688a-12bd-4c6c-b72f-07a66eb77217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc9d4e0-7b0a-4021-989c-405cbb306672",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "194c0a68-1e34-439a-8ea9-d5f3238769f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1612d9a4-7d0c-463b-9c1c-f00072d56efe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f385086-e36f-47ba-96fa-e8e8f207032c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfb739c6-81e1-42e3-a011-a8f8589c280e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fa6d9b3-a96a-46bc-b05d-50bafa69fc3a",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3370b17a-1c12-4aca-ba2d-39722cd56353",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0c7ae8d-b4e1-4928-a9d4-fd038a8bed54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d86df1b-066e-42d3-80fc-a3bda5ad5c60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe30bd6b-4e90-4085-80b0-783d662bc5d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c446888-abf5-4b96-9fb4-14ca54507f7e",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d1b442d-6806-487b-9fdb-b64b6a0ca837",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae237b92-0d6a-47bc-a8f1-acc00a2b26a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2a25804-1f59-4d53-8be3-488d614b41bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bba11e2-2004-4863-9f82-836522a40d3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2ae19af-a2db-4256-a6cd-a1eca6146037",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2945c71-9c01-48e8-9595-0ff1d4c85b61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26919128-8910-4f5b-9e5f-197403afdabf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1d01110-b69a-4f62-b982-71b0752259da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ac54527-4023-4937-bfab-d75ba7ef7daf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0c8f91f-bdcc-4ab3-aca4-92e3467c2f54",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c270bde-6f85-45ee-af9a-80e1e6df7f54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b6abb9f-a265-4da9-8288-821338768645"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d8b0d6d-168a-4c27-9d92-4deea3bc3ece",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7f7d140-2d74-4bdf-b1a8-ed646a4d354f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a29a2627-2d0e-4cdb-a8ba-f5c8dbd0396f",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ea59a69-d05f-41de-baa9-7a9ba1c0afe1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd26451c-8e94-4982-b4c7-3f164e7dcb5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60bee0e5-15a6-4ff9-87f3-4067b1d340d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3c6c9e9-d011-49e3-9e8f-31e783dbced9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38195f3c-741c-472f-a9e0-b1d589e8ed6e",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e26dac69-2ab3-4945-b241-b59c53ecb421",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9eecda78-ba1d-408d-aae7-6c600a20341f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcd0a3ac-c33e-4a33-990b-7fb159c482ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4844461d-a498-43c1-94a7-3ac2c1c30ba1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c62c5a5-009f-4a4e-a3e1-ab1055064454",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "367052d9-c88e-42d4-8456-a50ddfa3e383",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6720aeed-eddb-43e6-8541-e926077f1bdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0e4df65-6a2c-44f5-a835-8380973d4b45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9a10d86-5b84-4a46-89a8-1415b1497bda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64d7a0e3-ca19-464d-9cd4-06cf305effc4",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baf28ff5-ac28-4082-a94f-b20b3815d839",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3c51c51-f522-4f4e-acd0-b9aede29b171"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9c44a51-b8dd-4c68-b9bc-2d1f84fe4563",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5517a65f-dde9-4d79-942a-83e1d3fe557d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16fa5e38-4f3b-4e44-bbf8-02bfceec5e57",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f93f8c5-2adc-436f-8a37-ee1f3a19b436",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70312763-57ca-4a80-8c2d-becfd406d51e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88c3d5c6-00cb-420e-ba9d-0f1e8c726e7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ee3ed5a-55a6-47b2-9fb2-d38d2ced0e06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "579d586b-7e8a-46b7-a2a3-e51e1cb7d4c1",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11039282-016b-465f-893f-71f1d74da507",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4e6fce2-da9a-47f7-a16e-379d29fd62f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "180f98d6-9c5d-45cc-af0b-7eb7982d7994",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80d80aa0-f9a7-4103-8173-82bdefac6462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7acc8ca5-0b4a-49a7-954f-18cb4408a7b3",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65ab02e8-3a4a-41f2-9819-8089fa8ac80d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c673a222-d5bb-4b84-9425-2611fb1d8f36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec17ae95-5338-4c31-9ee6-dbb5e9ec191b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38e47c7c-61b5-4ab3-95b9-38d0254b1c61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f104470e-d563-474d-8465-287a7e5d4234",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de63d71e-aa23-4916-8325-105e027fd2cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f7fa44a-43b1-4af5-bd5a-89edc7a7889f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96ef7f29-13a5-459d-acc3-6f2b21822ad3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "019e3d32-4d8d-4a99-be7f-467bb485887b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71b6eace-0884-4138-8065-140a627c7777",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "787020d6-4335-4feb-8c4b-9cdc40709570",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e659fb05-d4dc-49fa-9b6c-5bb80a2dabd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34b6e37c-1106-44a4-a6dc-24a430f87d50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5172dae2-1a9a-4ddd-92ad-dc91ce6b0c2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6725bc2-3736-4023-8349-a44bbf06ea8a",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dbe6773-4f05-4a97-87dd-7247c40fcaaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b57e316-43b6-4ac2-880f-4804380f72db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "932ae8ff-b690-4f00-8b5f-498a2672971c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26659b69-8e5b-4de7-be38-6e6785ae9762"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ca7ae07-e953-4a12-8674-96063f3f357a",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "382babad-efa0-44e7-99d7-a71c13bc7bcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "179fdc69-e5ad-42c4-905c-981825e10f00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "155d0045-55ca-43c6-898d-c919ae3466bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "211d8076-21c4-4065-ac5e-0537bce4103d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "625bb286-27a1-4b33-a06c-ef1f4e846ef6",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68231531-5ffb-4318-94b7-05edfcae3f5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ebefe5b-c994-4f30-b531-a9ee7e3c2eec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05135609-b2dc-4977-857f-7681d6a33284",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10ca942b-757a-4c9c-880b-86ba301147a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47d8f66d-dde8-44e0-bb04-d5f83adf4fc6",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43581df7-0e7d-4790-a11b-ff2bbf38bdcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d589a41d-76b9-4ba9-b6d8-492f4c11fb83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34a0b774-a938-4053-8a6d-fe92086b4b07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76a0db88-f924-481c-8cff-44a89e7cd944"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cdf53c4-6644-4ff6-aac3-d718ab138ab0",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72a6f80a-d6ca-4ddd-9a27-a169bab0a97f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "214c88c8-bbdf-4093-a5a3-8b7c07a03e6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9437ee77-c266-451c-8f20-e2e2c38574c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3e1fb06-eed0-4006-96ac-c40ed4cee582"
                        }
                      }
                    ]
                  },
                  {
                    "id": "762e0dc4-5ea8-49b0-81c3-950b04cbb375",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "451a6d61-14fd-4aed-9200-64ec58b3d96d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5a2dac4-7068-4ec2-b057-ea2ef7664478"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcb3aafd-abd4-4a73-9ec7-267878488b9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b99d7fbc-673b-4bd0-b93a-101b64f4acd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e6a30c2-61cd-45e9-a335-8bea272c9f8c",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aaaa893-0267-4a73-9b60-39cd0fdbc9db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38fec6fa-b4d4-4760-aba2-7508e293b262"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d75469e-bb19-41c8-9be9-97c26bf576bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85eeb278-cdb1-4179-a7bc-774e0f975d46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "118a4734-b438-44e5-b4f3-71dc339476fe",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a335079-6450-4d33-b40e-210d39f8e5e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5304fbed-012b-4a53-b0ee-097a5204868f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f45730e9-b230-4c0a-bd6a-7b9ea9be69c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dabaaa62-f337-49e9-a300-f928e678fe77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12793ed3-01ec-4aa7-8cd5-fc5be01e0bd9",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b43ba883-5afa-4a4e-8fc3-bf14d10d78be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20181fab-567f-4fca-9b1d-fb68b5bbca80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2dbebf4-85c2-46ef-b014-3f0f3dc7860f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "142236cf-2fa5-43f4-a39f-cacc42728ea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd63bad8-44e5-4678-b667-b1f682b835a2",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "814bd651-2d0c-4103-9d01-388071b97ac2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "875b5ca6-60ce-47f1-ab64-e63e233e92d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b8e9f0e-85d6-42eb-9fa5-432a93e9d14e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4442eafd-a372-44cf-bcc8-f963e3c800f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61d1bb07-1d12-4ac3-82f9-116e0211143f",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1649de43-b0a4-406b-bd1d-0c5d6787ca47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1baefbb0-49f0-40f6-8b8f-c11b9b3037f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6fb8d26-37f4-49d0-86f7-6b324aef7375",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52993879-615c-4840-bca6-7799c3db3a4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2be7353-1963-4d76-a3c5-ddf101e94b42",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3058bfcb-a102-48a3-8842-bd9c64a0fa2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1ab0eab-ede0-440e-a225-bc1031f22281"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee4a4cf3-feb6-41be-a6c8-018b8a2d0fbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0b03134-9f84-44f1-bdc3-bde7cdd9e3b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd0dcf49-eade-47b7-b6cc-e57d213afea4",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e05cdde-cebc-4b86-92d2-2677e670627a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "205b8130-2fa4-438b-8102-1f5f4b9b90f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8c9e992-caed-403d-a5de-15eb525cd214",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28d857c5-1985-45f7-bef5-73527738e761"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1698a5ba-5235-455a-b26b-96158de0ea5d",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd94d698-8ec0-40f2-823d-4f73618455ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf9bfbd0-0881-43ca-ad61-7003cd4946c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abcd5678-b24b-41b0-b929-24f43aad29e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65154980-00c1-47dd-b29c-e9d8148ea698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bd2653d-5fdb-4581-aea4-1085d56d91c0",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef214852-ec25-40b2-96df-83d2f87ea139",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08f7c5b5-f2e3-4d5f-a8c7-7f30e470ec0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d8b9fbb-7e89-475c-9074-b5964a8dfc7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22b7277e-d927-46c7-a97f-ab0baf32a7b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7156ca2e-6a4c-45bd-ba2f-44bdacf16707",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b85888a8-7109-42f7-8a88-4a832e07f69b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6fb9295-00df-493c-be28-84189cf68f21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a87ae503-0e35-4516-8865-92244c13b843",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "852fc311-1b90-496e-a8be-7c9debaceb98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44852504-54b3-4250-923f-4a712ae401ff",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84c53994-8a85-4c72-8f39-78fe653643c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1639a653-717d-4038-8f35-2b0db13371ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eaf9d7a-ab2a-4759-abc9-6df993652a1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a819bda-f43f-440a-a98e-dd75db96b18c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4e38e1d-5a97-4234-abe1-3231afd643a2",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6034d694-21bd-44c1-8583-06aa2db49d36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c307be3e-0c3f-4b24-b79a-22eeb4f4d777"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "781657a4-b715-4ae0-97af-60505e55ac41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a50ece92-b981-405c-94b1-b8cb1995592e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0facd0c3-2752-4a51-a189-f36f2dfc0143",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6674cd2-524c-4226-b19c-ce91aea115b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df6c1949-4ab2-43ad-b275-083b3fc1f816"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d505938-0d3b-4147-ba12-162eb87736b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f00b0f3d-5a59-4ae7-ac57-f9313f01498e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b5894a1-5677-4388-86f6-7be6812ffc16",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40834e12-5773-4a6f-a939-e877679433a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22c87efd-0114-4d1c-8391-27d81d5d9bec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0381f433-9208-4009-a74a-412b8f33510e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22cae861-dd86-42fc-961e-5131488ac9e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "298cf3c7-3f63-4235-8c4a-cc3412c88cc4",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fb78608-b3ec-4a8e-8dfb-7756ac05ae47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "890eaec4-9609-4af1-b3dd-69bfaa384466"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c013a05c-0fff-4e56-bc0b-495319f55fd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15740168-c75f-49fa-ab95-54f76ee5a14a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df6c7225-3316-4164-b5eb-fc66bc06e967",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49b061de-20e6-41c8-8011-323678d0fe76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d1bc53e-86a7-475d-9476-c92f9b452fcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35d5e24f-d3fb-4e2d-9b7a-8c2d49881537",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99b68262-8b3f-4bb9-9cd6-80d5e2da448c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b32dac98-a031-43bf-9adc-418b88059390",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "277a7784-7954-487f-b044-c87b0d53ab70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35979c7b-5204-4055-bdca-d4db066bbaf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49b08a62-2d21-4552-821e-79c96d3c3a4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5446b899-6b84-49fa-9d72-774cfc9399ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7944aa0-7486-4870-8054-99c15add2684",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "566c32bc-1144-4efa-adff-bc086be130a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ad7289a-f378-47c4-bd64-4c4e7aa5c5ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07789053-e9c3-4ad0-886c-fcdc23cfba7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d71fa0f-c709-418d-9417-2010a1dd606c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac707bed-e14a-4661-96af-eee393705efe",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0a382af-9480-4380-bd63-adecd04b443c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fefb3d6d-ec05-4ed4-8bf6-705f57b40815"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49aba751-3e94-45a0-b177-6fd9dc28d76d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d38ef9a0-bb7f-4e73-bf2e-f2e2d45a89af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f89a9561-4fb7-4a4a-bcff-cf794b07384d",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a61827e9-9ad9-4b2b-8559-04aa14a0442e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74a8a3ae-0513-4ef9-a0a3-2e7dc1f7a539"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ac37aaf-9dff-46e3-a75d-84038184049c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df991e17-45dd-41a2-be85-494fd5b2d8d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeef0fa7-7c41-4cb0-8f91-f42e83b9081e",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96d54e0e-b6ce-4f54-a861-a2faf42257bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd023cd0-9d2e-4da6-8f1a-11c1eb51fa28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd741632-5511-45f5-bba2-dcf923c98b23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b4ffb41-b004-4501-8aba-6c5b02426ebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3234b84-395a-481b-af80-524fd75fd30f",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e89887f0-5fa0-4997-8daa-41f92f319311",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de632603-69db-4ff8-ac3d-78e282f1edb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18ed86d9-8199-4d0c-a689-4162da741f11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e118a380-7c58-4f38-8b3c-0c323c569ceb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30669d13-3ae3-4fbb-ab9b-f7804c6b245c",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b444c70d-ff97-4ff3-99f5-d78bfe2275ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a701d107-f097-4a62-a078-40781a90a568"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d96b627-80cb-4dbf-b8c6-21a5eb33cc20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54e35709-620c-4664-a785-42fd2394d6d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8562a28e-cc3f-4462-8884-0ad584e3e3fc",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75f3c0a6-1792-47dc-8ad2-4bd3da6f5470",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1016e870-3b42-4e68-b34e-ead491cc64f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bc5896c-7ca6-4b3b-a409-ad1dbf33faa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bd5e7a2-315e-44b6-8cbe-4b9fed26e737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1cf087b-9070-45cd-b288-3788caa6c92f",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "854ad9e9-aab7-42c5-bc63-8d8dee9cb8e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "265f0b33-c222-4a24-b530-a5328df6c660"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2ae9dab-de84-4c08-a955-0ff4810fbb80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c242b96a-9213-484d-bc42-2febd2db1b28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8f1caf5-b055-4692-95ad-a3f138c5ac53",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca1575ae-7d9f-4a77-a8ac-eb2674abd139",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f980bad-e488-476b-b576-5217a11f8d2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ba912e3-000f-44a6-878f-885f2bd4c3fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c955669b-9a0f-4d99-a0d8-cfda4aa740ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aef60a6-e18d-41aa-85bf-63d8a4b94093",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4876361a-fdd7-4349-9bc8-94ab6f2fca44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92f7a9d5-8bbb-4642-b336-c1620d625c80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e216fbbf-4e1e-40ba-bdcb-f467adfa93cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fc64cf2-332c-4e5e-a8a4-e5fce1877a29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f26e426-b337-4e2d-8ef2-f18f3ddbb435",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e10e71e-bbf7-4504-8383-7803b5181523",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70d9100d-d2c0-4d16-bda6-ba8805653762"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a39db9f1-a9c8-46f9-92a8-489f9a2b0326",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e813ce94-b882-486e-8ee7-55571c03f623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f7de748-353a-456f-a5da-b2b41d7ba15b",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58d48868-1d4b-431d-863b-a72a23a845c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9137cd1e-1118-42b6-9483-3136d0e04369"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4f8d1ab-0ed8-4263-8ebf-600b2a780df3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b28d7c9-428b-4186-a77d-362293fde624"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09fd6939-4916-40b4-8fc7-ecba7b930339",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e7b0895-caab-4102-bf55-c8ef8f531dca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09c74537-c3be-4f71-815c-310e7847503c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "360c84c3-50de-4750-b131-43b565e9a845",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68d4aa92-1d44-4985-b0b5-a80a93a60801"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a07b498-f41a-461f-a761-70a615473e20",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b63c363-58de-4f29-9cef-3d28a7ae9deb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c32f48a0-52b1-48ff-9501-cd77d0a8a182"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a9c7b35-b35e-48be-86d5-f39443c5028c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d95f2f0-eabf-4190-beb8-dd869ff35604"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf84ab1a-7f09-4c7c-8669-000ae60442f3",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c2bcede-1f9c-4c27-a7d0-a0f90c73b323",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "893668f3-27ea-435f-b78a-d5ed0f037718"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14147d3e-84ed-4922-b425-4e0c71590dc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d271b26a-c817-4b96-bea4-b082f0118fb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa7d8406-0f9a-4c99-835b-a2ce020ce9fa",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ab79856-b1eb-4ef9-8db1-02dc8757b70b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa92ad31-d755-473a-bfb6-f28c13d6de50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "daeefba3-989b-42ee-b0e0-f8b65f343098",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce4da205-0728-4ee4-9644-fd22cc628621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31d81850-6ead-4a0d-aea5-c38bce7fc312",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f35eb2c9-6c76-4764-a06d-2d72ce7c1e1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "329ff89a-813c-4d16-980b-fe8c469a5bfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b52668f1-c297-4c78-b020-92058ebf3945",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85d72a18-ebda-4782-94ef-9737a4bac52a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff984ed8-7242-4e87-b238-15ac9c1e6f36",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "327bf960-5933-4eaa-80aa-ae556b9d860c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "869cc311-b3ec-473c-b5b2-f497745a03ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74e43e3b-66af-46d7-b2e7-bc0221ce4fff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a659c1a0-7c66-49f5-a930-461b9eafd4bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63d0f23e-73aa-4f21-bb36-c2e57cfecacd",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efb7aee2-c4fe-4c5c-ac4a-fedba3be077e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8004f25e-8c55-4a02-8ca1-b5c8efda6825"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f442651f-cbd9-4303-82fd-712945da1574",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85748f7c-16c2-4335-9aa5-ce6ec1eec4ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7be4327f-a490-4027-8554-1944f825eaa7",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bce7fe20-59c7-49da-a9c0-8eb9a1f6dc63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "744d631e-0cee-4155-84e2-57f47b030523"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7952048b-56a2-4326-b6ca-a86e5f448c85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55a7d3c6-8118-4ce4-b915-72cc0e2a261a"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4c7f4c06-f267-447e-9fd7-8bdf9fda47cf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0adebeda-d6f4-4708-a11b-06b6572d8b63"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b3a7d5b6-cce4-43c8-958e-81407d4e4c81",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d564db91-bb91-44ae-a10f-e5492153b22b"
                    }
                  }
                ]
              },
              {
                "id": "85be19a0-861c-4a45-8a64-bac3a1bf3efc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "250e1b6c-4407-4200-b826-b7204351d803",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dbc52b3-2dcc-4c27-84dc-a93300e5c9a0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "3d7b75e1-8d25-4cf5-9431-cda9625b6132"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "248e735a-ad99-4748-9e7e-7aef1305bc45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "91f949d4-634b-41a8-ab12-7e7a55a16d96"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "09688e67-9889-4fdb-8d27-ddbf7c28e292",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "042d177e-49f2-4342-ad5e-fb7d4bb2e856"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "13d03b66-23f0-4bd1-9f7e-124b9f49d203",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "50fd5cea-40ec-43d4-bb7c-e59a90267507"
                    }
                  }
                ]
              },
              {
                "id": "dfdb8bf8-4270-4632-a574-97bbc00acdea",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "36d4b788-6e17-43e8-9548-de504dc41c6b",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0699384-698d-4220-b2dd-d0c3ced98b9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "13c8b58d-9a09-4ab6-9a2a-548dacbf0494"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b0e4631-2066-4b81-af85-670b4de229dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "747fe2f5-f943-4d2b-8003-474b7e62edba"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "49438c32-34de-4705-acb1-b0d168803aaa",
            "name": "Positive Testing",
            "item": [
              {
                "id": "804432cd-bd55-4a98-98ee-43ceecf358f2",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6d165c2d-f12b-457a-bd4f-689b570322ca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "3219eeb0-a3be-4056-ba78-d81be36f31c3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1f4c1286-301a-471b-8224-d89b6ab85bdd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6c00dd9d-65ac-4809-a8e7-bc4f4d3c319a"
                    }
                  }
                ]
              },
              {
                "id": "14a2e0e6-55f2-4f75-bcab-233796d829cb",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1101c315-9ef9-4349-8b50-f99ff83cb4f3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "123a67b2-48d6-4499-aea2-08de76975a2c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eb7fcd1a-9e47-4545-942b-b60c4956c8ba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "66ac73b5-3bee-4348-9e5d-01f71708dc41"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "07fec259-14d9-48ed-971d-94ba806fdae7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "2a19f737-c9c9-429d-b4ff-74c1e6e51ddf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "684b5596-cddb-4b52-9614-fa0421111e82",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e1ebfb89-e0b9-41a5-9697-d70738ab1b8a"
            }
          }
        ]
      },
      {
        "id": "cf2f32f9-5fd3-4ff3-a228-ad816cf75a51",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "2f27fd76-b34f-4071-bb95-f85641d3b920",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e5b82c2c-5232-43fe-a979-097ece9b0341",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4e96f2a8-0ba4-40d1-97bb-2a59cf8d8794",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f33e0590-60d5-432a-8213-4380bed7513e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "70c35519-110f-4b96-89e7-994d3e2c63b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8839be6a-5a0d-4388-b8e8-4bde7de759be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ae5a24dd-4fc6-45ae-a43c-50a2a2b87c2d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "480619b0-a348-4f85-9a08-ff1ee01a2a02",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b615ca4f-7e06-43ad-b28b-36db9f9205e5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5f04c649-859b-4993-9e8a-f9b831ea296a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c001fc73-d6a8-4dc7-8451-ec1f76e6845b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3c4cb08e-0b91-417f-b879-91d7240d7beb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "2fb8e4b1-9f25-4052-ac7e-0d57d350c299"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b50c4388-cb5a-4061-893b-a574560dc8c4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2e13d3c1-f27a-4ee9-a9b8-2ce82cc5e4f7"
            }
          }
        ]
      },
      {
        "id": "67b92199-5cf1-44b8-98dc-e176c8b4fa5a",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "addf6e37-973a-43a7-ab83-701998a0b499",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7d6cb9c8-113d-4ee1-a8b9-0cb572aa60b7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e1494bac-2a2a-4835-bd58-4dc36b73eaf9",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cef24083-9071-4b08-a956-62da630cdd4a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "552dfa93-bda8-4352-bffc-5e8a7eb6827e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "758b6a64-1872-447c-9370-dc82054e5d1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ac536c60-02ac-433a-a5c4-f226c2d353f1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cb2d8515-3ae3-4a87-8bee-5b70cc1010f9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "27f01f91-c956-4561-9f50-ca1c4c23b2f4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8a3d451d-041f-4a73-ac65-7f768b70dbae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "027b9f8a-8efb-4818-a8e8-8133bcd4439e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e68791c1-5e29-4261-af3a-b8869ba5a614",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f4dd43ec-e66a-48cb-9d29-3176c08684d4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d6e8edca-d1f3-42cf-9a5d-49d42e6acac2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "280fc4f3-e519-40bf-a5b9-770d1b68baee"
            }
          }
        ]
      },
      {
        "id": "b1ba5646-2adb-4a72-b963-91739c4a18af",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "78bd8b65-d23d-425d-98d1-40521f063cef",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6eec9dfc-3e25-4a7c-8d3d-2553244b51fd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "432b7375-b302-4402-b2f7-3738b3ba12af",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a92ee69-f46e-4aba-a396-a28d5d58ab0c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a6f9997e-71c3-446e-a08c-9ce147d49b4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96c2d6a9-c9f9-4a95-90e1-2182dd362677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6d909e94-7233-4fe3-a08b-eab66da93329"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bd6e46fb-fa17-4138-9d60-758457854e9c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fe61c2c1-ed75-41a6-afd5-74668a23bf8d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "002eaed5-7e5f-4262-a2d4-adb33d29d1e0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ce70ded8-6990-4bf8-b0c9-7c7a61f99720"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ffca9361-02dc-40f6-accb-3cdea84f66cb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "60303539-e3c4-43db-9fd0-92ef856e7f0a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2c74ef8c-6213-46e4-a063-d748e1cf088a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bde31433-524a-4384-8ec0-19342d5b3681"
            }
          }
        ]
      },
      {
        "id": "4d40b57c-f21b-465e-adc6-7bc9b88ce582",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f7915748-c768-45c8-8e5b-373bc4951eb5",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0e79d31c-9b60-4ca8-b75e-b93c56725a6b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "350aa512-8fb6-490b-99bf-414f1010d573",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "96b056b5-7c34-49dd-9e9c-1ffdd6a6b177",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f0bcaf6b-6dc6-46ac-a72b-6e80275f834a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 66.61754385964915,
      "responseMin": 8,
      "responseMax": 621,
      "responseSd": 75.86149226058274,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1700008504612,
      "completed": 1700008533044
    },
    "executions": [
      {
        "id": "69e865ee-2088-4349-b04c-7c534ceb40bc",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "efc5bc4f-8646-41c2-b00f-b0b6b74ba597",
          "httpRequestId": "be9f1f3a-c55c-44de-8d88-5ad7102ec152"
        },
        "item": {
          "id": "69e865ee-2088-4349-b04c-7c534ceb40bc",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "b385c07b-e3da-4ad4-85d9-4da4fb76f9e4",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 0
        }
      },
      {
        "id": "05af772c-1706-4c55-a685-b0a00f76eb51",
        "cursor": {
          "ref": "50f9b89a-61dc-42ea-af30-ea4f6cd6d346",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "c5a3d036-9095-421d-b403-d9e1d1c6f482"
        },
        "item": {
          "id": "05af772c-1706-4c55-a685-b0a00f76eb51",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "5ad36446-b969-4e5a-9f50-a540d7cdf4b3",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "730eced4-7f2e-42e9-ae4d-cdaa4ff72a77",
        "cursor": {
          "ref": "1689c21e-3d62-4878-b732-940e318cc3b1",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ea1a2af6-1615-427a-98d2-9c03a5d21e37"
        },
        "item": {
          "id": "730eced4-7f2e-42e9-ae4d-cdaa4ff72a77",
          "name": "did_json"
        },
        "response": {
          "id": "53abba8c-593e-4b24-ad1e-cf60a95d9ed7",
          "status": "OK",
          "code": 200,
          "responseTime": 301,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eab7c46c-f023-4eea-8999-bce20f0dfcda",
        "cursor": {
          "ref": "849e9a79-5750-45d2-85cb-196fcc136aa7",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e6c6addd-468f-4f1e-b7b7-5bbe90eae393"
        },
        "item": {
          "id": "eab7c46c-f023-4eea-8999-bce20f0dfcda",
          "name": "did:invalid"
        },
        "response": {
          "id": "3988e604-0b97-49b5-b28c-3ae14e4c7e63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eab7c46c-f023-4eea-8999-bce20f0dfcda",
        "cursor": {
          "ref": "849e9a79-5750-45d2-85cb-196fcc136aa7",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e6c6addd-468f-4f1e-b7b7-5bbe90eae393"
        },
        "item": {
          "id": "eab7c46c-f023-4eea-8999-bce20f0dfcda",
          "name": "did:invalid"
        },
        "response": {
          "id": "3988e604-0b97-49b5-b28c-3ae14e4c7e63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce07a23d-2de5-49d0-8dab-d6b5973ab60c",
        "cursor": {
          "ref": "c53909a8-56ab-4382-8ad9-6a119da02418",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a35e0bf8-6e1d-4601-90bc-1b03bf5a7492"
        },
        "item": {
          "id": "ce07a23d-2de5-49d0-8dab-d6b5973ab60c",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "328e93d0-b5d1-426a-b93b-3a2ce58c2edd",
          "status": "Not Found",
          "code": 404,
          "responseTime": 99,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8a2efd2-806f-421b-9e51-e28daec8a626",
        "cursor": {
          "ref": "b2203099-af80-4a79-8330-945a940d6108",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e8fe9719-273b-44ea-9cc9-85db7b21a790"
        },
        "item": {
          "id": "e8a2efd2-806f-421b-9e51-e28daec8a626",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "26916d03-fa4f-40f2-9b4f-06926d1ec141",
          "status": "Not Found",
          "code": 404,
          "responseTime": 47,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1d48e77-e8da-4403-a9a0-99b070b403f2",
        "cursor": {
          "ref": "202e5ebe-e9ba-4c12-b170-cf81f454ccd6",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c0953657-4f45-467e-b663-0a4503a88248"
        },
        "item": {
          "id": "e1d48e77-e8da-4403-a9a0-99b070b403f2",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "9d7b1fc2-b6f8-4c92-bb19-b8b92eb4d129",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf02a93c-ccb9-4a11-8054-bfdf7c83c126",
        "cursor": {
          "ref": "cd9f565b-9386-4a10-a028-53a1c0c2e2bc",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "1f4a9017-f517-488c-ba75-44387bb322c5"
        },
        "item": {
          "id": "bf02a93c-ccb9-4a11-8054-bfdf7c83c126",
          "name": "identifiers"
        },
        "response": {
          "id": "f97aa558-ff5b-4e5d-bdfe-e3ce34e1e980",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "813447f9-26a6-45d4-b2fc-ebc354d7876c",
        "cursor": {
          "ref": "9f58a150-c4f9-4360-b56c-2a3d5556498a",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b2594c88-a046-4f4a-a540-c11b8864041b"
        },
        "item": {
          "id": "813447f9-26a6-45d4-b2fc-ebc354d7876c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "31f40995-283d-4ce3-b802-a9f9d541c3c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65563e27-d3a9-4837-a177-8bab15303fac",
        "cursor": {
          "ref": "3d8a0d19-af55-47b8-b343-e587a30f4b32",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c1a90c91-47d6-449c-9dbf-adb8d28689f4"
        },
        "item": {
          "id": "65563e27-d3a9-4837-a177-8bab15303fac",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "c13ed855-6fdf-4eec-9fe3-5df316980226",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54c76ed5-d510-4352-a9db-c166885c5eb6",
        "cursor": {
          "ref": "3870073a-33f6-4d95-be4f-00a9bf8184cd",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "72a2ee10-5109-415b-b22d-591917e2d34b"
        },
        "item": {
          "id": "54c76ed5-d510-4352-a9db-c166885c5eb6",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "14ce0594-698d-4aaf-ab49-6809c3136b74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b3fa10c-891f-4207-8e52-6bd056f10f6f",
        "cursor": {
          "ref": "dc86c14d-364c-47c5-a58a-962834492ca0",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "e9570156-be12-468e-a9c3-4b6947ea8829"
        },
        "item": {
          "id": "8b3fa10c-891f-4207-8e52-6bd056f10f6f",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "58cc3b95-7d72-4edc-aad1-2b3eb25e8a17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eac11b7f-f664-4133-8976-0133e7a09c9c",
        "cursor": {
          "ref": "0cc95839-f806-4ba8-8151-d43e937dd6cb",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "59541c31-9fbf-490f-8086-3bad0eb803a8"
        },
        "item": {
          "id": "eac11b7f-f664-4133-8976-0133e7a09c9c",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "71ca23a4-c55b-420d-9649-711fb20b7ef8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "892540f2-445e-434e-809a-98f3ca478c8e",
        "cursor": {
          "ref": "fa137d0c-124a-44ce-9590-67ff15932872",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "57b583e8-a78d-494a-aed0-0cf831f13bd8"
        },
        "item": {
          "id": "892540f2-445e-434e-809a-98f3ca478c8e",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "30f7b2bc-9952-4144-8c5e-347b9f5a02c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc9c8d70-84c6-4e9d-865c-8d1a71044886",
        "cursor": {
          "ref": "31544c7b-a194-44c7-9cfa-f4c656ad4cac",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "3a597151-2a18-4dbf-b890-96eb6aa35162"
        },
        "item": {
          "id": "bc9c8d70-84c6-4e9d-865c-8d1a71044886",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "e62acec1-b39b-4d1d-b7f4-428b40c32461",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "063001f2-9602-40f6-85cd-5feb40a3b712",
        "cursor": {
          "ref": "6faa5606-670c-4e9a-8dfd-337c5c84a72e",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "09ad3a90-4ff0-4503-a8ef-495569849e4e"
        },
        "item": {
          "id": "063001f2-9602-40f6-85cd-5feb40a3b712",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "02ed8a54-270f-4bfb-b806-df8c58450b87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19a7cc1e-f0b8-43f2-9375-e1db56ea2b4c",
        "cursor": {
          "ref": "db754c7b-3af5-4ffc-a859-685db63f0e82",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "18a5b10a-3aeb-4ea5-8080-090fde971d8b"
        },
        "item": {
          "id": "19a7cc1e-f0b8-43f2-9375-e1db56ea2b4c",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "251d4990-6ac8-4b68-8191-ef1a13fa2041",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e783032-75aa-4f0e-8373-d9952d017bc9",
        "cursor": {
          "ref": "bde06843-20e0-4f2d-8cbe-ff20bf32ce00",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b8a8b5ca-27b8-4396-8e58-1386da7ee2d2"
        },
        "item": {
          "id": "2e783032-75aa-4f0e-8373-d9952d017bc9",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "fe8b2a0f-ab61-4331-a7c6-f4660a513fd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbcd9335-d307-49d8-a5fa-3465622157a3",
        "cursor": {
          "ref": "43b18606-ebc0-4343-8f0a-d22050c239c3",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "171b97a1-d58d-4829-8b56-98c875a0479f"
        },
        "item": {
          "id": "fbcd9335-d307-49d8-a5fa-3465622157a3",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "2835ed96-61d1-4275-90bf-8bad8426ee0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fa06961-91d8-495b-b55b-6cbed64585f4",
        "cursor": {
          "ref": "efbdc371-d5c3-42b5-9c71-a1f1621d88be",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f3f25754-bedd-48e3-bbf0-995b07e53915"
        },
        "item": {
          "id": "9fa06961-91d8-495b-b55b-6cbed64585f4",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "b8037bf9-b569-46d2-82b3-ecea87743b14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8dfb19c-e81f-455e-83f2-7d2ad12614eb",
        "cursor": {
          "ref": "ddf34687-3041-41a2-b073-ccff0e70b60e",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "01aad584-7c97-491f-aad4-c8dffe468171"
        },
        "item": {
          "id": "c8dfb19c-e81f-455e-83f2-7d2ad12614eb",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "0dd5189b-3f04-45d0-a760-7bd08ad97c7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a555ee9-e96a-4a7f-ad11-fe02c1fe3961",
        "cursor": {
          "ref": "56a4d659-1c60-4af0-80e9-dbff3f484202",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "869e6724-64b6-4c88-ae9f-507bac2db33d"
        },
        "item": {
          "id": "1a555ee9-e96a-4a7f-ad11-fe02c1fe3961",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "609723b5-ef0d-403c-a9a1-90464680c3d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "568da283-951d-4efb-9e1f-6605d39f96b9",
        "cursor": {
          "ref": "bd466fe2-8465-40ce-9eac-52faf156106a",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "612b089d-1ce7-4a0f-b9ed-32186d890237"
        },
        "item": {
          "id": "568da283-951d-4efb-9e1f-6605d39f96b9",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "56eeef7e-a43e-4f92-8d05-3b8de801e5b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c6ce8d2-59ed-4b6f-8a39-0af76d739783",
        "cursor": {
          "ref": "33834877-44ca-42ae-abb8-c34646d3511e",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "fe691e8c-f95d-483e-b22a-1af6c9e08ef7"
        },
        "item": {
          "id": "9c6ce8d2-59ed-4b6f-8a39-0af76d739783",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "6fd5397e-4cb4-45ec-9985-3e5e693aff0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e101d795-2521-4ee7-9c75-fd86408ea27f",
        "cursor": {
          "ref": "fd5d19cb-43ee-47b0-83cc-830c12b01bb0",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "17051530-d201-481e-950e-aab1410b63cf"
        },
        "item": {
          "id": "e101d795-2521-4ee7-9c75-fd86408ea27f",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "0ec2f1ea-71b8-4304-824f-21636724321b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbe67d59-ba98-4302-bcef-3c3f91ca893c",
        "cursor": {
          "ref": "5ef16dac-649f-4df4-8cee-cd36fe4dd394",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "43c791e7-b317-4b2d-bb62-defa6ba87823"
        },
        "item": {
          "id": "bbe67d59-ba98-4302-bcef-3c3f91ca893c",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "c7eb5cd9-abda-49d9-801b-d01ec7b70b3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2908949-7e87-41c9-8edd-0e39bcc2bda0",
        "cursor": {
          "ref": "f114857e-da04-441b-b596-4335f79b5e2c",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "3b2372ff-08d1-4390-aca6-27ec18ab158e"
        },
        "item": {
          "id": "b2908949-7e87-41c9-8edd-0e39bcc2bda0",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "f5c52644-05c2-4068-9a3f-e64519cdb787",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ee86c0c-ecb2-4501-95d8-d7122b6a38c5",
        "cursor": {
          "ref": "09874c94-49e4-4edc-93c9-56036c33f9a2",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "b45124ae-20db-4dd5-a254-245c54a0a120"
        },
        "item": {
          "id": "8ee86c0c-ecb2-4501-95d8-d7122b6a38c5",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "8c5f7d83-b64e-48c5-8509-60ef2fb221a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f3bd79d-c62c-4199-9c72-058ddb427afa",
        "cursor": {
          "ref": "b96c9fac-4a36-4ff1-a2bd-a17fca7bd7a9",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "50a8040b-254a-428a-a953-ab369776b285"
        },
        "item": {
          "id": "8f3bd79d-c62c-4199-9c72-058ddb427afa",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "e010aa87-3e5e-41fe-a748-e396656913b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ce0f266-9f07-44f2-98d2-8ec46d9f2f80",
        "cursor": {
          "ref": "357b2526-2501-46d9-82bf-c26fc3e3dd7d",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "baae938c-2f1d-4c3b-8e31-db57d50a26d3"
        },
        "item": {
          "id": "2ce0f266-9f07-44f2-98d2-8ec46d9f2f80",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "6d813304-cfbb-4ce2-8fa5-f4a883752542",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca949cd0-4250-41fa-889c-3f792c54f6ab",
        "cursor": {
          "ref": "f4ef4f50-4788-4fde-bf7a-c5d023a510d6",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "3833b337-88fe-4585-b713-b7808cfd46c5"
        },
        "item": {
          "id": "ca949cd0-4250-41fa-889c-3f792c54f6ab",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "ac2c172b-71d9-4475-bc0b-b0c43c5a4f6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5be5d09f-384a-4acc-adc2-6977b5651050",
        "cursor": {
          "ref": "2def084a-dcc5-4557-a746-3a8846bca027",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "fc7b1ba7-96b9-464c-9a84-282c8a1c8341"
        },
        "item": {
          "id": "5be5d09f-384a-4acc-adc2-6977b5651050",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "3c960915-51e9-4898-85e5-47e3cffd0653",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cfc0b67-b063-4ad6-8396-a40dc13bc0cd",
        "cursor": {
          "ref": "7e6abf66-77ba-4c59-b5aa-569d74e5ec00",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "0115e288-2aa1-4ccc-9f89-762c294108b1"
        },
        "item": {
          "id": "0cfc0b67-b063-4ad6-8396-a40dc13bc0cd",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "99982be1-fc2c-4fdd-abd8-6542d1ccba72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d273cb5c-777a-42c0-8b13-292d642773fe",
        "cursor": {
          "ref": "b1af81e7-dbd3-4971-abdf-2ae6f447b612",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "ce6f8f1b-1d70-4c78-a9fe-53a165fc0bb7"
        },
        "item": {
          "id": "d273cb5c-777a-42c0-8b13-292d642773fe",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "3d0476c5-e499-42b6-a510-72e260ea01b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9ff11c7-63a6-4ed5-8bb2-c821a89de6cb",
        "cursor": {
          "ref": "3a5ba7f9-6074-45cd-9b7e-1613f51cd1e0",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "e51973e5-6c1c-44f4-8496-e3ffed3864ad"
        },
        "item": {
          "id": "f9ff11c7-63a6-4ed5-8bb2-c821a89de6cb",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "b16f5a37-7531-4851-90fb-5b7751ebf5f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b34a5342-301e-45ac-9e35-c579599477e2",
        "cursor": {
          "ref": "8fca1018-b58e-4e01-b550-e9a36ba59892",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "8a4ca144-29c4-41ea-b9f7-30b6aba8e1bc"
        },
        "item": {
          "id": "b34a5342-301e-45ac-9e35-c579599477e2",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "d02118f9-5a02-4a9c-9944-16b2ed34a45a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7accaa25-066e-40aa-a097-8b9bf1dd89ab",
        "cursor": {
          "ref": "bd941f49-061e-4396-8a78-ce6ce9b1485c",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "1b4d8688-f887-460c-8783-54f907d4faa8"
        },
        "item": {
          "id": "7accaa25-066e-40aa-a097-8b9bf1dd89ab",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "55e23227-9fdd-4548-b482-2ee5bc8b1d18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa0b75aa-044e-48cb-9711-7b3717823197",
        "cursor": {
          "ref": "ae727b76-cc34-4416-9f72-4ea81a863dc9",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "75162396-9033-4521-88a1-f969fdb2335f"
        },
        "item": {
          "id": "aa0b75aa-044e-48cb-9711-7b3717823197",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "7a59292f-e034-4e8c-a637-648478fd9a48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a002599d-2c63-4c7d-a7d0-943590c0fdf9",
        "cursor": {
          "ref": "a30e104f-8b8a-4c02-adbd-2dd151f91396",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "f644c918-47ef-49f1-a73c-f5bc7669a8ee"
        },
        "item": {
          "id": "a002599d-2c63-4c7d-a7d0-943590c0fdf9",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "2fa7bbed-b8da-4653-9347-2426923b1a4f",
          "status": "Created",
          "code": 201,
          "responseTime": 621,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "e04f8c22-fe9a-4511-891c-27e1ef3bfb8f",
        "cursor": {
          "ref": "008594de-93c0-4767-8849-7b34245b3432",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "810935a0-9a16-45a6-a6ac-c96d0f772b43"
        },
        "item": {
          "id": "e04f8c22-fe9a-4511-891c-27e1ef3bfb8f",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "d4dd43fc-ebba-43ef-9d8c-5cd41ddfd3c6",
          "status": "Created",
          "code": 201,
          "responseTime": 243,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "bff4166a-8d39-4a3f-a030-6233290cf443",
        "cursor": {
          "ref": "dbf4254b-290c-4bf6-a9c2-8b273d7d59cb",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d8782eff-d754-4eb6-a2a6-a1486bcc8d1c"
        },
        "item": {
          "id": "bff4166a-8d39-4a3f-a030-6233290cf443",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "66431710-5071-4c29-b7e2-3cccd0f42037",
          "status": "Created",
          "code": 201,
          "responseTime": 361,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "993fc2c8-b43a-4660-8a2e-06a453587bd3",
        "cursor": {
          "ref": "0ddfe3d1-2cef-4f4d-8c96-c797f044089d",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "1ad31d58-99bc-4023-afb2-2f6f1219a773"
        },
        "item": {
          "id": "993fc2c8-b43a-4660-8a2e-06a453587bd3",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "adae7eb1-c5f1-4a99-ac61-fa43d0680fa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd65a9af-acbe-4130-a4c7-f380a1e91995",
        "cursor": {
          "ref": "89601f18-13bf-42c3-9a78-62357ad66b01",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a8836e86-9a6a-4a27-b758-01e9c8d3070b"
        },
        "item": {
          "id": "fd65a9af-acbe-4130-a4c7-f380a1e91995",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "494aca1f-f42f-4bd9-9a24-5c25e5a90400",
          "status": "Created",
          "code": 201,
          "responseTime": 255,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "cda38b7d-8505-4165-b586-937bcfe4d063",
        "cursor": {
          "ref": "c9e218a0-37f4-4787-aee8-a49895f7b6cb",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "843578ca-b72c-4656-a812-a3a33e9d9af4"
        },
        "item": {
          "id": "cda38b7d-8505-4165-b586-937bcfe4d063",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "0590a944-15a2-4f59-a6a0-71884c6a34fd",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "de7cba4b-21d3-4e53-bb7d-930fd380bfb4",
        "cursor": {
          "ref": "c5797724-e8ca-4a3d-b803-6617c58d2439",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "35ead2d9-55c3-46bb-87d3-c48ccfd41441"
        },
        "item": {
          "id": "de7cba4b-21d3-4e53-bb7d-930fd380bfb4",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "47229d2c-60f8-4864-88e8-4049389d55c6",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "badec737-bfc1-49b2-9a50-6afc55c74e0e",
        "cursor": {
          "ref": "62313bc0-ba6c-4467-b60f-eecee8f1cf2f",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a78b8a03-6b84-46f8-b768-225da3ced389"
        },
        "item": {
          "id": "badec737-bfc1-49b2-9a50-6afc55c74e0e",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "5c1e4b62-4dab-4d3b-9902-b8afa7f24f44",
          "status": "Created",
          "code": 201,
          "responseTime": 224,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "a8ce8514-e1f7-4ac5-a0e7-760af716314b",
        "cursor": {
          "ref": "61b8be91-bc73-4bd9-92b2-b6ed476468be",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "389bab6d-d75f-4a1f-8ba4-aa6cdd8c7ecd"
        },
        "item": {
          "id": "a8ce8514-e1f7-4ac5-a0e7-760af716314b",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "7d9c80db-8d5f-4730-a5ae-fd24712b1ca7",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "07ec5eaf-50ec-4521-b3bc-3981446f7e67",
        "cursor": {
          "ref": "849a02b2-1ef8-4b7a-a7e1-38e87277f54a",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c69d4167-6bba-41aa-98d3-a5312af46e78"
        },
        "item": {
          "id": "07ec5eaf-50ec-4521-b3bc-3981446f7e67",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "326b16a9-4897-4d22-91ef-cd2f4f9b4ca5",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "ed873a25-2d1a-42c3-ad9f-36d1647a5ed6",
        "cursor": {
          "ref": "2d980828-02d2-49de-b748-6a5d8e784fa9",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "4be5d583-c9b4-45a0-85ea-319001b3169f"
        },
        "item": {
          "id": "ed873a25-2d1a-42c3-ad9f-36d1647a5ed6",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "6c8c180a-ce0b-4875-9a04-1991dde9a2f3",
          "status": "Created",
          "code": 201,
          "responseTime": 244,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "f0b94f78-9ae1-43b2-a70f-b5876eddca12",
        "cursor": {
          "ref": "fa97df06-ef46-42c0-8ffa-6348eb87cbd6",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "0d5bdf94-3eb0-4fad-822f-d4f71855f9fe"
        },
        "item": {
          "id": "f0b94f78-9ae1-43b2-a70f-b5876eddca12",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "3131898b-0c46-4d9e-a0a8-480df93410ca",
          "status": "Created",
          "code": 201,
          "responseTime": 234,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "99e5f154-6bca-4cef-a4e8-064a03749752",
        "cursor": {
          "ref": "4dffbc6f-99c5-400d-a0d2-16bbdc5d6390",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "1bb8e136-6b28-44d7-b03f-6b73f7019b9a"
        },
        "item": {
          "id": "99e5f154-6bca-4cef-a4e8-064a03749752",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "59fcb4eb-489a-4620-a37a-361c5dc1f756",
          "status": "Created",
          "code": 201,
          "responseTime": 304,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "3590adc9-322a-469b-9970-3173a8ac4cdb",
        "cursor": {
          "ref": "173b7390-2fb7-4cbc-85ec-763cc74a161f",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "a86f1768-a446-4bf8-8b75-cbf6c5a810e0"
        },
        "item": {
          "id": "3590adc9-322a-469b-9970-3173a8ac4cdb",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "70aa74b0-b877-4d31-8975-4476ce7b5450",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b366086-46fd-4cd2-a193-f707c90c5467",
        "cursor": {
          "ref": "75f87581-41a3-4961-87a7-cbbbcb3708a3",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "08c187e2-3e89-4340-bc28-b45c45c729f9"
        },
        "item": {
          "id": "5b366086-46fd-4cd2-a193-f707c90c5467",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "2de8e875-5fab-4936-807b-9405b1d6d354",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6437a91e-d205-41ac-bb1b-0a52b11f8432",
        "cursor": {
          "ref": "22526f2a-0984-4ce7-b006-46345f3a1f91",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "601e4ebd-c7d4-49dc-9d9a-e8153c6c5ad0"
        },
        "item": {
          "id": "6437a91e-d205-41ac-bb1b-0a52b11f8432",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "f544eca1-f589-4730-9b63-6db1016e5334",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "218b3103-0e7f-4a4d-b444-0576b20ccaf9",
        "cursor": {
          "ref": "c0e3e06f-9f1b-4ffc-add8-6843662b660b",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "e08cbd82-b813-466e-b24c-ba0d1c0d4ec4"
        },
        "item": {
          "id": "218b3103-0e7f-4a4d-b444-0576b20ccaf9",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "a4e1a3b6-b389-43c1-bd99-dbf7407efbfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04467059-dfad-46c2-bcf6-5c38b80837d5",
        "cursor": {
          "ref": "26c28ae8-924f-4e87-a9c4-1f06ffc010c8",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "7877e42e-950b-4a27-920c-539c930a5b3c"
        },
        "item": {
          "id": "04467059-dfad-46c2-bcf6-5c38b80837d5",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "78751930-0770-4426-9e38-2ea2be2ec9c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2c5bd69-6594-40b0-b0da-36bcfe1b690f",
        "cursor": {
          "ref": "b87cb06d-d2be-4953-b1b6-230ade86f334",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "62178a2b-c6a1-4f9d-87a2-aea4972e020a"
        },
        "item": {
          "id": "a2c5bd69-6594-40b0-b0da-36bcfe1b690f",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "d2b225fb-840e-4468-87b0-d3cd8fc1b444",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee5da445-3f4a-4fab-82c3-c9bf044f047d",
        "cursor": {
          "ref": "59781187-4c4d-4b08-bb76-28bb2961a699",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "0694f42f-f2a3-44f7-8957-977b83b053c8"
        },
        "item": {
          "id": "ee5da445-3f4a-4fab-82c3-c9bf044f047d",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "0efa904f-db93-45c9-9f1a-8f9573411663",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02ec02bc-fff6-4b16-aae8-9d767c7c725e",
        "cursor": {
          "ref": "7190fabe-f150-4733-9753-8d3de19b7868",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "c1c05ef1-1f2e-4ea0-b2bc-257dfe68a897"
        },
        "item": {
          "id": "02ec02bc-fff6-4b16-aae8-9d767c7c725e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "30ae1471-2110-42bf-b6b5-e58b424a81c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac041587-5837-4a83-afb7-233e7afc6657",
        "cursor": {
          "ref": "6838c79a-123d-4bdc-8095-e49a05a41193",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "c962b8ed-0c15-47dc-b190-5110f33e5520"
        },
        "item": {
          "id": "ac041587-5837-4a83-afb7-233e7afc6657",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "b9947800-c275-42e9-a76d-65fc10d6eb6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcf3b0ea-3f92-4d6a-abb2-3b3fdf745352",
        "cursor": {
          "ref": "50ac0c83-07ef-481d-8087-aff332061b7c",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "ed4afdd6-72e4-4463-8d34-347a490a8711"
        },
        "item": {
          "id": "dcf3b0ea-3f92-4d6a-abb2-3b3fdf745352",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "23365d0c-7218-4602-a5bf-b6831cc45861",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43347434-3b79-46a5-9677-61b4059dfc6b",
        "cursor": {
          "ref": "e3b30f50-3ee2-4328-a59e-5278bda55251",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "1d5d9c05-5592-460b-ba2f-f970c5c6e82a"
        },
        "item": {
          "id": "43347434-3b79-46a5-9677-61b4059dfc6b",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "2e7b5aaf-5a26-4097-9a42-23c1c4fa88d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc8ac89a-ae33-4fe0-86d6-8f1d4ab0688f",
        "cursor": {
          "ref": "b5438e30-23b2-45ab-b3aa-4543e25dec3a",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "4d04b8c5-1f6a-4cee-8db9-902377336e43"
        },
        "item": {
          "id": "bc8ac89a-ae33-4fe0-86d6-8f1d4ab0688f",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "02a391df-9cd6-479d-9d05-4013647aacfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7512b3c8-45c4-4bb2-84c0-6de786d248f2",
        "cursor": {
          "ref": "567ba6e3-426c-49b0-8b7c-ee9877a571aa",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "b3b48989-06dd-4e64-bb4b-c5ad02753a61"
        },
        "item": {
          "id": "7512b3c8-45c4-4bb2-84c0-6de786d248f2",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "f90cdda9-23c1-460b-8a71-8dee55408c08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ef4c392-b996-4c16-a134-f6850259e1e8",
        "cursor": {
          "ref": "fa54dc7c-195e-4c74-a8ed-1e2e2037a7ca",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "446d1275-dcd3-45d5-8a1c-70abdfaf07fc"
        },
        "item": {
          "id": "5ef4c392-b996-4c16-a134-f6850259e1e8",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "a4ae2269-9ec1-47a2-bc90-9dbaa764a072",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "73f2700c-a198-43da-ae78-f8907f3d5457",
        "cursor": {
          "ref": "c5122499-2a04-4c62-9b58-5b890a0f011c",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "dc1a1f91-75e6-422e-9450-fb5fb3d3593b"
        },
        "item": {
          "id": "73f2700c-a198-43da-ae78-f8907f3d5457",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "b20155b5-20a0-4428-86b2-45c3f8e1c6bb",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "7c6c9a30-c168-4636-bf86-b21c7b38682d",
        "cursor": {
          "ref": "e7ac4678-ebc1-4e51-9c10-82bc2fdce373",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "c401de5c-1f29-4dcb-a196-c65048cb079e"
        },
        "item": {
          "id": "7c6c9a30-c168-4636-bf86-b21c7b38682d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "3590d245-4439-4f3c-82bd-6beca6c1a957",
          "status": "Created",
          "code": 201,
          "responseTime": 350,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "25cf5026-3299-40ca-b492-93cb774292b0",
        "cursor": {
          "ref": "b9b96eaf-debd-4909-acf9-04ca17b54e07",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "b0ea28cb-d96f-4b56-880b-24cb7d060d66"
        },
        "item": {
          "id": "25cf5026-3299-40ca-b492-93cb774292b0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "9b771aaf-6775-4b8f-83b9-c06c82a87418",
          "status": "Created",
          "code": 201,
          "responseTime": 359,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "c685cd0a-8c29-4f21-902c-3e864d792297",
        "cursor": {
          "ref": "f80bbff9-1870-4e05-9fe2-8121732c8a2b",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "1221232b-8da7-453d-a457-2ea660e235af"
        },
        "item": {
          "id": "c685cd0a-8c29-4f21-902c-3e864d792297",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "ede49f18-547a-4f05-b2fe-1890f9368bc4",
          "status": "Created",
          "code": 201,
          "responseTime": 230,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "b2498eca-2086-4335-929b-8725e79e46b6",
        "cursor": {
          "ref": "0a2a49c4-d008-4e76-869f-e2c85aca258e",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "1f343b29-7b9a-4924-9502-e04d47090e0e"
        },
        "item": {
          "id": "b2498eca-2086-4335-929b-8725e79e46b6",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "5f2373ad-8cc9-428c-9f74-08b596fd2d01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebfbdada-aff4-4905-95ce-f18fbf74f9f0",
        "cursor": {
          "ref": "c4fcbdea-9c85-4795-8c0b-5276f83dad3c",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "0cf8a95c-5dd1-4ba1-b496-881a824309e8"
        },
        "item": {
          "id": "ebfbdada-aff4-4905-95ce-f18fbf74f9f0",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "e2a3f0a2-5dce-4d88-8fe9-b3b0cc8b8bfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9eb7efa-c0f8-42a3-adff-37385a3a71ff",
        "cursor": {
          "ref": "b8550757-56c5-47a9-a517-475a724ef4f7",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "86999054-4394-4434-9dd8-173df4d017d6"
        },
        "item": {
          "id": "b9eb7efa-c0f8-42a3-adff-37385a3a71ff",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "380e7338-ccec-4241-80f1-0d8ad4621881",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47399851-5f7f-4f99-95b5-9a0b5300785f",
        "cursor": {
          "ref": "eee00594-8054-4205-a074-ffcb783e4d1a",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "513ee42f-340a-49bc-b59a-812c6c9a3d51"
        },
        "item": {
          "id": "47399851-5f7f-4f99-95b5-9a0b5300785f",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "96f71aad-02a9-48a0-ae69-aaafb115cd5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ac6344e-09f5-4d67-b651-7cd0b49165a2",
        "cursor": {
          "ref": "d6b8b860-697c-4955-a23d-11d2f4234440",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "4cb52132-1c80-4568-975a-747b8dd72061"
        },
        "item": {
          "id": "5ac6344e-09f5-4d67-b651-7cd0b49165a2",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "06b49a8c-a87c-47d4-be15-6aa992ea71c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c641e4c0-15f5-4d31-b79c-e53ee1520c67",
        "cursor": {
          "ref": "de61daec-7a21-4d41-8041-0b429862dff9",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "cd8146eb-3009-4dd6-9a72-776e6bac521f"
        },
        "item": {
          "id": "c641e4c0-15f5-4d31-b79c-e53ee1520c67",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "378c8a0f-94c4-4dd4-ba76-2ef1b5ac1a70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "858777b3-2abd-49ff-9ad2-372f65a537a8",
        "cursor": {
          "ref": "4c4c69b0-34aa-4fbf-af62-6efd60a6caf2",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "b1eec15c-4ad4-47c2-811f-a952631e29e2"
        },
        "item": {
          "id": "858777b3-2abd-49ff-9ad2-372f65a537a8",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "df7cc808-ae04-4995-8229-89c0671bd03d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc2a9fbf-79b0-4e4f-8dfe-1e97f7b03bf4",
        "cursor": {
          "ref": "0f7223ab-6fcd-4ab8-bd0d-ef0c28fc0e58",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "a5b4dc7d-f883-43a4-8505-31e3f16a1237"
        },
        "item": {
          "id": "fc2a9fbf-79b0-4e4f-8dfe-1e97f7b03bf4",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "f2659cdb-a0f6-404b-aa38-1433773ce1d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43d5bfdc-8dd3-4fa9-a089-1631493578f7",
        "cursor": {
          "ref": "4a8846e7-29c9-4660-8a6b-8d85a5a85fb7",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "399a320d-ac0e-4389-b636-1d8cf0e35e86"
        },
        "item": {
          "id": "43d5bfdc-8dd3-4fa9-a089-1631493578f7",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "a0078b0f-5d0f-4fc3-b00a-ce7baf6d842e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c54ec9fb-e1be-4354-8170-af43438f2c44",
        "cursor": {
          "ref": "4cbe2f37-8484-49b5-8aae-b358426f16f5",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "2daaea85-7eee-42e7-b5cf-d6f06524cce1"
        },
        "item": {
          "id": "c54ec9fb-e1be-4354-8170-af43438f2c44",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "53187012-df04-45e2-b134-7b1afaa8c5eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58b0ad13-ea44-4675-989c-b4057dcb0bc3",
        "cursor": {
          "ref": "bca7dbb4-9201-4f01-a7f7-83c7e2071fe0",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "997fdae5-b6d8-4561-a024-0ba39fc55605"
        },
        "item": {
          "id": "58b0ad13-ea44-4675-989c-b4057dcb0bc3",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "d4714e29-8991-47a9-97ab-0b06515b1fd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1f7d9aa-4bc4-4d4f-af7e-81a3916413cd",
        "cursor": {
          "ref": "3898433d-0d0c-42aa-9fa3-e7a17fa7fb37",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "c1f3a815-1d8b-4ada-b473-9ef997539aa8"
        },
        "item": {
          "id": "d1f7d9aa-4bc4-4d4f-af7e-81a3916413cd",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "3a1a2308-b62d-4fbd-b88b-df6da3fb8767",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "591bffbb-34e7-49cd-bbd8-8216229cb310",
        "cursor": {
          "ref": "5f391ab7-4644-45ee-b323-720d770c6267",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "0c633a04-c1df-4622-b7aa-1dfed5ff7566"
        },
        "item": {
          "id": "591bffbb-34e7-49cd-bbd8-8216229cb310",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "6dd52ca8-9c24-4699-a877-e3569d1258af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0cf7d30-600f-4203-8a0d-92373334b3c4",
        "cursor": {
          "ref": "5044a5dc-cc0c-4f42-aa5d-2396a76db320",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "e073250d-075f-4e7f-a0da-785f51b7708a"
        },
        "item": {
          "id": "d0cf7d30-600f-4203-8a0d-92373334b3c4",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "c7c0ff85-d965-4b49-b191-e1b3d8911c54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eee9d6b-e16c-4192-961f-65d0745daae8",
        "cursor": {
          "ref": "0d24b2b3-6c89-4e4a-a52c-ae06db25d023",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "93ef4c10-501c-4218-8c10-fcbb6ba4bf0a"
        },
        "item": {
          "id": "2eee9d6b-e16c-4192-961f-65d0745daae8",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "7ec4f215-3aa3-4346-9d40-e65678bf1436",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15eb7f18-d65f-4efe-b63c-058a57c3f625",
        "cursor": {
          "ref": "b7c012e2-9e38-437f-8265-c9aaa7f2be33",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "e6e429ba-bbd1-4eab-9ae3-f44bf1fa29d8"
        },
        "item": {
          "id": "15eb7f18-d65f-4efe-b63c-058a57c3f625",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "d10b0eb1-fee3-48ba-98bc-f47a0f92a1b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8161231e-c411-4930-a512-08e1234155a5",
        "cursor": {
          "ref": "5410353b-5e0c-46ec-88dd-57f13f485437",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "733c6c35-a653-4029-8a34-b6d7ffd02a8b"
        },
        "item": {
          "id": "8161231e-c411-4930-a512-08e1234155a5",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "3ad410fc-5858-4e5d-9758-f3a5386a6078",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a526193c-cf7a-4e73-b983-37f189d39c39",
        "cursor": {
          "ref": "b04f2a5e-182d-404d-9e65-e05dc33a1bdc",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "9e4d5000-2324-42d7-b2c7-73424602f828"
        },
        "item": {
          "id": "a526193c-cf7a-4e73-b983-37f189d39c39",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "540aaaa7-1553-4c98-9460-d316057dc6c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c51a02d-8bfa-4199-8a0b-b92e102b3daa",
        "cursor": {
          "ref": "19fc9b6a-0f79-477f-971b-24406e2d4825",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "c6cedc57-30c2-4b90-955a-4c69ba21acc0"
        },
        "item": {
          "id": "9c51a02d-8bfa-4199-8a0b-b92e102b3daa",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "610df065-e0e2-4fb0-a585-cbf86d18c391",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f053175-b10b-42f4-9646-00e55fd60fca",
        "cursor": {
          "ref": "93aabe14-f072-488f-bb76-2a2c01458084",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "0fd5fb8b-72fc-46be-9343-57f0c2c0e253"
        },
        "item": {
          "id": "0f053175-b10b-42f4-9646-00e55fd60fca",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "9b5a1c9e-44e7-4500-9ce8-c878c8e306c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2db1ffa4-e222-42b2-87b1-fde41bb37964",
        "cursor": {
          "ref": "63cd0ee4-edf5-4b64-9100-122f22970cd7",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "32ff8a61-7e09-45d7-a9c6-af77ef1d0b78"
        },
        "item": {
          "id": "2db1ffa4-e222-42b2-87b1-fde41bb37964",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "1514fb5f-56da-4be7-b603-8a9039c4af4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e1559f9-d080-4d7c-819a-473d9af2a185",
        "cursor": {
          "ref": "80d9d430-999a-4d05-b1b8-35c7574a54aa",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "2258f71d-6b04-4f31-9a50-d039f64949d9"
        },
        "item": {
          "id": "6e1559f9-d080-4d7c-819a-473d9af2a185",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "800c7e05-c47c-4a48-92ed-3954f1b03864",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "776b6c08-53ee-477c-8d00-1cb72a9e610f",
        "cursor": {
          "ref": "161447bf-0369-42e9-850a-a970511da467",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "9d3513a1-61f7-4fbd-89e0-92cc6ef828bd"
        },
        "item": {
          "id": "776b6c08-53ee-477c-8d00-1cb72a9e610f",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "e64c1b99-4490-48b3-ad05-37fc03d36849",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e938bde5-f902-4a77-acf6-814ff915a113",
        "cursor": {
          "ref": "d62bce6e-ef64-4192-99d4-88bd6f5ebc85",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "73de4460-cd75-46c1-b90c-5fea339f0299"
        },
        "item": {
          "id": "e938bde5-f902-4a77-acf6-814ff915a113",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "f8a3c5a3-b752-4656-8fae-38451b3652bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0736b60-a02a-4c19-8623-283801e37251",
        "cursor": {
          "ref": "43a0706f-3346-4b9d-8c88-5a8b49a970c1",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "1a0fdb88-eb33-4f7d-a5c7-469f72c829aa"
        },
        "item": {
          "id": "d0736b60-a02a-4c19-8623-283801e37251",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "f5a47c9c-4838-4799-a921-f8c86e305c9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "516f716f-dcef-49d9-8032-9e73a1e8f0c5",
        "cursor": {
          "ref": "fc08d92b-e1f7-46e0-b170-e345db2a0587",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "f005c31e-dbe9-4916-a195-c83bf855daaa"
        },
        "item": {
          "id": "516f716f-dcef-49d9-8032-9e73a1e8f0c5",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "497905b7-e5d1-4a60-af0c-01c8942ae584",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfc331b3-e6e3-4004-a75a-4004c4649aeb",
        "cursor": {
          "ref": "9c47e4c3-629c-4afb-9b10-e17b538c9ba7",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "c9878517-4ddb-4ca7-b89c-36e9b00e4dce"
        },
        "item": {
          "id": "bfc331b3-e6e3-4004-a75a-4004c4649aeb",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "6c5987af-d1ca-4b46-89e1-def789070dcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf0454c6-8972-4817-ab8e-88b563bd92d1",
        "cursor": {
          "ref": "8d69e766-5db6-41d7-88a8-d6a19e31ea54",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "62e91c37-7bed-40c3-b902-cab13b567d2e"
        },
        "item": {
          "id": "cf0454c6-8972-4817-ab8e-88b563bd92d1",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "33c175bf-a4aa-4697-8faf-8e41e9342e4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a087353-c6d2-4f0c-98e9-231f643c0c4d",
        "cursor": {
          "ref": "6190d4c6-a9c4-4899-8710-f67224898539",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "4072b000-1135-4797-8b53-16e369f8d026"
        },
        "item": {
          "id": "6a087353-c6d2-4f0c-98e9-231f643c0c4d",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "1a92c71c-2c0a-44b7-8d0b-04175e3f69c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b436bfbe-a322-4932-8f56-72b13a2b3257",
        "cursor": {
          "ref": "04b7d1e7-cbe7-4598-8d4f-999bd3ac5f0b",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "96ef2070-f165-4c7d-be2e-ecad3dd2f0ff"
        },
        "item": {
          "id": "b436bfbe-a322-4932-8f56-72b13a2b3257",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "ef145cbf-8677-4900-af0c-9a654c3f66f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "191b2870-eccb-4db8-a8ed-4c93efa75d77",
        "cursor": {
          "ref": "78ea70e1-46bb-48b4-8a9f-3dad9f2cf497",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "aa8dedd4-ca13-4be2-a745-91ababf646fe"
        },
        "item": {
          "id": "191b2870-eccb-4db8-a8ed-4c93efa75d77",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "a8ef3f46-29a7-45af-9197-19d7163fdf87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6cd0e0f-363c-4181-b8ca-9ce4527c1e6f",
        "cursor": {
          "ref": "69eecd56-9269-475a-afd2-0e656ce4c236",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "53c631b8-e920-4037-a432-de4417fcd32d"
        },
        "item": {
          "id": "d6cd0e0f-363c-4181-b8ca-9ce4527c1e6f",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "5a936c95-d68b-463b-afea-60bdfa3f6b46",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b503a90-92e1-41b0-89f6-228482d612cd",
        "cursor": {
          "ref": "f83571a2-982a-485f-a3cc-8f98249d584d",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "83b6fd7a-a1d2-497d-ac39-d8c79f3a6b17"
        },
        "item": {
          "id": "7b503a90-92e1-41b0-89f6-228482d612cd",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "7077482f-7000-438a-af1c-2569ef6a4e7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "14b38bf7-3e84-48b4-8d68-d03236a6472c",
        "cursor": {
          "ref": "0645ac46-db9b-48c7-9309-553c82614e16",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "a83c6c41-3745-41ab-8fae-dadb38bf0243"
        },
        "item": {
          "id": "14b38bf7-3e84-48b4-8d68-d03236a6472c",
          "name": "credentials_issue"
        },
        "response": {
          "id": "5b8e7a16-d45f-467d-a50e-2f61f04a657a",
          "status": "Created",
          "code": 201,
          "responseTime": 237,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e8280ac-95d3-421a-9309-95e9168d8864",
        "cursor": {
          "ref": "c30c3597-b68d-4397-9e24-7ca5dd9d0daf",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "c4972ea1-c20e-4784-85af-0c31aacfa5ea"
        },
        "item": {
          "id": "9e8280ac-95d3-421a-9309-95e9168d8864",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "dbe1c805-97a7-4411-935e-91095df9aeac",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c30fb16-a1f1-4a10-8cfa-b23037fb0f2b",
        "cursor": {
          "ref": "1f8f3d9d-652a-4363-962b-1b65cd9faab1",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "da742bf9-8b46-4682-b98c-cfb4bca18a95"
        },
        "item": {
          "id": "0c30fb16-a1f1-4a10-8cfa-b23037fb0f2b",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b667537c-3d95-48e6-b970-ba6cd458e80f",
          "status": "Created",
          "code": 201,
          "responseTime": 232,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a260703-eb6c-46f3-9395-b139d348493a",
        "cursor": {
          "ref": "623000f8-002e-4d0c-b74b-c24394bcd113",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "4c454f6e-4c9d-4c6d-bdaa-3bb2a8b58bfd"
        },
        "item": {
          "id": "0a260703-eb6c-46f3-9395-b139d348493a",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "45e6c437-f219-444a-bf7f-98f98792714e",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c17e349-018b-400c-a4f0-3c3f9e921966",
        "cursor": {
          "ref": "9a85f2b8-a1ba-4fad-95ab-55ba52d8cf07",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "265da3cb-f086-4d97-903c-786383f43f97"
        },
        "item": {
          "id": "5c17e349-018b-400c-a4f0-3c3f9e921966",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "dd32d2f9-bda7-4977-b6fc-b456b144832f",
          "status": "Created",
          "code": 201,
          "responseTime": 366,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-11-15T00:35:18.607Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-11-15T00:35:18.607Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "a3ce74a5-c663-4de5-9c9c-1eddb8466acd",
        "cursor": {
          "ref": "5d2d59f8-09a2-477b-88ec-ec3db11a9b55",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "75eaf6b9-8550-4d3d-9ae6-0c79a2fb74f1"
        },
        "item": {
          "id": "a3ce74a5-c663-4de5-9c9c-1eddb8466acd",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "6786f02c-9847-474e-8f2a-a06ad49de017",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b46902a0-d1f1-442b-beea-dc65376148e6",
        "cursor": {
          "ref": "e1fa0f6c-91e0-4f66-9ae9-bd34e66684eb",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "01994643-2a55-4191-88d6-6078e1ceabdd"
        },
        "item": {
          "id": "b46902a0-d1f1-442b-beea-dc65376148e6",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f2243835-c202-44ea-a2ec-0483b79a4079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fafd0fa5-c078-4db6-a1c8-6fb9ebe03493",
        "cursor": {
          "ref": "8c4dd594-931c-471f-9faf-3fc873265f26",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "cb3f18fa-8f42-4952-a437-374a7fee1c69"
        },
        "item": {
          "id": "fafd0fa5-c078-4db6-a1c8-6fb9ebe03493",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "5821eb1c-31ff-4af7-917c-21b305a9c5c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3356fe7-82e5-4669-a52d-cedae4696ee9",
        "cursor": {
          "ref": "1432b290-2093-4562-a491-d8f8360dcd5c",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "d001e1ce-9033-493c-8219-c01800b7e249"
        },
        "item": {
          "id": "f3356fe7-82e5-4669-a52d-cedae4696ee9",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "7799b721-3970-4130-bf37-0e552e8df56c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "030bc201-fd33-41f3-9e69-c586427b5112",
        "cursor": {
          "ref": "ff8afda7-58f6-40b4-ae10-27711985e307",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "fc2cb267-cff5-4042-a2bc-bcfd4985eccd"
        },
        "item": {
          "id": "030bc201-fd33-41f3-9e69-c586427b5112",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f9dceab7-d53e-47b4-a0a5-f2c1d6c88a1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "857e4288-4274-4440-9ad2-14f4772eab43",
        "cursor": {
          "ref": "9d3c772d-ace5-4974-b5bb-494f5915aa92",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "ca228de6-40ca-404f-8432-94d936d07e51"
        },
        "item": {
          "id": "857e4288-4274-4440-9ad2-14f4772eab43",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "f55e46b1-1c69-4b7e-abfc-bad38955d095",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7feb5110-f509-4b41-b726-0c822a9ca4ff",
        "cursor": {
          "ref": "9cbbc3ed-41ea-414b-b5f0-c49c44ea20aa",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "7a28edf5-23cf-4d6c-81bc-5a110fae5633"
        },
        "item": {
          "id": "7feb5110-f509-4b41-b726-0c822a9ca4ff",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "54aaccb1-b46f-45ee-b5ba-8d129e7bdd4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d01eefa-8b89-49f2-94a4-46df43868704",
        "cursor": {
          "ref": "f1554f24-bdbd-4999-9a22-5471a71a3ba2",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "e6570b27-ca93-47a4-ba6a-c9a48ded9800"
        },
        "item": {
          "id": "0d01eefa-8b89-49f2-94a4-46df43868704",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "bcd27f4d-f107-42a6-a921-8f28f33207bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89812fbb-4d0a-4f55-be84-aff91ba7df59",
        "cursor": {
          "ref": "5171f736-0b16-4873-8493-5f306f6b448e",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "7e43d322-03bf-4684-af0f-7e64c4d2e2db"
        },
        "item": {
          "id": "89812fbb-4d0a-4f55-be84-aff91ba7df59",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "56fadae2-3fe0-4866-8935-1c937720e5df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "902c7a06-8ec6-41b4-ab34-7ee1f036d120",
        "cursor": {
          "ref": "8c338814-a6ad-4b6a-a9db-e5917a2aa8e4",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "b28bfff4-9d3a-4ec7-8ef9-c4666fbe7740"
        },
        "item": {
          "id": "902c7a06-8ec6-41b4-ab34-7ee1f036d120",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "a0a6c4b2-5c1c-485b-8dc8-9ea8d6773666",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5422d17-3c72-420f-bb17-5a2096d02a99",
        "cursor": {
          "ref": "7492d2a9-5900-4c00-9d16-c40c750cd4af",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "f66afb87-d09f-400f-a3ad-a7ca3c3d6ec9"
        },
        "item": {
          "id": "a5422d17-3c72-420f-bb17-5a2096d02a99",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "fc71b684-77a4-4df0-9b80-b46d9372832e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb417883-ecb2-47ea-9852-dcd157c7feac",
        "cursor": {
          "ref": "e9066982-98be-4a80-9617-d60c400ff707",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "f68eb0b2-5045-4c98-b1d4-f19ed86333d9"
        },
        "item": {
          "id": "eb417883-ecb2-47ea-9852-dcd157c7feac",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "214e02b9-5672-4acc-b162-1d7288407e36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da877617-d858-4f01-920e-6a1d98c9bf1e",
        "cursor": {
          "ref": "fb46ca5c-bfa9-4a98-a540-c5567ff15d1c",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "39f59ff5-0468-4d5e-bf5c-9a20c1ba3f72"
        },
        "item": {
          "id": "da877617-d858-4f01-920e-6a1d98c9bf1e",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "6719ead8-445b-4877-9163-f8b4ef62344e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b31176d-f1ab-4d74-8336-ab1ac479dd3f",
        "cursor": {
          "ref": "ddd431ff-a60f-4f7b-82f0-3750220850f6",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "d953c939-e061-4a3a-955a-9bc5b351d462"
        },
        "item": {
          "id": "2b31176d-f1ab-4d74-8336-ab1ac479dd3f",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0f5e058d-1cb8-413e-9142-2df4708886c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "501243c7-8f94-4a51-93b3-e306c09ce8e8",
        "cursor": {
          "ref": "58c35529-205a-4f85-8d94-ad3ff87cc107",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "94cceece-0671-410a-a488-5008a2bfbdd5"
        },
        "item": {
          "id": "501243c7-8f94-4a51-93b3-e306c09ce8e8",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "0df57d6d-ed05-4300-a47c-99a8f475106f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6433c9a6-1153-410c-819d-97eda870b2c6",
        "cursor": {
          "ref": "cb306b38-2086-472b-9e50-c768b8c35280",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "6cc57a64-e692-462e-9f45-86c1f24c8ea0"
        },
        "item": {
          "id": "6433c9a6-1153-410c-819d-97eda870b2c6",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "3d657455-6a9e-421a-a65a-8a3ce6434ac6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c2177e6-86ab-4681-b50b-8c6868f5d289",
        "cursor": {
          "ref": "98e57e8c-856f-40e9-bbac-9110531881bc",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "11951d14-c44a-4386-bd69-5e5af0f3d007"
        },
        "item": {
          "id": "2c2177e6-86ab-4681-b50b-8c6868f5d289",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "de9adc19-a931-4314-b16f-9011e97e69ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24954c76-9b67-4e2a-a4af-faf522b92aae",
        "cursor": {
          "ref": "e3fba397-6bcc-4216-b84b-dcae841c8d3c",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "c045cf23-ab2e-4c5e-b89f-a4010c099f37"
        },
        "item": {
          "id": "24954c76-9b67-4e2a-a4af-faf522b92aae",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "42b91f29-611f-42a5-ae1d-ae0ae43769fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "143f776e-28c0-4fe6-b3f6-c8842911ab88",
        "cursor": {
          "ref": "fc7f122c-0c9a-4cc1-ad58-cbce7c817ae8",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "451308ad-2b8c-4136-84e9-e2456486919a"
        },
        "item": {
          "id": "143f776e-28c0-4fe6-b3f6-c8842911ab88",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c6169022-2e30-4a9c-a72d-d510064aa266",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bbfb33e-82b1-4ad6-b340-82c5c2225755",
        "cursor": {
          "ref": "c341e46f-f1b7-420b-bbe2-5e1e03c73cfe",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "bc0df21a-364f-4b1e-97cf-17f3d62de8f8"
        },
        "item": {
          "id": "1bbfb33e-82b1-4ad6-b340-82c5c2225755",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "a39734ee-02e8-438b-b986-9c8b23328f4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ccc4581-a113-4d71-b3e8-c5b17078fb26",
        "cursor": {
          "ref": "b7b8c667-b3d7-48d6-b2a7-617f0884598f",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "e4c940de-42ea-4b02-ab59-76c06b128624"
        },
        "item": {
          "id": "8ccc4581-a113-4d71-b3e8-c5b17078fb26",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "134b42c7-c12d-4139-8a99-888c2008fa67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3898fd30-8044-4bc1-aedf-7bfb93869e26",
        "cursor": {
          "ref": "51f799cf-b5e2-47ad-be5d-049e3237749b",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "1f9f6128-b7ec-4cd7-8317-41098a67e7b2"
        },
        "item": {
          "id": "3898fd30-8044-4bc1-aedf-7bfb93869e26",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "fe83d434-f616-4b34-888b-4a50f0b85182",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30373fe6-8a38-4b49-ac75-9788b9443b9f",
        "cursor": {
          "ref": "866066e5-4ad2-4769-bdb4-e7095ea6b3d5",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "0002d047-1da5-4db0-81d3-aed70f5c60a2"
        },
        "item": {
          "id": "30373fe6-8a38-4b49-ac75-9788b9443b9f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "a812092b-e1ae-40ab-9588-5e833096b940",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "495c5f5c-70b5-4127-b38e-9dfa838a5d1d",
        "cursor": {
          "ref": "5e4bafb9-b68c-440e-b960-786bd4c6ce93",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "97e60cf8-0c12-4be2-9827-2c1a81be8352"
        },
        "item": {
          "id": "495c5f5c-70b5-4127-b38e-9dfa838a5d1d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "87adef2b-7d09-4ddb-ab89-a699edd29d91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f2fe49b-ca7c-47dd-b2b8-ba69f431a9a7",
        "cursor": {
          "ref": "c9f9808a-b3ea-463c-b58f-ecb80553a172",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "e190bc3a-53f8-48f9-ba73-5fc4320990b9"
        },
        "item": {
          "id": "3f2fe49b-ca7c-47dd-b2b8-ba69f431a9a7",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "f8c87e93-a2ec-48ef-9e93-8e3e410eb874",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8520a86-eb2b-4955-b651-b72aed6c2c03",
        "cursor": {
          "ref": "4acd4f16-b533-4020-a0da-967b2653a443",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "0f189de2-1395-4f29-a34c-7d7efb66b702"
        },
        "item": {
          "id": "a8520a86-eb2b-4955-b651-b72aed6c2c03",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "73313613-9d27-452a-a014-7eb5119aa628",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2f68220-ceb7-4618-a60d-430ba94f07d2",
        "cursor": {
          "ref": "ef3f09ac-a48e-4d8c-8a9c-838724f5459b",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "32e89947-6c43-4ca1-9c28-e813d65a6a32"
        },
        "item": {
          "id": "f2f68220-ceb7-4618-a60d-430ba94f07d2",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "6b2f6d43-9474-4911-af7c-4c6b2588295d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e030d09d-06ba-4e81-a1f3-489967adde8b",
        "cursor": {
          "ref": "128eaa25-5aa9-4d0e-90a5-7e99895ca767",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "6ae2dc8f-a03d-4f34-bf59-a0ec2e9b839a"
        },
        "item": {
          "id": "e030d09d-06ba-4e81-a1f3-489967adde8b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "7950cabd-dd18-41d0-ad6f-1fce0a8dfa28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2da1918-16fd-4c22-a4e3-694ae14dbda8",
        "cursor": {
          "ref": "0fd5ad49-f922-4de5-a309-5c854347b367",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "2aa49f2c-b81f-418f-8fc2-801d92a72e66"
        },
        "item": {
          "id": "b2da1918-16fd-4c22-a4e3-694ae14dbda8",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "228a2d7c-3ab0-4aa2-92e8-688cd464941b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "342023f8-8d24-4a18-95d1-3cf966ac8806",
        "cursor": {
          "ref": "3e016756-210f-448b-99e9-3dccd2932f21",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "026f6c95-1464-45ca-9770-98546a733c0d"
        },
        "item": {
          "id": "342023f8-8d24-4a18-95d1-3cf966ac8806",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "4e7637da-e0dd-4ee0-98d8-5d32be49f4ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fd4ba2e-64b7-4adc-929e-e7ff8e6ebb2b",
        "cursor": {
          "ref": "ffb43213-2038-46e4-acc0-46ad4f113d7d",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "474b02ce-1637-43da-b3f9-e7778d0b879b"
        },
        "item": {
          "id": "3fd4ba2e-64b7-4adc-929e-e7ff8e6ebb2b",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a746ed0d-e46e-46c1-a479-e27aa144e7e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74326b9f-d973-4c7a-95dc-6fa029a959ee",
        "cursor": {
          "ref": "67070193-3b56-44cb-9841-cc47ef5ec93d",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "365c47a2-59cc-4578-b436-a763e1f190a7"
        },
        "item": {
          "id": "74326b9f-d973-4c7a-95dc-6fa029a959ee",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "e08f648a-7a51-4391-8af3-bcdf662d624e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b10675c0-5c2c-4f7e-8b0c-267d08c19ad1",
        "cursor": {
          "ref": "4dfeacd5-916f-4ece-a1b8-a6e5598d8ba0",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "0ab195c7-7844-4984-8d03-dcc332e35b52"
        },
        "item": {
          "id": "b10675c0-5c2c-4f7e-8b0c-267d08c19ad1",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "f4e9b7c6-9903-4dfc-9ff9-e5866f53c027",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a9832a3-8c96-4e47-b15d-7ebf98a83e0f",
        "cursor": {
          "ref": "cbe67ff4-4072-450e-a78f-148204b9e15f",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "3f4f58af-29c9-482e-877a-4db1015026d0"
        },
        "item": {
          "id": "3a9832a3-8c96-4e47-b15d-7ebf98a83e0f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "300e8240-dcf0-4e64-84e1-0557f7c651b6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5343f8cd-ce9c-48f4-836f-37ce097750e3",
        "cursor": {
          "ref": "32fad011-3353-4624-832b-d44817fb3d73",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "9727e39d-4477-4791-bd43-c7d07558f30e"
        },
        "item": {
          "id": "5343f8cd-ce9c-48f4-836f-37ce097750e3",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "b82b12e1-7df4-406b-869c-99e52fa11ca1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7cfa56e-9649-492a-b735-8348c637193d",
        "cursor": {
          "ref": "844747b6-ffcf-402a-aed5-2d4c7e57d84d",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "99985927-54d9-46d0-8c36-c23fbaceb260"
        },
        "item": {
          "id": "e7cfa56e-9649-492a-b735-8348c637193d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ecd8197a-dac1-402b-8515-a2742323a7ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "453dfd3e-b008-4515-9d9f-f9f22c926309",
        "cursor": {
          "ref": "39088c5e-503f-48af-be0e-db8d239404e0",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "214e7faf-bcbc-43ba-b8fb-3f5242a7e0ed"
        },
        "item": {
          "id": "453dfd3e-b008-4515-9d9f-f9f22c926309",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "6300e9e6-2450-4099-8a86-7ecd53a8a0af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "744f7751-cc62-4fa8-a4f3-27131ba9eae1",
        "cursor": {
          "ref": "8f467901-ebb9-4c6e-9fee-41129b8db1a1",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "3ade098e-f999-4b7c-8e2d-d2c33fea8ede"
        },
        "item": {
          "id": "744f7751-cc62-4fa8-a4f3-27131ba9eae1",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "24f51f17-341e-4b7f-8993-18ae9ae9e827",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "341e77fe-934c-4021-a0b8-80a8bb0cabb3",
        "cursor": {
          "ref": "657e2b1b-c9f7-41d3-909f-dcfe84853865",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "9b73001a-25b3-4762-93d9-b8300a7ee431"
        },
        "item": {
          "id": "341e77fe-934c-4021-a0b8-80a8bb0cabb3",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "ec539e48-e695-4352-959c-c8a9409d6908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ac1cc0e-ec8c-4572-a79f-68a1667d881e",
        "cursor": {
          "ref": "daffd9c7-2aca-488e-bb14-318642cedc11",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "8ab91d1f-6f5f-4a61-a134-8d45e67c562b"
        },
        "item": {
          "id": "9ac1cc0e-ec8c-4572-a79f-68a1667d881e",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "8a14afe8-5d82-405e-b9a1-2cf0b4a7c7c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f3b192e-95e9-4359-9a98-750fc5986be0",
        "cursor": {
          "ref": "2c72a167-2a2a-47e4-9b77-2cfdb6c531f5",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "2d19fe1c-8563-44e7-b376-39f65db34778"
        },
        "item": {
          "id": "9f3b192e-95e9-4359-9a98-750fc5986be0",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "09a217ab-f3b3-4d27-96e1-ee27dcc34380",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d790cf3f-6a3f-4361-ad67-1592af19a714",
        "cursor": {
          "ref": "10f82126-aea4-4be1-a13e-739b91cbf2fa",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "b60c9eb8-e9ed-4fdd-bd11-8a34cc1c7488"
        },
        "item": {
          "id": "d790cf3f-6a3f-4361-ad67-1592af19a714",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "eea21199-fae6-4691-8462-55b17a46ed1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d467920-28bc-43d4-94c1-c6c52c70a1f8",
        "cursor": {
          "ref": "3756d6c4-63f6-44fb-adcf-e394d2a03f56",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "19e0f4bb-b717-4aab-8cfc-06aa07909673"
        },
        "item": {
          "id": "3d467920-28bc-43d4-94c1-c6c52c70a1f8",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "2e7052af-d9d8-45b9-ace7-b87664f273ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "984abfb0-ecaa-4f25-9ba5-ea80824e144e",
        "cursor": {
          "ref": "448097b6-6dc2-4ca0-a2ca-a114337dcd0f",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "90d498e5-c09f-4eb3-b501-9d8fd7d1ff1c"
        },
        "item": {
          "id": "984abfb0-ecaa-4f25-9ba5-ea80824e144e",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "6460ab5e-0d0f-46c3-a876-9d3d7bf847e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e38d5b19-03f9-4244-a8af-072afe2375d1",
        "cursor": {
          "ref": "bec3c22b-044e-4fd6-8c36-3ddb95a6b478",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "d58125f4-282d-4e1d-afe3-435bfbfc21c1"
        },
        "item": {
          "id": "e38d5b19-03f9-4244-a8af-072afe2375d1",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "73c6490f-9ed3-4960-b3a6-b9f6ca131cca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81a2a266-0e12-4b48-98f8-b515361f3128",
        "cursor": {
          "ref": "d9fe779a-2bc6-43ba-8b27-bd734b375fd5",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "aca0419e-3bc3-4a21-9962-92ce66472538"
        },
        "item": {
          "id": "81a2a266-0e12-4b48-98f8-b515361f3128",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "5b01d95d-6eca-4481-9783-7c7158404543",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87d50a19-219b-4e60-9303-82f1c7cc50fc",
        "cursor": {
          "ref": "f82d5e88-df39-4ee3-82d7-80efed6b2b6d",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "f344a971-5726-45c3-8b8c-f4903811ef37"
        },
        "item": {
          "id": "87d50a19-219b-4e60-9303-82f1c7cc50fc",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c352abc2-c0f0-469f-9930-aa4120e4b464",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cc12067-19b3-4c5e-b447-00e37bef0b6f",
        "cursor": {
          "ref": "d1febe61-908f-42d9-9c71-ead337282345",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "8fc05a1a-6755-4902-a308-776be9045a3b"
        },
        "item": {
          "id": "1cc12067-19b3-4c5e-b447-00e37bef0b6f",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "1dbf0c4a-72ff-4cf8-b78e-43c89db3c82c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e531e30-8608-4233-95a4-4f88c5c2bfbf",
        "cursor": {
          "ref": "7313698c-292e-4b1f-bb54-d7e2aeb55ab3",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "9b0bf765-9d79-44b8-b580-b7d12cdacded"
        },
        "item": {
          "id": "2e531e30-8608-4233-95a4-4f88c5c2bfbf",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "14a75262-31f8-4a0f-923a-7017457fb5e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3076bb82-e281-4ead-9a70-c482f07740c5",
        "cursor": {
          "ref": "f135f9f4-83f3-47e5-80e1-5fb533b83e5d",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "534ec71c-20a4-49de-9528-5ddb66f4e208"
        },
        "item": {
          "id": "3076bb82-e281-4ead-9a70-c482f07740c5",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ac01a8a0-e7e8-4479-922b-3d371142ff76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa871416-0e03-4a75-8da9-5f023a36175c",
        "cursor": {
          "ref": "20bf4be4-e80e-4f11-b266-9f82bda2418b",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "6e3bb50d-9353-4d0a-9c33-b39b0f2bd19f"
        },
        "item": {
          "id": "fa871416-0e03-4a75-8da9-5f023a36175c",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "8a7e180a-83c5-4efc-859c-fbcdf1a28fae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41754870-87a2-49a9-af09-2fb47bcb393d",
        "cursor": {
          "ref": "6042e42b-e5cd-426a-94cd-c68bd3cf1985",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "25f717d4-7452-44a1-9559-739f18cdaa2d"
        },
        "item": {
          "id": "41754870-87a2-49a9-af09-2fb47bcb393d",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "4da4448e-e435-4c8c-b290-a3350884a80e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "325f6f6f-720b-47f4-8061-0ec2555cb99d",
        "cursor": {
          "ref": "e708561c-3893-4319-9e44-6c1b9ae7277a",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "06352072-319e-4f18-ae2c-c7ed347732c1"
        },
        "item": {
          "id": "325f6f6f-720b-47f4-8061-0ec2555cb99d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ebe31deb-2ea6-4ac8-bb22-9a77f1211655",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4958221-45c8-4f7c-8a47-b5a794deb6f1",
        "cursor": {
          "ref": "4b33779c-12cf-4bff-80fe-4729b873dc71",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "2b316576-09ec-4b10-b707-63a69b871c38"
        },
        "item": {
          "id": "e4958221-45c8-4f7c-8a47-b5a794deb6f1",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1cd31dfe-b0c2-423e-9b9a-5c9bc522522f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0585bb5d-14ae-4ddb-9cb8-d32b2c29148e",
        "cursor": {
          "ref": "3a1fe9c6-cf5a-49f5-a18d-e5989eeb1f76",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "5afa4179-f4e7-4707-9c74-eb1add47d3f3"
        },
        "item": {
          "id": "0585bb5d-14ae-4ddb-9cb8-d32b2c29148e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "7227ab89-bcfd-4515-bcbc-816029bb436d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb04e129-3191-4df7-b504-09123f27781d",
        "cursor": {
          "ref": "0b17d7d5-cf6e-4fdb-9f61-b238acb50876",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "baa1c284-fa1e-4d50-a0b0-4091d98de44e"
        },
        "item": {
          "id": "eb04e129-3191-4df7-b504-09123f27781d",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "70c794cc-2dbd-48f5-a2a7-db6a11023476",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0b8d2b3-b6c6-4d73-b185-f9b92e777276",
        "cursor": {
          "ref": "63ce796c-678a-4575-86bb-9844763a0ac7",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "296ee82a-97dc-47e9-9f1b-0988cead7ad4"
        },
        "item": {
          "id": "a0b8d2b3-b6c6-4d73-b185-f9b92e777276",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "90f11616-df64-462f-9cea-e09f9218153c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7db512f6-7fd2-460a-bdaa-87f4556e946e",
        "cursor": {
          "ref": "1eae4014-9ddb-4482-a744-884fa0e545f1",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "e2ced3c8-3bcd-4d68-9c78-ac79940ed9bd"
        },
        "item": {
          "id": "7db512f6-7fd2-460a-bdaa-87f4556e946e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "4e0a7492-4cc5-484d-8d9b-1fd300393de3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24492148-3323-4d92-a0cd-ba3ffa297598",
        "cursor": {
          "ref": "3ce6d4bb-b90f-4ba5-b13f-196942d928b0",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "b62241ec-6e05-413b-99ce-ee2dd1cd441d"
        },
        "item": {
          "id": "24492148-3323-4d92-a0cd-ba3ffa297598",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "fc25efbc-3d0f-408d-884f-c18a44188881",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7dea6b5-df0c-4453-9dcb-53657966907b",
        "cursor": {
          "ref": "e8896730-2a28-4530-b3e4-e7035dc275cd",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "a455b7a9-b983-49f8-927e-907df0ab75b0"
        },
        "item": {
          "id": "d7dea6b5-df0c-4453-9dcb-53657966907b",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b077b457-224f-4765-8a5b-96a4dcfd4c4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad5ae164-cb1e-42b3-89ec-4e335b3ae593",
        "cursor": {
          "ref": "7a79fba1-afe9-4fba-b452-6ab4fda79433",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "21db6612-4530-42cc-ba08-3af2129679b9"
        },
        "item": {
          "id": "ad5ae164-cb1e-42b3-89ec-4e335b3ae593",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "767a82da-7641-4052-bc7b-ce4bdbade9ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aa825d1-4d12-4565-97d9-aa3b7024ac12",
        "cursor": {
          "ref": "42f3cbb0-c4e3-4ff9-bc78-d7d6bd7b9d96",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "603fac69-4a13-4745-a4e1-ed9419bba7c9"
        },
        "item": {
          "id": "1aa825d1-4d12-4565-97d9-aa3b7024ac12",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a8f11143-5b1f-4b58-9ab1-b5c6ba0e4e22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a23f5cf-515f-4736-9813-82ac593ff7d6",
        "cursor": {
          "ref": "187fadfa-3e95-4c09-94a6-cb31bb0ed00d",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "0920028f-653f-4522-acb9-55bff396da19"
        },
        "item": {
          "id": "7a23f5cf-515f-4736-9813-82ac593ff7d6",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "31fb16c9-7e3f-436a-8a1f-c84d42b2799f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4868555-5585-42e2-95fb-8188fc5ca6ae",
        "cursor": {
          "ref": "7b9cda77-0a5c-49a5-aa03-b7b8ba170d9a",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "a84df541-e7a2-407a-9d7d-668d815587fa"
        },
        "item": {
          "id": "b4868555-5585-42e2-95fb-8188fc5ca6ae",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "04e14e6e-fdbc-4d71-b92f-7dbfeb9b61fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad45bcde-1c14-4a57-beb0-33a26820a695",
        "cursor": {
          "ref": "3eb33767-b8ce-4e20-af79-4c65de0295ee",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "6f2bad3d-27b2-4a18-9ea6-3f4c803d8fdc"
        },
        "item": {
          "id": "ad45bcde-1c14-4a57-beb0-33a26820a695",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "dc98b8ad-6d18-4eb4-975a-c53ba9f7354b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9bebf56-164d-4436-9a6d-7eb150748396",
        "cursor": {
          "ref": "163855e1-1095-48bb-add6-2aa620dc4b5b",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "d3b7eefa-d264-4187-814f-8ecf361ab8ee"
        },
        "item": {
          "id": "b9bebf56-164d-4436-9a6d-7eb150748396",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "64d01930-4073-4d73-a360-318ae0ae4d58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b630fda4-2bdb-4685-a90f-4f12d81d33ff",
        "cursor": {
          "ref": "b6bb66f7-d05b-46bd-87ed-d1f9e082ca48",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "fb354d46-77a5-4bc5-aee3-178ffbecc5ad"
        },
        "item": {
          "id": "b630fda4-2bdb-4685-a90f-4f12d81d33ff",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "86f641a4-2d81-4956-9d9a-77a5d2048546",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4479aa2b-0d93-4ea6-8689-e25de0fba621",
        "cursor": {
          "ref": "a86af9e9-a8bd-40f6-aee1-c96568af36a3",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "6cfc5da2-2881-486d-b4fb-a21eab5cde31"
        },
        "item": {
          "id": "4479aa2b-0d93-4ea6-8689-e25de0fba621",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "a73dd9fc-34cd-4663-86d4-4db345b7de54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11a618ec-d45a-434a-bcf9-f4fc8544136a",
        "cursor": {
          "ref": "72db0c2c-0b9e-42b0-a4fd-a46223a12fae",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "5d2bab05-bc74-4f8d-83f2-e07cf29f08d4"
        },
        "item": {
          "id": "11a618ec-d45a-434a-bcf9-f4fc8544136a",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "e0c8ff20-3de8-40f1-9990-ceeafd0d6a90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc9d711d-3ad0-464b-afb8-7fa1b7859fe5",
        "cursor": {
          "ref": "29fd957d-3594-4cb4-a782-cf9dfc0c5cab",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "239ec1f9-f76d-4d0a-9deb-349d3530d72c"
        },
        "item": {
          "id": "dc9d711d-3ad0-464b-afb8-7fa1b7859fe5",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "8fcf37c0-b0ef-4a4c-a507-04191f7759ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68b019a1-18c6-4d82-98d4-bf98e9cb357a",
        "cursor": {
          "ref": "458f985a-b3c5-410d-bf31-e5c7ef7f21da",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "dce1f7ce-4630-47ea-9330-04aa2366c99d"
        },
        "item": {
          "id": "68b019a1-18c6-4d82-98d4-bf98e9cb357a",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "7168baa5-ff20-4cc7-b169-4207b631f646",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e345c070-1c4a-4211-8c53-7314a47e3ed2",
        "cursor": {
          "ref": "cd7687fb-9411-4cb8-9ece-48e129aac553",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "85ea178b-9d63-481a-8658-8e970c8fc605"
        },
        "item": {
          "id": "e345c070-1c4a-4211-8c53-7314a47e3ed2",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "84c34022-faa2-46da-9037-8040547e0fa1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c73d24d1-76ce-4065-8708-5f8836435f4d",
        "cursor": {
          "ref": "cb7032de-ade3-4a17-871d-7ec8414f391c",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "3ce04efe-f31e-48f7-b2d6-dde357ed863e"
        },
        "item": {
          "id": "c73d24d1-76ce-4065-8708-5f8836435f4d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "6b4158da-3b2a-454d-bff5-dfe15e192923",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7299792-c579-4135-aa58-54915a5cb821",
        "cursor": {
          "ref": "64098f55-983e-4eff-a05a-c4ca9a7443fc",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "98d340e6-3521-4f1c-a2b5-64dca137c7f9"
        },
        "item": {
          "id": "f7299792-c579-4135-aa58-54915a5cb821",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "8c48bdfd-1c38-4e90-9118-69ade5b47117",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef9a9fb3-208c-4250-9b8a-71383ed6c4ee",
        "cursor": {
          "ref": "ccc4cf8e-a6d8-4033-9718-2cb31bad18c1",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "5b68197e-e90a-4d24-aac6-c705aac317e0"
        },
        "item": {
          "id": "ef9a9fb3-208c-4250-9b8a-71383ed6c4ee",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "c94213cf-5d80-42fd-a77f-805f9d3a7b33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b24fd53-de5a-4f76-94c3-34430ecf8532",
        "cursor": {
          "ref": "d27b7a2b-61ea-4cf1-b655-fd4acca06221",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "62116442-392f-4f30-aa38-76b4960e16f5"
        },
        "item": {
          "id": "3b24fd53-de5a-4f76-94c3-34430ecf8532",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "50c62b6d-4cbd-43b5-a9da-f6752c2c7261",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e1e549f-bc70-4728-9bce-33fa22fa9a38",
        "cursor": {
          "ref": "36313073-7255-4873-958e-382021ef2bed",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "01adcab1-ef68-4531-8278-3f94d412e7cb"
        },
        "item": {
          "id": "2e1e549f-bc70-4728-9bce-33fa22fa9a38",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "f5136927-cd3d-4b8b-9861-055fda1f3a67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08ead014-aac6-45aa-8667-3f041bb36947",
        "cursor": {
          "ref": "dd757a7b-b7bc-4589-bc82-0dad0d96af7a",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "9931a3cb-32f9-41eb-b64e-f04adab1d125"
        },
        "item": {
          "id": "08ead014-aac6-45aa-8667-3f041bb36947",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "6173e8d5-2f4a-4f9c-9c6d-4db04ed1c8c8",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "8a9316e1-6258-42fc-9d5d-6feee43b370e",
        "cursor": {
          "ref": "be482505-39ae-4729-b829-a3f1a61d5d8d",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "2adecffb-8713-4d85-a324-a6b3538d7a8b"
        },
        "item": {
          "id": "8a9316e1-6258-42fc-9d5d-6feee43b370e",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "3b705310-06be-4a96-8fad-b8ee65b6c25d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a3a7947-cea1-4674-a5a1-310002295e32",
        "cursor": {
          "ref": "24561047-76a8-4efe-8af7-0ad9b624674e",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "55fdc6a6-282b-485a-947c-1fc85717f38e"
        },
        "item": {
          "id": "0a3a7947-cea1-4674-a5a1-310002295e32",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "8af66c1c-db0e-497c-865d-86f2c20887f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf8fc266-0441-4e07-a4a8-6e32aad75dfb",
        "cursor": {
          "ref": "44d0dd2e-1d57-49bb-9a46-5dfffbdc106d",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "c1e2823b-c830-4c9b-ad99-e5b22f1303ba"
        },
        "item": {
          "id": "cf8fc266-0441-4e07-a4a8-6e32aad75dfb",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "e6b30c70-1f4f-4ea8-85f3-318adcf0fbfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae67bdb7-1717-48fb-83af-551af5195a2e",
        "cursor": {
          "ref": "9fc2dc85-81e2-4ae9-a372-fc4891473cdc",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "27bbf56a-8a51-4141-88f0-28f16790782c"
        },
        "item": {
          "id": "ae67bdb7-1717-48fb-83af-551af5195a2e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "4828f25a-6e6a-4d9d-be3a-dea9b77c2969",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cb726bb-36d0-4484-ace3-6e97fe076f52",
        "cursor": {
          "ref": "406b50fa-c8ab-42e3-841d-1604cde4720f",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "cea65724-2522-49ae-8c0e-1fbc5eb029de"
        },
        "item": {
          "id": "5cb726bb-36d0-4484-ace3-6e97fe076f52",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "029e3ae5-d771-4d45-80f4-2a3aa8587f8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8903bbf5-1f7b-415b-af6f-07f6ec393a1f",
        "cursor": {
          "ref": "b762f535-0db4-4d8a-a508-da14e02c84b8",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "2391d124-bd5d-4dcc-a76b-295ac2d6dad7"
        },
        "item": {
          "id": "8903bbf5-1f7b-415b-af6f-07f6ec393a1f",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "0c07302c-68c8-492f-9eb2-192576bedab3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a76020e-46d4-40c9-9d92-7b0967716217",
        "cursor": {
          "ref": "02a3b0d0-6c7f-47a4-b21a-f6faa3dac329",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "05e0e5aa-db0c-4858-8000-96e15d8e5718"
        },
        "item": {
          "id": "2a76020e-46d4-40c9-9d92-7b0967716217",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "2b96de21-fb2f-4b09-88b7-b9b94fa48721",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f21ec8b-a767-4c48-8fc5-555859905ec5",
        "cursor": {
          "ref": "fc6d0080-f0c0-4a20-8d57-cdab4c453854",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "a2665dc2-1dd1-43dd-8e86-ef1f821eb2e1"
        },
        "item": {
          "id": "0f21ec8b-a767-4c48-8fc5-555859905ec5",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "6b395089-9307-4f09-a78a-e0fa4e0bf0ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0df0d2e-ebe0-4e44-bc3d-1cab60e48394",
        "cursor": {
          "ref": "22b3f7a7-a306-4dae-bd49-f002a736a3ea",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "4c7debd6-2914-4a7d-b97e-e9a35d39080f"
        },
        "item": {
          "id": "e0df0d2e-ebe0-4e44-bc3d-1cab60e48394",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "6358103d-29ac-4eb6-8655-283bbfaa916f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "263fc36a-0331-4b98-b572-a197e377df08",
        "cursor": {
          "ref": "8dcebec8-13f4-463a-8f93-cee81ae18d58",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "b1acb0eb-e4d2-4b8d-884e-8b7c0260e211"
        },
        "item": {
          "id": "263fc36a-0331-4b98-b572-a197e377df08",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "f5a6899e-0301-48a4-8bde-1b1f4260ca98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a3aa333-bf45-4ce8-8b12-b3c608e47186",
        "cursor": {
          "ref": "a20f6ce5-60ff-4f76-808a-9d121f39122e",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "0142b938-da5d-467d-952a-8638441050cc"
        },
        "item": {
          "id": "8a3aa333-bf45-4ce8-8b12-b3c608e47186",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "35b5eae9-f9e6-456c-ba54-f208589a5ee2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8137e74-2dfb-4e77-be8d-026228f77ee6",
        "cursor": {
          "ref": "f6941af6-ac34-4a38-adf5-31edc017e8b6",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "4abc0f75-cc54-4567-8226-586d817add78"
        },
        "item": {
          "id": "a8137e74-2dfb-4e77-be8d-026228f77ee6",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "4dea80b2-15dd-4edf-9c13-9933f32cd04e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74f57f7f-16b6-457e-8a93-6e1d474d9972",
        "cursor": {
          "ref": "93d827bb-fe2e-4217-aab8-9fe03ee0311d",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "c312dd1a-9fcd-4677-932e-e3170a5cc4dc"
        },
        "item": {
          "id": "74f57f7f-16b6-457e-8a93-6e1d474d9972",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "f0ac3b5b-fbee-417e-b3a9-8320eb67efb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31ad14af-4818-4d33-bc42-936e620a3e5c",
        "cursor": {
          "ref": "0f35a31a-feba-4d65-9d3a-8d85b71ab82c",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "5c1c7426-d472-4761-9208-8382239318a9"
        },
        "item": {
          "id": "31ad14af-4818-4d33-bc42-936e620a3e5c",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "63df4720-f806-487e-b0fa-56d7bebddbfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2a0f266-65bb-4c64-9365-fd4bb040173d",
        "cursor": {
          "ref": "19af648e-8de6-47eb-a6a1-78d938fd5af8",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "aedff250-1e8a-4385-ad2c-4ebfe53ce3aa"
        },
        "item": {
          "id": "c2a0f266-65bb-4c64-9365-fd4bb040173d",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "b93d8912-847e-48df-94e4-44711a43fd70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5545787f-4d75-4858-805b-c41fcb026694",
        "cursor": {
          "ref": "f9fe6a48-b3aa-44d4-a0a6-6e3d968b3810",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "43c9b53d-6f40-475a-8b7d-5ae7bc44d840"
        },
        "item": {
          "id": "5545787f-4d75-4858-805b-c41fcb026694",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "77a6638a-e3d7-424b-babd-71bae52469d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de8aeff3-2942-45af-a3f2-d9251bcc5752",
        "cursor": {
          "ref": "d0f17242-c600-4fb8-951c-15f06a177b9b",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "d71870d9-0563-473f-b034-551ea8348f1f"
        },
        "item": {
          "id": "de8aeff3-2942-45af-a3f2-d9251bcc5752",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "a52f1beb-b875-436f-9179-158be2fe0af1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04ad3627-3058-4515-b706-39102ebfdf8b",
        "cursor": {
          "ref": "558fff3c-eade-4d13-8f09-8f47db8cd646",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "4cb512d8-173f-4309-9ab8-49bdeeefbf35"
        },
        "item": {
          "id": "04ad3627-3058-4515-b706-39102ebfdf8b",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "8a65e163-63a8-4c7d-a83d-37eac3c792f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df42fc10-470c-4e6e-b1ef-54bf7eecc4b8",
        "cursor": {
          "ref": "8be30aaa-df65-4c06-88a4-0631a55520b7",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "f9dab481-4b28-47c0-873b-64e75d1ad0bc"
        },
        "item": {
          "id": "df42fc10-470c-4e6e-b1ef-54bf7eecc4b8",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "c05f9d32-95dd-462f-acce-80dc84180d3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c57fa0e-c60c-4c2d-9c05-42ca2cf3a32b",
        "cursor": {
          "ref": "66af1fd7-a416-4794-89bc-311d0274f014",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "be815d71-ee40-458e-b379-abd56a571119"
        },
        "item": {
          "id": "5c57fa0e-c60c-4c2d-9c05-42ca2cf3a32b",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "bacbd08a-cf17-4814-b055-cbe9f77ed489",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5f67645-da76-4753-8ba4-c0a3667cda50",
        "cursor": {
          "ref": "83c80a9b-1927-4a01-b900-c9868d24eea5",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "0cc83cbe-9428-429a-9c8d-51e5c5ce8719"
        },
        "item": {
          "id": "c5f67645-da76-4753-8ba4-c0a3667cda50",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "301fcfbc-6821-4062-818a-60bca77d6694",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6d9616b-860f-4242-8a59-b5024df52916",
        "cursor": {
          "ref": "adcc412e-1d6b-4f39-acf3-b6769850d1de",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "065d1996-e6da-4098-b75d-723b2c887a31"
        },
        "item": {
          "id": "b6d9616b-860f-4242-8a59-b5024df52916",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "cd198c3f-acf4-4857-8694-b6409357c8aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37f6e545-7274-4564-b078-55b12f099eab",
        "cursor": {
          "ref": "8c8f4e9b-0209-4b26-9d1f-61b27b4b0c92",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "cea26827-0081-4a17-ad56-5970e78cb5a3"
        },
        "item": {
          "id": "37f6e545-7274-4564-b078-55b12f099eab",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "0e671861-7dd1-426e-8814-e885eb1038dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a00e0867-9ec5-4af8-8ba2-958bb433587d",
        "cursor": {
          "ref": "29744703-735e-48fe-84ad-9638445f865e",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "5adf0549-5b75-4c6b-b34c-23dea185c20a"
        },
        "item": {
          "id": "a00e0867-9ec5-4af8-8ba2-958bb433587d",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "2857fa33-b0b7-4001-802c-4724677c011f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8099fd00-8e14-42b7-951d-81f9fc32ca7d",
        "cursor": {
          "ref": "d37298dc-f3b8-43d5-8e39-b19337a2f566",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "1361b2be-0645-4757-8940-67c19a46f91a"
        },
        "item": {
          "id": "8099fd00-8e14-42b7-951d-81f9fc32ca7d",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "fe4a8f46-4408-4d5c-9b13-e95d252261b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07140b89-b417-4225-abb4-47eb990ac2e9",
        "cursor": {
          "ref": "3b61d2b9-2b14-4b8f-9aa5-f8c6a4e55e2b",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "47456997-124f-4e1e-82e5-1edbb180775e"
        },
        "item": {
          "id": "07140b89-b417-4225-abb4-47eb990ac2e9",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "43d439f4-538a-41cd-9f8c-97e5a10888e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d17e1c1b-2ada-4984-b5bc-a50dac65726e",
        "cursor": {
          "ref": "6f3f9da5-d44a-4cd9-ba09-16dd17a3f589",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "ed90054c-b4f2-4fc5-b998-a970b3d997a8"
        },
        "item": {
          "id": "d17e1c1b-2ada-4984-b5bc-a50dac65726e",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "ace4d8b1-9fb6-4e96-875d-54d82b3c6691",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eed6869-e678-4841-8e11-2aa98fa092e7",
        "cursor": {
          "ref": "4ae459f7-ab0c-457d-bc24-2d37f5fc708a",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "2027576d-e2c5-405d-9b47-80a8de14fd4a"
        },
        "item": {
          "id": "0eed6869-e678-4841-8e11-2aa98fa092e7",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "e8c11786-ae5a-421e-962c-994427d8d3fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5df2efef-6195-42ce-81ef-d148a2d608d8",
        "cursor": {
          "ref": "2ba8f8dc-3ece-4e63-8191-c25ba215fadb",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "d9cb660d-2d9d-41fd-8185-4161064f453a"
        },
        "item": {
          "id": "5df2efef-6195-42ce-81ef-d148a2d608d8",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "f83b6887-a8bb-439b-8ffe-71ba9811a6d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "822459d7-ea98-4959-a916-038f3466d038",
        "cursor": {
          "ref": "12cb7e07-e25c-46a8-9dd6-7804c8cd7ec2",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "2d250c61-46cf-47a0-aa14-323966542535"
        },
        "item": {
          "id": "822459d7-ea98-4959-a916-038f3466d038",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "6aa43af4-fa2a-48b5-b55e-17dea9c7dd41",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "4c877d82-c975-4792-800a-d679c35aecf0",
        "cursor": {
          "ref": "7d68f0c3-a295-48e7-9b8f-316588506142",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "1c0ef82e-df04-431e-accf-feeeba3a1b46"
        },
        "item": {
          "id": "4c877d82-c975-4792-800a-d679c35aecf0",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "7542ca5c-678b-402e-a479-b8da6dc3026e",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "c42f5e51-977c-47dd-890b-7c4e23dc6d66",
        "cursor": {
          "ref": "82b1b134-da2c-4244-8f36-d177aab2ba26",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "28524534-e566-45fa-a068-621af7da919e"
        },
        "item": {
          "id": "c42f5e51-977c-47dd-890b-7c4e23dc6d66",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "852a3829-bc05-4d48-9baf-51ee861518b1",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "8ab6fe18-66d9-4418-8809-2f7406cf7ec7",
        "cursor": {
          "ref": "dad7eaa9-1ef3-474a-bc6c-453213c380f9",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "ff506474-6298-4a52-985d-7a5296869d73"
        },
        "item": {
          "id": "8ab6fe18-66d9-4418-8809-2f7406cf7ec7",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "b2a3ccd8-6f00-4f78-b7de-1c5326b08d8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "083f7f51-3245-4791-adad-9cd21cea100c",
        "cursor": {
          "ref": "25d108df-24b8-4807-a7d9-112ad549a96c",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "70d8cca7-1898-4d8f-8ea1-82236a24e342"
        },
        "item": {
          "id": "083f7f51-3245-4791-adad-9cd21cea100c",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "11fa4dd3-571f-48aa-aac9-941dd2576805",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "bcc9d4e0-7b0a-4021-989c-405cbb306672",
        "cursor": {
          "ref": "f75d60d5-e8ea-4afb-8db7-139fe3712c89",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "778d64ea-6d49-421e-ad44-9a7d9e598ba8"
        },
        "item": {
          "id": "bcc9d4e0-7b0a-4021-989c-405cbb306672",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "72755473-4dc8-41c4-99d7-11fcf20fe751",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "8fa6d9b3-a96a-46bc-b05d-50bafa69fc3a",
        "cursor": {
          "ref": "5efb861b-a3d0-48dc-9ad8-471275739024",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "89f00b0a-5d14-4233-9867-654e160c546d"
        },
        "item": {
          "id": "8fa6d9b3-a96a-46bc-b05d-50bafa69fc3a",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "e2872f58-0284-46ae-bb07-8f44304cef81",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "6c446888-abf5-4b96-9fb4-14ca54507f7e",
        "cursor": {
          "ref": "b12a843b-a769-4d47-ad85-ff1f3eca56d4",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "fe3305b9-77ad-4da9-b09a-e4bda0b0c683"
        },
        "item": {
          "id": "6c446888-abf5-4b96-9fb4-14ca54507f7e",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "66790a25-25ec-4311-8d70-ab8cbda19f28",
          "status": "OK",
          "code": 200,
          "responseTime": 189,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "d2ae19af-a2db-4256-a6cd-a1eca6146037",
        "cursor": {
          "ref": "f87e4a30-607d-4d1c-9896-f4a8eea0b8dc",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "1ba67088-b4b6-4200-b088-ee0348e08663"
        },
        "item": {
          "id": "d2ae19af-a2db-4256-a6cd-a1eca6146037",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "0ea771ce-c902-4b51-b9f1-8f0312ef71d2",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "d0c8f91f-bdcc-4ab3-aca4-92e3467c2f54",
        "cursor": {
          "ref": "628aa48f-3e5f-4e37-ae9d-81e4aab0fd29",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "949401f0-68c3-42e6-936e-3d44ac508888"
        },
        "item": {
          "id": "d0c8f91f-bdcc-4ab3-aca4-92e3467c2f54",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "3083102f-b4bd-4600-8255-a19662f97679",
          "status": "OK",
          "code": 200,
          "responseTime": 168,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "a29a2627-2d0e-4cdb-a8ba-f5c8dbd0396f",
        "cursor": {
          "ref": "b1b7d859-d5a7-4436-8e53-d87d55fe42bc",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "50d01fdf-00ee-4338-8dab-56d9b7bc3fb1"
        },
        "item": {
          "id": "a29a2627-2d0e-4cdb-a8ba-f5c8dbd0396f",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "8650bdc4-196e-474c-9c8d-750da4124bfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38195f3c-741c-472f-a9e0-b1d589e8ed6e",
        "cursor": {
          "ref": "107a9d91-3e7a-49b2-b25a-3161b06425d7",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "2ae4b483-5841-4f0f-a9c3-c566fea939e5"
        },
        "item": {
          "id": "38195f3c-741c-472f-a9e0-b1d589e8ed6e",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "3d69d7bf-1dde-4238-99a6-c5899985d9a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c62c5a5-009f-4a4e-a3e1-ab1055064454",
        "cursor": {
          "ref": "080206a1-bcb4-44a7-b36d-b0267f475b72",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "d18d133d-c3b3-419f-8124-816547e97211"
        },
        "item": {
          "id": "3c62c5a5-009f-4a4e-a3e1-ab1055064454",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "0332348d-ed01-4756-9068-17fce6365c19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64d7a0e3-ca19-464d-9cd4-06cf305effc4",
        "cursor": {
          "ref": "7e6375e2-b898-4295-942c-a35f96c182ba",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "f33f985a-4a21-44fe-b549-4cf80ce53488"
        },
        "item": {
          "id": "64d7a0e3-ca19-464d-9cd4-06cf305effc4",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "3eca4696-3b3c-46ef-9037-0b91f6072bfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16fa5e38-4f3b-4e44-bbf8-02bfceec5e57",
        "cursor": {
          "ref": "02bcf62f-76e0-4e57-9215-1e89950a8525",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "f4308aa1-0799-4519-a5f4-6aee328c1380"
        },
        "item": {
          "id": "16fa5e38-4f3b-4e44-bbf8-02bfceec5e57",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "4fcab51a-f80f-4dbb-989f-5d8dbabfd1cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "579d586b-7e8a-46b7-a2a3-e51e1cb7d4c1",
        "cursor": {
          "ref": "55a49859-5ddb-4c31-b5be-5c5e61896d3c",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "dace4912-2564-41b6-8dda-8ccebba70c1f"
        },
        "item": {
          "id": "579d586b-7e8a-46b7-a2a3-e51e1cb7d4c1",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "bedd691a-8880-4190-88dd-738b7b750c7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7acc8ca5-0b4a-49a7-954f-18cb4408a7b3",
        "cursor": {
          "ref": "284f936f-0ba4-4961-9488-d32c848f0a01",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "d6835ee6-e755-4c7e-86d5-5dd2be85c3c8"
        },
        "item": {
          "id": "7acc8ca5-0b4a-49a7-954f-18cb4408a7b3",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "49c9be58-4583-47ca-8b82-4d6b7e6c2386",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f104470e-d563-474d-8465-287a7e5d4234",
        "cursor": {
          "ref": "5b7df800-0db1-47b5-a9c4-77be610ed24d",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "9aaf8519-ef20-4fb3-aa97-6ba8a27800b9"
        },
        "item": {
          "id": "f104470e-d563-474d-8465-287a7e5d4234",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "516135a2-ac90-4a3d-a759-7edd8d18754a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71b6eace-0884-4138-8065-140a627c7777",
        "cursor": {
          "ref": "cf2d3cee-3dd9-4d23-b10d-7f981c0c6cf0",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "ea36e9d0-555c-43d0-b298-86ae0b262b0d"
        },
        "item": {
          "id": "71b6eace-0884-4138-8065-140a627c7777",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "5bfbf858-9c55-4af5-82ae-a16ae19157ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 167,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6725bc2-3736-4023-8349-a44bbf06ea8a",
        "cursor": {
          "ref": "acc74cf7-1ef2-434f-8b36-d155b243bb88",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "2c11f699-8eed-4b62-8227-c06a220d5af1"
        },
        "item": {
          "id": "e6725bc2-3736-4023-8349-a44bbf06ea8a",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "c7e8820a-70da-44c9-a52c-f23c8d04a793",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ca7ae07-e953-4a12-8674-96063f3f357a",
        "cursor": {
          "ref": "0a1c4668-186f-4157-9526-f4cf99244c67",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "e1d648ce-8ee7-4d27-a0f5-0ead0fee4c33"
        },
        "item": {
          "id": "2ca7ae07-e953-4a12-8674-96063f3f357a",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "b045cee6-4506-4d97-a38b-7cc940c10efb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "625bb286-27a1-4b33-a06c-ef1f4e846ef6",
        "cursor": {
          "ref": "2e406ebb-46e9-4db1-ba5b-dc95f86535cf",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "db36f8d3-590b-4ed0-b22c-92b4d671833a"
        },
        "item": {
          "id": "625bb286-27a1-4b33-a06c-ef1f4e846ef6",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "f050b35a-dba8-4764-9a2a-0cd10c69330b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47d8f66d-dde8-44e0-bb04-d5f83adf4fc6",
        "cursor": {
          "ref": "d41cd354-1266-4aa8-b308-d353b23f9eb4",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "2dbf6edd-6aab-4eb8-8dc5-0c67fd2824aa"
        },
        "item": {
          "id": "47d8f66d-dde8-44e0-bb04-d5f83adf4fc6",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "e0fdec60-d0ab-4e8e-9b96-98b80c733841",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cdf53c4-6644-4ff6-aac3-d718ab138ab0",
        "cursor": {
          "ref": "4a86ead1-3083-4026-a13c-89f329c63016",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "6a52f0dc-106d-4967-bba6-15f82faab446"
        },
        "item": {
          "id": "5cdf53c4-6644-4ff6-aac3-d718ab138ab0",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "5e10d661-ab69-4c0c-9be3-0b36b49a775a",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "762e0dc4-5ea8-49b0-81c3-950b04cbb375",
        "cursor": {
          "ref": "d5453221-3ecb-48ee-8aad-3e6f1ccd6b47",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "2a03cc96-4bb8-4059-9e45-4d26966f328c"
        },
        "item": {
          "id": "762e0dc4-5ea8-49b0-81c3-950b04cbb375",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "e44f7c13-4faa-4d7b-925d-992edb1e2476",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "0e6a30c2-61cd-45e9-a335-8bea272c9f8c",
        "cursor": {
          "ref": "89c27d9d-5902-417d-a7c7-1f06894081cb",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "c9f88143-52f4-4ea4-98e5-0bce44ef32a7"
        },
        "item": {
          "id": "0e6a30c2-61cd-45e9-a335-8bea272c9f8c",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "0ec11733-d1a0-4b94-915d-9a5f04a9df38",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "118a4734-b438-44e5-b4f3-71dc339476fe",
        "cursor": {
          "ref": "bb7fb3a3-ddb3-4758-a7f9-067487c24dd9",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "99a2f148-f7f6-41dc-bd6e-713b291d5862"
        },
        "item": {
          "id": "118a4734-b438-44e5-b4f3-71dc339476fe",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "cab594e4-7c7e-45d3-99a8-2906261f740f",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "12793ed3-01ec-4aa7-8cd5-fc5be01e0bd9",
        "cursor": {
          "ref": "cff39148-bffe-4f20-ad98-b31c440d7c34",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "ab71fcad-3ea8-45eb-a312-806215413425"
        },
        "item": {
          "id": "12793ed3-01ec-4aa7-8cd5-fc5be01e0bd9",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "640ce787-2b5b-436e-b470-8362ed69ead6",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "cd63bad8-44e5-4678-b667-b1f682b835a2",
        "cursor": {
          "ref": "263f1f42-d9dd-481b-af5c-73a2f9bdde50",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "07a8fe68-a7d5-4b6f-820a-21b68ff0b3f3"
        },
        "item": {
          "id": "cd63bad8-44e5-4678-b667-b1f682b835a2",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "54ded2df-54b6-4071-9f8a-ba3266a43429",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61d1bb07-1d12-4ac3-82f9-116e0211143f",
        "cursor": {
          "ref": "b1554640-b6b5-4e85-938d-d051f1103931",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "6ec21c5e-979c-42ed-8d2e-d1f878fba4ca"
        },
        "item": {
          "id": "61d1bb07-1d12-4ac3-82f9-116e0211143f",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "ebc893ef-6dca-4617-885b-6f49211727e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2be7353-1963-4d76-a3c5-ddf101e94b42",
        "cursor": {
          "ref": "bed2ee47-83c2-4e0d-8a88-bc080c44a43e",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "cedccce6-254e-4c87-8c8e-f1bad4e3f968"
        },
        "item": {
          "id": "d2be7353-1963-4d76-a3c5-ddf101e94b42",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "f9f13f39-00d9-407c-ac66-146accfae6a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd0dcf49-eade-47b7-b6cc-e57d213afea4",
        "cursor": {
          "ref": "a421546b-35b3-4942-94da-a31f3e72465f",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "de18edcf-4bf3-4fb9-a550-bfca239d071e"
        },
        "item": {
          "id": "bd0dcf49-eade-47b7-b6cc-e57d213afea4",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "db334086-702b-45e6-8c98-8e6f85041719",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1698a5ba-5235-455a-b26b-96158de0ea5d",
        "cursor": {
          "ref": "5e9a66e1-7e51-4471-bb4e-9b07ff513131",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "2af78b2e-ecf8-4f4d-945f-c4823cbcfc43"
        },
        "item": {
          "id": "1698a5ba-5235-455a-b26b-96158de0ea5d",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "83a9ca3c-cf37-40b7-917a-efb500f6145e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bd2653d-5fdb-4581-aea4-1085d56d91c0",
        "cursor": {
          "ref": "78e97e59-dc65-466e-8762-2adb9a3bcaa6",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "17fd5bb8-7c54-46df-9b9f-e5a3fea5a310"
        },
        "item": {
          "id": "5bd2653d-5fdb-4581-aea4-1085d56d91c0",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "26f6074e-c2a0-43ab-a5ee-254fc26165b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7156ca2e-6a4c-45bd-ba2f-44bdacf16707",
        "cursor": {
          "ref": "de108366-ab92-4928-820e-dea7352a2987",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "024c128c-c070-41d9-a0af-738abe547b17"
        },
        "item": {
          "id": "7156ca2e-6a4c-45bd-ba2f-44bdacf16707",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "53a80e76-7c2d-4c7f-8016-2c746e178cba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44852504-54b3-4250-923f-4a712ae401ff",
        "cursor": {
          "ref": "0cd5b3b2-878c-469a-b144-434813a6d4bf",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "32973790-85a0-4d41-80b4-c609d7609137"
        },
        "item": {
          "id": "44852504-54b3-4250-923f-4a712ae401ff",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "49335d2e-6e0d-4809-ac2e-dfea35637e34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4e38e1d-5a97-4234-abe1-3231afd643a2",
        "cursor": {
          "ref": "557c1d47-3157-447d-8a8a-647a891d7433",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "2deda120-3137-4a74-a81e-0e3d893a3da7"
        },
        "item": {
          "id": "d4e38e1d-5a97-4234-abe1-3231afd643a2",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "29b92560-8ed5-492d-9f65-a89d42c6960b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0facd0c3-2752-4a51-a189-f36f2dfc0143",
        "cursor": {
          "ref": "a74d8df7-152b-4347-9fb7-85755da5c1e0",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "8a1b1344-9132-4c17-a8d5-a33d4636f807"
        },
        "item": {
          "id": "0facd0c3-2752-4a51-a189-f36f2dfc0143",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "44632e39-ef8f-4883-991c-2aa1c70a1f33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b5894a1-5677-4388-86f6-7be6812ffc16",
        "cursor": {
          "ref": "991bd297-509c-4089-88a8-efce1b185269",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "c11d72e4-0be6-47ba-9176-9419046dd7e8"
        },
        "item": {
          "id": "3b5894a1-5677-4388-86f6-7be6812ffc16",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "995d65ba-b813-492e-8128-6436e0c95525",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "298cf3c7-3f63-4235-8c4a-cc3412c88cc4",
        "cursor": {
          "ref": "b617bf5d-713d-46dd-87a0-34ebd80cb25c",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "af1a3a06-f59a-4e3a-972e-df7e333bb9c7"
        },
        "item": {
          "id": "298cf3c7-3f63-4235-8c4a-cc3412c88cc4",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "a258bd3e-5a21-42a8-a997-edde83eb36be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df6c7225-3316-4164-b5eb-fc66bc06e967",
        "cursor": {
          "ref": "878497e0-7fe3-4fe3-a2c6-38345fb2ef0c",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "00a95fb5-c23d-4ea9-8bec-34bcdcee361c"
        },
        "item": {
          "id": "df6c7225-3316-4164-b5eb-fc66bc06e967",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "e075dbb9-0dc5-4c80-a70d-d89a95f93ce3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b32dac98-a031-43bf-9adc-418b88059390",
        "cursor": {
          "ref": "15f79518-3314-4fa5-b9ee-7adfa979f399",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "14b5f7af-3f5a-4331-97fc-edf4640dc9db"
        },
        "item": {
          "id": "b32dac98-a031-43bf-9adc-418b88059390",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "d788066d-2332-4307-b1c8-15f973d743f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7944aa0-7486-4870-8054-99c15add2684",
        "cursor": {
          "ref": "153a7222-cc64-4308-a5da-fa7f15d7d016",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "c332112d-3428-46cd-bc52-6b3362127227"
        },
        "item": {
          "id": "c7944aa0-7486-4870-8054-99c15add2684",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "3b8b272b-e955-4a4b-af57-b2426687352d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac707bed-e14a-4661-96af-eee393705efe",
        "cursor": {
          "ref": "2f046041-963c-441f-b2e9-1f73848e476b",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "94a80022-37bb-4326-9a30-bc26181fe2c6"
        },
        "item": {
          "id": "ac707bed-e14a-4661-96af-eee393705efe",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "c708ca11-e6a2-4f9f-b4c6-3aed2a48d32e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f89a9561-4fb7-4a4a-bcff-cf794b07384d",
        "cursor": {
          "ref": "6dabb297-977e-4513-8899-95c749a0ba78",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "2be5a645-52dc-4c1e-a70a-5ad090338ce4"
        },
        "item": {
          "id": "f89a9561-4fb7-4a4a-bcff-cf794b07384d",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "986c7bc5-3a9a-46c0-912e-d55c71b55245",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeef0fa7-7c41-4cb0-8f91-f42e83b9081e",
        "cursor": {
          "ref": "9d1cd8a5-4db6-4630-ba42-1848f8a48a61",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "760133ee-9808-4d74-b034-06aa1a894d8b"
        },
        "item": {
          "id": "aeef0fa7-7c41-4cb0-8f91-f42e83b9081e",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "9533bb76-88d7-48d2-8bf3-ea261a6d5b2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3234b84-395a-481b-af80-524fd75fd30f",
        "cursor": {
          "ref": "f929c1f0-17fa-43e5-a86d-ce825c1536c7",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "65f2cc7f-8dda-43c7-b86b-10be1e817ee4"
        },
        "item": {
          "id": "f3234b84-395a-481b-af80-524fd75fd30f",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "e615f093-d0cf-4f74-ac53-818ad3c62a60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30669d13-3ae3-4fbb-ab9b-f7804c6b245c",
        "cursor": {
          "ref": "84a65b08-d2e6-46f2-be54-00de58bdf254",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "109058a4-d6fd-448c-b6ac-37b6421f082e"
        },
        "item": {
          "id": "30669d13-3ae3-4fbb-ab9b-f7804c6b245c",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "e64441f2-3d0e-43a1-b883-3c89854ee2e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8562a28e-cc3f-4462-8884-0ad584e3e3fc",
        "cursor": {
          "ref": "72862ccd-586c-4c87-9bf4-71157d001509",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "cc40d90c-3015-4a34-b4b5-7bb6279afc75"
        },
        "item": {
          "id": "8562a28e-cc3f-4462-8884-0ad584e3e3fc",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "e38ec344-4a87-46f0-b5e4-8e71e032999f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1cf087b-9070-45cd-b288-3788caa6c92f",
        "cursor": {
          "ref": "21d37a84-5bd3-442a-b611-9472751014c6",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "0543712f-2ee9-4122-992d-0e492b15c52a"
        },
        "item": {
          "id": "f1cf087b-9070-45cd-b288-3788caa6c92f",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "0ff23c8c-991d-43fd-af3c-46f9e26de58e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8f1caf5-b055-4692-95ad-a3f138c5ac53",
        "cursor": {
          "ref": "8d0ca3ef-2098-4715-9c74-07ffdfe433cb",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "9cd2239b-42cd-45eb-9ca3-740a810fba51"
        },
        "item": {
          "id": "f8f1caf5-b055-4692-95ad-a3f138c5ac53",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "fb5d2c14-a218-4c1f-9e0a-69ac2e16cde2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aef60a6-e18d-41aa-85bf-63d8a4b94093",
        "cursor": {
          "ref": "f4ce0a23-e714-4218-97e8-8494ebbc59c0",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "152f1f0c-a342-4b50-963d-27379b8d9287"
        },
        "item": {
          "id": "0aef60a6-e18d-41aa-85bf-63d8a4b94093",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "4377505e-e6dc-4072-a387-b660c1acbb5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f26e426-b337-4e2d-8ef2-f18f3ddbb435",
        "cursor": {
          "ref": "03917327-131a-41b2-8396-3dfc8a134240",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "88004932-3356-4212-be9e-67ff41be523d"
        },
        "item": {
          "id": "7f26e426-b337-4e2d-8ef2-f18f3ddbb435",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "67bdd36f-27e5-4f26-a363-644f17c657b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f7de748-353a-456f-a5da-b2b41d7ba15b",
        "cursor": {
          "ref": "119788eb-e5f1-4d41-8c2c-fbac8b38e951",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "29ee216a-147a-48fe-b9cd-7a2e60330ab7"
        },
        "item": {
          "id": "7f7de748-353a-456f-a5da-b2b41d7ba15b",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "641f20c5-9c5a-4c58-9eb7-caa448398914",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09fd6939-4916-40b4-8fc7-ecba7b930339",
        "cursor": {
          "ref": "7a9cd151-7e1d-4088-affe-c5b5c2aedf60",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "62d06c27-3ba5-448c-9792-01fdec20cc08"
        },
        "item": {
          "id": "09fd6939-4916-40b4-8fc7-ecba7b930339",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "f7de126c-1717-427c-9f23-e26c39a638b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a07b498-f41a-461f-a761-70a615473e20",
        "cursor": {
          "ref": "37d01504-423d-4c62-ba6f-ae49874ac9da",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "bea4073a-dc86-486f-84f7-d87c3ec621ef"
        },
        "item": {
          "id": "7a07b498-f41a-461f-a761-70a615473e20",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "345b4007-1781-47aa-a496-810b3ef7fff9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf84ab1a-7f09-4c7c-8669-000ae60442f3",
        "cursor": {
          "ref": "467b7f1d-0e69-4e87-aa6a-b280e600aa43",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "79288415-64ff-41b5-8e52-0e2c2b1af37b"
        },
        "item": {
          "id": "cf84ab1a-7f09-4c7c-8669-000ae60442f3",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "f4f8f8f5-2bc9-4d0f-8b40-e6d4f7f003f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa7d8406-0f9a-4c99-835b-a2ce020ce9fa",
        "cursor": {
          "ref": "7f35c935-3239-4e25-a002-6cf54dae3224",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "5294d70f-bbf1-44eb-801c-b36cd2e403b0"
        },
        "item": {
          "id": "fa7d8406-0f9a-4c99-835b-a2ce020ce9fa",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "df7462dd-5496-492e-abe8-861361c5e000",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31d81850-6ead-4a0d-aea5-c38bce7fc312",
        "cursor": {
          "ref": "fce39c31-ba26-4422-a920-a162fee964d1",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "3206fdc6-8952-43d5-bbca-aa3b5ecdbb8b"
        },
        "item": {
          "id": "31d81850-6ead-4a0d-aea5-c38bce7fc312",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "14a7744f-5cb7-416c-8845-9454f731d61a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff984ed8-7242-4e87-b238-15ac9c1e6f36",
        "cursor": {
          "ref": "ff1e9fe7-bc0b-4206-a6c1-70f3a979ba8d",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "7fb563e4-ba7f-410a-b48e-6423eb51d05a"
        },
        "item": {
          "id": "ff984ed8-7242-4e87-b238-15ac9c1e6f36",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ce628aaf-b702-492a-a370-2bb52527f15d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63d0f23e-73aa-4f21-bb36-c2e57cfecacd",
        "cursor": {
          "ref": "0b6cab79-8a6c-44c5-ba99-8d80ab18998f",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "8aeebd1a-dd15-4256-8851-766b6e594e86"
        },
        "item": {
          "id": "63d0f23e-73aa-4f21-bb36-c2e57cfecacd",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "35aae891-96fd-4a39-a556-8b118ed5b4a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7be4327f-a490-4027-8554-1944f825eaa7",
        "cursor": {
          "ref": "6a764ccc-3b22-46f6-b178-92ba0bca1e7a",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "45cd20f5-f1fe-44c7-863f-a8322edfc8c6"
        },
        "item": {
          "id": "7be4327f-a490-4027-8554-1944f825eaa7",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "2aee7932-e4c0-45da-b240-27b9fdabd872",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "250e1b6c-4407-4200-b826-b7204351d803",
        "cursor": {
          "ref": "c8da8977-e002-4018-84aa-77930afbab3d",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "07ba72c4-febc-40b1-a6e5-983af4881aad"
        },
        "item": {
          "id": "250e1b6c-4407-4200-b826-b7204351d803",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "0fc43879-ef61-4be0-9904-e7bd5d464f37",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36d4b788-6e17-43e8-9548-de504dc41c6b",
        "cursor": {
          "ref": "dabe7b89-ebc4-4a46-b070-b7c6095f9d34",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "63f0b52a-8dad-4450-8f9d-590377a8c1c2"
        },
        "item": {
          "id": "36d4b788-6e17-43e8-9548-de504dc41c6b",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "6cdaae93-1483-49b0-a98a-db43507a9612",
          "status": "OK",
          "code": 200,
          "responseTime": 180,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "804432cd-bd55-4a98-98ee-43ceecf358f2",
        "cursor": {
          "ref": "3a0fb814-34f9-472c-ba39-d3782f3ec18d",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "661c252a-a8e1-494f-a4ae-a94976b074b1"
        },
        "item": {
          "id": "804432cd-bd55-4a98-98ee-43ceecf358f2",
          "name": "credentials_verify"
        },
        "response": {
          "id": "c704ce57-f6cc-40ed-b99c-f47bf91b9566",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "14a2e0e6-55f2-4f75-bcab-233796d829cb",
        "cursor": {
          "ref": "d0beb7d9-3b7b-4edb-90a5-35d142689fc6",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "da9c5ab8-b464-4448-a7ac-19a41546c0d5"
        },
        "item": {
          "id": "14a2e0e6-55f2-4f75-bcab-233796d829cb",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "a5c5e024-29eb-4800-be77-76fe1b1aa357",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e96f2a8-0ba4-40d1-97bb-2a59cf8d8794",
        "cursor": {
          "ref": "b9f0c3ea-6754-4fc7-a571-00217e3c98d9",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "91d04534-1f5c-4e00-b842-8c6859cf9342"
        },
        "item": {
          "id": "4e96f2a8-0ba4-40d1-97bb-2a59cf8d8794",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c62f61f5-fedd-438d-ab01-9a485c4b60e3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e96f2a8-0ba4-40d1-97bb-2a59cf8d8794",
        "cursor": {
          "ref": "b9f0c3ea-6754-4fc7-a571-00217e3c98d9",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "91d04534-1f5c-4e00-b842-8c6859cf9342"
        },
        "item": {
          "id": "4e96f2a8-0ba4-40d1-97bb-2a59cf8d8794",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c62f61f5-fedd-438d-ab01-9a485c4b60e3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1494bac-2a2a-4835-bd58-4dc36b73eaf9",
        "cursor": {
          "ref": "e5aa45ce-4574-43e6-a8c7-a31e8380c753",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "c61ec124-ee45-4f7d-8069-b1e3fd70a327"
        },
        "item": {
          "id": "e1494bac-2a2a-4835-bd58-4dc36b73eaf9",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "bb3307de-2e51-4390-95b1-1b69a925dbef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "432b7375-b302-4402-b2f7-3738b3ba12af",
        "cursor": {
          "ref": "792fd727-51e6-4fdb-8a80-c1772b3fed15",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "9ddd752e-c517-4b2a-ab3f-9dc473409435"
        },
        "item": {
          "id": "432b7375-b302-4402-b2f7-3738b3ba12af",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "a118bf2b-38b4-4020-aae9-a483f3b168f0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}