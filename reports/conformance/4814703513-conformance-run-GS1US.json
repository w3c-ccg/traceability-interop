{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "03b5ffbd-9908-4f30-ac9e-1e067b1a9280",
        "name": "Clear Cache",
        "item": [
          {
            "id": "f01bfd4b-d684-4ae4-95d3-a3c2c5d7b061",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2b3afcdd-0bac-4904-b09d-291307d70896",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d764ba62-8af2-46bd-a31e-138acc8a06bd"
                }
              }
            ]
          },
          {
            "id": "86b35675-9c80-4201-952e-3b49e78c99fa",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1d00b24d-4b76-4cba-9dc2-b2ff3b310f0a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "cb01094a-0f5a-40e9-afd3-39328c20a621"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "f78ec94c-8554-4961-9599-7e08630c3230",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "cd5f4d40-c616-4f8c-8915-1bc0eb94fe25",
            "name": "Positive Testing",
            "item": [
              {
                "id": "10c51de2-f8b3-4e9c-897d-aa1727f253e6",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "07ac0a87-b22b-47e8-8fff-3002fd5d3645",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e132afcc-bb5b-4046-a26d-8a64230b4b7e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "83c8730e-226e-4c4b-b9ef-970ddda549a0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c71e2015-8533-46c0-a654-ba49c66c6264"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "05cf4449-7619-4409-9a3c-5240fbe08171",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b1354d71-b41a-4b2e-a843-9cee8ecb7eec"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "282f9151-9ded-4300-9da8-e3824386826c",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "705a74cf-d2ca-4e81-ad98-17e3f403bc08"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5b9ba54f-a406-4895-a686-61a7f9dd4ef0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f66f1014-ccd1-40dc-92f1-ce6ad882ae14"
            }
          }
        ]
      },
      {
        "id": "f75b8504-ed67-4539-ae30-78893ba5b2bf",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "d4ac07ca-9c29-4d87-ad5b-09ba187275ca",
            "name": "Negative Testing",
            "item": [
              {
                "id": "de0361d5-b420-44a7-82ab-6528f07c69b6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a4d47cbf-c1b1-4f48-aa2b-7d492a34d361",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b4e1f84-d8f2-4f26-859d-6a9843c11c3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4e814c5c-1863-41a1-868d-8ced7e3562b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a42e6acf-fae6-4710-b356-7aa00b3e93f9",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80283420-a439-459d-b14f-55094623d129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b5c4cb3e-463b-45d5-ba43-b3ea8c3c48e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "546feb1e-f76b-40b2-aad7-1ca8999868c1",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e41fa60d-f625-4c4f-964d-f04a7c4b6bf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d7edd21f-74d1-4d32-a948-1e35de129311"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "502faab7-1ac8-4340-ba60-d493d31ef8b1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "13d3fde4-0ca0-4d7f-b19e-e8884fd168d0",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee4e42c6-99ff-420a-8e6a-f6bbc41662db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e038cfe1-5fba-4f60-8a7e-ec6b1174ae4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a1a7b8d-9732-4d59-9a95-fa0d2ce1b280",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8261029-7211-4c1d-93b1-dbe82e4d2e65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e48e9985-33e3-465d-8067-8e1de51cf815",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eb36403-61ac-43b4-ae57-e585c5dd9057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "66052b83-9bad-4e4b-ac9a-7ac22b5488cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d99608e8-e27a-47fc-a436-fcaa0f35063e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "d5cda4bd-c3f3-4acc-b60c-c893419f33b1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "363c2ff5-599b-42cb-b1fe-3ece718f3616",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6a37af04-fab3-434a-8546-a03ffa45090c",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "56c21ffa-14e6-4297-a453-7df09a8235ac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "62212392-e57c-4e40-a87d-dda409170293"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e23aaf68-4b8c-4f4e-bb8d-c68ab650b372",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "b28e20fe-9ef8-4f43-9915-4f5f02bcc478"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "985ef189-3d79-4485-838c-4c9aa92e049f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "aef173d0-0a85-41c1-b035-7f3cff321dce"
            }
          }
        ]
      },
      {
        "id": "78a9403c-581b-4aa8-8695-1b5e7ef7d8c6",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "f45e280f-a02d-4224-86ab-0847c34e7928",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7e5ab442-3eb9-4a4e-aafd-75cb62854324",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "4f6e25c7-2159-41a0-87b1-a5c22f14d189",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7ed1f1b-46dc-4189-934c-cf147a7bddf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dfcd30c-cc00-48b0-8f40-49f72b1a8a62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb193dc5-67e5-4741-be9f-e371d4d430a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f80c3501-4ff3-4b0b-aa2f-65c4112428b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40e68fac-9fc2-45cd-8af3-8eb264bfd456",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f2f9a9c-90aa-4a6d-a696-724c70e91960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ea7dc53-0931-4d89-863f-29136e5a318a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0dbda73-3db4-4e00-9de0-8a1a41a47bde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c47de2ac-fad9-4838-953f-46c59466baa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "151af4a1-9c37-4361-a969-bc2c2f8f15a1",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7bc3a5d-dd20-4c36-a1ff-c75a7822371f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c2d64be-b696-4bc5-ae43-b6e62ebc7c93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb17e1f8-85a0-4b93-ab8b-257c9e6f51ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ca0b6a52-9ebe-410e-b625-32ac78292200"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f4480b7-3e6f-4eea-970c-8ee46da839eb",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b180b8ae-cb43-49e6-8061-89e5609d18f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3f209f2-3dbb-4a1b-a38f-a7d7bafc7d8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dd2f2be-6bf5-4d9f-a702-56ba7a2f741b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2a43001c-e333-4c13-810c-c0ee1813acba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19516cd4-6516-41ef-b585-65f7eb11928b",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05a23aee-0e40-4027-b611-f1a8aaae7a0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24f67fc0-6656-4591-ab7e-898166c86754"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "490b841f-5083-4f42-999e-123e698f9a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a07befb5-b627-4163-9f99-0b439d00c6f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1086441b-824e-498b-aef7-33633917a5d6",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06843f35-ae73-4c74-a43d-e54784079c27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ab8d787-1b0a-4698-beb6-0ce8efb347ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ec78109-e657-47fc-b161-c3d58ed01043",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9909ce47-9387-4910-8b27-f5bc7a8d75b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "912dee9b-9fc6-4c4b-a90b-13e7f82ad804",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79cad0d3-3780-4209-bfe8-66c14db6166e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "feb0d779-4c3a-4d57-acf7-979f0334a3a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dc2a1b9-1d57-4407-92cc-00bbc008579b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b9e1a588-4932-4a91-8b78-2e1a1d966dcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54276902-c97e-46d9-96b6-184cd4d5a5dc",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2276312-9db2-4a99-96ca-1694a0c962b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6959de9b-3e4c-4f31-b297-22eb31ead0e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9608bfb9-1fbc-4df1-9968-6dd2bbd27d74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a15fb234-cd6f-4755-b0e9-468d06db49a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa207652-3867-4f13-95fb-ede6b77909b9",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e94f5dc-21ef-472e-8d87-3763f8cfd29f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c2bea4a-6790-4761-8fc3-bc4bd4cdfacd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ec2055c-8b90-4801-bef3-d281df9dd171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "53294f52-5d0d-4803-ade8-57aff82d642f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f39fb24d-852b-4119-b470-0dc1ce2a40e0",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66f55f0a-ec32-4c5a-a985-f5649f0e5bce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96b70e01-7cda-45a8-aa27-2c7280edd592"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f966b48-b74c-43c8-8906-89dd07572cf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2fc950ca-8f1a-479a-afb0-98ed997dc3e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0207bda7-2e8c-4a91-9d11-f84f1342e93b",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1da6efec-94b6-4b5b-ac2c-009910a62688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90628512-e2b8-4486-ad2c-b10c77ce46d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb5642df-aa71-4c9c-bae7-8ad43f91b6e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "45e1c783-0fb6-43c5-947c-da0628ac9679"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98faac57-783c-4f62-872b-2a132751f2a8",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0a6d705-cfc4-43d1-8b31-23000c0af162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ab5fc7c-c0be-48ee-9780-cb7709881e2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51bca7f9-a19b-45c5-95b1-35ba2a2de6b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bfb0fc88-202b-4f37-88fc-34959b1ff3f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e390198-aee7-4cc4-bd76-6f37d48d9ad2",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfc937c2-1ad0-4f75-ab08-caa290e61536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "956fc65b-71fb-4192-9b91-943da498ff59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f26387b0-cbc6-450a-b67c-4ebe8c1b5bb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "06ed5736-aa67-4109-9dab-1b4d62dcaa27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c00f22b1-582c-447b-814a-9990cf72f490",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45ac7476-03de-49c4-b13d-6396751560fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69562e7f-da5c-4e9f-b876-c98fa60a09f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e106bc59-761a-4cf5-bd14-207310d46761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "629c3c82-16a9-4c8e-8eba-9c2224557790"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b755be7-b1a4-4438-b9ef-5adf7b37ab1a",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ade151c5-ac2e-49cf-8d12-87dee4f839ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9078a7ee-6bec-409b-833a-172d115673e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85f88e43-8855-4298-b04c-0420d9ba02b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e3ad3199-ebcd-4371-b079-59f3613d00a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a55472d-67d7-4a70-8b43-a679384b9181",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e45a0d44-fd24-41f3-964e-6307f0b9f2c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddbc3ef1-35f2-42f1-aa81-fd8a4725b097"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9922fca5-8ea3-439b-a35a-09e00aa67567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c545b1a5-f261-41a0-9eae-13553fcbe4a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9282449b-13e0-4c6e-a5b9-dbbe06486540",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93b7b021-70c2-4f37-a590-0b0f51441155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "818551c8-0e31-4905-9e6b-bbca07ff8ff6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4903fffd-15f7-4fa3-b69e-3b47773a7296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d5844f5b-f63f-4607-884f-47f07071a7f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fec2087-ec68-4864-b51f-d5c62916d6d2",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e5876a3-96ab-450b-a7c3-565fc690c46c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bcb8f1b-ed78-4a02-bcf5-93e34c1bfa4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21580081-d331-44fa-a998-2eca3d711b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd986a2b-a0b3-4007-835e-68e18522665f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7c91cc7-03cd-4ab5-ae1b-e75c95152b02",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "185da377-d098-4188-9e82-a91106237910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63b9d880-b02f-4d3b-a806-93e8dc7fbaac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff6d271f-943d-4be1-bd38-88a74d94ef0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b222138-961e-4d16-8c7e-912ece73a692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a20510d7-aab4-481e-8112-7ace0e93b74f",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52ded2bf-ee28-43b3-9349-93f8d76ba1aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "191ae50c-e076-43f6-82d1-6ae986dd7542"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c42f4fd4-0a88-4e7f-aef7-a2f06614b1b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "985e6c0e-f25e-4426-bc8e-ce221816ee21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe58994b-2537-430b-899d-a72c912293a6",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c14f8d2-ef21-4b11-9d71-68e4c8dab373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "545bbc19-c536-497a-ba48-effe02aa238e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2f7b390-3435-4df6-a26b-cf94de7a4a70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a57f7011-a6c6-4a29-b496-5abe7ae83e7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a109faf7-c8bc-4991-a280-9fbcd7a35b4e",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fa90346-5da7-4860-bc23-d0e98e09c1d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c77ce31b-4302-4e00-9f78-1ed2de1434fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c05649cc-f3a3-4bfa-9796-a39bef06b5cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf284f0c-bdf4-4d6d-9791-d4713a7680d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a5f49b1-1da4-486f-8f2f-6332a304a021",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1675e56-4004-429c-ae3a-662805eac2a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a14cd65a-3ea5-44d2-94d5-9d5d7d759dc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd2aa274-5d1e-48d2-92db-61f2f6d3911e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1ed3a07b-238f-4c31-a17d-756bfb3f6be7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f5fee74-f153-4781-9d1f-001d470c8d84",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d22887ea-aead-4a05-950d-71b3b733ada4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d3b7ee1-ad6c-4156-8843-f51fad43bbbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afab90ec-b3c5-46c0-a3f0-e859211c47b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "15746a00-cee5-4833-af04-59ceb6715851"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87ea783b-4004-45a2-a2a4-e01192aa4870",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c963ed30-5618-4e18-ad06-66f414505b1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2bbd82e-5dbd-49af-83bc-4d61ea46c7d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b75085f-0f82-4c8f-bb0a-371f792f9b89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c9cb07c-1ce0-4c8a-b511-3413e3bc2cca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3977c0a6-7ba6-4ea9-b39c-e9ca158a6026",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7584be4f-1433-4644-9060-4921a4935573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc9f6d87-cb76-4ef2-a7b6-14889b425533"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32d4b56f-776a-4a80-b4e5-bee3c30e1d13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8325a60f-d81e-47a6-aee1-b063fda8c4a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80423115-f84f-43e4-ad9a-6ea5a681c573",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b614b38-43f8-44ac-98e1-68e3b03753e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b7e7da1-7f5a-4e5d-aa13-80419bb0a953"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "035c3c90-1d22-4700-972f-b7b5d434b173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d718dba0-176a-4d8e-a399-83e8dd92b540"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba373624-df0a-4297-86f6-7b8b98e7ec53",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "490cc5e7-ae9c-4b74-b009-72812d2b249f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1ef3f34-3982-4509-bef9-515fbb232caf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba4a1f34-f0fc-4300-95bb-b696403fa9ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5a70c60-bee7-4b80-addf-3b85d7f94b10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef60e83a-4418-40f0-9acc-3ba79d2b4ce6",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "502c7ad3-7800-4e9e-be4a-2f564f88a13f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cc660f9-88c4-4164-b2a2-c799b98514f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4bfa3a2-9c12-4165-bfe1-8bcd12017a87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc0816e2-f174-495e-bdd2-fcfe349c6b6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63bba950-dba3-4c80-94bc-f720362f09fc",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1629332-5940-4632-bc75-10753a2511cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a50ea11d-2655-4e6c-9353-bcfcb0f97fda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "570190ba-50e2-4bb5-bc0e-c1ce88b736f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8ccf755-d6f9-4bab-b4cb-ecf96f47440c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f2582cb-e68b-4520-a918-079c272f6df1",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3a0f0cf-9135-4172-9bab-2470000fb1c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba78c39a-24f4-407d-b621-5b3576002319"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa3ff336-716e-4419-85c6-355f1a4a9828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8cc8c04c-9ebd-47ec-8052-7e1e00560eb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aa055e3-920e-408f-933d-1f9157fdb615",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea6ea378-0d86-492b-a8b3-13d8004f3eeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a33a5f66-473a-4824-83d2-6870ea9aa791"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acb49228-fd8e-4b85-bedf-2cb8e6aa874f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "812bcd93-d78b-46fc-81d4-112e324b0868"
                        }
                      }
                    ]
                  },
                  {
                    "id": "506a6123-40a1-4e6f-9ed6-ddb915e80570",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c9657c0-b1ea-4666-915e-9d6dfc73d0bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bee1a5b6-5398-498a-87f5-bc58861e4b16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9803d3b-71db-4cec-b9d6-63bd58fde502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "49f9afc8-0a21-490e-93c9-bdf7f31f22bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fc2543d-52f7-4e2b-be22-409b73322a61",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "405b24a3-5ca8-4ad7-b4a6-280b303a76f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b0aed9b-7904-4b8c-be0d-2a0e4cbcc7f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "400b6557-17db-4f73-a5d3-1317e1f3348b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "02e86fd8-dda1-42e0-a0a6-d5337fffe4ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21a6c643-7a82-47fe-8a5a-8e3bbe6e187c",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "805fec1d-6049-4d58-857f-4c4b7d425ecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01a668d7-0e6f-419a-a9ad-54b93fe0ac2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bbc949a-4770-4692-8bca-c6276396a41e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "4907308a-7bcf-4e01-94da-06ad303d2818"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93193f9e-1d7a-410e-8161-f608a5f20c73",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7eed5fb-6012-4e59-9b4b-255e997d5385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "227b29c0-d168-48c0-a57a-caf196f4f8bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03aa13f4-b10a-47be-8236-6f3fce002659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d838daac-25e6-45c7-8bee-3359395502c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2826e5d3-cb5c-46b9-a038-8c25ba5e50d9",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1819208-9ddf-43d8-a2d1-2159c7bd7c73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dba9847f-b409-4c85-8cc5-27523054a8e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b597af23-78df-477e-94a9-0f1ac2398ccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "75da275e-bad1-4551-8398-cba0162ccd05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0e56c65-fa34-493d-9060-50b2b9b767ef",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ffd0dd4-d296-482c-b074-404d9dd72bf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42339bb7-a5ea-42e5-b7fa-529da83e8eff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06548eeb-7942-40fc-bba3-d92742d8e14b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6dd7773a-d409-4b95-a4c7-a56ab4c98804"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07462f12-1a58-47fe-b07c-4662ea8721af",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9595befb-6a2b-4119-b706-81b708d7c4d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ddfb634-3469-4b74-a291-94ad82a69a34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6bf2231-f0d5-4e64-a733-edda26917d55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c20f0dbb-4e5d-4af5-9a8d-e89f855ee59e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ea13f8d-c268-4b4d-81e4-a3cf4c736a59",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9306f7b9-64d6-41c4-af4d-7bf6fcdd514f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d690267-85a7-4a0e-939d-d6fb6d14678f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a82dc6c6-ab8b-4d9d-9a30-8775447f1646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e107543-971a-4a46-8ef5-1a2d9e60004a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f062c04a-759f-4a7d-a5e4-1426b19fa1d9",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cd2fb60-f394-4abb-be87-04fc14bad1b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0eacea4-408f-43a6-a490-87704ff99927"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4cba434-f400-4af8-b890-c259f09e846b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2434ad6c-e686-4e5f-bbf2-caad0f63c037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "572e2683-9dd1-4742-8906-21e2aa9c5aac",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2ca35dd-4b5a-44c8-aa34-4b394c8d4bcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db9aba66-8e8a-433b-b6c5-a381aecffe3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee51b424-4785-4621-9a07-52bb5af09493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "305f14e6-7161-467a-8e0d-50ba75a62dc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93859c1d-f484-4fa1-a512-88f23bd280c4",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07d30aca-d3ae-4aa4-af8a-7512c8840b16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3b00ca1-ee21-433e-ad79-6bbcd1dcd23f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6533cba-9f6a-45f9-b9be-9a32fda78cf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d3065007-ef81-4788-b4c0-6a0a4bda3aac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba191322-8876-4649-b37a-651f9bade594",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a101e66-85c0-4cb8-8708-8fa828f5c8f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c27b3003-5c0e-43b7-b3e7-b624cd413381"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "953ec3ab-2311-47f1-930b-6d9b361d8a3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c8640a8-a44b-4527-989e-5e9603cc35e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3696a804-e382-4954-81ae-29954b501c1f",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01d2f2ba-ce92-401d-a30c-a2accdd63e2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a610906-6af4-4459-9412-d6c7d08c2ae7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5dd94a5-c1bc-4a15-9a0c-047e008496d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e177c44-c3d1-4e84-aaaf-497554bdf170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3859234-bfaa-4801-9242-933c12cd43e0",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be2b5164-6ffa-42b7-9ba6-b7689e4f1a31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "539d08af-9531-4d70-a65e-f8f84bcd7496"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb3417dd-5b25-4b87-b809-ccde737585bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8eb6f272-4d7b-45e3-95e2-c9286b81e32e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfd1bc2b-8bfb-4a40-b02c-e415dc33f0aa",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52f7f840-7648-43cb-9c5b-d884b63c6bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "944a2f51-3e0d-41d0-a00f-57fb6770b954"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "118a2a94-b86e-4db8-acf9-d663c4f40476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "039874a4-2ae2-4ec0-82d7-cabb7f90bdb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52ba7a24-fad2-48c5-97db-e35fd169c556",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7115e4ee-6ce5-44ce-9d9d-1e380b2484c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f994deb1-6335-44c1-af51-45f7ca72fc04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc284630-bf0f-4059-843f-7d9a45bc4184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b7e6230-2738-48b3-a734-1c393dd820a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7630296-aae1-4615-a069-7894c8af7f68",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c926c521-13c9-46bf-b44a-abec9860385e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d362568-ab6e-4db3-8d49-b5c87d08c609"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3016a7d2-225a-4d02-9231-e3580ca7aced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "db9894f1-b6c6-4c52-85f9-d21c70744a68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eb4f85f-52e3-4993-915c-0889185bb22e",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a9e1415-1a3d-4975-bd15-f7d52cba0774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05ad3293-39df-4619-ba80-bb56d02cfb88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d43e17d-37dc-442c-9667-5a74a5ee454b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "95c8ab27-0f30-4fe6-92f7-5ea965f2dc4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c383b54-d3c7-4061-aa5e-e7c511acd0c6",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36f109de-6f91-43d0-b79d-179a970d57b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1597a57d-f5ff-4ae6-88cf-8a6ef8ab7441"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fa775df-0784-43a8-aa70-c3a52b11dd6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d4b5933-3c56-4da3-9889-e3dd99329a4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2784f0d5-916a-436d-8669-d2c08ee7d243",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0576564-78c0-499b-b98f-7b594874ccea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85329b0b-0126-4188-92c9-b2e021cda140"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e10ceeff-dbfe-48b3-98c6-9fca61c427d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4ae3314-38d6-4a67-a267-21fa349a6167"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55b7ed23-6e77-42b9-8b2d-a13fbc9fd452",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27da6578-1cd6-40c0-9aa1-0de0e8b6329b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c4cb055-8a52-4f99-a43c-367e992ab3d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bdead52-64cf-4d3a-bef7-0a95cafdc80c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "83a1cd26-5d66-47c4-afaa-c504325cad92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df6d9594-86fe-4f52-b171-f5b0b8d0d2be",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abe5d872-db09-4468-9278-a65b79a66b2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "773b8055-0f78-4762-9687-4ccd8afb717f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef84372f-3394-432a-91b0-a44203e19556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d4742a4-6b3a-420a-93e5-f8a710409e66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77b9325c-4bad-4d53-91f9-a8af30657242",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbbb5161-94a9-4de4-a710-54e345a27581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aed9dfee-1afe-494c-8ea1-6c443b72ca13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58334d5b-729b-4b5a-8aea-2682adcd8b21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "54325e15-8d4b-4af9-8d22-7dc6d3c9722f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cac79bb-5801-45cf-a814-5e9d35db76f1",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "010b635c-345d-4f23-899d-9ea9080219d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ede5ed69-3ca5-4892-856d-fc920fc0fa5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee375285-d405-4e3c-8058-2bb90ee52195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "9fb9ceef-463e-444f-9da9-351332465729"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9610bfc-d99c-46d6-822b-74128aa9b1bb",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70d1bfbf-3c02-4591-8133-0c39d6e8d572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df41dbb7-065e-4a9a-ba19-c34ef5d09a42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0e5d0bd-24d9-4dbc-be11-266e4a51b839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8f04fdc-e8c6-44de-a1bb-6d2f237d8094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1afa7a93-6c90-4dca-b9bd-14b09e14dbe7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dce391c3-f00b-4fa0-b63d-c7c199720607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8163e689-b410-4baa-a108-54b7e1740c63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ee33bc4-2d24-4f7d-9c83-e6628a9f8ac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed2173cd-24d7-4920-88ba-12e0a497458e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47578984-cf6d-4a17-96be-63d0f1b5bf44",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "763d79e0-6dd5-4f71-87bc-d85dff93548d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c29e73e4-6339-444b-b353-7dafd38a19a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a2e88cc-ce4d-4084-a717-fe8cc76f3bff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "022e136e-49aa-4830-9f59-5f6924082207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1a0d610-12e0-419e-9426-9d92914edefe",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7801f790-4523-4b27-98d2-67978a31c12c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bba4e39-51a0-4737-886a-e1cf58ecf02e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc158512-c064-40ee-9666-7be2fc90d1bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a8b1617-49af-4bcf-95fe-d35478e5b80a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88a6c8ee-7626-42bb-b570-df95d5342e43",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "328dec97-27ec-4c7f-9eb7-d2cbb988676b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2debc8db-4257-4f16-87a8-de6f2905818b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "014a857c-6aeb-418f-8074-c607da6ead9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6cff3d02-6a8a-467e-8340-f2312663bbfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29c29cb5-325c-499c-8836-c2c891ac69a3",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04560f80-1915-4a7d-b70b-5d4fc5f8639e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99d30e34-98b8-4a6c-9766-cf3124a06ca9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f6ba9bf-a246-49a4-90b6-4b7b7010fc53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "db4c7c05-e11a-4fb7-8e0a-4aa29b7587a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7164be5-0989-4bf3-a65e-83b27d825863",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b97a4d9f-922b-4f95-9805-7b88cb18c2fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43e0ff1a-2a9b-43f7-b663-450d12b69f2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "589c6c84-b691-48aa-b334-e28cc06d3ceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "6628ec18-e566-4376-9273-50d4d12816dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05c7f773-7f11-4ff7-b065-830e0506e2f4",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c85a182-b004-4cd7-9c33-99a4c898eb8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "237edb4d-a1c1-4f83-924d-aead468e4eff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "631d2654-1bb0-4225-843b-e87753ff6078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "955c2d9f-7127-4899-b170-d68e32736015"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9e06516-908d-4bd5-80a0-a7ff08f278b9",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c859a3d9-1f5f-43d8-af28-36bbdca2e92b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b50d881-3f48-43b6-be4a-17b8fa0096f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4f1c318-181c-4bdf-b7ab-c5d1257c5b75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a990d592-353d-45b0-b1eb-ec910f2c9f6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c510cb7-dc39-451d-88fe-4ef52f4ec4e2",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59fa5fcb-9a1e-48b3-9957-aa3b3f93bb6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "226036f3-a04f-4fef-b9da-190b86b4b753"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "221387d7-b8ce-47ee-ac4f-691cb4c2d828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "286f0eb2-4693-4286-9131-324e984d6d91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "068c9f01-692e-4d66-a8d7-0c88d6dfad4f",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "108297e5-42c5-4940-9d41-baf1b437c64c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40ca17d9-8881-4bcb-99c8-43c88a967493"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ea6976a-34ea-41af-a87f-8c3b53a4aec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1d445212-19ea-4b64-8191-3a5110a6707a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "356a4348-b2b8-4fc6-997f-cc98292cee25",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c4926ea-66e7-4bea-8c53-fed6772db4a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dd4d749-7940-45d5-bee6-6159bf55f997"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "625601e6-2e46-4bfc-9313-fba40c717e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "18a8d06f-3154-4616-936a-cffe2e301c8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68f8a49a-72a9-4765-9ae5-2c0344e210ae",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0feca707-495e-4663-a166-fbd6c24ccd96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37f487dd-425d-4839-b1e3-4863569f2f88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3c037d1-cf82-464e-9469-055a9be3da05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "072a34cb-3dce-4b3f-8ac1-6b6fe0ba4d4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d748e080-ba95-45b8-ba0b-e7d59a88cb0e",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3df17682-b970-444f-98c6-6fabd7222058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e0a2ef9-d1b0-4d05-9ea5-301f3f36b9cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2859f05-dc58-442a-a446-9a07afe57b07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa313bd4-8546-4bc5-a341-417dfb811ea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "235b8f99-0940-4e84-80f2-b7f8fdf04c41",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96dd6cd3-5a02-4225-9617-386cecd72d8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e86c795c-e94c-482f-80c2-cf0cf217f191"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3c8dd2b-c478-441b-8506-12b842586760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b6e8a4c-b546-4ecd-a67d-324f0e90f968"
                        }
                      }
                    ]
                  },
                  {
                    "id": "579304a6-2f6b-41b6-b482-cb58240d0800",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a36116d-4d97-41c8-8892-39505a7ac307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2d32171-13f7-48d7-8ad0-d733d941c496"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a4a4501-45c8-45a1-ae0b-389bcc1a6245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc356b4e-3aa7-4250-a835-ffbd27fb0402"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd016f98-b4cd-4a6f-b0c7-6f107eacbb6d",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f614aa4-ade0-49b6-a0c5-99ca3b4c348a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "915ecf03-59ed-47d3-bda1-9df9e3167676"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb7a0a57-17e0-446d-89a7-0394fe47baa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec5b1772-6e1e-413a-a2cb-0f17c656a62b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80f38bd0-79dc-4ad2-ac52-0cb5ae54297e",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7cfc5a2-2f86-45f0-8874-25ac74c8545c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89019562-b571-477e-8603-7e381b23ae4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c79c83dc-9b5d-40c3-9dfb-d149cf2dcc67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0be7a382-fe2a-4d4a-bdc1-72648ab7d98d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ff64477-ecec-4962-8a79-b3d197a44f15",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27d87d6b-710a-424d-9a91-0a057e144fd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2767caae-b934-4189-bb7a-abc95ce22643"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adc7b10d-0ee7-4058-8f6a-339384298580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3d4c9ad-05e5-41c9-8f84-2ebd23a17340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17e94505-de46-450c-91cd-8d40d71cb738",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3e00c48-5bc4-4853-89b5-9c2b1cfe96bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0754b009-34a6-4021-b13f-2762836b0497"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa99bb90-6cf8-4e72-babf-e381d7af19ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "efed1191-7c9b-40a6-a595-f4a924de8a86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e4b68e1-ab41-4ba8-a8e9-131503e03d3b",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95097093-55d5-4ee4-9219-0e37dd3ee043",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a79fd0b5-3093-44fc-ab8c-914f3dc6c79a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb825bae-1c4a-40d2-a049-ad58e13fe078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ddf4d596-1223-41b6-a3e3-3dd4e5a3932d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "114727f2-9fb7-49d9-95a4-0a78471a2418",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e942e169-d041-4dae-94e7-a6c4583cab9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96f4cdd7-355a-4aaf-8b8b-ffd9cccefbd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c4c8e24-ce51-4190-90cf-e2e3ebd99001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8fe4067b-867f-4f44-a1ee-ea8f436898ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "491c294b-24c3-43fa-8237-d7323078f408",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43480eac-40b0-4ad9-b3f3-8388419bdba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f680bdc-a20f-4f4d-b813-7412606bc27a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce32e2fd-b8e3-42c6-b816-3af08b4440e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "205c290f-8133-48bb-9f8e-d2f68f780ca3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11f9bb16-b365-401b-a604-dd07775e152e",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "645d861e-52fa-4e4f-bb33-6bf0ff187431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d782b248-5150-4b9a-8be3-6c8e34344ba3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76c8cbf9-5666-4529-b805-6fb77aebdfac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "80c35d4e-2d1f-49a7-b024-3b2729e4c8a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a988e2a1-e5fb-47f3-9bd9-948399f1e724",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee538ced-f35a-4a4a-9dbf-7e8df21ca9cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e31802e-1018-4348-91d4-ef542334f0ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84fca579-0e35-4038-9639-2f7292ce16b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b60d5e94-355b-4edf-a16a-8cf7702aaabe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3efa7256-3296-4108-86d3-b6e8aab61eea",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba5b8186-f32e-49aa-9ff2-a9930abda9db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8407760a-009a-4218-8120-ac55f1b59f67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cccbfa87-9c0b-45c2-b598-586b46daad61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0b3772e-57eb-4414-b28b-eb99d56eb375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e20bad7f-2a5d-4789-8e6f-e89168c71188",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4558b23f-6402-4d5a-909f-3c72a3814df5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9d7ea70-5884-47fc-9634-fb2ef0677950"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d33a7ba6-d8d1-483b-b115-b66fe575038b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9be71f28-63f2-44a4-b13c-41b4fdf1e326"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e456bd9-c936-4f7a-92db-95ff1d717fd0",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8757597-e48c-46fd-b7c4-65fe7607e217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2f4f687-d144-48ce-8756-83567ef41355"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7243fcb0-d39a-402d-a5f8-35ec08f7e17a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ecaaa6a5-2d14-49a3-a990-c7a38d9e5ca5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5f5b9d0-c514-4871-b783-d01b044c7f76",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11095e24-dfb7-4679-ae96-f1cc84ecd13a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e281b40-c19c-4d19-b74f-90bfa392333f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da90226c-2df0-4cab-91a2-c97f3673577c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fdc1ffc4-4429-43c7-9e8c-88ed0f47f0f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "367fa3b4-b7dc-4041-a52f-b6e21dfc7cba",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b70e8ed4-0bc8-4ce2-8753-f56e813c6e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06d7d771-924c-4abd-8601-e2e846fb3162"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6e3baa9-5610-4729-b98b-89d3f198d5e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5afc7732-9fed-4dc8-b09b-0bed5593a8fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84021a99-f226-4f5a-8167-9c6d4b555d35",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58cded40-3226-4401-931f-90930a872169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5853dc6e-f5a7-4cb1-b316-1b832621bcd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42532552-bb51-4d47-b4c5-30599156a2a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "82ad0d4b-ad19-42dc-93df-43a698b6525e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce71221d-d003-408d-975e-341d16f5d4d0",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1c2d495-cb06-4d83-be1f-100b9ca37644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c7c13eb-d9e9-44f3-ab22-5aa2c19668f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae8829c2-093e-4916-bc8e-4eee803da328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bbdf61be-f823-4357-810a-f69cea41e6a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bc40914-6649-4ade-9fc5-d44b2e16e207",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd9eea49-89cb-422a-9a74-fc530f624e6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1920144f-0f4b-4d19-97bc-4f2a11c4170e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c59a75da-157c-4315-83fa-1286d8b9492c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ddf3232-f2fd-4c23-afb4-3d9e16e238e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd00374c-8aee-4ab3-9297-2f14291ab79a",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e7dfaff-0363-4049-82fb-2b31a67ec850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc95f91a-f97e-4276-b968-3fdb33b5535f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7bf0989-00ea-4376-a8f9-646ea37480b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0db44ef4-70a0-410b-91c6-f8ba24cfbc56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0682f4ef-b8f8-4112-ba23-a3370388a1ec",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97baea63-841b-4cd2-865c-a1e4e7c8d5b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3e512bb-8f6f-4244-a6b4-53298d36f19d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc7ad1e9-8a5f-4f24-8f94-b68c47b76aa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7107ee4b-0f9f-4d4c-a726-f5de673ab737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "146b4b05-35c3-42b3-b109-a89593b97565",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "637dfe43-d4d3-4e63-848d-8812d84b19b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "cdce5615-afd3-401d-9507-d91485bc4da0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a423f110-d244-4274-b569-229e562d95df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "98b9b912-693f-4ca3-8393-2ea03a2f7c7f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "55de5ea8-7baa-42a2-b29e-77389b3c9bff",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "96272c98-9e90-406e-a532-75884e8bb15d",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afdfafef-b8d4-48ed-bfac-89112be4a8c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5a82d13f-0e4b-4e21-a228-49bd01f73409"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b81ebaec-98e4-47d8-8c5e-e46268e06dff",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1df6cd55-d165-4d9f-a361-9ced4358a89e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe5c5f44-eb1e-4fa4-834a-84d2bb7a43e1",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62e0285e-b2bd-4ee3-b3b5-1254b0f6b6df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5c620fdd-8180-4e6b-b8a3-9bba88bffe2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2cb607a-96c1-489d-ac5d-7ea72bd2386a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c81b438-c38a-48d6-80b9-d29d662d7352"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "57afee8c-0d41-4900-a051-25ab22e8ba71",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "70725f5c-e400-48ef-a302-afac4c46bb5a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c6015773-2fde-4834-9b23-7e52ebd7cc05",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1405ad31-abd8-4bed-8d5e-832c09e9f785"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5e2b33c4-3e76-4383-bbc3-ccc18f9c4e89",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "85e263b4-b690-4325-a68e-7bc1f6789bb7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f3b15602-6706-40ca-944a-bec2780f6e7c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cfc2cf56-3a39-4190-8360-e10376846197"
                }
              }
            ]
          },
          {
            "id": "a8fcd5cd-1c52-4957-83df-530b2789bcf3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4c1521e4-8a44-4224-a33f-69b345b638e1",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "277becd2-4ff1-4e12-bba3-35901f7a907f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f197cac7-23b3-45cb-87a1-95a3009d5918"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b4a30546-7c3d-48d8-92f4-6f87a56cbf91",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3046cb44-440f-4865-94da-e0fcecd84021"
                    }
                  }
                ]
              },
              {
                "id": "4d9e4c4c-602f-43be-913b-dbf893490143",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "773e29cb-9e5c-4f6c-9258-a31ad0797939",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "211593c6-c5ec-44a6-804b-6de6dd7c9516"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f8c94782-c5fc-4e43-b3db-720c3c3f4c42",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7faf18aa-51a2-4ba0-9161-fd8cf3b661d8"
                    }
                  }
                ]
              },
              {
                "id": "f9042580-b4de-478f-bf29-7333988a0665",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0b89def2-cf41-48a6-a736-37de996da923",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "707c86cc-9f8f-46c8-a213-c3c9a70dfcc1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d378b8c8-42b5-4e86-add6-4b564ed6f3b5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3dee5035-76c6-4df0-bda6-cdbccfafebe4"
                    }
                  }
                ]
              },
              {
                "id": "0b6c5e58-abed-4263-b08a-af6bc04cb332",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1521eb08-f967-47ec-bcfd-44af59e33d9a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7a3d25c1-8c77-4283-885a-9d1881ce067d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6f3b47b0-065b-493d-970e-cc5e1cc63161",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "207e6757-25d5-4eae-8346-24cf1c263f4d"
                    }
                  }
                ]
              },
              {
                "id": "3f89b036-d255-4fae-824b-beb5e963897a",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2b14abdc-e5fd-4585-80ba-b860aa382bf0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "96ab37fa-0e2f-46f8-9315-ef23b731b9bc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "10aca596-93d2-489f-926a-7a353b3a10e7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "6ddc15c4-3922-4437-9b28-f1e5013a9289"
                    }
                  }
                ]
              },
              {
                "id": "759f0665-0d04-4135-9c83-5df98c5c3dcb",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "748661f9-2d48-4cb5-b35f-33c49b2ba484",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3e4ae9b8-130e-47a2-9e2a-191df0a90a44"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6b736193-4c48-4903-be07-e787d6709c9f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4480f222-029b-48ca-8e98-e3e777b2ac32"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "225b4de8-1f96-4d2d-841d-14f1b5b5d181",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "20608f08-5d2f-469b-9533-1883d61747f0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2db664fe-ab6e-47b0-a430-a55161f2e6ea",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "31f404dd-8aca-488a-894d-6b40bdbed786"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a9fff133-6731-4f21-a0bd-7aebe7e5fd79",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "d6009989-47b4-4d62-a78e-6a0e2b54585b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2c46c372-7ac5-4c6a-ad83-f6db2834d5f1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5e89711c-1222-40fc-a1fa-f3a8c6acea7d"
            }
          }
        ]
      },
      {
        "id": "845eadcb-8fbf-4b33-a1ca-27308d2b1382",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "760e2dae-cc76-4f56-811a-f6f7e0767fc2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "57b10025-8bfb-42d6-8daf-58a94e2fe548",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8e7a7bc7-73f6-447d-83ab-f055083c7b9a",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a05cde8-5988-43f3-be37-fb1ef9ea7589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08631e0a-b732-4b34-9fca-1c51ed489b18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e222f8f5-3111-4337-bc12-fc5cbbc82058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7c02466-f0e2-4527-a61c-ad9f7a95d217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "747a58d6-cc04-49f0-8ae2-cbb098a11312",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "300486dc-0b34-4ca1-a410-bf4f23e0f9a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a059938-37b6-4245-951b-ef1585a3a754"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9088b493-a25c-4f44-9f70-be00cc8d6366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "27070059-98f3-49db-ad19-e10a293dc480"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9254308f-6d94-4112-8648-b9ff9421d84f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "355a875c-709a-4022-9bfa-115f88d3e234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db08034d-e687-4592-b57e-116bdf92fb5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d216d60-9c33-4802-b524-afef67639f84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "191943bb-8667-42b5-9eeb-799385180b4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67be478a-d678-4cf3-8bf6-c1a377697280",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d901c532-3641-47f6-a245-4bb8a9476930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e65efc8-ebe0-4fa6-9008-35c3d789c22f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90655283-e6fb-4384-ae06-ed1f614e893a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "42edb93a-3317-4036-9500-4c34d005236c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20e8bb96-bf86-4f7f-8ee2-fdd8113c4c86",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b68d48b-cbd8-4e8b-a792-814ecda5166f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4fe1683-4842-4942-968e-814f78a90fe0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1938b857-6683-4f25-a1bb-fe181557c639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d021763e-5eb2-4809-8245-a40c6b58a4a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0e2f1d0-e81e-4b54-a57b-9948ea96d5b3",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11ca4ee1-3d8e-4960-b288-f37f6037700c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0656d1da-502a-4a53-8cff-deffc4f51a79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60da1c25-2e5d-4db7-8ceb-4f8a3ad1fd83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1c137551-e337-4319-be5b-bd679047ff24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "204fbe7a-0195-4003-b367-7e64a625a924",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb07da78-1913-4f63-baac-1f86a118a385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d089485-a830-42db-bbab-9b33ad7a910a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9159c3c5-6b1b-4a2e-8a33-9c8242fd666f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f414861-04f7-487c-95b7-c0841bb95ce5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18ecd6a9-d5d0-4b0d-9c9a-b4140f330499",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e34e836f-5e4a-4ca7-a993-42659c0ef50e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1936f25c-2619-4a71-872b-da8d6d474b62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56c3a982-6d44-4232-8b43-8b69fb94ce23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2e923be-5613-4d2f-b3d5-52be55af82fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b7e0c22-0e10-490a-9b5c-e2db617ed01b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64358031-f200-429f-b043-214c420780b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb8062a1-f5b5-49a6-8d08-b98377de7a76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ad50511-684e-4f2e-b8c6-14c6221c2012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b4a33a5-ecbb-4197-a87a-5828a98ea55a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d3da790-81af-4ba9-a726-861e478d7523",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b5b05c4-efbe-4da4-97b5-21868bea627d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1f064f7-1442-4460-a0d4-d7adcbe1fef7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "538be809-9711-4bff-bf08-5d63d7ace980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7903f751-f8ff-46ca-98e5-9550eb8cfdd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64ee8083-b691-48cf-b5cd-fb48e1a316ea",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b171750f-4f21-4bf5-874b-73a873664712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f802dbe-0699-4f71-abf2-28cea66aa975"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56ddebb7-1eb1-4fc6-9cbb-50f1da0f6f82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "3a5086be-fa3e-4735-80ee-f8745d66a727"
                        }
                      }
                    ]
                  },
                  {
                    "id": "120d2f2d-bd81-4b48-b12c-4641b8f11a9b",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ada3332-c1f5-4b3a-b33c-d4200732eac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dbc0a79-8f91-45b1-91bb-eb6e0e129e7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10b88c7f-cf31-4d06-b997-f3e8ac006a96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "334316f8-f84e-4e08-81f7-fa605d703c1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3f44497-a9fe-403c-84d1-a19c9b758a64",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f7b86b1-71ba-4683-8d1d-4c4b225fb158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b310846-69a0-4762-acf7-55b6bbc4cfa9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6250a03-6f19-4119-8761-230c18e57c27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec97cce5-59c5-4b7a-a58e-8be6ce0a58a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74a94f61-6bc3-4143-84f5-a9842c50d112",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bf89dff-8861-47a9-9c4a-934412b81e57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40826bd4-825c-485b-abeb-02828f09d69d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "335372c2-718e-4c8b-84d4-d26d5baf8b48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba3404f5-515d-4543-a370-d0d50831cc7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb6caad9-01c9-4964-89ac-3e8558df9888",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d128371c-62a6-4a2a-ba18-d698ee7b188e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e88f9a1-cb8c-457a-9b1f-ce2c439d8049"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bad5370e-9f5e-4f24-af59-00a63ceb517c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac09843b-ad20-4140-b6f6-5c29a5a8fa8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b68f8e3-0507-4830-b9e5-18175fb3b6ae",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa52c149-8751-483a-9169-15951052aebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbfcf09b-a984-44a2-8d68-9072a1b1cfa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e6eda2b-bb0e-4128-ba02-afbce1860573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "2fcad1f5-97e8-4599-8e23-ae55b74bb1dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "633c11cc-b253-465a-8d02-9953bb34f65f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aced75c-098b-41c7-aa83-722d37a87730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2da6ace4-e643-4656-ade8-892e6342ac0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92461a62-11a5-4fce-98e8-1070c233f158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f82984a-5299-48ae-b459-e41b03c8ec3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fef108f4-8de9-466d-af0a-a0a8525e2079",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54037d71-386a-400a-b473-17945c99c26b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f5a49ee-0ab5-4b65-b85b-25d9ed60b099"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "688b2c6a-c613-4dec-a809-9c642d93d3c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b07da882-eedb-4a5c-8ddd-eb0ade949f08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a857c456-95fa-4639-be2a-53b8eeb3985e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d291838-f7e7-40c6-a3d2-20e9358450f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a794ced5-ed13-46ad-8a2e-34811f0a9f8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9604bee-6ac9-4665-95ff-123e661e654c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d34fa519-72b0-42c8-bff8-a66296682217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3051d074-8f99-46fc-8a61-8d6705d47f0e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4b78bc2-350f-47be-a7b0-faf2f7a17a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "580dbd19-1f17-418e-a622-955df117e71f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d79cf32e-e8b0-4f90-bfc0-27155961adde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3470fc1a-30a6-4943-9734-fab36f8ebd21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d6efd2e-8d7a-4163-ad5d-8dd22a75402a",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "181c5f86-4d9b-4093-8d23-9451abd51029",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80e2b9ea-169a-423b-8c7b-c5ca8adae56a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e388e1c5-8f87-4198-8273-8f63d5dbb2a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec49cbde-e894-4d4b-8c4c-a2b8538a6560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79cef315-7233-42a7-b3a7-f4f5483625ea",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7741dbdc-450b-419e-bbe9-c5ec38025436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af7102cd-90bf-437d-bb35-f77181c7d063"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d8c5c25-fa11-425e-802c-b4dfc1639a34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "88c3970d-7474-424b-a1d8-5848beb0932b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23eeedde-eb0f-4d14-80e7-84b8d2e5b689",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b07ecf27-6108-41d3-bea0-fdb1af3b5454",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5232c5d5-298b-4f5e-a0c0-ddf198a36f07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad82cc85-1d36-4559-8d50-564dda2f3dbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ac6aff5-615c-4c92-aa82-f0d93e245479"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d513185e-a7a6-4e36-9e04-c8ad4682c047",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c47eb7ad-1c95-4c10-b2a5-cfac3460578f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68a694d0-1f1a-4b11-825c-92541ec86c9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc215525-e4f0-4922-8ba5-a22d99b0390b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b695b0a-d30d-4438-a959-828b62aa0ef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bdefc2b-2a44-4451-8a94-9ee56bfa2c1e",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55cb5b5c-0361-48ea-8c4c-deec003eefb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a94aa65f-ff50-49c9-b04c-d2d4067926ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4be21a3c-5626-434a-941f-38f52c112524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f1d481e-dbd6-4367-8ab2-46ff9caccb54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2edca912-6ade-4658-a35f-e358e19b2d7e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c895845e-647b-4741-808b-d73f1abc7b08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfe82943-c9be-4f49-a4db-18689432750c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2269611-43a9-40a9-8fc2-f505e95f3760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9554c705-3816-4c8a-bd8c-d71e59f0f0e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6023b640-b81b-48f5-aad0-88440e9a3400",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37865d63-a637-46ed-a67c-be29b2d31af2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cf4daf8-8474-474c-8875-415613419bc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0f2fe57-5034-4f9c-a1de-196ef7d261cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdbfe5dd-bf07-4dfe-969b-878b5fb35055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8abdfca6-3fa8-4540-a213-76e790556061",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7422249-071e-4bd9-8866-ece8266bba7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aba68a0d-5fdc-4b98-a938-2843f18afc40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7de5b972-ab8c-41fb-9994-bebb32433ba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "707e267f-ec17-475b-ac9d-ec1334573884"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88df906f-a542-45be-81be-f74d03715b6c",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cae37a45-64ca-4f42-858e-31a8c9c5df50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba74d427-285a-47d2-b6c2-173c26aaf5d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45fccb4c-3da6-4d3e-937d-064728776c26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0683642-c943-46d7-a96e-9511ce18234a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5fbae45-6953-4e9f-9dad-20c66227cdf8",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c4f57d3-e368-4e94-81fa-9a17fd18cec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de0636db-f98c-4c55-91ed-ec1f17cbf2fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdb22a51-7855-4a2c-b0c0-d8e71dbd1430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0556f6e-2278-4ac7-9e94-2e13c4a9a0a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eba884a5-4433-4364-a5f8-672264c2c945",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c13bb35-f2ae-46d9-899a-c8bbe1e6c62c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "252f67c1-d26d-4dc2-8927-8ff0ed8b5bae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c591bddd-30cb-4c75-b9a5-6e02a23ce649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6b0ab93-bb35-4903-9635-016cd4084987"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56aed88e-d094-4200-8a6a-a97a6d894417",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "215168d1-48de-4f86-9056-cf531adcab2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "900b31b3-357a-4380-8943-b525f70000e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67c3fcf8-5146-4d7a-a63c-c84ab183a297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4372731c-97b9-465b-b5ae-3f16aec88506"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5e220246-1640-4d18-a7fb-bcc8a2c202a2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "81e449f0-15f1-4807-8367-a416fd847bdb",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97df9659-a4ec-4102-8ebb-cebf913c221b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "defab411-093d-4c20-866f-54c717f880bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e33da5a6-7393-4146-9c8d-565de74c66b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "76393132-5df3-4f8c-a8de-f167fc4edd38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4d7c196-5551-4c3a-bed4-e318adc3c414",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f683537b-fcec-4b85-aa46-951f9b645d2d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b5d1f571-62e8-4b3f-a832-f70dddda73b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c74880c6-230c-4ee8-93b7-a78701e77325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "798e5e90-8695-40c3-85c3-a13b90e87e82"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "68dbe3e7-0ef2-4ba3-832e-2cba7c137528",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eefff8ba-eb09-4ca8-b0d9-125d74ea2e40"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ae87746-483c-4e4f-9290-aaf9020ffc1d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "69ff43e4-499b-41bd-b02b-6a3442593819"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6ac3a16d-1f0d-42e8-9a2e-485358687396",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e1e37ba6-8701-4ec4-bdee-69dec517a749"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bfeb42b5-96e3-4fa1-aff7-595111b8cd7c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6e743e76-6c1d-4cf0-b730-54720bee80c4"
            }
          }
        ]
      },
      {
        "id": "9273d5f6-74ef-4960-ac41-94b4314024fa",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "cc31593c-0aa0-407b-8c42-cab86604db64",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c84b8aea-e0f6-49de-a68e-6a6483f0fce7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2c442437-d6b3-4526-82f6-f0eebe978982",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fcf0fb5-9761-4683-b482-a7e320a5a1b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15377525-108b-4e6a-beff-3a3e3535c7c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ced72a3-d9d6-4551-8820-0635f7737fad",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62823b9d-cbb9-4996-bb88-803d3db896a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fe30e9d-fb5b-40ec-aa8e-afc6df438536"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db2b8754-3700-4020-8aaa-a9654d9d1a4d",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fe3a5ba-b448-4505-bf6a-9e82a1746796",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0de76f18-48c4-4f83-9b1a-67dc64d5ea11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a13f2bde-b069-4aae-aa8f-7c733041490c",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28c76c16-e74b-4f20-822d-030de252daea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f719715-cd25-4bd4-8c42-a7951f59e39c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bfd815b-bcac-45ef-b26b-66991bafe6bf",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2ccacd4-f717-448f-85f4-e6be1036a02e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43c510c9-845f-43b4-9471-38043f586880"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e26250e-4885-4556-902f-a50f811fed48",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd2d958a-931b-4d40-b4b2-986a88901348",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3f74dc4-7c9b-49ef-afae-b5ddfa260985"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b39b19e0-0639-41e9-ba48-f3f417d8e50f",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c3a092c-1deb-4dd6-9efb-0f872725727e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "975cb0e2-50b2-456c-a972-320be79c2857"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13390efd-e5c4-447d-9b29-8f4774b2569c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1706af34-aec9-4f37-a02b-d1592c614986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "162870e3-7a1c-4139-a6c9-71de8448dd92",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54b29435-c4b7-4990-b04c-09348cb8a165",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70a3776a-52eb-44b8-ad15-3448b8673ed8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fd4ee6f-4fb3-4d7a-adbb-0c59c465f8eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1ca6d49-f3ba-4a99-88d7-98acb32d2eb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50e80348-5eaa-4012-8266-a80d0135ed2e",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdd6a997-48c3-4ae4-b22f-6ea63d99740c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94dacf07-8cf9-4fad-9ea5-0e136c26e28e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61212611-970b-41b7-b66d-7325c758e50f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b0fe6dc-bed8-49cd-aac9-3484dd4ff205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edfd008e-6f27-41a7-a41f-dc8770b25cbb",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "230a653d-fb92-42bf-8765-c64e11039f7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f11ed3f5-b2a0-45e5-8e9e-81d5b4e216dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5020346-ae39-4887-8fbe-423c08e33ed2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd86e20d-71db-4621-a063-c1b561b77b92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2c3c73e-52ca-4b15-bd25-65df1f38362b",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90b3de94-002e-41bb-8fdf-c264e55c9fd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca79fd46-4f88-41c4-ae78-81acd16f5a4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c265144-9eef-4e50-aa61-2e36eac76868",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fccd305-ce3c-4f81-be7c-44baad1a217c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e04da9c8-4f68-47e8-b256-e3d21c1f4315",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcb3acca-eb75-48f0-8345-66aeb4af84df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76b05cc4-4fb8-4d3c-94b2-5a80d8172760"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d38647f6-a29b-440c-bd91-39628c8114b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6f6054b-8d1d-43d8-b7c5-78e9be40d5a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cf73d2b-c0a3-4773-82a5-1f49ecdd9c9f",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c7e4927-4fc8-477c-9ad5-3df1d0be4768",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0e08315-ebf9-48e9-88ba-efd073b01275"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70fc5094-c3ae-4a5d-a4ed-fe22f677832f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4be0ce7a-14ff-429c-8ea6-7b1738868d58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de901e4c-9783-488c-a77e-622ad29a4627",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "304f9a99-509d-478c-935f-c57dee998fed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7bb87473-5b6c-42aa-a897-33706083bd4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b8a448c-5416-48df-bbb6-2ff3cb816efb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5816eba-d7d2-4a7f-98de-66bbeb5c7170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a420944-181b-45ac-b1d4-28a74e2fc9e6",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f146bd7-e771-4fad-ad69-e10fe6eef470",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e6bd93b-69da-4f5e-8f60-59ac55a1af0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c47d81c2-4a26-4888-b365-659308218571",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "374ee933-2457-473b-86ba-ec9f8c253aee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8be436c4-0dee-4b00-9cd0-c10a837f465b",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09c0a4c7-6972-4dfb-8d72-ec4a2821bc6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc87dc36-6b41-4406-852d-c855a1d85a7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c769e88-7a2b-44ae-8fa4-08adbdffceaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efa3b12f-9ac6-49c5-8fae-8223b8617bb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f16e1a4-84ed-4e1f-a64c-38d8e594861b",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9ea9cf0-0945-4ae6-af33-bdd1f47a2b38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c2e3ea9-129f-4c01-8d75-d153e38c3fbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e890e585-9042-489d-93ce-f9f49f423797",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1265d72f-8403-4ae6-b3de-61979d99beb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09ee64c1-fa3b-456e-85e4-609c9817becf",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fa79c7f-79d7-4ac3-8e95-d24050efee0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85d433f7-c2c2-4784-bcfc-515d353abaf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce44006f-f87d-44f1-b4e9-b81e12c0e294",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "218dba74-c6b1-4f0a-a08b-ac31afebc4db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0312e93-014b-43d3-8b47-cd08a20be16c",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "119705c7-8dee-4339-8dbd-a8faabf87d68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fad1476-4c68-4174-9347-fe5d842fd50a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07dc2762-98b0-4e37-833c-5d50564d1226",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75d27ef8-0e84-4e85-84a8-1fd5a7f03ad6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45ea5593-2f74-459c-a5b1-3db79671e50e",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "006c2373-ca91-455c-a6d3-43581905d413",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da0a2718-253f-44bf-a460-b8ed5c4faa13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e9882f2-3d29-4dcb-b4db-8eac118b98de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36645ab6-6e53-416d-826f-2124f7ac2a6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b23428a1-4257-4670-ba3d-7efb288e7448",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c612bcc-7394-4694-86ce-0dcf6a302091",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fb58530-d6e2-4d5c-9fe5-96f851b786a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b065c93-c7fc-42f7-81c4-45f6c774f2cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "044c12b2-9fa3-4b49-b70b-1b87731f097e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "060e28cb-24f2-412a-927c-6a938619b773",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70b3b254-e276-49bc-ad57-efa6b51c8eb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22b9bcca-e000-4b1d-9728-e38db1fb19a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d2940d8-de44-4e10-88e2-f0a3e7b7569c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ad1441b-701c-4c60-a034-8dc05870b3fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08dee860-7636-4577-b49f-90baec9d0134",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8227778-266e-4198-93df-3de76a4229bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0980008c-eb44-4c14-8263-1873ec43e757"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddaf9339-9ccf-41d0-bf74-2c9dbec84d85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85117928-e228-4d41-af6c-2197c3cd5c9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53e8a887-f438-4c50-a8f9-38823010032c",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "841c90ec-e960-4af8-889d-1689aff8d3b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a0b77c2-a94f-4e03-833e-b2d808402073"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d0d3e0b-87f3-4440-a1cf-1ea65f7786fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5888e289-cb0a-4484-a0d6-488818e14ee5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "048c0842-5e7c-416a-a1fa-af009b883cc8",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b490eb30-1885-4af9-aaaf-6a7c8e77f2e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6fc842f7-6e43-4848-a12a-ce2353d64e8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42e6626b-c015-4412-b9dd-0f0d956ba01e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9e57691-a252-4a8e-99e1-c120662d86d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ff22dd5-8562-4c4b-9cb0-22648f724134",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04af2171-f78e-4627-825c-8ccc8fa1bee1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3feb0bc5-ccdb-45d6-9359-231d2fab2667"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "141d8fb1-17a2-4b90-ab6f-cf9b5343c109",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59278724-cd7b-449d-a784-0dfd383758ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68c55b8e-79bb-472b-997a-28f6ff07f801",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db2921c3-2541-496a-86c7-433b49155585",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37520aee-ab9a-4af0-880c-295fda07c580"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "959c4815-d03a-4e81-b846-ae847d832f3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "754a8709-af60-49b5-bdee-0309d92b86ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bba09422-f570-4b97-b090-3184121f7a15",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f25626f-8956-4103-ba22-bac9a02dd352",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c889a0a0-c61b-46b7-8f92-59e107deb61d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d5278e2-aa5a-4038-aa11-9f4d4aaaac35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83d0a08d-81f4-427d-9936-4e2869833894"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d782ba49-5788-499f-9054-72bb92e2801f",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1c8c75e-23c4-4298-8d3d-43812c498bf4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5eb6aa7c-11c0-4d85-b69d-9190f7cc85dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfa4fb69-41a3-437a-b128-f1b0f35beae6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cae09bbe-4900-4f75-92ea-35f5e229497b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddbf1b43-4ea6-4958-bb38-cfa421eec85a",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b5fcaed-6158-4f94-9fb7-da98f378f9e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2dc20245-6d83-4dd1-8b50-c5b02bd71ceb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f963f5b-812a-4b20-95e0-846f319cfc00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "add0cb39-a012-418e-a312-1ff2cd2cdad8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cccad814-30ef-4eeb-857a-b4edb8257f62",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50b2f9d1-94c6-4e7f-95eb-5f8954230bf6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a5623af-f196-496e-9690-5685dcdd03a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "947585cc-1f0c-42fa-a1b4-725bb40ec57e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aaff342-7858-47fc-93ff-63273fcf99b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c217ba7-bd07-4fc8-88cf-ca35969fa294",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e49ed409-73fa-4e62-bf55-72b9d9a91bb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4911285-7342-4d5f-b11a-27fc0beb3fe3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65c94167-fc18-4268-a93f-11b696b5ed22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa897c24-a5b0-4418-8317-0c8821e79a74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dde13136-0d19-440e-bcdc-5b27e5fdf2f1",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8450bd32-dc48-4bfc-82ef-22555776fe15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79668b05-64f4-4955-bb2e-c000d2ec7013"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93170eb3-174b-48ba-b796-f9a274a706a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4fc74b3-0ce5-4325-8591-6630cbe714fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd5cdc00-9a85-4eb5-9629-4534e9a4c2fc",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "781f57d9-781c-47b3-8a18-b77252797cba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9aa3b023-ed75-43b1-bbb2-4d6ea892ceac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8acd7044-e140-428e-827d-e002447eca90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f5302a7-5053-43c4-b8c5-2501b70e8986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18db9797-a3f7-4cc5-bc40-fcc21c620e39",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecb94eba-e98c-43a6-9ae9-d00b7a919d27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "824f7b7b-85cb-4ef8-a3e0-86b23f6bfeaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a5ef2dd-594c-4c9c-a1c0-531e5eed8d23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5ebc6bf-385e-4fc7-b264-b9aa27585b92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e5ca604-f273-434b-a4cc-c4bd14ba1250",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43e65578-a25d-42e2-af73-999420db67b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67cc9bdb-b4ee-49c3-a278-f2151d513d87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c5eafd7-d83d-4b4b-90e8-5c6cf68c4d73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a43792d8-bd0c-42ab-b9c7-8e038d6ba59d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2acf050-f19d-4f40-9bbf-bce3a3c221cc",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1105e442-c6fc-4b97-8459-d61b74f6c9bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c4e0697-6344-49dd-a829-c9f079b71b91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1ba0cb4-f8b7-4a36-900c-d1c0af63b622",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1fa8bfa-e81c-4b06-b78e-3563ad3128d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa80c44c-6e72-45c6-8fed-fb67cac0ad04",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4ec10fd-645b-49b2-92bb-0d38d01348c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d841e890-a57c-46f3-8372-44e8dd2fe065"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8e7a197-4bfc-4994-8f4d-21f7ea9e1242",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94ba922b-b33e-4b6f-b15c-fecbf22d449a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b1cadea-3d75-4d73-93eb-62596bad4701",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df7c2196-07c5-4dc9-b5bb-a566a322f7b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2c4635c-1e16-4cfd-abd5-a7ef1ee9b943"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "800fafe0-ade6-4318-9ba9-aad268f1e0f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "053f9cee-c28c-454a-851c-8d3de28e12ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4325720-d7d9-446c-87b3-ac2e829d3501",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e462b1ed-00b2-4074-84d7-9acba615c55a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e689405-fc64-4a42-849a-13a4c416513d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b17bdc3f-0539-4b9b-964b-50a6aa458b84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbb3ad65-e99f-4026-8ce6-f73bac5ca52f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b74d203-f03c-4990-a1ff-1e1c6e99bcd0",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ed2082-6b7a-47ca-bd82-b525eae9d420",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84b80ac5-12ec-4aed-a20a-666bf55deae5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17243dc1-b168-4e3f-aecc-047d286d3b03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2288eadb-a99d-475c-9bfc-9eb94e6ff54a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "292217de-c93d-4fed-ad7b-a0b2f5c1b1b5",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "193eaed6-ad89-49d1-b7e1-572090031e1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "824ff418-a88e-4e77-917a-d36358673507"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25c2bdb5-2da4-48a0-b762-56d94dbdd5fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71d18a94-1252-471b-be4a-3bf3046d76d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fba72491-683a-4d27-a5cd-b45f7fadc995",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e4f9fc0-0bef-4cbd-9e02-6bd3c1359d11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3ff3c58-fd90-4678-9830-4c96a44676c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88d03f2e-c3f6-4d51-9dac-bb3b5936187a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec1b0770-60f5-4eae-97eb-741050e66a59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a967c44-1b8a-402f-9d9c-cfee5bf49d47",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b2e03fc-6d87-4b60-bb49-d394cb0b3761",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28cacfc4-bfa1-451e-a867-3dc4478c73e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a76dca3-4574-4b89-90f3-1fff8778c341",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "582a3864-d891-4336-8cee-a97606bf910a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e45b8b17-5b18-4081-b149-9ff24185eafe",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eeb13fb-2d87-461c-9b1f-7c0d3d3b2f6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb8f4f5e-b751-4cd4-ab6f-db43eecce9b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d80ea39-96d4-4aec-92e8-317b777ded4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c359daee-ba0c-4d6a-a483-25c05355d184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e43d283b-ffc1-447e-9569-e2f7a11b8141",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6d1d5d4-edaf-4c02-a059-28bdb023c343",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cc6520b-b0ef-4529-933b-416b495efddb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a848105-17d9-421b-a38a-ff9491ef7587",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0be22bed-8229-4d69-84af-f099adf4bcb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfc206e3-486c-486b-9355-a2920c542b6d",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdaff976-691e-437b-8914-81462c91f447",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "620ef198-f6ce-416e-80f8-a9f315c8794f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "904eff48-68a8-4123-99a9-37ec1fc4c188",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0edf8b9-db38-4de3-8ada-8bc7079b756c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66d7df93-e25c-4c61-828f-df9b28c9a7a4",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deb22b4a-b40a-449c-a921-25a4d50468d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3920756a-9bb8-496f-af7d-abcde5ef01e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3f8103f-2b2b-4577-8b1b-beb3ab4b9d2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7239e3aa-9fca-4995-9f19-8bab49dadc3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "802200a9-2d65-49a5-8aad-f24afc12fc03",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58bf3719-e183-48ff-a5a7-9eb9879af4d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83d16f72-4b52-44f3-b445-73a93b781a32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03558317-2506-4624-9729-ee63b5fa727c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ef4a404-be75-458b-a82f-93c6c13708e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba0470b6-ad7e-4160-8594-5dc10626704c",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bd9c021-a08a-4a2a-a7b4-91306f3d163e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfb52e43-1e71-4446-97fa-386de29021df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe0324a7-e8c2-4d9b-ae39-2cac713c419f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cece5dd9-7171-4fd1-b3f7-9f57f8b050ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93ca7f66-6121-40fd-9b69-24767e6d960f",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da0f04b9-0680-4a03-badf-b45a9cfb53a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed25b665-bcd2-49ef-958d-195ef96e1738"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52f779ed-d183-417c-82ec-89345add731b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53e78920-aabe-4eb7-9957-0d9d82a81934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38083ffc-ed64-45df-8280-4335a5a9c64b",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d197b96-26c2-40d0-aff8-0ccce372e341",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3567da03-19c9-4aed-ad33-32a75a0483e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38ac128b-ed23-4657-95f7-8c388eaf4bd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf0ec8b8-3bdd-4b9e-8807-954f4a19f02a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bda651e7-8f58-49a9-85bd-45a0cc718432",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a87bbac-e8c3-4305-8b14-2c15ced01c83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2350ee5f-dc41-41e5-90ca-f9fa5133ce89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1fe0cf0-74f4-4a4f-8b7a-0d1ef93dd192",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b69090d-8b26-470f-a8f1-8cb80f104af2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b7b0fe9-f793-41a3-881b-93d68d3bfa28",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01d4ff86-32ea-4e54-9e7c-7961647a522f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd429b2d-c3f4-4fd2-b034-7a1ee6c831cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02aa3a77-8e9a-4a3a-8839-0e46156899a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1b32682-e84e-4f61-8051-466e629d1809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13c88be6-33d9-4f62-b5d5-a128c1919eaa",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71f6462b-cda9-47dc-b659-46d308d91369",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63e570a0-0576-4cf9-87e4-321913445dee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47e9f90d-fbbd-48db-a752-8c2bbc0b7232",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e05e9d7d-2ed1-4c0d-8a76-7fc94b9feaf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c5cfe6f-61e7-4c1e-875d-37f808731903",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0b6aca0-62ad-47a4-a20d-8639bcd73db6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89efe249-9e32-4500-8460-c8548a323b53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28b1ac1b-c142-4f6f-9a7d-2cecab25fca7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1d50d8d-6590-4824-8490-8f44ffe78bea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0aa6843-dfb1-4568-bcaf-3111cbb09c8a",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6529ab90-2f3d-49f0-a901-ca7311c645eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd2248e1-542f-43c7-82a2-c22eccb5c588"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5c21f38-710e-40ab-8be5-e0c0fa39ad88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07f981d9-d8bc-425a-ab41-2e14cb5aef80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b57adcc-2924-4c6e-9c9a-b44bd0747261",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ce74dd6-0acc-4d68-90b9-5f6c29376760",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5ce9ac1-1bad-4ec1-abbd-a578ca7abe53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2efb276-88b1-4c46-b405-651ebe8028f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26e60f17-69ea-47eb-a4d0-c97d8a062934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67a18b37-7f80-42bb-9dee-3b71cfe24108",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7927a79d-fdde-4b85-89de-a0b934e561ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "391d6df9-c578-47ca-82c2-3c0dc8e7fa89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c610db4-8f3c-41d5-a666-c528ccd4ea55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d10feed2-c482-435c-8145-db929f779c84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5395f6c9-6b14-43ed-963e-79ad794f6625",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e45d7c9-9444-471b-b152-66ae87e1bae3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "802bff57-d2dd-43ce-9f2e-8a80baee01ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc1aa6b6-26a2-4ee9-9446-cc389d71739c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1010aa5-2acb-4c6a-88c4-3c3ed3c3a9e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57cd544d-d232-4fdd-8319-3ce59f298388",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "430528f7-266d-4029-b3ea-5a4f43f5008a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "680ec3d7-6de3-4cbf-ba37-f55d5b72836e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b23e329b-bf0a-4412-b006-80ef98772fb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1615e04f-3849-400f-815b-eaaf2661e9cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ea0dc03-bd63-40d7-9dd9-4042893330e8",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "991f1ac5-f8ab-4a1a-b41e-6c43d596372a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b7a7ae5-5c9a-47d0-87de-92b810958950"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbfc7469-1edf-4cee-be47-199a2f2a6b20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d686dc5c-21de-406e-910e-16fa9c8cb91f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14dd401c-114d-406c-9fcd-911cc66f520c",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6375b55c-ab5e-4837-995c-ca6791d5f3cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47e77764-b84e-45c3-8882-b011990db890"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0cb1b5b-696a-41e9-8bc8-8af437709476",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4020a809-26b4-4a46-9373-176c255889a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41549d0d-89d6-4547-ace6-5380c00d2903",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "420bf3d9-f4f2-4ad0-b7ef-b6109147498d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "730f8b0d-c625-4a93-b610-69d08cb3e804"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b7a5b77-e7ce-480b-9ffe-e4a566c51ca4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60679b20-ec92-4eb2-b169-f72413767711"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b8ee4ab-8b9c-46cc-ae00-86e216041665",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9bedb87-5943-4ad0-8f5c-d2489ba76961",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68f63532-2512-4bc3-96e8-9b6d871dc063"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25945cc0-dde9-475d-948f-5a9602f2a185",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7e9d660-aaf0-48de-9fcd-865d06fbd137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ea15140-deee-4960-9065-df299e0417e5",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97019d30-b207-4be2-9df4-da4940aeb2ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7dbf25cb-98b4-42ed-9094-ffb0088b60db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80656f78-612f-4397-b447-a937625e82a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17b0f477-ac99-40a4-b4dd-4f165145649d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb17b4a8-6c4c-4576-8cff-3f73c827a479",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0a5e96a-546d-4253-bd3a-9352c3c2e350",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "735718ae-594b-4d1b-9a65-a363041c2d5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "996653ce-3536-41f5-9513-73890633180b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a19bd224-32aa-448c-a86a-99150e84adb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a82fd0b6-328b-4a62-b42f-2838758cc4fd",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20d475a6-279b-4e1c-9a69-b8dd84bc7323",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c0a19b4-cf87-496e-9e45-78b2e8105b99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "380c5e4f-77b7-4f49-b7a0-cd116bfe8b95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c539224-c70f-4af7-99e0-7ea22cd170c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61ae8b77-bcd7-422b-8cf6-06706d341aed",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef4ca7e0-bd22-4ea2-a743-fb88a4d04c04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db9d7850-da55-4e05-9ff6-0022368b382b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ea75332-ca20-4fc3-96b8-87c7ca37af3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43f307d3-e4ff-4b58-9f9c-2f7d09f432a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3c4824d-551f-4244-95a9-d4f831797f85",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "523ee142-a2ee-4a23-9d5d-87a9f636b2f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d60021ac-0363-4bdd-a5fe-d202b13f6fdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7861812e-b960-43cb-bb00-ede21b49667a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d54d5497-7ec4-4073-a765-6230376e9322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "809c25fc-dad5-4be5-8bf3-7c39509558cb",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d941dd8d-6196-43f0-a43a-e9a0546e8bea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14347521-89db-4a2b-b589-10e77bc0b9dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1de0880-c022-4b12-93a1-d56e0a223284",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49a08d3e-e319-42cf-812f-ef3091ef6ec9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56a4a213-e310-4eeb-aa34-16dcf2961634",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "562714cd-9c21-4148-9481-3f8579da28a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82bb8481-ce1d-440b-92fb-1efc3c2b6ace"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb1c1525-fbe2-4485-be17-d29bf16e9660",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f50d4d78-78bd-4889-924f-8260559305b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9799789d-d645-4998-80c0-826e390c11c6",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8525b25c-1bd6-45fe-a5d9-d3867dc88d79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42e33087-c568-4d28-9e96-a9badebd1974"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50d116f2-3af6-4164-bf6d-111b87306136",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "381e202a-3662-47bd-a3e8-85c9e132b773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f52100f4-d3e8-4504-8adf-74d33d2394f8",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2c90d43-0f55-4654-9b9b-9dcba392a6e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bbaf8b2f-e3d7-4644-9577-a1c01a04a121"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "184fe45f-0e13-4a9d-8dd9-7702e4493f78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1851c813-b079-477f-8878-39608b528473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "330f6d89-c9f3-4314-a9b9-a263ca38b42c",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f59f43d6-91e9-4a1c-ad09-e405b9703dff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "828a4e21-70fb-41fd-9d22-0e4a8558a3ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f750732d-a9aa-4b0e-8645-834a90c31bf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4147231-d89f-4e78-9a68-8c64813a7c9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "921bb9b4-ab19-4e21-a8d3-5c9245ce1ee9",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55cd382c-cd0c-4b15-87b3-3f586f4a3cd0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dba56d80-3f3f-4088-92d7-d2a337b39969"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cb7e41c-c335-4d2b-abf7-b71c3d01b65a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c9629ae-eb25-42c9-93aa-57a4c52b4ec5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "777c5066-e6e9-403e-815e-0fc7a8ac6309",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3ec22dd-33f7-4f33-8634-fca466208a67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b26a896b-b887-43ad-8943-949549d1e439"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc2d0bf3-3b90-4e4b-baae-b23efbda622d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e3a6426-0caa-414b-86a0-885f9a993cbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74320249-26c1-4548-aaf4-1a9ff830ba51",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d6d2141-2f77-4a60-aa37-6bb383641d17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f3ef151-4b2f-4706-9cd2-c3fa386bf027"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21de6549-c7c2-47c6-9e23-0f1a71898e0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b939d1c-68b3-4905-93f6-b455874ceb06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "068ce44c-3f03-46dc-a2ee-90dfc2008b75",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1bbc93b-715f-46d1-930d-b86097e12fb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fb6496d-e993-4341-b683-e48a51d7f39e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a87197a-9f1f-4deb-a091-f7100f393d94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b42920bc-09d1-4e03-b42a-dd0419a1d38e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85928fe4-b8cd-4a05-9cfd-da3168e4006b",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7264bc0-5b7e-4b43-8ce6-6c1279bb30ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "796bd578-4e4c-4ab9-b646-2058e5cf27a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1b34e87-264a-41d7-ba54-8dccba167e43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b1ae49b-4bbf-42e9-b556-94228d5296ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "406ea8d8-d6de-4d56-9208-aef8fc380f7e",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98376bd1-d159-479a-b326-b552a7534b90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1c71156-9e0e-4c72-8110-d7022d2e6125"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b0009ab-71b9-40e4-8b41-b231af0385d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a56fb4fe-0822-4bce-8044-c45d7eb2774a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a44e7eb-d017-4bfb-8396-b4883cb6d272",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c18f5708-2b2c-41fd-aea7-bf58e8cbd4d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bff8d374-165f-47d7-a414-8cd1c087326a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3c19575-d801-461b-942d-473c70725176",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15d6e36e-12a5-4f8e-a822-a9521fd07b2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1a5df50-0d80-4d58-aa0c-af2d4bb80d80",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86e040d5-cf05-4613-b918-07be39a7a4ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1fe77fd-ac8e-4452-b1c5-78e07b7d1fe8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b15a6234-f865-4199-b174-20f6d94974e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29979fa7-b8e4-4b3f-819b-0d009861ead3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74dd1242-9207-4218-84e3-2bed3853fc59",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed52b889-245c-42ee-88b2-c25bec5cdbe9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b0945be-a37b-4cc2-84e6-c5df53ee6291"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f98b4bc1-3974-4843-8b25-89d5061c1cae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a93e9e95-3f43-4298-8ffa-6286f0fc1d45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "689934c1-77fb-4b8e-af34-f685e5ea22c6",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "206b11df-fdb8-4a6e-b35b-5bfa3755210e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61987154-8519-460b-9644-557cc07cfbc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99c0bd8b-e7b1-4ffd-8715-94cf8175c943",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa9db2d0-b39a-4bad-956f-5a507a9420d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6bbea63-50b8-40b6-ac53-42c853e7bc6e",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2242b04e-70de-4154-8027-ec07cec05a20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5741bd7-6f3f-49c9-95ba-8238cbd6bc8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efa2b906-7732-4234-ba5c-f386a95ee6d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b1f5e55-b90a-46a0-87db-5d34d927d02e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b515ae7-068c-4983-be0e-cec9b401c724",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a675053-ade5-4116-856f-f2c4b761c9b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a61e04ad-f447-494f-88a1-81fcbefb7ab4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67543479-6250-40de-b18a-cc0e269cc995",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34ec0d07-b873-4fa6-9b00-fad38e68f8c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf41cbdc-b723-480a-ab5a-8fb877268821",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "197ae46d-32bd-4bc8-b333-b066c483d0bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95ebbf5b-14b7-48e9-9a78-2e35b5541783"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bb5c35b-e44d-4a4f-b3f2-c7cb6aa43dcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4393c47a-7f4a-467f-a664-564e56476f5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "295eec92-15c1-48ea-a955-7799f42d18bd",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b43cd83-42cc-4718-8a2c-724c12205650",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fe80179-d29a-44d4-82a2-de9b226afbfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea064c9d-b2c3-4e18-a36f-4431e785496a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f1ce496-b2b6-4124-b071-5243854ffebf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "968c0a0b-e907-4735-9b8e-5913f53757a1",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a432627a-1c2d-4c08-b791-e1b92b845b6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45bf13e1-0394-454d-bbf9-5d14726f95e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "084083f8-a8d9-4f33-9f41-2a1892c95e5e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e9e411c-0e11-4d03-962b-d1a1690f20df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd2c8c93-dba0-4f8c-88dd-466be9acc2ea",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bcf7e3b-d38a-4b07-a648-830ed0904491",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26b5273c-59d1-4cb4-9988-8c2aa69eb0fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9521b39f-8d27-45ee-b102-09aac75aa0dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30d51744-7561-4ff4-a24b-6696ddf61edc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcb6b1ca-0f61-4e67-ad38-4476d4925cfd",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d52579a-8852-4dc9-9e21-72291556e77f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbd13a07-448c-44d3-ab82-51eddb8bbf75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "039fcead-6f5f-4528-95c1-0ede7eda0c2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3211624c-47fa-4b6a-a670-73340df14238"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33691246-d9c7-49b8-bf75-c368579347f6",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73c49b91-05e5-4069-a2b8-0e2598f7ed0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f1bd90a-7c38-4c57-a1cc-fbad716df47e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4d8b047-2e74-4aae-b981-995071a43066",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a5afbe7-f7c8-428c-88b2-846121a6770a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30d42c1c-3cdd-4555-8aec-ec3981f1b467",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48aba805-bb70-4e31-bee7-32787acfadbc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78ce5bee-b4f9-4c9b-9e11-155309896570"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cf6f10b-b0d6-4491-86e8-00e8600787f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a3be515-bb0b-4aa7-85db-26ee8dbbb397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31de0471-1215-46df-a4ad-4f7e0ecd2766",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bd482b1-32e2-403d-a74a-c5d908b07e1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b9e3fa2-be34-4701-8590-f3a7c5c8d697"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08c319b3-138a-411e-bea1-0fd2a916a8a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c56b08ea-452f-497f-a289-81eca547774c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d6407b4-ffe6-4e3d-b1f0-f6103ae6d224",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f27ce87-574c-4bf8-a61e-bcab4961ab9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "619fb9c4-ad31-4243-96f9-be794e1317e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e72261fa-1448-47ad-9ef6-6bdec2fc34ff",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1df552a3-ab7f-4e83-8226-87396e3ef056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b2e0df4-16b7-463d-95e7-6424aefaf32b",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ec149c5-b8c6-441f-a14c-a84e8633542b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18d23c2e-4b01-47bf-8a88-0f8f294c4184"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcc4e61f-10f2-4060-89c9-c4ada0b3d28f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75e2b419-8bbf-4866-86aa-df5e489291b0"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "518eceb1-50ad-4970-be9f-62880169213b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a2d8838b-665d-4686-8f1f-cdc1f491059c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "43743d00-5aab-4019-8f2a-1ba10b0c38b2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b07e36df-6823-4e5c-887e-42641122bab1"
                    }
                  }
                ]
              },
              {
                "id": "78b01398-d8ba-483c-905f-6f10e5e27740",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "13eb2c7d-daa7-425e-9538-a7ab228a4f27",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb564d71-efa7-4ece-85a0-f7488c52208c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "11c3c62a-774b-40fe-9ab8-1ad5481f6d95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "039566cd-ae5c-4b19-ac3a-8fe17d5a10c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ee000f3d-ddf7-4367-8f0f-f80ff0cdecd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e3af210-f4d7-431b-95fd-e7048230aa46",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1a9cf1b-6576-4e71-8ede-dc2f0b413ed4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "e8392c6e-d079-4f6a-b7fe-e2f59a85b946"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf0127eb-a849-423d-9f41-8149796af904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "835b10d0-01a6-4c91-9ca2-b53901be659e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3dc51d82-aa9c-4ce6-aa2c-7f977ef43959",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "33c8fd4d-d5b6-403c-96c3-0ca6de22fac4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "63386bb6-ec13-45b2-ae0c-a33673f74167",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "253ca2dd-12c9-4c65-8b3d-8998cabf376f"
                    }
                  }
                ]
              },
              {
                "id": "363af743-baa2-4b6f-8928-1677ec05919d",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "03e80943-c5e6-42af-bd60-2e0a2a4ff94e",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fa9ac6e-6e9b-4c96-99f4-672eb51e1196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "acf98690-fc65-40f4-8a9f-0ab3711c5d27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4adb0bf6-6e89-4830-b7a5-8be5af03974c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c2a1724-deba-496d-94d4-e71dce4682e4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "bbf10c2f-e843-4a63-87cb-31b0e2a98637",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9fc4d31e-faa1-410f-b86c-26940ee05b08",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "318ff160-f0be-4a70-96af-a07e7ecd40b7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "222abe01-ccba-45d2-86f0-c686e5a58c0c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5cd826a6-24e2-4065-b56d-727e730e26a5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "373895f4-2b86-42dc-a4fb-a964f0abe32e"
                    }
                  }
                ]
              },
              {
                "id": "2e22b4d3-e048-44e7-95f8-cf4f83b67880",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0349ffd9-96ad-4ff2-959b-c5e33854837e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c7c78c6d-569f-42ef-9f56-e1e8f2707311"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7e6e851c-d7b9-4454-bfac-85a36c1a1351",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "14eb521f-6482-4629-a02a-4d8f312c9f0e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6a686196-1283-466d-88e5-378ecf7fd8c1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "dd9e29d2-0fb8-45c5-b34d-0d5b6d57b482"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "38df5fe3-16b1-4e82-836b-6d30107675b4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "27f0ae10-4a05-4cc5-a881-bc0bff769d14"
            }
          }
        ]
      },
      {
        "id": "69b1cc8e-a5b2-4669-a2a7-13024d88878d",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "59bf9910-a779-465b-adac-ea43cbbcb495",
            "name": "Negative Testing",
            "item": [
              {
                "id": "128a6641-7053-407e-8d58-c9820ab4ea86",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "044e7a6a-54ee-4228-b18f-8475d8fe92d4",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfb83821-4bc8-40a7-8981-1b5fbbcc656c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1d11896a-605c-4bc6-b9d4-ce1e71284f36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cd09685-3de5-4dbf-aa55-a0c8db84d940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "802f4248-2d5a-4502-815b-5f0cf3f78357"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64a0b854-1294-487b-93c4-cc26c5501eba",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b556ff1-4d86-4bac-ad47-6a4afb505a30",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2df2686d-e67f-481c-a987-982c2ba3c27c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c8a9cf9-b1b7-4a37-b5a9-c34af9978ac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2a265cf9-e1a9-4b56-970f-13107f0b0f33"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5116a7e7-ef0e-44e5-b068-c182b33caef1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c94b9616-5af8-4724-b2ff-0099d043d9f9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "32d74bab-ca08-442c-80af-57395a9e7aaf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5625c27a-4afe-4f07-9b3d-55cc1893809f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "11f27d9b-d4be-4378-9bf7-dbf8490fc818",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "3425820b-d139-4ab0-a62f-1266a7aee436"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3b05aa7d-c0be-4492-812f-4283f13a54ae",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8fa0fe70-d62c-4c4e-938b-bcaff2c2c1ed"
            }
          }
        ]
      },
      {
        "id": "4215c76d-a0b7-4e49-bc21-a5d20a4c50c6",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "6b801c40-6a14-4ece-be4d-47fb5487582f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7b2993f8-3eec-4481-8cb2-07c8d69ea461",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8a9a6b0a-e399-4bae-9a1d-4022f3f185d0",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb89ff11-4e1a-451b-80df-e4604451cab0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "378741a5-4d45-4992-acc6-18c7226a4092"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2995b15-2056-4c90-a061-223498489cb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a92966d1-3c0e-4948-a2b9-9058e6b19f3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "617a98a7-5f06-4755-b523-31315d347766",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44fc6156-9832-47b1-ac74-b94b0fe9a88f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "6e7fb219-5f77-4472-9d2d-9bfd49ae93e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "887c92cd-3a47-418a-83e2-e58688f09305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e1335147-2413-4094-8b47-d8767ff2eb22"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c788b928-5248-4a5b-ad80-9a07e501f3d8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ab19919f-9588-4ffe-b790-75019a6b070c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7465e205-46eb-47dd-89be-055c36904ebe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e75fd4ae-4146-433c-b38a-c79aff2d4f32"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ee3ce73d-6700-44a6-abea-2c9f0440b4af",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "09ae5212-58df-42ad-ad0e-97af95eb434d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e76f0034-090c-41d0-8db7-dc6be7de9cfa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6a60ca0b-0cb0-42ee-9e2d-a2130db12784"
            }
          }
        ]
      },
      {
        "id": "2db2c760-4668-4ea0-91c9-95c6ac3f4d05",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "936b355e-1245-4901-82c6-6514aeb8b327",
            "name": "Negative Testing",
            "item": [
              {
                "id": "433b390e-ed7a-4599-8538-360c69cb2506",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e048d4df-6fa4-4b58-b92c-df9de85b6c63",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b3ff941-1b33-4f7f-b19a-7a82d5bcca2c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9e86b731-9d0d-4524-95fa-789e2bbea796"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8fb95da-4878-4671-b55d-595943aa86af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bf2eff59-2578-4d4c-88f2-f883f444b0f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "796e3666-e352-457c-b72c-fbbb7a413004",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4379121-367d-4e43-9d13-fba7d3a81cdf",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "2d064490-b4f3-48d3-b6db-25f786d6493c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b93c977e-28bd-4633-8f3f-0732f54f5cb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ff375fb2-b8ae-44ce-b53d-d323cf699e31"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5c002797-a0d9-45b9-b3c0-b83ac69b9be6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0d9c2aec-417d-4954-be09-f52226f2e57c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ded87a74-2e40-4181-9988-3bcc65c0657e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e5aa998f-e282-4623-81c4-e8e04ffc0e85"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e4f1de5f-0bf7-4ef2-9ab1-324816cecc39",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4efb6484-5f56-4896-834c-f72876174836"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d91d86ec-ca0a-457c-8c0d-b47092f0968b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a29d0c58-9c36-4361-af6b-4083eaf137c3"
            }
          }
        ]
      },
      {
        "id": "3e7e2386-b1f3-4fba-9995-4336e38163fa",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9f43fc71-c027-4912-82e4-96132a20a925",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8f966168-bbd7-43ee-be37-24cc760a1f56",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "24567023-aeca-4cfa-b8b8-dba5eb3ad461",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fc26f809-5780-40d1-98b9-0570a5bb8879",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ccd1be2c-bd33-4ed7-a10f-5130f88a4f4a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 303.3115384615385,
      "responseMin": 7,
      "responseMax": 9754,
      "responseSd": 1017.1458101460349,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1682555950926,
      "completed": 1682556041081
    },
    "executions": [
      {
        "id": "f01bfd4b-d684-4ae4-95d3-a3c2c5d7b061",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "5be554ea-ffc9-4ce2-8ae4-bf6a7a0d7cbc",
          "httpRequestId": "d7027c5c-11c6-4b24-bafe-7dc9042e4841"
        },
        "item": {
          "id": "f01bfd4b-d684-4ae4-95d3-a3c2c5d7b061",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "d16d1e6d-236b-40f4-b5c1-741416f60126",
          "status": "OK",
          "code": 200,
          "responseTime": 57,
          "responseSize": 0
        }
      },
      {
        "id": "86b35675-9c80-4201-952e-3b49e78c99fa",
        "cursor": {
          "ref": "7444440b-46db-4ba1-a652-0af088b4d304",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "78638a32-3640-4ab2-95b8-a2d6028e52d9"
        },
        "item": {
          "id": "86b35675-9c80-4201-952e-3b49e78c99fa",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "8b2c38ae-7924-4bc2-8e6a-4e7c8efbf9db",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "10c51de2-f8b3-4e9c-897d-aa1727f253e6",
        "cursor": {
          "ref": "802b1ae4-8e66-45c8-aa4c-20f3f8ec5bc4",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "95d545f5-328c-49b3-acf8-2f7266b43ec8"
        },
        "item": {
          "id": "10c51de2-f8b3-4e9c-897d-aa1727f253e6",
          "name": "did_json"
        },
        "response": {
          "id": "411c11ca-6a7a-4b2c-aaf6-7db894cc75cb",
          "status": "OK",
          "code": 200,
          "responseTime": 509,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4d47cbf-c1b1-4f48-aa2b-7d492a34d361",
        "cursor": {
          "ref": "e5055fe8-2df4-46e4-92e5-21c6477bc4a2",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "688826f9-44b7-46d2-8e94-c3bf3fa0f1ba"
        },
        "item": {
          "id": "a4d47cbf-c1b1-4f48-aa2b-7d492a34d361",
          "name": "did:invalid"
        },
        "response": {
          "id": "e235e0bc-2c97-4e90-ae31-5bd38243e3d8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1311,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "a4d47cbf-c1b1-4f48-aa2b-7d492a34d361",
        "cursor": {
          "ref": "e5055fe8-2df4-46e4-92e5-21c6477bc4a2",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "688826f9-44b7-46d2-8e94-c3bf3fa0f1ba"
        },
        "item": {
          "id": "a4d47cbf-c1b1-4f48-aa2b-7d492a34d361",
          "name": "did:invalid"
        },
        "response": {
          "id": "e235e0bc-2c97-4e90-ae31-5bd38243e3d8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1311,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "a42e6acf-fae6-4710-b356-7aa00b3e93f9",
        "cursor": {
          "ref": "ebaab4bf-1b6b-4842-b36e-d043373f60f8",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "f5d783d8-5bab-4893-84ae-63507af3c2dc"
        },
        "item": {
          "id": "a42e6acf-fae6-4710-b356-7aa00b3e93f9",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "4323efdd-dd17-462c-95d1-214286a66fd9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 35,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "546feb1e-f76b-40b2-aad7-1ca8999868c1",
        "cursor": {
          "ref": "0fcab1d5-3700-46bf-b7db-710d4c6b01b3",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a39493b9-e872-4b1a-8359-04de28c1cef2"
        },
        "item": {
          "id": "546feb1e-f76b-40b2-aad7-1ca8999868c1",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "8ce2ab8e-8a66-4ced-87c8-1d8a0cbe1eaa",
          "status": "Not Found",
          "code": 404,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13d3fde4-0ca0-4d7f-b19e-e8884fd168d0",
        "cursor": {
          "ref": "06fd8b2f-967c-4a60-8ea7-59ab4fd01e23",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "09ff44f7-2e49-4b61-830f-daa192972f37"
        },
        "item": {
          "id": "13d3fde4-0ca0-4d7f-b19e-e8884fd168d0",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "45fb25c1-308b-4961-bc78-1a1ff6c52248",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "e48e9985-33e3-465d-8067-8e1de51cf815",
        "cursor": {
          "ref": "e85dc073-e891-4e77-8dba-92d2bc7c20a1",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "fed818d6-10d8-4670-bc21-0a81b3346b80"
        },
        "item": {
          "id": "e48e9985-33e3-465d-8067-8e1de51cf815",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "f534b564-4c23-48fc-987e-6bb87fea1df5",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "e48e9985-33e3-465d-8067-8e1de51cf815",
        "cursor": {
          "ref": "e85dc073-e891-4e77-8dba-92d2bc7c20a1",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "fed818d6-10d8-4670-bc21-0a81b3346b80"
        },
        "item": {
          "id": "e48e9985-33e3-465d-8067-8e1de51cf815",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "f534b564-4c23-48fc-987e-6bb87fea1df5",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "6a37af04-fab3-434a-8546-a03ffa45090c",
        "cursor": {
          "ref": "e960e66a-c6b2-449e-a43e-02cd79d4de8e",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "824f956a-1f13-4949-8d9b-3b6e4058b915"
        },
        "item": {
          "id": "6a37af04-fab3-434a-8546-a03ffa45090c",
          "name": "identifiers"
        },
        "response": {
          "id": "a8c057e1-3ce1-4ac8-928b-35617ecc49cc",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f6e25c7-2159-41a0-87b1-a5c22f14d189",
        "cursor": {
          "ref": "ed673fde-1abf-42ab-81d3-0417762eee9f",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f0e45a30-6261-420d-91e6-2bbf4fd39a94"
        },
        "item": {
          "id": "4f6e25c7-2159-41a0-87b1-a5c22f14d189",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "39088c2c-a59d-4b9a-b427-16175e564d86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f6e25c7-2159-41a0-87b1-a5c22f14d189",
        "cursor": {
          "ref": "ed673fde-1abf-42ab-81d3-0417762eee9f",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f0e45a30-6261-420d-91e6-2bbf4fd39a94"
        },
        "item": {
          "id": "4f6e25c7-2159-41a0-87b1-a5c22f14d189",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "39088c2c-a59d-4b9a-b427-16175e564d86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40e68fac-9fc2-45cd-8af3-8eb264bfd456",
        "cursor": {
          "ref": "2a7ec3c1-78cf-41f5-8e4b-61863677550a",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "350c812c-ed05-4d9c-a512-41e4e3bcf199"
        },
        "item": {
          "id": "40e68fac-9fc2-45cd-8af3-8eb264bfd456",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "9cb8530e-9039-4804-b652-c32115bc5547",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "151af4a1-9c37-4361-a969-bc2c2f8f15a1",
        "cursor": {
          "ref": "92e08760-80c1-45d1-a45a-11292263e3d9",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "0ddf4523-6640-4b0b-809d-93e78543ee25"
        },
        "item": {
          "id": "151af4a1-9c37-4361-a969-bc2c2f8f15a1",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "166842e0-2733-4d76-85ee-1fa3ed8ee010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f4480b7-3e6f-4eea-970c-8ee46da839eb",
        "cursor": {
          "ref": "fe81da20-e69c-4570-a303-916bb772c305",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "53ff4935-5f03-46be-badf-0ca9465a1342"
        },
        "item": {
          "id": "8f4480b7-3e6f-4eea-970c-8ee46da839eb",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "7c7a0f73-6d4a-4b7a-9a5b-adf1ad06a739",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19516cd4-6516-41ef-b585-65f7eb11928b",
        "cursor": {
          "ref": "1354a853-5604-4398-9c07-29e52d2c8e39",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "25904228-3aa1-4afa-ab22-4af2a473f8df"
        },
        "item": {
          "id": "19516cd4-6516-41ef-b585-65f7eb11928b",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "6be6eb54-b9fb-4c52-9135-3c3b01acd4a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1086441b-824e-498b-aef7-33633917a5d6",
        "cursor": {
          "ref": "55b308e2-6bee-42fc-b26c-e6e47d862b1d",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "1055ff3d-6c2d-4f99-b425-70dfc698d95b"
        },
        "item": {
          "id": "1086441b-824e-498b-aef7-33633917a5d6",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "ef6afa10-1787-4257-92fc-ca74c37b95b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "912dee9b-9fc6-4c4b-a90b-13e7f82ad804",
        "cursor": {
          "ref": "66ddc203-89a9-4316-a0f6-00a8e236f77d",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "96507190-bcda-468d-915d-1a90a3dd1bf7"
        },
        "item": {
          "id": "912dee9b-9fc6-4c4b-a90b-13e7f82ad804",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "5d26ad25-3cdd-41c9-95ee-4abfd2daae57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54276902-c97e-46d9-96b6-184cd4d5a5dc",
        "cursor": {
          "ref": "9941629c-eadb-434e-be0d-0fcf0766c3f0",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "811b4696-f3ab-41b6-8780-42a5dee17d98"
        },
        "item": {
          "id": "54276902-c97e-46d9-96b6-184cd4d5a5dc",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "d08f58e0-71bb-45d8-ae5a-30d1e8f58ba0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa207652-3867-4f13-95fb-ede6b77909b9",
        "cursor": {
          "ref": "5cb2dc1c-7e9c-49f5-8b31-cfe9c7a6cd92",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6122fc69-c61e-4186-b945-ae614a6ca91f"
        },
        "item": {
          "id": "fa207652-3867-4f13-95fb-ede6b77909b9",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "805df30b-0819-4a30-965e-486596e61f38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f39fb24d-852b-4119-b470-0dc1ce2a40e0",
        "cursor": {
          "ref": "03af0c0f-ea27-48f6-a065-bd2253ae4502",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "c8e37662-66ee-4035-83f2-f0335e7a0bed"
        },
        "item": {
          "id": "f39fb24d-852b-4119-b470-0dc1ce2a40e0",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "49ca1f28-9079-4887-af2a-648e758b58fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0207bda7-2e8c-4a91-9d11-f84f1342e93b",
        "cursor": {
          "ref": "eb8f77e0-6205-49f8-8ad8-8355a6fe3319",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "3035e6b6-9419-4211-9240-457dcc9915b4"
        },
        "item": {
          "id": "0207bda7-2e8c-4a91-9d11-f84f1342e93b",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "b42fe910-f358-453c-8ef6-046fada93378",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98faac57-783c-4f62-872b-2a132751f2a8",
        "cursor": {
          "ref": "7350b10e-04bf-402e-87c4-a56c1cd2b318",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "3eb77818-faa0-4b6e-8efe-c3319561084f"
        },
        "item": {
          "id": "98faac57-783c-4f62-872b-2a132751f2a8",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "2d1e33c3-0a84-4f06-b6f9-851113442e7c",
          "status": "Created",
          "code": 201,
          "responseTime": 2146,
          "responseSize": 981
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "7e390198-aee7-4cc4-bd76-6f37d48d9ad2",
        "cursor": {
          "ref": "e5245e56-8ab2-497b-91ab-8a86ec50a4df",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "b1b82020-71f4-45c0-b90a-1dcebc48d878"
        },
        "item": {
          "id": "7e390198-aee7-4cc4-bd76-6f37d48d9ad2",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "71e4b3f0-af78-46fd-9852-912317c378a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c00f22b1-582c-447b-814a-9990cf72f490",
        "cursor": {
          "ref": "266ead6f-4cdc-4bda-b7a7-3870d1c3b80f",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "d4be1366-3cbb-447b-abca-191c95f72787"
        },
        "item": {
          "id": "c00f22b1-582c-447b-814a-9990cf72f490",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "f5f54d46-aa22-4536-b7a2-4d64884a60a9",
          "status": "Created",
          "code": 201,
          "responseTime": 9754,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "8b755be7-b1a4-4438-b9ef-5adf7b37ab1a",
        "cursor": {
          "ref": "37b61440-91a2-4122-b0b5-b1ec93280816",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "3d2539e3-9935-48d5-9334-1c621054fd83"
        },
        "item": {
          "id": "8b755be7-b1a4-4438-b9ef-5adf7b37ab1a",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "13db756f-5689-49c9-8bfa-661d1173b377",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a55472d-67d7-4a70-8b43-a679384b9181",
        "cursor": {
          "ref": "fabd73dc-b525-4212-8b00-9593e5cacd8a",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "9ee764fb-b504-4acf-b3ea-03a7f3d2d2d4"
        },
        "item": {
          "id": "4a55472d-67d7-4a70-8b43-a679384b9181",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "b353425a-09ca-497d-a78f-ac0a4370d892",
          "status": "Created",
          "code": 201,
          "responseTime": 7934,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "9282449b-13e0-4c6e-a5b9-dbbe06486540",
        "cursor": {
          "ref": "113987fd-4d3d-43f5-8c13-c6ec33710f4c",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "41c8b81b-87c4-488f-a276-2dfdf18d2503"
        },
        "item": {
          "id": "9282449b-13e0-4c6e-a5b9-dbbe06486540",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "87d9ed0f-cd70-48bf-a87e-7148e55f8f69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fec2087-ec68-4864-b51f-d5c62916d6d2",
        "cursor": {
          "ref": "bc8f74d6-1562-4caf-97cb-aea878aaabbd",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "1e577730-e55e-414f-a2b2-9648a63937bc"
        },
        "item": {
          "id": "9fec2087-ec68-4864-b51f-d5c62916d6d2",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "2679f1b6-03df-4433-afcd-24d01508064e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7c91cc7-03cd-4ab5-ae1b-e75c95152b02",
        "cursor": {
          "ref": "46ac8365-40c7-4f14-ac94-f62c8a700d2a",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "df2d257e-98c7-47ea-810b-eaa5305e9c7e"
        },
        "item": {
          "id": "e7c91cc7-03cd-4ab5-ae1b-e75c95152b02",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "ee045032-2a84-4cec-b80c-b780819ef73f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a20510d7-aab4-481e-8112-7ace0e93b74f",
        "cursor": {
          "ref": "4e2d2a87-4975-45e6-a304-3a659e315e26",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "98153c93-7de6-40ea-ab7e-2e3d08124af3"
        },
        "item": {
          "id": "a20510d7-aab4-481e-8112-7ace0e93b74f",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "e92f8631-6cd3-4347-8a36-d9894c429959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe58994b-2537-430b-899d-a72c912293a6",
        "cursor": {
          "ref": "37bd8119-7d23-46d6-9954-07fb4f0ff223",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "4503e325-e997-4318-87fe-7d04caca5c84"
        },
        "item": {
          "id": "fe58994b-2537-430b-899d-a72c912293a6",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "98e25510-ed55-48fc-a6f6-f369015b8aae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a109faf7-c8bc-4991-a280-9fbcd7a35b4e",
        "cursor": {
          "ref": "9434cf8e-176b-48c8-9371-24c95034d7e6",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "6a42833a-86fa-4c92-9aef-e224ace22d6d"
        },
        "item": {
          "id": "a109faf7-c8bc-4991-a280-9fbcd7a35b4e",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "62fee319-ecde-4a69-ab29-1c0b62ea8f77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a5f49b1-1da4-486f-8f2f-6332a304a021",
        "cursor": {
          "ref": "f4e79f81-43f3-42a7-8653-6cd721a00d50",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "62b6f3df-1eef-470c-94be-126ac2cb5d31"
        },
        "item": {
          "id": "8a5f49b1-1da4-486f-8f2f-6332a304a021",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "6e078898-da6f-42e3-a7d4-a632d3a90436",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f5fee74-f153-4781-9d1f-001d470c8d84",
        "cursor": {
          "ref": "15866434-31f3-4e7f-a46d-f08b11a5b260",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "0eb4ceef-97da-4b2e-be94-e976792d52fa"
        },
        "item": {
          "id": "7f5fee74-f153-4781-9d1f-001d470c8d84",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "2834f634-616d-4bd7-b4af-bd17080192d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87ea783b-4004-45a2-a2a4-e01192aa4870",
        "cursor": {
          "ref": "16c55f18-6645-4712-aa35-2409b00e8e12",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "11760c3c-4c24-478d-9690-1adbc2ab1996"
        },
        "item": {
          "id": "87ea783b-4004-45a2-a2a4-e01192aa4870",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "bd86ed20-79d0-41fa-962e-b35eaa5d908c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3977c0a6-7ba6-4ea9-b39c-e9ca158a6026",
        "cursor": {
          "ref": "20105224-66ed-4b1d-9d69-3d48b9057c67",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "e0417559-fd82-4b55-a170-038ac57ed36e"
        },
        "item": {
          "id": "3977c0a6-7ba6-4ea9-b39c-e9ca158a6026",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "9b2dc789-f732-48d8-9423-91a2dd02d62e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80423115-f84f-43e4-ad9a-6ea5a681c573",
        "cursor": {
          "ref": "ddf24f7b-2162-46c6-9dbc-0856894c31f8",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "08bf2d4d-1b18-4577-a593-0c7eac6824bb"
        },
        "item": {
          "id": "80423115-f84f-43e4-ad9a-6ea5a681c573",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "b3daa64c-21eb-4b69-9f82-605aaef86de1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba373624-df0a-4297-86f6-7b8b98e7ec53",
        "cursor": {
          "ref": "e6fb3e2c-d0ff-4627-b42d-dbb5b6f63596",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "d0cb5224-e398-4024-80cb-c229c4ddc5fd"
        },
        "item": {
          "id": "ba373624-df0a-4297-86f6-7b8b98e7ec53",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "e2c759b9-2ac6-4968-9128-9eee1c365df0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef60e83a-4418-40f0-9acc-3ba79d2b4ce6",
        "cursor": {
          "ref": "45b76962-e2a6-4982-a71a-e880b047dd57",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "44312829-e40d-4b08-8118-5d4ed7685452"
        },
        "item": {
          "id": "ef60e83a-4418-40f0-9acc-3ba79d2b4ce6",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "a678addf-aa68-4870-81c7-84c73ebcb60d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63bba950-dba3-4c80-94bc-f720362f09fc",
        "cursor": {
          "ref": "269b63b6-34b1-437e-8063-65638503ecbb",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "21c78ca3-f1a8-4aba-9f2a-61ee88533ad0"
        },
        "item": {
          "id": "63bba950-dba3-4c80-94bc-f720362f09fc",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "5d89168e-a381-48e0-92e7-d6bfbc7b9978",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f2582cb-e68b-4520-a918-079c272f6df1",
        "cursor": {
          "ref": "7839d0be-b58d-4792-839f-7a692598ab6e",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "8bc361e1-266e-44c2-af60-5645c002d546"
        },
        "item": {
          "id": "5f2582cb-e68b-4520-a918-079c272f6df1",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "4fc96543-9bf9-483b-8d9e-a173c724ed16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aa055e3-920e-408f-933d-1f9157fdb615",
        "cursor": {
          "ref": "7d0c879d-2ea0-42d1-9765-b946ecfb99be",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "c88a7e0b-2753-47d2-8f1a-3d468edaeb59"
        },
        "item": {
          "id": "7aa055e3-920e-408f-933d-1f9157fdb615",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "bc94bbf3-f72f-466a-94c2-b5d26e59f307",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "506a6123-40a1-4e6f-9ed6-ddb915e80570",
        "cursor": {
          "ref": "861b15b4-59b2-49f0-9807-c819127528cb",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "da6d3200-3a6d-46a1-8aad-1fb90609be4d"
        },
        "item": {
          "id": "506a6123-40a1-4e6f-9ed6-ddb915e80570",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "45acbb83-8caf-451a-9843-091fa8492a49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fc2543d-52f7-4e2b-be22-409b73322a61",
        "cursor": {
          "ref": "205e9b00-b378-461e-b716-8892dcf6d566",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "e2b8a553-5362-4d7c-b767-dd6df70e3007"
        },
        "item": {
          "id": "0fc2543d-52f7-4e2b-be22-409b73322a61",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "461a31be-bedf-40f4-9fa5-39663433c30e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21a6c643-7a82-47fe-8a5a-8e3bbe6e187c",
        "cursor": {
          "ref": "3109b8e0-960b-40f9-915b-58d9b5de9906",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "b34a1b95-3acb-43b8-9d08-3619e0e520d0"
        },
        "item": {
          "id": "21a6c643-7a82-47fe-8a5a-8e3bbe6e187c",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "36174ba0-64a7-4d18-98d2-7733b301f6b5",
          "status": "Created",
          "code": 201,
          "responseTime": 4347,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "93193f9e-1d7a-410e-8161-f608a5f20c73",
        "cursor": {
          "ref": "c01e82d6-e952-4728-82f9-c2594828ebf0",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "bc4e0790-4494-48aa-8ff6-75169527837d"
        },
        "item": {
          "id": "93193f9e-1d7a-410e-8161-f608a5f20c73",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "9bb4edb7-241d-4e8d-aef0-af1136d883b6",
          "status": "Created",
          "code": 201,
          "responseTime": 3038,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "2826e5d3-cb5c-46b9-a038-8c25ba5e50d9",
        "cursor": {
          "ref": "8e050932-6089-4437-a75c-4804e2e7491b",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "197e3dbf-4389-4f00-b03c-7d8eb0631d09"
        },
        "item": {
          "id": "2826e5d3-cb5c-46b9-a038-8c25ba5e50d9",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "e40fbd24-bd20-436f-90eb-2ad2bdb21826",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0e56c65-fa34-493d-9060-50b2b9b767ef",
        "cursor": {
          "ref": "631b121f-74ed-4122-aed2-81de080466f4",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "3694d5f0-1080-4c66-9483-ca4982e81dcd"
        },
        "item": {
          "id": "e0e56c65-fa34-493d-9060-50b2b9b767ef",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "d2887f67-fc77-494b-bd0b-e89a4ca2d7b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07462f12-1a58-47fe-b07c-4662ea8721af",
        "cursor": {
          "ref": "b24d5080-e992-4bc1-814a-a06958047aac",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "ea5087c3-fbfb-4291-a119-2bf173844198"
        },
        "item": {
          "id": "07462f12-1a58-47fe-b07c-4662ea8721af",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "836e4def-6938-4d58-9996-7cbe23407665",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ea13f8d-c268-4b4d-81e4-a3cf4c736a59",
        "cursor": {
          "ref": "8b2a1556-341e-4ed5-b64c-a7d341131385",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "de81e277-4237-4f7c-afff-c131cbd84a29"
        },
        "item": {
          "id": "9ea13f8d-c268-4b4d-81e4-a3cf4c736a59",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "a938e7c0-cdb6-4373-bf43-20a14451df20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f062c04a-759f-4a7d-a5e4-1426b19fa1d9",
        "cursor": {
          "ref": "b43e0227-1479-44ea-aa68-41e79f1e92fb",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "4ddd301f-05de-4011-927c-e28ef60005c1"
        },
        "item": {
          "id": "f062c04a-759f-4a7d-a5e4-1426b19fa1d9",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "efd5f0f8-ef47-455d-a468-efde8c0d3201",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "572e2683-9dd1-4742-8906-21e2aa9c5aac",
        "cursor": {
          "ref": "ad5e4bb4-c70e-4171-879e-29dbdebce72e",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "bc57e4df-caf2-4165-8913-61d5ea333f12"
        },
        "item": {
          "id": "572e2683-9dd1-4742-8906-21e2aa9c5aac",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "08250fb6-f0ef-460b-b908-04f79cfbeb7b",
          "status": "Created",
          "code": 201,
          "responseTime": 2676,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "93859c1d-f484-4fa1-a512-88f23bd280c4",
        "cursor": {
          "ref": "3d9e154b-ad73-4bc7-871c-6dca251a7cd0",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "716295f2-1e3e-488a-ba84-8905082f6181"
        },
        "item": {
          "id": "93859c1d-f484-4fa1-a512-88f23bd280c4",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "bf14fee5-2890-4e2c-961f-dff33c6a96b2",
          "status": "Created",
          "code": 201,
          "responseTime": 2220,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "ba191322-8876-4649-b37a-651f9bade594",
        "cursor": {
          "ref": "2f26ff06-fe0f-4b1f-8493-dffb8394c1ca",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "19e9e4fa-48b6-4dae-ab3c-de0a902ffad4"
        },
        "item": {
          "id": "ba191322-8876-4649-b37a-651f9bade594",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "c60cfc51-147b-407d-8fbc-2786e72c5678",
          "status": "Created",
          "code": 201,
          "responseTime": 2489,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "3696a804-e382-4954-81ae-29954b501c1f",
        "cursor": {
          "ref": "49634253-fd8e-45de-a6c4-9383e480f17c",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "bb7c4d90-7118-4f65-b6b2-64db2d034691"
        },
        "item": {
          "id": "3696a804-e382-4954-81ae-29954b501c1f",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "f3edb6fe-10ce-47d1-a1fd-73c073d035f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3859234-bfaa-4801-9242-933c12cd43e0",
        "cursor": {
          "ref": "99050f30-4c42-4978-bdf0-30c75dfdeb20",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "31d9ea0e-17e5-4881-ae09-612d3852da14"
        },
        "item": {
          "id": "e3859234-bfaa-4801-9242-933c12cd43e0",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "a174758e-a791-4bcb-9b04-ed07f6343062",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 138,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfd1bc2b-8bfb-4a40-b02c-e415dc33f0aa",
        "cursor": {
          "ref": "f2b7640a-ba79-4c1a-9970-93b65ccf1c48",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "2142193d-bf8d-451a-9823-34645e26a1ac"
        },
        "item": {
          "id": "dfd1bc2b-8bfb-4a40-b02c-e415dc33f0aa",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "ea791004-b049-484d-9e56-6fc2462802bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52ba7a24-fad2-48c5-97db-e35fd169c556",
        "cursor": {
          "ref": "9a7649de-dca5-45d9-a1a7-1d1582e6bb78",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "317b33c1-3970-41d3-a23c-4676e8c31e5b"
        },
        "item": {
          "id": "52ba7a24-fad2-48c5-97db-e35fd169c556",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "078aa92d-3f62-4e57-8df1-e374f0c867ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7630296-aae1-4615-a069-7894c8af7f68",
        "cursor": {
          "ref": "89960a21-bae8-437a-8fd6-c52fa09e9033",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b2ea112e-3a9c-4b8b-9920-b7dadf3b8f86"
        },
        "item": {
          "id": "e7630296-aae1-4615-a069-7894c8af7f68",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "d33b7485-a8e2-434e-bfdc-fdf2c191431c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eb4f85f-52e3-4993-915c-0889185bb22e",
        "cursor": {
          "ref": "e14f41cb-dda6-4dab-96ca-1f738b68702b",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "b01b5ef2-33f2-4e5f-8220-7272250f6505"
        },
        "item": {
          "id": "1eb4f85f-52e3-4993-915c-0889185bb22e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "cae4d487-9ed3-48d2-919c-3f5680aa0ff9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c383b54-d3c7-4061-aa5e-e7c511acd0c6",
        "cursor": {
          "ref": "9d6d1ce9-9f3c-4046-bb74-63972705cf48",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "9ef95e0f-885b-453d-89db-7f75cc50b315"
        },
        "item": {
          "id": "5c383b54-d3c7-4061-aa5e-e7c511acd0c6",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "917030da-00a1-4476-b255-7bc9a458192f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2784f0d5-916a-436d-8669-d2c08ee7d243",
        "cursor": {
          "ref": "ba6c3ea9-d696-40fe-8f85-8fa3d510416a",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "e8381442-a324-47c9-8c74-d90d85821f24"
        },
        "item": {
          "id": "2784f0d5-916a-436d-8669-d2c08ee7d243",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "b8692036-1241-4dea-aa3b-1417828d0831",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55b7ed23-6e77-42b9-8b2d-a13fbc9fd452",
        "cursor": {
          "ref": "16a450e3-67e9-45a1-8073-00328050681d",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c0402ea8-d59d-47c1-a586-ba89503e55fa"
        },
        "item": {
          "id": "55b7ed23-6e77-42b9-8b2d-a13fbc9fd452",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "5cea195d-6e27-4a61-95cb-683804e25213",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df6d9594-86fe-4f52-b171-f5b0b8d0d2be",
        "cursor": {
          "ref": "2eadc730-5fce-4c40-aa9e-3f4edd81ee7d",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "b2178d8b-3c4d-4863-9aa4-25ee6d863449"
        },
        "item": {
          "id": "df6d9594-86fe-4f52-b171-f5b0b8d0d2be",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "6439612b-c0d3-4e30-aec1-00c515144901",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77b9325c-4bad-4d53-91f9-a8af30657242",
        "cursor": {
          "ref": "6d27aa3a-9080-4e81-8cc0-e1b1dc4443f3",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "cfa88fa6-021b-49c6-b15b-960190150ff6"
        },
        "item": {
          "id": "77b9325c-4bad-4d53-91f9-a8af30657242",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "71dd89de-a128-4d06-96d7-2769cb742710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cac79bb-5801-45cf-a814-5e9d35db76f1",
        "cursor": {
          "ref": "c48ea25b-06d1-4586-9dfd-12493ce36dd6",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "9573e5c4-07c6-4d95-b27b-a9180c12a30c"
        },
        "item": {
          "id": "3cac79bb-5801-45cf-a814-5e9d35db76f1",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "b08c01e3-8087-4481-8305-53ce56bf9233",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9610bfc-d99c-46d6-822b-74128aa9b1bb",
        "cursor": {
          "ref": "bd85ca5d-7e2f-4bdf-bd6f-482065f73fec",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "d149b823-cbe1-4b3a-a8a9-bb6ce28fb2ee"
        },
        "item": {
          "id": "d9610bfc-d99c-46d6-822b-74128aa9b1bb",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "faf0f503-b54e-4b35-876a-949488a0f597",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1afa7a93-6c90-4dca-b9bd-14b09e14dbe7",
        "cursor": {
          "ref": "f2538d60-2c22-4b44-9f98-bb99a9d48363",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "b5322177-a454-4c35-9772-4e30d443402a"
        },
        "item": {
          "id": "1afa7a93-6c90-4dca-b9bd-14b09e14dbe7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "d5db2c9c-f5b7-41a5-bc08-d313644599bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47578984-cf6d-4a17-96be-63d0f1b5bf44",
        "cursor": {
          "ref": "8c03c932-3cc8-4734-a7be-aaefd92cdd1f",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "7bb6f550-a969-4ded-a8c6-8a299787b5ea"
        },
        "item": {
          "id": "47578984-cf6d-4a17-96be-63d0f1b5bf44",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "a44ab5cd-8155-4b3a-b174-0ad444404890",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1a0d610-12e0-419e-9426-9d92914edefe",
        "cursor": {
          "ref": "ccc54c54-683b-49f3-9679-9f1a02a8f52f",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "963eeaf3-9451-4719-9848-02528fe46e84"
        },
        "item": {
          "id": "b1a0d610-12e0-419e-9426-9d92914edefe",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "9526a467-8fee-44b2-9d0d-557f349b058f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88a6c8ee-7626-42bb-b570-df95d5342e43",
        "cursor": {
          "ref": "aa388091-64e2-4a37-9f21-d3f28af1273f",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "39a75083-9fed-470c-9e53-6ed3e2d4172a"
        },
        "item": {
          "id": "88a6c8ee-7626-42bb-b570-df95d5342e43",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "4d790e8c-4e09-46aa-8f93-4b1c8fccf7dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29c29cb5-325c-499c-8836-c2c891ac69a3",
        "cursor": {
          "ref": "392e5e11-88d1-43e3-b488-559ead9d8667",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "2bd69595-cdbc-483c-bf41-3358b34251e5"
        },
        "item": {
          "id": "29c29cb5-325c-499c-8836-c2c891ac69a3",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "a8af75ff-93da-4f78-acb8-16ca73a3dc6d",
          "status": "Created",
          "code": 201,
          "responseTime": 2359,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "e7164be5-0989-4bf3-a65e-83b27d825863",
        "cursor": {
          "ref": "67ce54cd-c3c8-408a-800d-fb0f753b671d",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "b3f6992f-fa70-4df7-8ec1-3c00e685d478"
        },
        "item": {
          "id": "e7164be5-0989-4bf3-a65e-83b27d825863",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "8882aff5-e3c1-4c22-a6fe-7337e720b33e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05c7f773-7f11-4ff7-b065-830e0506e2f4",
        "cursor": {
          "ref": "1506f902-6fd8-47c0-9c32-d7a2a9960e0b",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "63a87c34-a690-4975-b083-d1cf2a8339e1"
        },
        "item": {
          "id": "05c7f773-7f11-4ff7-b065-830e0506e2f4",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "f745f1fb-aa03-4227-a9b4-2932dc396cae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9e06516-908d-4bd5-80a0-a7ff08f278b9",
        "cursor": {
          "ref": "cddd9eaa-7b51-4eec-abdb-94afc153ec2c",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "723a632f-a618-4ed7-a903-6f2a548edfad"
        },
        "item": {
          "id": "d9e06516-908d-4bd5-80a0-a7ff08f278b9",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "ac7c8121-f2a7-48d1-82d1-5b773a724760",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c510cb7-dc39-451d-88fe-4ef52f4ec4e2",
        "cursor": {
          "ref": "025119aa-13b8-41de-9c8c-29c5f8764bf9",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "a1d5b5f5-2d0b-4f49-ad9e-46dc1354afd5"
        },
        "item": {
          "id": "9c510cb7-dc39-451d-88fe-4ef52f4ec4e2",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "552c0f2a-2e7d-4689-942c-47401e940f04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "068c9f01-692e-4d66-a8d7-0c88d6dfad4f",
        "cursor": {
          "ref": "8e8c309c-ce21-44e0-9a6b-d798275d95a8",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "7cc930ac-284d-465c-9662-959066948ba5"
        },
        "item": {
          "id": "068c9f01-692e-4d66-a8d7-0c88d6dfad4f",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "6252feeb-5d45-4f32-8132-b7a2fc382205",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "356a4348-b2b8-4fc6-997f-cc98292cee25",
        "cursor": {
          "ref": "d091f444-64a2-4c04-ac78-57971d7c46e5",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "8239111d-4584-4bb8-a4d8-4e60f2071b1a"
        },
        "item": {
          "id": "356a4348-b2b8-4fc6-997f-cc98292cee25",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "c121a161-68db-4bb7-a133-f46d33ddb976",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68f8a49a-72a9-4765-9ae5-2c0344e210ae",
        "cursor": {
          "ref": "0dc198a3-0d90-400a-a022-655ce905e598",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "fa5dc449-77ec-4ed8-b136-b9ccec91301b"
        },
        "item": {
          "id": "68f8a49a-72a9-4765-9ae5-2c0344e210ae",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "8fe919aa-94cd-4a79-b583-8e0eeeaad594",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d748e080-ba95-45b8-ba0b-e7d59a88cb0e",
        "cursor": {
          "ref": "d76706d6-e80a-4d1a-9506-cfc01e7eb146",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "76c148ef-eb4c-47d7-9d3f-bbba04cbc85a"
        },
        "item": {
          "id": "d748e080-ba95-45b8-ba0b-e7d59a88cb0e",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "9f339c53-ce91-4bfa-b259-d8502054426d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "235b8f99-0940-4e84-80f2-b7f8fdf04c41",
        "cursor": {
          "ref": "25c121eb-a070-458a-ab7e-48fa6c9cafd9",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "59d579ce-27bc-4285-a256-895aa4ea64b3"
        },
        "item": {
          "id": "235b8f99-0940-4e84-80f2-b7f8fdf04c41",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "923fc644-130b-420f-b4d6-e7e2c22f73b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "579304a6-2f6b-41b6-b482-cb58240d0800",
        "cursor": {
          "ref": "25db1c85-9efe-48ac-a408-42d88f9d0439",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "a76a534d-efd7-47e2-9198-c77484c18482"
        },
        "item": {
          "id": "579304a6-2f6b-41b6-b482-cb58240d0800",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "5f2da4ff-4b20-436d-8177-d30fc4d9fdeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 142,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd016f98-b4cd-4a6f-b0c7-6f107eacbb6d",
        "cursor": {
          "ref": "9cd5f434-cf6b-4ef2-908e-857d23a43139",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "33030018-6543-44ef-a713-e34220b7b27f"
        },
        "item": {
          "id": "dd016f98-b4cd-4a6f-b0c7-6f107eacbb6d",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "010a684f-1cfd-4910-8859-ae68c01e9454",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80f38bd0-79dc-4ad2-ac52-0cb5ae54297e",
        "cursor": {
          "ref": "bbbe547c-dc3b-446c-8535-c8042ee03011",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "2a121e16-d0c1-4b36-844a-1d70b57bfcd3"
        },
        "item": {
          "id": "80f38bd0-79dc-4ad2-ac52-0cb5ae54297e",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "658e4f1a-928d-4cd7-8483-6325ec872278",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ff64477-ecec-4962-8a79-b3d197a44f15",
        "cursor": {
          "ref": "d80c2e44-7961-4d20-ba83-2784cd92c6b9",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "8aac13c8-acae-49ce-b480-8a388a88e424"
        },
        "item": {
          "id": "0ff64477-ecec-4962-8a79-b3d197a44f15",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "50c921bb-c0c1-4f12-a17f-c47ac5c31400",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17e94505-de46-450c-91cd-8d40d71cb738",
        "cursor": {
          "ref": "e0ee6ca2-e0e2-46f4-8c64-c4bb969a1f43",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "0d16ed76-5496-4f22-b41c-70942288f762"
        },
        "item": {
          "id": "17e94505-de46-450c-91cd-8d40d71cb738",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "43dc6c7d-ef49-4579-811b-bc9f482b5696",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e4b68e1-ab41-4ba8-a8e9-131503e03d3b",
        "cursor": {
          "ref": "a356b8cf-556a-4989-87a5-cff7d95ed555",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "c66ff879-5420-407a-90da-49ec8540e503"
        },
        "item": {
          "id": "4e4b68e1-ab41-4ba8-a8e9-131503e03d3b",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "e374ab64-b4a8-4026-9e0e-3c6a0026b589",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "114727f2-9fb7-49d9-95a4-0a78471a2418",
        "cursor": {
          "ref": "8567a217-a2bc-4dc2-b575-477e5263f16e",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "6c5295bd-8916-4a9f-aebb-eabde186b2f9"
        },
        "item": {
          "id": "114727f2-9fb7-49d9-95a4-0a78471a2418",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "a00207a8-3366-4c2d-9934-e09646a97649",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "491c294b-24c3-43fa-8237-d7323078f408",
        "cursor": {
          "ref": "b4eeebbf-bd2a-4e80-9d9e-142966289949",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "2fbdfdcc-6e26-4fd7-a7a8-a33ece9fc7f7"
        },
        "item": {
          "id": "491c294b-24c3-43fa-8237-d7323078f408",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "537be961-cf96-4587-ab74-4a482c947304",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11f9bb16-b365-401b-a604-dd07775e152e",
        "cursor": {
          "ref": "4fb2961f-0208-48a3-94eb-a12ec22d98d8",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "70b17c54-a48e-480b-bdbc-bd5e19b2a9a3"
        },
        "item": {
          "id": "11f9bb16-b365-401b-a604-dd07775e152e",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "e2e84f18-a568-409a-8762-4e7ca3730b1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a988e2a1-e5fb-47f3-9bd9-948399f1e724",
        "cursor": {
          "ref": "bbe1016f-71e9-4847-b437-a66090a6ec81",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "99f49fa1-38f7-4082-a9f7-a919d86a91ac"
        },
        "item": {
          "id": "a988e2a1-e5fb-47f3-9bd9-948399f1e724",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "7506a434-5603-4e93-8fa8-0dca822a2142",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3efa7256-3296-4108-86d3-b6e8aab61eea",
        "cursor": {
          "ref": "fd5d7c4d-1334-405a-93f4-a0c9ccd7af10",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "7a4769dd-fd6c-49a4-9d7a-16d19012cd19"
        },
        "item": {
          "id": "3efa7256-3296-4108-86d3-b6e8aab61eea",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "7f2bdf11-e42b-434a-b177-336f74094160",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e20bad7f-2a5d-4789-8e6f-e89168c71188",
        "cursor": {
          "ref": "cc5cd0fd-440c-4a69-8b93-7d6dd2db8788",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "e97f3d4f-e83d-41b2-bd26-9fa094fc7b2e"
        },
        "item": {
          "id": "e20bad7f-2a5d-4789-8e6f-e89168c71188",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "e9cf0604-7aca-44cb-af96-317f30d09c12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e456bd9-c936-4f7a-92db-95ff1d717fd0",
        "cursor": {
          "ref": "772560ab-8659-46d6-9477-4e5c22ed20b9",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "8b7d27fa-7d5f-4f70-b371-fbe70d7f92d5"
        },
        "item": {
          "id": "4e456bd9-c936-4f7a-92db-95ff1d717fd0",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "6189324a-6856-45f4-b853-3dc6193b5c57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5f5b9d0-c514-4871-b783-d01b044c7f76",
        "cursor": {
          "ref": "765543ad-cf28-44e3-bedd-0306d52f1e5f",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "1f27165e-2472-4477-b5b4-6e89edf5077c"
        },
        "item": {
          "id": "f5f5b9d0-c514-4871-b783-d01b044c7f76",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "4201e7c5-4809-4ec6-ae34-a9a4ad44b7e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "367fa3b4-b7dc-4041-a52f-b6e21dfc7cba",
        "cursor": {
          "ref": "23129b8b-76f1-4f5c-adb1-0abf6b1ee066",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "fba73573-1b42-470d-8c32-004bce506b93"
        },
        "item": {
          "id": "367fa3b4-b7dc-4041-a52f-b6e21dfc7cba",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "9c9ec725-2181-4bc9-8b98-f495b73eef75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84021a99-f226-4f5a-8167-9c6d4b555d35",
        "cursor": {
          "ref": "5126d4d4-5318-43c7-b818-dd03529ba5bb",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "e0039e30-afb5-4e3a-a658-15cf1430dd4a"
        },
        "item": {
          "id": "84021a99-f226-4f5a-8167-9c6d4b555d35",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "0d2d80ac-c25d-4b4e-9818-477e6beed151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce71221d-d003-408d-975e-341d16f5d4d0",
        "cursor": {
          "ref": "a014e156-4318-4d0e-953b-300f2f6995a8",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "8184f9e1-0772-43d7-8848-accc20ceabbe"
        },
        "item": {
          "id": "ce71221d-d003-408d-975e-341d16f5d4d0",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "aaa81ffc-42b1-4141-9e30-62305f716218",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bc40914-6649-4ade-9fc5-d44b2e16e207",
        "cursor": {
          "ref": "6e356b0b-a992-4ff6-b092-ff0aa170c927",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "18a71286-3337-408c-85b2-01ffe1af628c"
        },
        "item": {
          "id": "3bc40914-6649-4ade-9fc5-d44b2e16e207",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "7089a67c-7726-48ad-8a6e-144e7a10b1c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd00374c-8aee-4ab3-9297-2f14291ab79a",
        "cursor": {
          "ref": "50b31418-ec1e-4fc1-a5f6-2750911e63be",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "54b0dbcd-c83a-49ae-b553-1a4a6920062d"
        },
        "item": {
          "id": "fd00374c-8aee-4ab3-9297-2f14291ab79a",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "91d5effa-24ce-478e-9930-85dd93942a22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0682f4ef-b8f8-4112-ba23-a3370388a1ec",
        "cursor": {
          "ref": "205f0ff0-2281-4c57-bfa7-c431f94c995f",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "0ea4ffb2-efab-48dc-a31f-cb7eded5c5b5"
        },
        "item": {
          "id": "0682f4ef-b8f8-4112-ba23-a3370388a1ec",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "62508920-c021-43dc-9d47-28c8dcbb6bbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "146b4b05-35c3-42b3-b109-a89593b97565",
        "cursor": {
          "ref": "7463db34-d652-404e-aece-ea33c55bc7b5",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "b238f6bc-bcf6-4a81-bdd3-c7d7cb21e96d"
        },
        "item": {
          "id": "146b4b05-35c3-42b3-b109-a89593b97565",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "51767be5-067f-4a1c-b790-22f75312c291",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96272c98-9e90-406e-a532-75884e8bb15d",
        "cursor": {
          "ref": "fd2c9769-407a-4078-87a7-9d68fb00aa8e",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "fe9fb992-0c00-4520-a559-82b03846e165"
        },
        "item": {
          "id": "96272c98-9e90-406e-a532-75884e8bb15d",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "3e8e3e7b-ef4b-40da-9c29-f790862d75b2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "fe5c5f44-eb1e-4fa4-834a-84d2bb7a43e1",
        "cursor": {
          "ref": "15d74fac-27cd-4edc-9b7c-8fe40352894c",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "d45d23bd-ed23-487d-b9a1-2e5af90692cd"
        },
        "item": {
          "id": "fe5c5f44-eb1e-4fa4-834a-84d2bb7a43e1",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "12c83fd7-d7fa-42b8-b7dd-e008dd94e549",
          "status": "Created",
          "code": 201,
          "responseTime": 3770,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "4c1521e4-8a44-4224-a33f-69b345b638e1",
        "cursor": {
          "ref": "5653a35b-0b6c-42bb-b49f-f4b8f6986f86",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "5113e43b-139f-488b-9fd7-c564e6579f4f"
        },
        "item": {
          "id": "4c1521e4-8a44-4224-a33f-69b345b638e1",
          "name": "credentials_issue"
        },
        "response": {
          "id": "9dcd41c5-e1b4-4e8d-b063-28b38d2f5dbf",
          "status": "Created",
          "code": 201,
          "responseTime": 2941,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d9e4c4c-602f-43be-913b-dbf893490143",
        "cursor": {
          "ref": "734c23e7-6e45-424e-bff0-0a3d744e757e",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "2812d91d-ec79-44aa-abe8-00ee26633737"
        },
        "item": {
          "id": "4d9e4c4c-602f-43be-913b-dbf893490143",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "b3247b6f-79ed-4632-bd63-e7fd67c57bac",
          "status": "Created",
          "code": 201,
          "responseTime": 2357,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9042580-b4de-478f-bf29-7333988a0665",
        "cursor": {
          "ref": "351a04b6-3405-45a8-976f-5dce0ec3a528",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "59c091d5-c408-40fc-8144-f230e3502547"
        },
        "item": {
          "id": "f9042580-b4de-478f-bf29-7333988a0665",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "cfe94e5b-d9a1-45f1-8e3a-b9fa01fd9003",
          "status": "Created",
          "code": 201,
          "responseTime": 2316,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b6c5e58-abed-4263-b08a-af6bc04cb332",
        "cursor": {
          "ref": "aa9a58e3-af27-4d8a-b0da-a5eb725bd00f",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "2b996c01-740b-423d-bc58-715e965883a1"
        },
        "item": {
          "id": "0b6c5e58-abed-4263-b08a-af6bc04cb332",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "5f05b0cf-89a6-4311-9860-18ec1393f133",
          "status": "Created",
          "code": 201,
          "responseTime": 2650,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f89b036-d255-4fae-824b-beb5e963897a",
        "cursor": {
          "ref": "7a0d694d-219a-4f5f-baf9-0002bd501573",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "534bb0f6-3333-4005-9de0-69d3601ad715"
        },
        "item": {
          "id": "3f89b036-d255-4fae-824b-beb5e963897a",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "0bcb5d25-6f00-4fc1-9eac-bceed71a9eb2",
          "status": "Created",
          "code": 201,
          "responseTime": 2320,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-04-27T00:40:16Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-04-27T00:40:16Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "759f0665-0d04-4135-9c83-5df98c5c3dcb",
        "cursor": {
          "ref": "09d2244f-8e6b-4bb4-8850-9618598defd9",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "12cbe164-4929-4a23-8d33-318dda5fea1d"
        },
        "item": {
          "id": "759f0665-0d04-4135-9c83-5df98c5c3dcb",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "be5696b9-9edf-484f-a100-bcfbf2af66e2",
          "status": "Created",
          "code": 201,
          "responseTime": 2533,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e7a7bc7-73f6-447d-83ab-f055083c7b9a",
        "cursor": {
          "ref": "bf31277e-6a93-4372-b1d2-f611acaf528c",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "babac6e0-7ffe-4335-9972-311b64dae381"
        },
        "item": {
          "id": "8e7a7bc7-73f6-447d-83ab-f055083c7b9a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "bb12ab7b-f257-45f8-b871-d7ac0d4d38f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 371,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e7a7bc7-73f6-447d-83ab-f055083c7b9a",
        "cursor": {
          "ref": "bf31277e-6a93-4372-b1d2-f611acaf528c",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "babac6e0-7ffe-4335-9972-311b64dae381"
        },
        "item": {
          "id": "8e7a7bc7-73f6-447d-83ab-f055083c7b9a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "bb12ab7b-f257-45f8-b871-d7ac0d4d38f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 371,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "747a58d6-cc04-49f0-8ae2-cbb098a11312",
        "cursor": {
          "ref": "3da2650a-320f-4143-99af-9767cd8beab0",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "838d7e63-6b4b-4937-a263-44e67eca6740"
        },
        "item": {
          "id": "747a58d6-cc04-49f0-8ae2-cbb098a11312",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e9589868-1932-4296-9ea6-be74f2a12be7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9254308f-6d94-4112-8648-b9ff9421d84f",
        "cursor": {
          "ref": "0049c400-6ddb-4684-8737-237db9432708",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "fb48bc0c-55df-43bc-b48b-2380f3c62fc6"
        },
        "item": {
          "id": "9254308f-6d94-4112-8648-b9ff9421d84f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "5fda151d-3bff-4a91-8127-0979bda75b15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 171,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67be478a-d678-4cf3-8bf6-c1a377697280",
        "cursor": {
          "ref": "120a1828-73d9-4fc0-aa0a-5144f4edd976",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "9045148b-a4c7-4051-8a93-c450f002f4b2"
        },
        "item": {
          "id": "67be478a-d678-4cf3-8bf6-c1a377697280",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "2044a777-de78-4445-a9e8-4e91d0c8bfcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20e8bb96-bf86-4f7f-8ee2-fdd8113c4c86",
        "cursor": {
          "ref": "12403543-7823-4ddf-8051-e832c310e57b",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "210bac69-c6d8-418f-8439-6c4cf4e0b410"
        },
        "item": {
          "id": "20e8bb96-bf86-4f7f-8ee2-fdd8113c4c86",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "ca02efd0-28fd-41b4-a2d5-0c00548d8053",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0e2f1d0-e81e-4b54-a57b-9948ea96d5b3",
        "cursor": {
          "ref": "51a8a4de-67f6-45a7-88fe-321623fd8933",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "e76da461-b6c2-4583-9067-53bda1456daa"
        },
        "item": {
          "id": "e0e2f1d0-e81e-4b54-a57b-9948ea96d5b3",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e15a9775-0fc9-4675-a293-6d4b00fcaf69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "204fbe7a-0195-4003-b367-7e64a625a924",
        "cursor": {
          "ref": "1cac5e69-68da-4efb-9c27-953de6bd5a33",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "f3854c00-800c-4ccd-a4f4-0572eb7cebbd"
        },
        "item": {
          "id": "204fbe7a-0195-4003-b367-7e64a625a924",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "7ee41bcc-e9e9-4906-a86d-aa3d4d5f29d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18ecd6a9-d5d0-4b0d-9c9a-b4140f330499",
        "cursor": {
          "ref": "81eb29db-45b3-46e1-86e0-daf5477f3aaf",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "bf7bdd93-bd2e-485d-8cfb-303ae773021a"
        },
        "item": {
          "id": "18ecd6a9-d5d0-4b0d-9c9a-b4140f330499",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9e1195fa-9563-41c2-8ced-439e7401ae18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b7e0c22-0e10-490a-9b5c-e2db617ed01b",
        "cursor": {
          "ref": "efa0534c-df8a-4ace-81c3-0adb2171ebaa",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "59178df7-46d2-4f6c-be0f-02c8fa5463f2"
        },
        "item": {
          "id": "4b7e0c22-0e10-490a-9b5c-e2db617ed01b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c19a85a5-c92e-4579-b0b8-25dc31c86bfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d3da790-81af-4ba9-a726-861e478d7523",
        "cursor": {
          "ref": "f746d147-a39d-4118-bfe0-05a2a2d3ed8a",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "d8250f5a-5169-4c8a-9f10-52de4633f67b"
        },
        "item": {
          "id": "7d3da790-81af-4ba9-a726-861e478d7523",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "2a3281bd-c0e7-4f60-924c-cbb49f68940b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64ee8083-b691-48cf-b5cd-fb48e1a316ea",
        "cursor": {
          "ref": "ee9efc92-7aba-4dfc-8a00-5aec9b6717ab",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "0f894dbe-46a2-4786-bc6f-95d99116a2c8"
        },
        "item": {
          "id": "64ee8083-b691-48cf-b5cd-fb48e1a316ea",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "3db3ea69-537c-4843-8c5b-1c1b93d63f96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "120d2f2d-bd81-4b48-b12c-4641b8f11a9b",
        "cursor": {
          "ref": "838025dd-f6f9-4c9b-9eb3-c2414ede881a",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "8393d29b-6b50-4f20-a8ae-7c28d5be483e"
        },
        "item": {
          "id": "120d2f2d-bd81-4b48-b12c-4641b8f11a9b",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b35c315f-b758-4792-b8d2-b58c1775bf57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3f44497-a9fe-403c-84d1-a19c9b758a64",
        "cursor": {
          "ref": "d70347bd-58fc-4233-9dc5-e4d85e68ef84",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "a2f2ffb7-e451-41ee-8179-4ad30a895aeb"
        },
        "item": {
          "id": "f3f44497-a9fe-403c-84d1-a19c9b758a64",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "dd26a60e-dea8-48b6-a189-4a98ab1e9e9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74a94f61-6bc3-4143-84f5-a9842c50d112",
        "cursor": {
          "ref": "b03c2aaa-50e9-45d7-9965-51831a7dcd1f",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "26586609-a8c0-4001-914b-318c7f73e3e7"
        },
        "item": {
          "id": "74a94f61-6bc3-4143-84f5-a9842c50d112",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "2313c146-30d8-4a08-9e0c-cf078ef3873f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb6caad9-01c9-4964-89ac-3e8558df9888",
        "cursor": {
          "ref": "3ee1ffab-b470-47c6-8b7f-d1d301a09251",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "98d3ae8c-d1e4-4ba0-862f-90836a580bc9"
        },
        "item": {
          "id": "eb6caad9-01c9-4964-89ac-3e8558df9888",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "a0ba44c1-676c-4bcb-a065-bb54ab648201",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b68f8e3-0507-4830-b9e5-18175fb3b6ae",
        "cursor": {
          "ref": "4a191598-f34e-433e-8beb-330b0fd22ae5",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "699df9e9-c4f1-4800-9414-1a9628fa53f9"
        },
        "item": {
          "id": "1b68f8e3-0507-4830-b9e5-18175fb3b6ae",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "bedfc782-9a78-4142-967b-63cc1ebba03d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "633c11cc-b253-465a-8d02-9953bb34f65f",
        "cursor": {
          "ref": "2edfe881-e814-4601-a25d-cf3ad7ba49ec",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "ace2e3d3-7bfc-49e8-a24b-295768cccab7"
        },
        "item": {
          "id": "633c11cc-b253-465a-8d02-9953bb34f65f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "66ffad7d-7b55-4fc4-9cca-b7fa6b67e62e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fef108f4-8de9-466d-af0a-a0a8525e2079",
        "cursor": {
          "ref": "c5ac5c37-31c7-4783-90d1-7cabb6bd2054",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "4ac7855b-10b5-4351-b298-e5662672d332"
        },
        "item": {
          "id": "fef108f4-8de9-466d-af0a-a0a8525e2079",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "464b3850-0eb1-449b-b9b8-15ca5750cb32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a857c456-95fa-4639-be2a-53b8eeb3985e",
        "cursor": {
          "ref": "4e5ba9f5-d232-4c84-b07f-e943592bf20e",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "e46b8b30-847f-4c2a-af74-58638664d63a"
        },
        "item": {
          "id": "a857c456-95fa-4639-be2a-53b8eeb3985e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "04e60daa-39ac-4ffd-a051-b0824538d492",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3051d074-8f99-46fc-8a61-8d6705d47f0e",
        "cursor": {
          "ref": "1244f659-bdb7-4280-8ac7-4edd1e30ffcc",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "b07b9f8f-a340-4cc7-bd5e-10967d5bce34"
        },
        "item": {
          "id": "3051d074-8f99-46fc-8a61-8d6705d47f0e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "8cef925a-91da-4c12-aa75-6fb19c9d55a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d6efd2e-8d7a-4163-ad5d-8dd22a75402a",
        "cursor": {
          "ref": "fa969ac6-946f-4a8e-a775-25af1ecfd08e",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "0c0036d6-5575-4a2e-b1a8-f1d3b82a0971"
        },
        "item": {
          "id": "1d6efd2e-8d7a-4163-ad5d-8dd22a75402a",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b6c81e9f-bc26-439e-b684-5a55248a0afd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79cef315-7233-42a7-b3a7-f4f5483625ea",
        "cursor": {
          "ref": "76c70918-7b1b-4300-a542-a22ce766c3a1",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "fe8dbfbd-d4e1-46de-949c-b3912160f43e"
        },
        "item": {
          "id": "79cef315-7233-42a7-b3a7-f4f5483625ea",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "dab7bbb6-d577-4a5d-bf05-011019e8f3e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23eeedde-eb0f-4d14-80e7-84b8d2e5b689",
        "cursor": {
          "ref": "e37077d3-4042-469f-a742-ccacdd625875",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "d7f5bad1-f2b5-4292-b789-43e92fc1f2bb"
        },
        "item": {
          "id": "23eeedde-eb0f-4d14-80e7-84b8d2e5b689",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "91e4490e-943d-4122-ba6b-a3dbf441902d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d513185e-a7a6-4e36-9e04-c8ad4682c047",
        "cursor": {
          "ref": "47a47434-3e0e-49c4-a499-1b04eb6cb73e",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "faab3835-b42c-4a0c-9d4c-9a44a6120156"
        },
        "item": {
          "id": "d513185e-a7a6-4e36-9e04-c8ad4682c047",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "9e23ca0b-578e-48f0-9289-9ebaaca7a7de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bdefc2b-2a44-4451-8a94-9ee56bfa2c1e",
        "cursor": {
          "ref": "3c9a2436-843e-46c0-a20e-b1dbde80ad55",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "19b563ed-fb4c-4cde-a070-b82969222147"
        },
        "item": {
          "id": "8bdefc2b-2a44-4451-8a94-9ee56bfa2c1e",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ad8ac38a-86b9-466b-911a-4d5f0848730a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2edca912-6ade-4658-a35f-e358e19b2d7e",
        "cursor": {
          "ref": "48e68ad3-37bc-421a-ba4f-edc8edbcb1bb",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "51f45a46-36aa-407b-8b38-5a7a0f9c5e6c"
        },
        "item": {
          "id": "2edca912-6ade-4658-a35f-e358e19b2d7e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "df14d490-aff0-44fb-9bbe-174a20fd1741",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6023b640-b81b-48f5-aad0-88440e9a3400",
        "cursor": {
          "ref": "04167be8-974a-425e-bc8c-196fb98db36f",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "e38c27b6-0611-4fea-bf80-e102f366899b"
        },
        "item": {
          "id": "6023b640-b81b-48f5-aad0-88440e9a3400",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "cf04893a-57f9-45cf-8adf-26ba7065cbbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8abdfca6-3fa8-4540-a213-76e790556061",
        "cursor": {
          "ref": "ec2c8f17-039e-444e-ba6a-353fbee7c548",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "9893e3d0-657e-42e7-a95d-b02da668eb85"
        },
        "item": {
          "id": "8abdfca6-3fa8-4540-a213-76e790556061",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "5342b674-f583-4a9b-872c-49ab785f38f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88df906f-a542-45be-81be-f74d03715b6c",
        "cursor": {
          "ref": "d34f72c0-1cd7-496c-b930-c3f270a49ca9",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "3cabb88e-5b7a-4514-a2e8-24b0a83ee218"
        },
        "item": {
          "id": "88df906f-a542-45be-81be-f74d03715b6c",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "364ae3fe-7837-43e2-8226-0a8981476e5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5fbae45-6953-4e9f-9dad-20c66227cdf8",
        "cursor": {
          "ref": "fc996ea9-25fb-445b-94f5-17c4dedeb0ab",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "a9927c99-5fff-429a-9857-f3934b4ad016"
        },
        "item": {
          "id": "b5fbae45-6953-4e9f-9dad-20c66227cdf8",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "4e18bea0-fe69-4384-bb2f-23cc606a5d05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eba884a5-4433-4364-a5f8-672264c2c945",
        "cursor": {
          "ref": "f2902010-dba9-4f5f-87c9-0ed4d0ac833d",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "dc4939a3-a991-431e-8f20-a16de6a81335"
        },
        "item": {
          "id": "eba884a5-4433-4364-a5f8-672264c2c945",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "7c311e76-289c-4788-b60a-bbd16a56e0eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56aed88e-d094-4200-8a6a-a97a6d894417",
        "cursor": {
          "ref": "70ec6b7c-d8a9-49b3-afbd-ac3184bfbca3",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "6842e3b3-9578-4852-8ebd-a7919de245d2"
        },
        "item": {
          "id": "56aed88e-d094-4200-8a6a-a97a6d894417",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "9caf508b-d8a5-4e81-9230-6f3a08975f79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81e449f0-15f1-4807-8367-a416fd847bdb",
        "cursor": {
          "ref": "1b96e28e-4fd8-4d6e-b4a5-8b6e772a3d75",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "3cee114b-6960-4082-bf24-6a26418cadb6"
        },
        "item": {
          "id": "81e449f0-15f1-4807-8367-a416fd847bdb",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c33af744-0aba-47ff-a658-0e42dc91eb20",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "d4d7c196-5551-4c3a-bed4-e318adc3c414",
        "cursor": {
          "ref": "2d92dd79-b28a-4d83-a4f7-7324cca9758f",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "96e4f936-bb08-4977-8723-3288be11b355"
        },
        "item": {
          "id": "d4d7c196-5551-4c3a-bed4-e318adc3c414",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "e0963b5c-2de0-4f47-9267-aa9d236b938d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "2c442437-d6b3-4526-82f6-f0eebe978982",
        "cursor": {
          "ref": "6f552fe6-0624-478f-b067-239aa3c7e71b",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "8216b603-320e-4e78-a0c7-19dba327d558"
        },
        "item": {
          "id": "2c442437-d6b3-4526-82f6-f0eebe978982",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "195f31cb-ad72-4d67-9a0f-c3f68dc690ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c442437-d6b3-4526-82f6-f0eebe978982",
        "cursor": {
          "ref": "6f552fe6-0624-478f-b067-239aa3c7e71b",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "8216b603-320e-4e78-a0c7-19dba327d558"
        },
        "item": {
          "id": "2c442437-d6b3-4526-82f6-f0eebe978982",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "195f31cb-ad72-4d67-9a0f-c3f68dc690ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ced72a3-d9d6-4551-8820-0635f7737fad",
        "cursor": {
          "ref": "0af8e32f-8697-4ae5-8959-92cd53c7fd1b",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "367f9c48-68e8-4f86-b923-7471d340eed7"
        },
        "item": {
          "id": "3ced72a3-d9d6-4551-8820-0635f7737fad",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "04eee167-01f4-4238-b38b-39ccf056859a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db2b8754-3700-4020-8aaa-a9654d9d1a4d",
        "cursor": {
          "ref": "754554db-86ab-4870-81c8-5737a2e4c313",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "d3e02a3a-f293-4ad7-8aac-304fe70f9baa"
        },
        "item": {
          "id": "db2b8754-3700-4020-8aaa-a9654d9d1a4d",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "da66dda1-6e60-4504-9173-6228d5092789",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a13f2bde-b069-4aae-aa8f-7c733041490c",
        "cursor": {
          "ref": "c18c3b31-a93c-4c89-9372-009d759ef921",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "274f233c-ed3a-4cc4-8552-373f335c5938"
        },
        "item": {
          "id": "a13f2bde-b069-4aae-aa8f-7c733041490c",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "363d7f84-2836-4a50-8d32-7b2e33964186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bfd815b-bcac-45ef-b26b-66991bafe6bf",
        "cursor": {
          "ref": "5ed7b921-09c4-41a3-ae7e-887d30b40896",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "e6aed246-6532-4c67-8fbc-ec3d0614bd0f"
        },
        "item": {
          "id": "8bfd815b-bcac-45ef-b26b-66991bafe6bf",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "591e2f24-4aa9-4f6f-924b-8be5845b3753",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e26250e-4885-4556-902f-a50f811fed48",
        "cursor": {
          "ref": "8be9b847-bb2b-4307-a5d9-d2023b4bda38",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "70eac35b-7e32-4ac8-8bbf-a29c9510f9c0"
        },
        "item": {
          "id": "3e26250e-4885-4556-902f-a50f811fed48",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "b12a39f3-2ba7-4a63-9503-a7c6c76b4d71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b39b19e0-0639-41e9-ba48-f3f417d8e50f",
        "cursor": {
          "ref": "c3893eb2-633a-4e6c-986a-4c88c1dc983a",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "6468db6b-b6ee-4dae-a9b7-8fbe0d974cf0"
        },
        "item": {
          "id": "b39b19e0-0639-41e9-ba48-f3f417d8e50f",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "1d5bf569-04d6-4ba5-853c-16120ef67bf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "162870e3-7a1c-4139-a6c9-71de8448dd92",
        "cursor": {
          "ref": "34397f88-a2e7-4a66-b2e0-14c0745b8c16",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "f40fed78-b7c5-4635-8eff-376c3b80b665"
        },
        "item": {
          "id": "162870e3-7a1c-4139-a6c9-71de8448dd92",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "dfbab669-3536-4254-bf8e-f3a5e0165b26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50e80348-5eaa-4012-8266-a80d0135ed2e",
        "cursor": {
          "ref": "e80faacd-c164-4a4a-83a1-5909d7c64b75",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "2525e578-2a2c-4530-a3d5-c54514f747c3"
        },
        "item": {
          "id": "50e80348-5eaa-4012-8266-a80d0135ed2e",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "ea5b501a-2858-4d21-9bd8-89d82d211a0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edfd008e-6f27-41a7-a41f-dc8770b25cbb",
        "cursor": {
          "ref": "357fd362-289f-492e-bd69-ad965d02cf4e",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "88147627-1d1d-4174-869e-eafca3a0446c"
        },
        "item": {
          "id": "edfd008e-6f27-41a7-a41f-dc8770b25cbb",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "0208f295-061a-47e4-b4c8-5565f19c6fef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2c3c73e-52ca-4b15-bd25-65df1f38362b",
        "cursor": {
          "ref": "25da0a6f-afec-4b0f-8a47-f21d9f8bd6a1",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "7bcf9b1c-5673-40d2-9498-d51c646b28b3"
        },
        "item": {
          "id": "f2c3c73e-52ca-4b15-bd25-65df1f38362b",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "5051216a-a5d7-477a-abc4-45cfc487577c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e04da9c8-4f68-47e8-b256-e3d21c1f4315",
        "cursor": {
          "ref": "f22ba0a5-1233-42f6-a247-5c5f2f0d9a68",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "18adb724-7a13-4e46-8608-a2c3ed53120b"
        },
        "item": {
          "id": "e04da9c8-4f68-47e8-b256-e3d21c1f4315",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "7ca9b35b-9f9a-4a87-a907-0d8c5e0b9150",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cf73d2b-c0a3-4773-82a5-1f49ecdd9c9f",
        "cursor": {
          "ref": "657a5718-6222-4fb3-9467-1eacdefa31f7",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "a0cc8b4e-9948-4fcd-86d1-19b7fc5e862e"
        },
        "item": {
          "id": "8cf73d2b-c0a3-4773-82a5-1f49ecdd9c9f",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "371fa8a4-ff4c-4172-9076-fb3aa1a9c324",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 247,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de901e4c-9783-488c-a77e-622ad29a4627",
        "cursor": {
          "ref": "82179b10-aaf9-4bd5-af70-37df0027df00",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "9d00f261-6d87-487d-8a72-cce52eb3bcfa"
        },
        "item": {
          "id": "de901e4c-9783-488c-a77e-622ad29a4627",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "d29db998-b49c-488c-8f5a-3bbdab3fff88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a420944-181b-45ac-b1d4-28a74e2fc9e6",
        "cursor": {
          "ref": "2cca9335-1d85-4607-9065-b205fb1d15c8",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "e6422b0d-8ff7-4cff-981c-92e81a04dbd2"
        },
        "item": {
          "id": "9a420944-181b-45ac-b1d4-28a74e2fc9e6",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "aeaa781d-b6ab-4d83-a589-ec7f6329e8ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8be436c4-0dee-4b00-9cd0-c10a837f465b",
        "cursor": {
          "ref": "205786a4-6d8f-4e96-98e1-14518ac84b8c",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "c8ea10f7-172e-41a5-9293-bf9fe5d3a4b4"
        },
        "item": {
          "id": "8be436c4-0dee-4b00-9cd0-c10a837f465b",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "57737235-6020-49f2-a5ce-6788aaef4ace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f16e1a4-84ed-4e1f-a64c-38d8e594861b",
        "cursor": {
          "ref": "363a8e08-6814-48a2-9c5b-4ec12d422230",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "8a9fe97c-8921-4b4a-a3d2-1c5090580bb9"
        },
        "item": {
          "id": "0f16e1a4-84ed-4e1f-a64c-38d8e594861b",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "bf17e5d6-5772-4253-820c-fb39c82bf948",
          "status": "OK",
          "code": 200,
          "responseTime": 595,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "09ee64c1-fa3b-456e-85e4-609c9817becf",
        "cursor": {
          "ref": "24813630-7c1b-498d-9601-fcb3f22aadca",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "14a83fc3-0df9-40e7-b5c3-21c5aa99526d"
        },
        "item": {
          "id": "09ee64c1-fa3b-456e-85e4-609c9817becf",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "6cef0204-0929-4dda-903e-5e13ed844e4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0312e93-014b-43d3-8b47-cd08a20be16c",
        "cursor": {
          "ref": "87f90bf9-4384-411d-9868-da178fbc9208",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "409276a2-080e-441c-9c82-1dbf802b3ffe"
        },
        "item": {
          "id": "e0312e93-014b-43d3-8b47-cd08a20be16c",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "1dfd5acd-7c8b-4983-bce5-30101de3b658",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45ea5593-2f74-459c-a5b1-3db79671e50e",
        "cursor": {
          "ref": "17c1e4d9-dc22-433b-8d6f-e30cf8586ae5",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "308936be-0935-4b4e-8ed9-253aa3bf6fc0"
        },
        "item": {
          "id": "45ea5593-2f74-459c-a5b1-3db79671e50e",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "d8838ac6-278d-41d2-8ca1-070bec24350d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b23428a1-4257-4670-ba3d-7efb288e7448",
        "cursor": {
          "ref": "8234ba0c-7a63-4d03-ad4b-72d50167f74a",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "5dd28c5e-6abf-438a-ac1b-8a313532be52"
        },
        "item": {
          "id": "b23428a1-4257-4670-ba3d-7efb288e7448",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "d16152af-6eb9-4cab-ac65-726833a5a0ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "060e28cb-24f2-412a-927c-6a938619b773",
        "cursor": {
          "ref": "776f33e4-ea59-4774-8e89-65552828098c",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "80b4c644-5cb3-4b20-b154-04fad6c877ed"
        },
        "item": {
          "id": "060e28cb-24f2-412a-927c-6a938619b773",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "82a0d8a3-3aa3-469c-8019-d1c75bbcc3d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08dee860-7636-4577-b49f-90baec9d0134",
        "cursor": {
          "ref": "144716b7-c169-4411-913e-621512b86026",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "b690aed9-36b1-44e0-a29b-568232dabf10"
        },
        "item": {
          "id": "08dee860-7636-4577-b49f-90baec9d0134",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f305d949-7735-4364-8f5f-a6cbd9fcc7b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53e8a887-f438-4c50-a8f9-38823010032c",
        "cursor": {
          "ref": "59584a83-4971-4ae6-9b11-3941af891355",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "19a1b4ee-1b5e-40be-bfc3-6818b2489912"
        },
        "item": {
          "id": "53e8a887-f438-4c50-a8f9-38823010032c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "5fcad673-82db-478b-aa12-cd34d27d1bd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "048c0842-5e7c-416a-a1fa-af009b883cc8",
        "cursor": {
          "ref": "b41832d7-5c79-4cde-8684-0aa7821a832d",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "4f2a4008-d1b7-4d64-8677-3c45acdddc5f"
        },
        "item": {
          "id": "048c0842-5e7c-416a-a1fa-af009b883cc8",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "dc597b44-05f8-4b57-beb1-205b35a7733c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ff22dd5-8562-4c4b-9cb0-22648f724134",
        "cursor": {
          "ref": "867915ed-877a-4aa2-bc78-f2ca1e47c7a9",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "3b45bf0f-1ccf-4633-8576-fc18d2071b64"
        },
        "item": {
          "id": "3ff22dd5-8562-4c4b-9cb0-22648f724134",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "f76af6a1-9a52-4094-8ad4-c2adbb69a50f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68c55b8e-79bb-472b-997a-28f6ff07f801",
        "cursor": {
          "ref": "0ed086c6-4a6a-401d-bc21-6b52ae202c51",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "d07eef98-3088-41a1-935f-14d6b37f4a5b"
        },
        "item": {
          "id": "68c55b8e-79bb-472b-997a-28f6ff07f801",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "150c29ca-707e-46e2-a513-642d2f8e8741",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bba09422-f570-4b97-b090-3184121f7a15",
        "cursor": {
          "ref": "cd3ab4a2-cf82-432c-8568-6bda79e420f6",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "c2095ca9-a775-492f-8f65-29687f76a0dc"
        },
        "item": {
          "id": "bba09422-f570-4b97-b090-3184121f7a15",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "abdf60ca-7b9a-4959-8331-66dca6420ee9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d782ba49-5788-499f-9054-72bb92e2801f",
        "cursor": {
          "ref": "6e20c875-21f5-4d43-9df2-26b4cc0d7ade",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "33ec0498-3f29-4952-8d51-0a0e93d1ae7c"
        },
        "item": {
          "id": "d782ba49-5788-499f-9054-72bb92e2801f",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "052f3899-3503-4938-a1b9-ee4b518c9e7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddbf1b43-4ea6-4958-bb38-cfa421eec85a",
        "cursor": {
          "ref": "20f94a1c-f9fd-432a-94ad-ab09f1d6e1d0",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "1ac37b95-622e-4f7e-8b76-a84b42dcfcc2"
        },
        "item": {
          "id": "ddbf1b43-4ea6-4958-bb38-cfa421eec85a",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "c3af0993-ad6d-4e51-92f7-19f30615ec78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cccad814-30ef-4eeb-857a-b4edb8257f62",
        "cursor": {
          "ref": "1327324c-bccf-49a0-a50d-9de1bf9b44c5",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "069979ac-6627-4d36-896f-a8b8dab02149"
        },
        "item": {
          "id": "cccad814-30ef-4eeb-857a-b4edb8257f62",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "18095b27-4266-48e7-b587-c908181a4844",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c217ba7-bd07-4fc8-88cf-ca35969fa294",
        "cursor": {
          "ref": "dadc196f-7b38-4eb9-8f84-2c6ab926f527",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "3076d0bd-5178-45d0-92cf-ba6a394bb498"
        },
        "item": {
          "id": "7c217ba7-bd07-4fc8-88cf-ca35969fa294",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "c5cd4eb4-8d90-4cc8-951a-4698fe8f667b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dde13136-0d19-440e-bcdc-5b27e5fdf2f1",
        "cursor": {
          "ref": "8a49540a-0ab0-4be8-8387-9440cbf1c678",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "73302643-3cf0-4934-8b9a-9a27a4b08ae9"
        },
        "item": {
          "id": "dde13136-0d19-440e-bcdc-5b27e5fdf2f1",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "aa403ce4-2488-46b3-9230-1544398d43fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd5cdc00-9a85-4eb5-9629-4534e9a4c2fc",
        "cursor": {
          "ref": "0c9ff31b-6c0d-4e5d-b390-da4973caa780",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "13943dd3-6906-4107-860f-a2de019474f3"
        },
        "item": {
          "id": "bd5cdc00-9a85-4eb5-9629-4534e9a4c2fc",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "7533358f-1528-417e-9062-35fb0c3af588",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18db9797-a3f7-4cc5-bc40-fcc21c620e39",
        "cursor": {
          "ref": "36cb3a2a-ff70-4bbb-913d-8cd76f230ea4",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "aacb948a-d73d-4b64-aacd-2d91597e3cec"
        },
        "item": {
          "id": "18db9797-a3f7-4cc5-bc40-fcc21c620e39",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "ae1fd482-d269-4d70-b411-32e246e82a76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e5ca604-f273-434b-a4cc-c4bd14ba1250",
        "cursor": {
          "ref": "579477ae-efc6-4ffc-b99b-46942f644e5c",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "b41cc907-aa53-450a-aa76-e63f19e43a65"
        },
        "item": {
          "id": "3e5ca604-f273-434b-a4cc-c4bd14ba1250",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "43c778e8-4c0b-4cdf-aa27-59d19690e05c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2acf050-f19d-4f40-9bbf-bce3a3c221cc",
        "cursor": {
          "ref": "f8322612-6e7c-4bf0-8be9-abd5a16a285b",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "10164137-0e1f-4658-8061-18f31a1aa53b"
        },
        "item": {
          "id": "f2acf050-f19d-4f40-9bbf-bce3a3c221cc",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "120cdd63-4784-437c-bd3b-67bddea1fdce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa80c44c-6e72-45c6-8fed-fb67cac0ad04",
        "cursor": {
          "ref": "a54f6641-b4ad-4bbf-9fb5-ecaf014cb6be",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "3f6abaf1-a29e-4812-8b28-c0f686161d69"
        },
        "item": {
          "id": "fa80c44c-6e72-45c6-8fed-fb67cac0ad04",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "c6676583-27ec-47ca-9f4e-40968d373410",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b1cadea-3d75-4d73-93eb-62596bad4701",
        "cursor": {
          "ref": "75944b12-f39f-4259-8629-06f3f464f5ed",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "1789822e-30d0-47bd-a01c-c7028d9955a2"
        },
        "item": {
          "id": "3b1cadea-3d75-4d73-93eb-62596bad4701",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "b89000c0-bd10-4b5d-8193-cdfb4b34da23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4325720-d7d9-446c-87b3-ac2e829d3501",
        "cursor": {
          "ref": "a7346909-12cd-43b1-af15-1d462c3a27b7",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "d0297c94-2226-47b3-b5e6-151af3fe29a9"
        },
        "item": {
          "id": "e4325720-d7d9-446c-87b3-ac2e829d3501",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "6fa8b81c-9e1c-4a99-8b9c-20ce8a59ce7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b74d203-f03c-4990-a1ff-1e1c6e99bcd0",
        "cursor": {
          "ref": "16e85823-21ed-4b25-8fd5-292bdf77460d",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "d20cf01d-31fc-4700-b2b1-429c966fe35b"
        },
        "item": {
          "id": "2b74d203-f03c-4990-a1ff-1e1c6e99bcd0",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "8ee4c099-2bc8-45a0-89c6-13b3b476dfaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "292217de-c93d-4fed-ad7b-a0b2f5c1b1b5",
        "cursor": {
          "ref": "e1356586-d3c2-4781-b573-64a5c7f5f009",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "345ba353-8eed-4f18-a56d-dae20aff98a5"
        },
        "item": {
          "id": "292217de-c93d-4fed-ad7b-a0b2f5c1b1b5",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "7976f5b3-fb54-4bfc-acbe-fcd956fa326a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fba72491-683a-4d27-a5cd-b45f7fadc995",
        "cursor": {
          "ref": "172e1c9b-4e5e-4dcb-86b8-d7134d286f34",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "75f8310f-7ab4-4a61-9807-a1d209bb4786"
        },
        "item": {
          "id": "fba72491-683a-4d27-a5cd-b45f7fadc995",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "88536e25-0093-42a7-8c1c-ef0d667b7417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a967c44-1b8a-402f-9d9c-cfee5bf49d47",
        "cursor": {
          "ref": "fccdc1eb-d0da-4640-9190-6df7df8343d9",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "796c593a-a5a7-4dcf-823e-c343856c08b2"
        },
        "item": {
          "id": "1a967c44-1b8a-402f-9d9c-cfee5bf49d47",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "cf502d96-ae79-4595-ba81-dbe05a1bc7f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e45b8b17-5b18-4081-b149-9ff24185eafe",
        "cursor": {
          "ref": "19b90151-e19e-4b83-87c3-e48761b08874",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "3ac36e6f-3fd3-4cd8-a568-19834eaa246c"
        },
        "item": {
          "id": "e45b8b17-5b18-4081-b149-9ff24185eafe",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "8abab988-3ca8-465c-9558-a09832637e22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e43d283b-ffc1-447e-9569-e2f7a11b8141",
        "cursor": {
          "ref": "24c0c8d8-ee19-473f-8f37-2bce91d0bb10",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "52866d97-2fa2-4c01-b78d-abece129c4c5"
        },
        "item": {
          "id": "e43d283b-ffc1-447e-9569-e2f7a11b8141",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "f337d82c-788a-44f2-8296-f21e2b7c8702",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfc206e3-486c-486b-9355-a2920c542b6d",
        "cursor": {
          "ref": "bb8d9ff0-2017-42e6-82bf-0b3c6d9e195f",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "f77d8499-7a31-4f91-852a-87be3be8be9f"
        },
        "item": {
          "id": "bfc206e3-486c-486b-9355-a2920c542b6d",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "08f4af11-f099-4da9-b40f-4e691d2ad199",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66d7df93-e25c-4c61-828f-df9b28c9a7a4",
        "cursor": {
          "ref": "5bd9bbdc-f28c-4595-ab2a-2cab6efafade",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "98fd6188-0503-4a41-bfe0-9d0bb60193fe"
        },
        "item": {
          "id": "66d7df93-e25c-4c61-828f-df9b28c9a7a4",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "154ebf99-d8e9-41b6-8651-48bde7e58124",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "802200a9-2d65-49a5-8aad-f24afc12fc03",
        "cursor": {
          "ref": "6ff5f0a3-3c05-49f7-a578-4677ddc522cf",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "f7c76ee0-2e65-408d-b58e-9aee485f9cd8"
        },
        "item": {
          "id": "802200a9-2d65-49a5-8aad-f24afc12fc03",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "b13b9f8f-b49e-46cf-908e-dbfe60fd69db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba0470b6-ad7e-4160-8594-5dc10626704c",
        "cursor": {
          "ref": "30c94893-677e-4352-8624-36aa56431bf6",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "048dd625-5b33-400b-8fbf-bf16e78ab42b"
        },
        "item": {
          "id": "ba0470b6-ad7e-4160-8594-5dc10626704c",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "c9f447b5-feab-455b-944f-887089cf87a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93ca7f66-6121-40fd-9b69-24767e6d960f",
        "cursor": {
          "ref": "7ec57cab-5ff9-4ab2-86df-5bffe581cebb",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "36face7f-925a-4fe1-ab69-47c1ef05a9d7"
        },
        "item": {
          "id": "93ca7f66-6121-40fd-9b69-24767e6d960f",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "26f3d868-8532-4318-b5ad-a4e41bd1e5ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38083ffc-ed64-45df-8280-4335a5a9c64b",
        "cursor": {
          "ref": "e68193e8-9497-4bff-a19d-44c0072113ff",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "1de8f91d-7247-4387-affd-1b673606187c"
        },
        "item": {
          "id": "38083ffc-ed64-45df-8280-4335a5a9c64b",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "787cb770-c216-4bf3-aea1-4fb1e913ccef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bda651e7-8f58-49a9-85bd-45a0cc718432",
        "cursor": {
          "ref": "e707c8b7-0a5b-40a0-9e7b-eaf2d5c7f800",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "fdc29b97-219b-4628-a15d-a46bd6cb7429"
        },
        "item": {
          "id": "bda651e7-8f58-49a9-85bd-45a0cc718432",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "2a98ed5d-544f-4bba-9455-ff23b1ed29b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b7b0fe9-f793-41a3-881b-93d68d3bfa28",
        "cursor": {
          "ref": "3dec0525-d987-490a-aef3-b7a870ff2ae1",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "4632afef-f709-483f-806a-98bb88443570"
        },
        "item": {
          "id": "4b7b0fe9-f793-41a3-881b-93d68d3bfa28",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "7951e9cb-6689-4c77-8ca0-d060ed1c38ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13c88be6-33d9-4f62-b5d5-a128c1919eaa",
        "cursor": {
          "ref": "834fc65e-5347-48ab-8785-7578b1565731",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "c905d3d6-561f-4d97-93b9-89359424d857"
        },
        "item": {
          "id": "13c88be6-33d9-4f62-b5d5-a128c1919eaa",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "043b25a5-ef64-4b69-8b73-9776cd4be2b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c5cfe6f-61e7-4c1e-875d-37f808731903",
        "cursor": {
          "ref": "26bc3b28-1fd4-4469-beb1-cffc1ddd03b8",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "9139ddd5-ca63-4ef6-94f4-504d34c8ab2c"
        },
        "item": {
          "id": "2c5cfe6f-61e7-4c1e-875d-37f808731903",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "e64753b5-8112-451e-a8d5-858e33b9d82b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0aa6843-dfb1-4568-bcaf-3111cbb09c8a",
        "cursor": {
          "ref": "9cea338d-1ea1-489e-be60-67a60b24a6d3",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "7de7c2d0-76b6-461a-888c-c6443d4bc4cd"
        },
        "item": {
          "id": "f0aa6843-dfb1-4568-bcaf-3111cbb09c8a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "b6d2562b-99c0-4cf2-922f-185e18a5ed32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b57adcc-2924-4c6e-9c9a-b44bd0747261",
        "cursor": {
          "ref": "88a711ab-c59b-46ae-9690-ff95df28c924",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "bea88c09-68e8-4ca9-adbd-9a7d1eb85126"
        },
        "item": {
          "id": "6b57adcc-2924-4c6e-9c9a-b44bd0747261",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "f2087f4f-0269-4901-b6aa-79e86c4e9756",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67a18b37-7f80-42bb-9dee-3b71cfe24108",
        "cursor": {
          "ref": "edb45d29-b7b8-4d4c-9241-555d061e6839",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "6ca6bfd8-5f7a-4407-94a9-0a92cacc6e0b"
        },
        "item": {
          "id": "67a18b37-7f80-42bb-9dee-3b71cfe24108",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "1ca7eb90-3123-43a6-b8c2-fb1095e7773a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5395f6c9-6b14-43ed-963e-79ad794f6625",
        "cursor": {
          "ref": "6a6b222a-8913-4971-808b-4946d979870b",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "8faf6563-a623-4271-aece-e8b0c2e9301f"
        },
        "item": {
          "id": "5395f6c9-6b14-43ed-963e-79ad794f6625",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "ddff8df6-494f-4daf-95c1-a2331e4cdd90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57cd544d-d232-4fdd-8319-3ce59f298388",
        "cursor": {
          "ref": "dcfb7814-f0ae-47d3-8271-3f3a07c18266",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "e29d3eb4-f87d-4f05-867f-0d531501aa3e"
        },
        "item": {
          "id": "57cd544d-d232-4fdd-8319-3ce59f298388",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "1fdf9976-dd15-4b77-8b32-41de8410da17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ea0dc03-bd63-40d7-9dd9-4042893330e8",
        "cursor": {
          "ref": "a9fc142c-b50b-4b90-ba30-743e4d02a4bd",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "66dd89a7-f226-490c-8581-24dcd3ad64b8"
        },
        "item": {
          "id": "8ea0dc03-bd63-40d7-9dd9-4042893330e8",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "2edc55a2-7db6-4f6b-a054-543c3994abd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14dd401c-114d-406c-9fcd-911cc66f520c",
        "cursor": {
          "ref": "c7b2d6c4-f246-4048-97a4-32f1310aa371",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "aa977889-0d66-4c9d-9099-436a75701bb8"
        },
        "item": {
          "id": "14dd401c-114d-406c-9fcd-911cc66f520c",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "45bf0f9e-6895-47f4-8cd6-a3b7d1249655",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41549d0d-89d6-4547-ace6-5380c00d2903",
        "cursor": {
          "ref": "2ab1205f-9767-4e95-9a7c-22daf64f51b3",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "f58925d6-ea20-473e-89ba-5e21ce494827"
        },
        "item": {
          "id": "41549d0d-89d6-4547-ace6-5380c00d2903",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "7206a206-a9aa-47bf-8a0e-49427ef10f97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b8ee4ab-8b9c-46cc-ae00-86e216041665",
        "cursor": {
          "ref": "5e7d9ee6-d102-45f7-b1fa-a9b838443ce3",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "e4624cc1-0163-4199-925e-91b294ee75e6"
        },
        "item": {
          "id": "8b8ee4ab-8b9c-46cc-ae00-86e216041665",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "713669f0-abb9-4b1d-9dd1-b9ba8ba6b50e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ea15140-deee-4960-9065-df299e0417e5",
        "cursor": {
          "ref": "f2bb7b26-ed77-486c-b0d9-ab220441d42b",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "775c4083-3a6c-4e0f-8469-a5a0df0aa7f9"
        },
        "item": {
          "id": "5ea15140-deee-4960-9065-df299e0417e5",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "4fe88166-698c-43f3-8b2b-90e8dbcb3cf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb17b4a8-6c4c-4576-8cff-3f73c827a479",
        "cursor": {
          "ref": "b367123c-6efd-40a5-b1a4-89d9233995ea",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "2a5bbfbe-64fe-4429-af20-93024e8a5671"
        },
        "item": {
          "id": "cb17b4a8-6c4c-4576-8cff-3f73c827a479",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "e07df7df-11ea-4062-bc58-fcded3d203b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a82fd0b6-328b-4a62-b42f-2838758cc4fd",
        "cursor": {
          "ref": "3c201293-b458-457f-af2f-7c52194c9ffa",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "88d27ca3-8a42-4ddf-b392-4ff4068743c0"
        },
        "item": {
          "id": "a82fd0b6-328b-4a62-b42f-2838758cc4fd",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "8b0f79e3-00fa-4688-8582-b0b5dc6bfbc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61ae8b77-bcd7-422b-8cf6-06706d341aed",
        "cursor": {
          "ref": "97752752-dd20-473c-b426-2389b45c553c",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "9b999465-4b3e-4f85-97c6-a7ed25eaf150"
        },
        "item": {
          "id": "61ae8b77-bcd7-422b-8cf6-06706d341aed",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "6f4318b9-f821-40b6-8b22-8c375abd9989",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3c4824d-551f-4244-95a9-d4f831797f85",
        "cursor": {
          "ref": "7aeda494-c6e8-49b0-a3dc-7fb4bbe3e470",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "d3010a26-b001-42aa-8ead-c3d58e7cf48b"
        },
        "item": {
          "id": "f3c4824d-551f-4244-95a9-d4f831797f85",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "4550eca5-c62e-4961-8969-959e8513562f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "809c25fc-dad5-4be5-8bf3-7c39509558cb",
        "cursor": {
          "ref": "16882f80-d96e-460b-885c-622453a2be78",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "45bda50e-cf4a-4865-a034-09c1e132d623"
        },
        "item": {
          "id": "809c25fc-dad5-4be5-8bf3-7c39509558cb",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "b4e0c3a9-6545-47e1-a334-00049d77cc3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56a4a213-e310-4eeb-aa34-16dcf2961634",
        "cursor": {
          "ref": "c222f137-9dcf-4c26-8cf4-ac04da6f7318",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "e8763afc-7c19-4e5b-85aa-1148bea25e25"
        },
        "item": {
          "id": "56a4a213-e310-4eeb-aa34-16dcf2961634",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "3b4ae84c-b381-47c7-9cc0-490c79b64ed8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9799789d-d645-4998-80c0-826e390c11c6",
        "cursor": {
          "ref": "4b65a2a4-ee0e-4370-b9d6-b15b2aadfd9c",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "00a36017-0f79-4471-a619-8d68f28d762c"
        },
        "item": {
          "id": "9799789d-d645-4998-80c0-826e390c11c6",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "4e3d6b86-b739-4f83-ad9d-4c1b05daf38d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f52100f4-d3e8-4504-8adf-74d33d2394f8",
        "cursor": {
          "ref": "7ac45f6b-d320-4cd9-8de7-b8504a1d50e6",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "5431dff3-efd4-425e-bb39-0ac5baec2cd9"
        },
        "item": {
          "id": "f52100f4-d3e8-4504-8adf-74d33d2394f8",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "bf311df0-28af-43f1-b050-c04f6869b396",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "330f6d89-c9f3-4314-a9b9-a263ca38b42c",
        "cursor": {
          "ref": "9970d0cb-78b7-4f92-9056-9e2cd8c269e7",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "7625424b-584d-4a29-8c05-713d4ab94f51"
        },
        "item": {
          "id": "330f6d89-c9f3-4314-a9b9-a263ca38b42c",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "c1c37997-bfa8-4cb3-b131-87b50d4669e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "921bb9b4-ab19-4e21-a8d3-5c9245ce1ee9",
        "cursor": {
          "ref": "c74721f9-745a-4e72-98c7-4b7e5962bdad",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "cb4f0ff7-1047-4801-85bf-8067b2f2e78a"
        },
        "item": {
          "id": "921bb9b4-ab19-4e21-a8d3-5c9245ce1ee9",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "836061c6-2769-4088-a8e3-93b553789360",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "777c5066-e6e9-403e-815e-0fc7a8ac6309",
        "cursor": {
          "ref": "1b9233e3-25cc-4ab6-9d86-d2ea4fbead85",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "8e746c2f-9438-4d6e-89ef-4d734f9c1947"
        },
        "item": {
          "id": "777c5066-e6e9-403e-815e-0fc7a8ac6309",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "46e9da95-52ae-4faf-96b0-7bf46360c4a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74320249-26c1-4548-aaf4-1a9ff830ba51",
        "cursor": {
          "ref": "0fcb5f0b-92ed-4012-8b7c-18f613335f68",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "38fbad26-96ab-4d38-8536-847c0e039d81"
        },
        "item": {
          "id": "74320249-26c1-4548-aaf4-1a9ff830ba51",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "025fce9f-217b-473f-a261-fe3041362988",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "068ce44c-3f03-46dc-a2ee-90dfc2008b75",
        "cursor": {
          "ref": "000670a3-4889-4238-98c9-0ff82d049c20",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "bd11b614-b3f8-476f-ba89-3751079e81ed"
        },
        "item": {
          "id": "068ce44c-3f03-46dc-a2ee-90dfc2008b75",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "defa7d82-92a6-4aed-8968-9c3bbbf15b35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85928fe4-b8cd-4a05-9cfd-da3168e4006b",
        "cursor": {
          "ref": "15347ede-f5b8-403b-8fc7-45cf4ec101db",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "10e153a2-da6e-4c73-99bd-c2b54bbb8f40"
        },
        "item": {
          "id": "85928fe4-b8cd-4a05-9cfd-da3168e4006b",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "60f72f7a-e0f3-4a8e-b782-2573955976c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "406ea8d8-d6de-4d56-9208-aef8fc380f7e",
        "cursor": {
          "ref": "5d68a9a6-cefe-4976-829d-ef6594a71daa",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "251d3ad3-2a0f-453b-834f-7bc3d78bf60c"
        },
        "item": {
          "id": "406ea8d8-d6de-4d56-9208-aef8fc380f7e",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "5ed06280-147c-4090-af66-2661acd9c605",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a44e7eb-d017-4bfb-8396-b4883cb6d272",
        "cursor": {
          "ref": "c7170cc7-7923-4322-a24e-b6dbd9f954d3",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "2ec991c1-c7c0-4ef3-911c-843bffe7fc2c"
        },
        "item": {
          "id": "1a44e7eb-d017-4bfb-8396-b4883cb6d272",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "4237ad39-b63e-4047-a835-2d7f1c07c153",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1a5df50-0d80-4d58-aa0c-af2d4bb80d80",
        "cursor": {
          "ref": "415c70b5-f065-4a05-8c02-e4e3accf2495",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "e1eef7ff-3329-4f1b-b12c-fd1759dd26fe"
        },
        "item": {
          "id": "e1a5df50-0d80-4d58-aa0c-af2d4bb80d80",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "2795d35c-b7b6-46d3-99ed-a0dfcb24cee9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74dd1242-9207-4218-84e3-2bed3853fc59",
        "cursor": {
          "ref": "e1a3a557-6144-4554-9263-581b36e013cb",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "e2ffcac2-b57f-454b-9fd2-309710a174c5"
        },
        "item": {
          "id": "74dd1242-9207-4218-84e3-2bed3853fc59",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "44dc0b26-59a5-4288-8171-331fa94670c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "689934c1-77fb-4b8e-af34-f685e5ea22c6",
        "cursor": {
          "ref": "0ca66e36-1385-41b9-8f5f-adbf0f94fed6",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "1e09f88a-85f7-4a70-86a7-3fa809b913e9"
        },
        "item": {
          "id": "689934c1-77fb-4b8e-af34-f685e5ea22c6",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "aaf7b488-12c1-4fdc-8b0b-e23286693b3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6bbea63-50b8-40b6-ac53-42c853e7bc6e",
        "cursor": {
          "ref": "0cad9aac-5b10-4289-b310-0170f62018bb",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "234fc984-6d65-4ed0-b8e4-1aacfcc335cf"
        },
        "item": {
          "id": "e6bbea63-50b8-40b6-ac53-42c853e7bc6e",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "bf215e48-0bfe-46a8-8519-4edaecc5bdc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b515ae7-068c-4983-be0e-cec9b401c724",
        "cursor": {
          "ref": "15ebd99a-ae4c-4f84-81a7-7b3e5920ccfa",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "76ca043d-8de5-46b3-a180-68d65392f05c"
        },
        "item": {
          "id": "0b515ae7-068c-4983-be0e-cec9b401c724",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "094d4a00-b00c-459b-9cc0-4657c83cf63b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf41cbdc-b723-480a-ab5a-8fb877268821",
        "cursor": {
          "ref": "9546b638-f36c-40f4-b348-adbccd9a4e71",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "e7e75561-421d-470e-8cd0-358325e4692a"
        },
        "item": {
          "id": "bf41cbdc-b723-480a-ab5a-8fb877268821",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "fcb40c0c-3f16-4d1e-8f3a-74710590cf22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "295eec92-15c1-48ea-a955-7799f42d18bd",
        "cursor": {
          "ref": "e1d5b735-45f9-4b22-9968-78a32021f6b2",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "6fcff80c-cdb7-4036-8731-c7f9839c9526"
        },
        "item": {
          "id": "295eec92-15c1-48ea-a955-7799f42d18bd",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "a86758bd-bad6-47dd-9b05-cb2f247438fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "968c0a0b-e907-4735-9b8e-5913f53757a1",
        "cursor": {
          "ref": "235e0b21-ede6-411a-be8c-f625db25d503",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "ad8e7ef5-b3ed-4f88-867c-e892a496bc26"
        },
        "item": {
          "id": "968c0a0b-e907-4735-9b8e-5913f53757a1",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "acd81f63-944a-477f-b610-c569b67517fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd2c8c93-dba0-4f8c-88dd-466be9acc2ea",
        "cursor": {
          "ref": "ee7b92c8-04bf-4951-a796-173a39845935",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "5d644b5f-e626-4252-8d42-677e5230518f"
        },
        "item": {
          "id": "dd2c8c93-dba0-4f8c-88dd-466be9acc2ea",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "5ea34c7c-1164-49ee-a944-a6a19158f539",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcb6b1ca-0f61-4e67-ad38-4476d4925cfd",
        "cursor": {
          "ref": "fe388198-9e25-4239-9934-6242bb9669df",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "19500bba-0633-464b-8ac1-b62af1475f57"
        },
        "item": {
          "id": "fcb6b1ca-0f61-4e67-ad38-4476d4925cfd",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "cfaa11b7-d1ea-47e8-b3c8-7230c1785147",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33691246-d9c7-49b8-bf75-c368579347f6",
        "cursor": {
          "ref": "05cf6653-a930-48cf-88b5-d3ddc1dba908",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "3bd263f7-8d92-4d3b-97b1-98c257cd50f3"
        },
        "item": {
          "id": "33691246-d9c7-49b8-bf75-c368579347f6",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "7354cd32-7320-492e-8de5-cfcbfbc88228",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30d42c1c-3cdd-4555-8aec-ec3981f1b467",
        "cursor": {
          "ref": "f8d85bfb-b1c9-464d-98cc-a51c72786d07",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "351773f8-0de1-4649-918d-0bb48bb6a05d"
        },
        "item": {
          "id": "30d42c1c-3cdd-4555-8aec-ec3981f1b467",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "0702b906-d006-41f8-b8ef-7f6940a2752a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31de0471-1215-46df-a4ad-4f7e0ecd2766",
        "cursor": {
          "ref": "b0aab44a-6468-43ac-8df8-4c39ef7be010",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "9db41e8b-c0d0-407c-a9bb-ee202f87ac38"
        },
        "item": {
          "id": "31de0471-1215-46df-a4ad-4f7e0ecd2766",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "60526078-d53f-4005-af60-5d31dff9af85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d6407b4-ffe6-4e3d-b1f0-f6103ae6d224",
        "cursor": {
          "ref": "38264a47-bb7e-4009-8d6c-591e36c90e9c",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "f916bc1b-e12e-4947-89ba-92acf0a5ac2a"
        },
        "item": {
          "id": "4d6407b4-ffe6-4e3d-b1f0-f6103ae6d224",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "916417b5-59b9-478b-90d8-4c0b9589990a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b2e0df4-16b7-463d-95e7-6424aefaf32b",
        "cursor": {
          "ref": "6d9be9e3-362f-4558-8ad6-71ee3770df56",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "5ead101b-470f-4e3a-8931-839d580127cf"
        },
        "item": {
          "id": "1b2e0df4-16b7-463d-95e7-6424aefaf32b",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "b9cdd40c-6fc8-49de-8db7-057a30498d8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13eb2c7d-daa7-425e-9538-a7ab228a4f27",
        "cursor": {
          "ref": "d4979859-9e2d-46d1-a73d-4fc2f245dd14",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "754d4284-0d22-4f86-84a2-053d110b6922"
        },
        "item": {
          "id": "13eb2c7d-daa7-425e-9538-a7ab228a4f27",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "24e454f0-0ce5-4b4c-843d-ab040d7f6d3b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "0e3af210-f4d7-431b-95fd-e7048230aa46",
        "cursor": {
          "ref": "ad14b983-31fe-4ff4-ab8f-e4a8bfa47add",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "a3b33708-5291-4bac-8f70-cce467fb060c"
        },
        "item": {
          "id": "0e3af210-f4d7-431b-95fd-e7048230aa46",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "b8917ba7-1bb3-4e7a-beaf-f53ba7e52565",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "03e80943-c5e6-42af-bd60-2e0a2a4ff94e",
        "cursor": {
          "ref": "440667be-07ed-49e2-86f0-39b48bd76c32",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "b53d1c8d-436e-4657-8bc1-f2d3727f6519"
        },
        "item": {
          "id": "03e80943-c5e6-42af-bd60-2e0a2a4ff94e",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "5bcd030d-1f89-4dc7-b8c4-552d1d120d75",
          "status": "OK",
          "code": 200,
          "responseTime": 182,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fc4d31e-faa1-410f-b86c-26940ee05b08",
        "cursor": {
          "ref": "394182ac-41fe-4e66-a49d-7c745b9e2791",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "54f5a455-913f-4155-83ff-9e0ad5805dfa"
        },
        "item": {
          "id": "9fc4d31e-faa1-410f-b86c-26940ee05b08",
          "name": "credentials_verify"
        },
        "response": {
          "id": "18dfaaa5-e420-43f5-b310-79949dae0ad4",
          "status": "OK",
          "code": 200,
          "responseTime": 2000,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e22b4d3-e048-44e7-95f8-cf4f83b67880",
        "cursor": {
          "ref": "1a0f479e-d8d9-465f-ab3b-31bc777889f4",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "e61c5f75-5190-4b24-99d3-10fc65ef42fc"
        },
        "item": {
          "id": "2e22b4d3-e048-44e7-95f8-cf4f83b67880",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "0d3273e2-6dab-4c72-8b2c-4a8e58b12bc8",
          "status": "OK",
          "code": 200,
          "responseTime": 3242,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "044e7a6a-54ee-4228-b18f-8475d8fe92d4",
        "cursor": {
          "ref": "24a6ce20-b319-4fb7-bcf4-74483e0d3cc2",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "3f7b4ae3-474f-4c3b-a95c-91fa7d104233"
        },
        "item": {
          "id": "044e7a6a-54ee-4228-b18f-8475d8fe92d4",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "db103fea-182b-4f3c-9a38-35dddd4860c2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "044e7a6a-54ee-4228-b18f-8475d8fe92d4",
        "cursor": {
          "ref": "24a6ce20-b319-4fb7-bcf4-74483e0d3cc2",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "3f7b4ae3-474f-4c3b-a95c-91fa7d104233"
        },
        "item": {
          "id": "044e7a6a-54ee-4228-b18f-8475d8fe92d4",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "db103fea-182b-4f3c-9a38-35dddd4860c2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "044e7a6a-54ee-4228-b18f-8475d8fe92d4",
        "cursor": {
          "ref": "24a6ce20-b319-4fb7-bcf4-74483e0d3cc2",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "3f7b4ae3-474f-4c3b-a95c-91fa7d104233"
        },
        "item": {
          "id": "044e7a6a-54ee-4228-b18f-8475d8fe92d4",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "db103fea-182b-4f3c-9a38-35dddd4860c2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "64a0b854-1294-487b-93c4-cc26c5501eba",
        "cursor": {
          "ref": "3b2ad7bf-630c-4da6-82b1-6b658b0d4b17",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "2a0941a8-c73b-4541-ad4a-8951fa6f9a2d"
        },
        "item": {
          "id": "64a0b854-1294-487b-93c4-cc26c5501eba",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "5191c91c-f67c-4675-82d2-113e083eebd9",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "8a9a6b0a-e399-4bae-9a1d-4022f3f185d0",
        "cursor": {
          "ref": "784c1afb-0c1a-4352-a3db-aa91c2e9f531",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "9bacb2b1-878a-46cc-8cd5-2eabad534c8a"
        },
        "item": {
          "id": "8a9a6b0a-e399-4bae-9a1d-4022f3f185d0",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "0d9c27b6-714e-4897-b77b-27b6e8be5cbd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "8a9a6b0a-e399-4bae-9a1d-4022f3f185d0",
        "cursor": {
          "ref": "784c1afb-0c1a-4352-a3db-aa91c2e9f531",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "9bacb2b1-878a-46cc-8cd5-2eabad534c8a"
        },
        "item": {
          "id": "8a9a6b0a-e399-4bae-9a1d-4022f3f185d0",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "0d9c27b6-714e-4897-b77b-27b6e8be5cbd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "617a98a7-5f06-4755-b523-31315d347766",
        "cursor": {
          "ref": "a22a9007-d239-4eb0-944f-8ab318146748",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "cf1b0735-8211-4bda-b834-53f40c741310"
        },
        "item": {
          "id": "617a98a7-5f06-4755-b523-31315d347766",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "f4eb2527-c7a2-49da-bc3e-cf1186a233c3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 522,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "e048d4df-6fa4-4b58-b92c-df9de85b6c63",
        "cursor": {
          "ref": "4ca40225-a09e-4db5-bbab-fc004792e58e",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "ccd28e9c-f09a-4252-b428-6af4271e2fce"
        },
        "item": {
          "id": "e048d4df-6fa4-4b58-b92c-df9de85b6c63",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "f579af17-128a-4fc5-9009-57dd45ba2937",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "e048d4df-6fa4-4b58-b92c-df9de85b6c63",
        "cursor": {
          "ref": "4ca40225-a09e-4db5-bbab-fc004792e58e",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "ccd28e9c-f09a-4252-b428-6af4271e2fce"
        },
        "item": {
          "id": "e048d4df-6fa4-4b58-b92c-df9de85b6c63",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "f579af17-128a-4fc5-9009-57dd45ba2937",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "796e3666-e352-457c-b72c-fbbb7a413004",
        "cursor": {
          "ref": "1dce1e1d-50bc-49e6-9b62-55d441a56988",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "b49e0b84-6f42-4e7f-ab8d-ea32f2f00263"
        },
        "item": {
          "id": "796e3666-e352-457c-b72c-fbbb7a413004",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "8a70bd09-1a1d-42ae-9f50-c35a0fb2a6df",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 133,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}