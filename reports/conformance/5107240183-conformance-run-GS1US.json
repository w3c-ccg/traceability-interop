{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "7da6904b-481f-4322-a42d-42b3053f9c5e",
        "name": "Clear Cache",
        "item": [
          {
            "id": "d670d522-fc4b-4d50-995e-1ee00b5c2fdc",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b7bb100f-4a4a-4568-9736-dc5c7bb43822",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "393841cc-f29b-4d66-a82c-9e506006e890"
                }
              }
            ]
          },
          {
            "id": "de6067e2-3657-4b83-a239-2b99925a80fe",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9d673c9b-674d-433d-b7e9-359a9a09524a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d47eb875-5068-4073-83c6-1871c2075dc0"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b17e3012-2e7e-4f6d-8ebb-ab376e11b07e",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "e747f258-3b9a-429e-822b-c3c3eecdee21",
            "name": "Positive Testing",
            "item": [
              {
                "id": "48a46d16-dcf2-4329-8a73-61eedaa27dff",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "99ca17df-9885-4fd9-ad5f-0ffa45485f38",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1cd920cf-3d30-476f-93ef-18b55bf3321a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8f6f92b4-1eae-4829-b441-75d941e5d56c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5eea7255-806b-4051-b09d-d0b216554eed"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "72a8bc20-8ef3-4166-bc7d-68982a2e0577",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1911621e-f211-4652-92b3-e977ee298b81"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "73ee9ce5-af87-469b-848e-28313c8fdcbf",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "355a036e-d7a8-4bb7-ba04-2803c85683af"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dbe64e3d-b015-432a-ae22-ddc9303b7089",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3c1741a8-a272-48e9-afdc-17b1f40248b3"
            }
          }
        ]
      },
      {
        "id": "6af11a2b-6a49-483d-8303-04d44ea3d040",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "ad795c84-1a9d-4b75-b14b-c4b8a5fa9c61",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4905a906-b194-4926-8d9b-91b5f9c31937",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a5288f6d-b423-4227-99ec-560e0ec43e65",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f74ce81e-caff-4461-ac49-e48e4d846dd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6119a726-3be4-44da-8f01-0dec2255f36b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef858f33-5ee9-4877-99ea-f1f8b85cccc2",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a849a48-3199-47b0-ba83-99a6c73e05bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ef6c95f1-f4d4-4a07-9011-d5f742664b75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5b8bc64-0ff6-4e14-800d-e0092f916cdb",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f525bcb7-cf66-4846-a8fa-b917dc07707e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b0c0e6d5-cc2f-4fed-bb48-e4a5c0fdd871"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ba9259b9-d6cb-4054-aa9e-47c913af8ee9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2064c220-08c6-4543-8468-2cb9cac2d7f5",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a42392a-b1dc-4ca2-847a-e25487d65bde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2e660de9-fdd1-4ffa-b861-b482bb811114"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70c3124e-f27a-4793-bf2c-9c9bff29e013",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1ed2739-5892-4acd-b4c7-f9eb58a4234c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b87a2f0a-e9b9-402e-8228-043ee08d4f5a",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b2e9ef2-3bda-484a-93b7-d78545871f28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3f080252-9a6f-4b78-bbf0-73b5f7933e55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd86998e-253f-47ef-a630-4d82de010227",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "d74838aa-03b6-4b6b-bdee-0a8ba120c11d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "bf2edf2a-b7a1-45a1-8f58-0abf5c1a6590",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cec2c8c9-0b97-4411-9b9a-4fa9eefc2105",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8bd2bee4-02fa-4b75-955d-75e0f0a58a39",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "0439e451-e9ae-4727-8a67-d0dd275ccc37"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "13f54b78-eb52-46c9-8902-9cf98606fe1f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "f82bd992-09ce-44f6-a32f-358d8347ba58"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d57e68f5-a0ad-4a4b-96db-f6e7a099c19a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6162e921-4356-4cbb-b85a-9d0d18c72733"
            }
          }
        ]
      },
      {
        "id": "fcd6863c-129e-4422-a47e-d59d3cfaf3e8",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "edacfc78-ed46-49fa-a69b-a9d2b0ae1d73",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e4cd1ad5-cca8-40b5-b499-410df726a142",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "2ea91c79-91ab-4d7d-89b2-646d1a86397c",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9fb02e1-0e47-4e46-afe1-b648dc9654af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5eefc055-e221-40bd-b532-1f8330bcbe55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d514fc8-47e3-4c4d-a454-97abbcc0c36e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3e3f78d9-4c35-49c3-8fc0-4ebca1266ea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4990e037-adf7-4d18-aca0-7eb3c0e04202",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f27d6d94-3ff2-4db9-8a2b-5eded8ce4e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7804c5e6-3ce3-49f9-a4b3-f1945e8012cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59f860e0-ada7-4b8d-b50b-d8a2f5d1474e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eab911bd-05d6-48fc-bbf0-363b8b6fa5ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d358b0bb-a755-4c40-b266-72687f256d7e",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eab2f7e-2da5-4f25-87ca-43925248692b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0de00865-f7df-4a2e-94ce-b729bb8ce291"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d739add-125c-4a29-af24-0e28ec113613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ff803ef5-a6b4-4a94-ab82-b574dd6a649a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f219280c-7c14-4e30-ac19-c9bf151d08cf",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe89110a-7e5d-448c-9684-ef260c4b6a13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "510ede71-b7ed-4666-b94f-7e82e601ab30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59c0f388-350b-4fb7-8097-5e083ca0ac00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4e0ca170-bb74-481d-87d9-4fa77a164e07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c57ec8b-dcc0-4725-9de6-8f4aaa3962d3",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcc0ebd3-f30d-472c-be15-d04a29c2f32b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fb6bbc3-0fb3-48cb-98fb-713324114ce1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7d1230a-d882-45c0-b9c1-85452a5df7fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9eb13cd8-b37d-4221-b082-48ff39b6faa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd714a55-eb83-4e67-b076-56e863f01393",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc7c3921-b164-423e-8b13-3f1776471272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f7ed5b7-433d-43c4-87bf-e8bfab0162ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30ab0483-e109-4f0f-9c9f-cef9e2a9c4a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "29e10d09-cae8-4f28-8536-0cd2b5afb1b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d3feb11-fb05-4b00-a76c-2ffe1ebe5900",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecc6191d-0bac-4c81-bc27-b2d6a97a3e70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c81bc8b2-9bf9-448d-9659-4f8780422251"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e586e844-2d95-4185-a554-7bb9081c1bdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5fd08efb-e02e-4261-9456-d5bda23ff268"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f59213bc-f9d3-481d-a167-73eaf072745e",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4a7a8b4-d597-4388-9c8e-4a70c6421805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f55d162-3fc3-4866-b6b6-39d1c664bd43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29b86584-4327-4c4d-ae02-4aa42f3125e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b3427619-b38e-4279-92a4-9eed3d8702de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd0095ef-51fa-4f80-acbd-9bcf89c38c8c",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d94e120f-c0af-4010-82d7-70d360dd8d7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca94f0d9-d56c-4092-b533-a78e440cc738"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78b8eb64-238b-4080-8d83-3edd55d4a584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c0f1b6e7-09a7-4d27-a978-1b73a49f94f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa28039c-2f93-495d-901b-7b6012a98a27",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "149958b2-403e-4b6a-9d92-8d2a8e72e023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca2ba434-0aaa-468b-8ab9-5210f21686ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67341aac-b52e-4a34-aac7-98f6b70a7388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "39d7a1d1-4df6-4174-b0f2-fe52e1ae5c81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "852462d0-69f2-4a7e-973e-ba1d48d635ee",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2998cfd9-de17-4f29-b510-72459b1fcc83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48528a7b-1edf-41a8-8959-c2802eb1671c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b2da123-1f5d-4b48-bc15-19a87c5b647a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a2db1690-69c6-4363-8f35-9fffa9714c54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "807d9daa-7cb6-4887-9858-371d7980ca74",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1f826bd-c5f6-4a35-ad02-77464f41b994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c356b296-1660-4337-9c5c-fa60b78a316a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8e48308-3f21-4c13-a88d-5790978c2d9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f7517bd8-2eed-4c55-9231-dc8c875f6802"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0aae2d1-9abf-449c-ad16-790ab050f229",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "295d159c-58d2-4e4a-83fb-a6f7e41dcdc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87050b54-2bdd-4824-a95d-fe92a582e592"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bbd8fcb-2325-4172-af07-e2c4f7a8b08c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "04bee439-163e-4387-8b96-3884812073bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8109e84-ded4-4109-aab1-065c40b70056",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6a7aaa1-e1d2-4e1a-801c-866adfa13735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6be38f08-140c-4c6b-a495-d6186804a048"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fe23e51-8a8b-48d6-ac03-74fea86e6432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0ff4cfe9-0806-495f-9e8c-ac5fd404e540"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd8f9c18-0a45-40a2-b370-e783fd0ae687",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2b1c029-6d0e-4b4f-9785-887cb22d9db3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5299b5c4-a1c0-4cd0-9812-58f5f0f0f37f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0098830-5ec8-4a71-abec-73c26c282a17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3da89b48-350e-403b-b4da-6ecdb9e306e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef35d375-d75a-48e9-aa59-292252941cc5",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9f3adcc-51e2-4f22-91c1-c20532cd016c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70891328-3cd8-4453-bd00-46e39536dc6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45915159-0cd5-4993-bcd1-4694d7d9cde9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a0b9e693-f80a-40b9-bd35-ccf629535e55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38e28057-aede-47e8-8d65-fd8963e93af8",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f77aed4e-b893-4cff-b622-a9e3d452eefe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cc2a72f-d689-46d8-ab4e-44bab5cfabde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50a93ed2-c37a-403f-a05a-30e3afd6a853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "af9909c0-c45c-4772-9694-4397ee29f932"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deac3a3e-8800-4efb-9ad2-2865128a9d41",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff7eda92-d605-4c35-980e-8bb0c8757060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dfab311-428d-4a25-b0e4-f2f406a35f98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b57a6b89-a936-42cd-8398-774c8e1e1d2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0fe5f97c-c98b-4277-b40d-2067e985eb8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6dc959f-1b53-4d18-954b-7876362e55cd",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c07c4f63-e9e6-44c4-8d90-675ab3ab2962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79e1d153-855c-4506-8f53-ef94a6315291"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "044c5008-af65-4471-b273-3b192d99fcad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "67b53314-0e40-45df-9362-3180f276b339"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc92529b-b4a8-42f8-a12a-cd7839dd5c9b",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd21f7e9-ca60-4921-84de-c8985debe5c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e4010ee-fff0-4a83-83e8-bfba9073b656"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6eff378-ca83-4fd6-b078-e2ca597a7b62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "651e1a6a-7ca5-4604-92fa-9705c72475ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55964424-bab0-4f90-bf39-b3081eba29f3",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5ecb264-813e-4e8c-9cc3-e55638f5e43b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf8c91f0-e13a-432f-9599-51279773705b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fbe7058-aefb-4c5a-a680-6a15a6727cf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "05d91c43-9e32-4e70-8acb-c97e13ddc812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fbb70f6-971f-4fb3-96db-8b559ff595a4",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "379e826f-2bce-422d-8216-965474ae594d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23db3f76-c481-4b9e-86d7-fd622708760e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e3d0bd7-7d09-4554-a439-b6d70535c79e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "af2817c3-2379-4687-9bf8-fa0444b8a635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1e7e255-7b3a-4ef8-8bd3-fc703e70f0c4",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "807e465b-f266-4614-aed4-0c89dd182723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fde4318-8126-4e3c-940f-33feb6a222f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9025fcdc-c4c1-481b-b998-2d6cc2b9d149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "40304a4a-d5cf-4774-b010-0a8378b4e84c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23d2c024-d170-4c53-9c43-29b069e92c3d",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "087b8a7f-4997-4803-9c7a-632c4dfe36c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac867e33-9300-4396-8a6f-13b48c5bd923"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d345d4a-0015-4b21-86e9-e062426c5f43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d132c1be-455b-4da1-ac21-eee3a0aabc43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b548918-2754-45d7-8684-f8e49582ec99",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cb39831-b4b5-4815-b5c5-c6e0b7a8070e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b222c16-b5e4-4ea4-93a5-3177ea8ecda7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95e9d5f0-e245-4f9f-90c7-eff5db2e3faf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e505633-559f-4f35-9e9c-27a950c835cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e3d2863-e279-46ee-8317-67ef235a7417",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fe2cde4-43e0-4b5b-8248-2f4193d49e89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cce6f86d-fabb-4f76-ae1e-aad6d42a3de7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a75c476b-f881-4f06-bc0d-7ad57aba371a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0367c38-67cd-4604-9542-2edd42354768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b97d8ce-3233-400b-821f-a670b871e679",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5017a76e-a4be-492f-a9f7-311dc614bae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ddf3e7d-970f-4d25-8b81-5194dfb6743a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bfe901c-345a-4de2-8135-482b9c96030b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f1b86b9-664d-4667-b98e-f81bd4fc120e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f86c3ea4-5d05-4c22-9f8a-0b2093a3b81c",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "299a00d2-88f3-4675-9392-06e2ae551c32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "127ef048-5170-453b-99d3-e32e533dc14b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5606662-fcd7-44f6-9f1e-a0a99317903d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0eb7c0c-c128-4a6b-b2ba-e75d76f64a35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "014dea3f-3da9-4315-85ee-a842b5e9f8db",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af793d3e-408b-4cc4-8689-acfab01b5847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0b1ccb9-ff3f-488e-8cf4-137d135d1952"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe2a3817-cc7f-4710-94a6-337105a677c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "13465b92-8d85-4f2e-8166-7951493f868f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5e8ff02-5cb7-4c76-8b77-2208b8d57d93",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ded64c2-996e-402a-8a48-55318eeb4614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "286110f8-112c-466c-b2d5-5088d5b68e29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c1e7445-b4bf-46e3-bdf0-55e727b2e436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "208c04a5-8287-4646-900c-2bb21d6e3d43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9199eb66-a496-46c1-aa6d-c849ebfe5ec0",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bb0d335-6711-484d-98ae-ced1fedbb9f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dc60f22-0b79-4e94-912d-3dc903b701d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b134f35e-7ddb-48bf-87c6-43117cc4fa3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3d17804-207e-48d1-a3df-b1aaa49c2388"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ca51f4f-5d14-4a3a-8195-4f85de480133",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e24e4660-6a4c-4f01-9afa-66c2ccca21e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9f0197b-2217-47e6-91e0-ad473a468325"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91aba6af-93e3-480c-a4dc-72d0037ec175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "93b5d720-513d-42f6-99d3-6a3fb6abbee6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12b39731-5ae0-4f85-8aca-fc17cd770426",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b780fb6-04d0-4971-9588-4e22ca119805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6100e6d5-cc6f-4d20-bb78-f1674b0e8482"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41dbd8c4-bced-481b-b224-bc0f6e3ab27f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "32898af5-9787-4c1c-a921-3d3b2f4e0bbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2041149f-ea43-4bce-9bc3-765e5a68c72b",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c761fc7-a052-4481-a9a9-3475411037ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d83f11fe-c081-4836-8485-a46d0d430437"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f30cd11c-5bcf-4a68-9e82-e4be1983c700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "93faed2b-62f9-4914-bb10-52db9dfc9f64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58235850-2f01-4997-a255-c24457212da6",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e280418-8cb5-4ac2-b1b7-f130e86772fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aacfdc4c-380b-4c60-b90b-acf2fff7f2bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71ed7401-65f0-4e8e-9f1d-0d705f28b9e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "5708578a-9e65-4912-af98-8496e7789b76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8afed5a8-7189-4769-b5d1-4c3c360120df",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fefa6002-588d-4f48-b78f-cbe288072d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cfdc6cf3-cdee-4bc9-b488-bdc14412da71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66ac78f7-c593-416b-a046-3f55f1997acb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9d53a8d1-355f-4e6a-9976-46b056b0fbf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecf0f6e8-23d9-4b0f-a2cf-6433e38d4ce6",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bed890e-a31e-4608-ab0f-55d54dac1fc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86ca0af8-2411-4d3c-9e43-60f8e3f28de4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e14a0b3f-a621-4111-b395-226826479e9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e9a0cfed-6fb1-47af-b98e-81bc763eeb70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe641dac-fb52-4181-9b89-c66403788811",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19385583-321e-4a23-9389-ca1db9da0751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c412fea-d1d6-4748-a0d1-d7d21ff41f78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "021caeb3-7019-476e-b634-620d1fd822c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "98218df2-865b-45a7-b9cf-599b83a281b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "592422ee-42e3-4117-a9a3-7d9f6efa51b1",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7cea879-46c3-4dd2-990c-e3ba06442963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5dbc6cf-4113-4999-b82b-107f81157c0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de52d491-ad2d-445f-9f4e-fc772891acb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "460af82b-f570-45ef-9ec4-f9a272f9544f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae767ec2-3ff2-42be-b6d7-443adf4b0aee",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7910f7c6-ea7a-4669-9a1e-2979b316ca79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e17cdf8-02ed-47b0-adda-06ca1123f0db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63d2bbf2-6424-4b88-9ff8-775c4027ac22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6cf74013-865c-4aea-8f1a-62e411a63072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac82d121-9453-4d09-b32f-3f06523e70e8",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "379cc0c1-d578-4b7c-ad18-fae54e16ac5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f618302d-db66-4ce2-be7e-b17c0a9912c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72f42847-e862-4bd5-a7f8-40374b5b6cbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "792ac504-f61d-4529-bd58-93576adccb70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00968940-943a-40f3-aaa7-c738bdbcaee8",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9154d1b0-4e97-4609-ad50-a42998b0eb13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a201fe10-1fcd-47c6-834c-13b8fc09891c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dee98960-2073-4723-9fe1-a99f05db4a02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "7efe23f0-26ef-4887-b696-3a648c59bc10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cbd9101-2b40-4e81-b362-58eff389c400",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d37c4e0-553f-4d1b-9ec5-2a3aaf514590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "219d51a1-3609-4f73-8a37-081c6d94cfb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd7aa407-8b07-4ca8-bb43-0a3459da6fc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b846cc36-1ba4-4119-8a9c-8da70a78fe80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52da771c-5f39-4fee-a30e-e112dedc7ebd",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "567a8f47-0f21-40ea-b678-e9f6a0a3c900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5eae2642-cf5d-4349-8304-bbe8b29db652"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc607706-12e6-4be2-93d4-a77d9275417c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "38722cb8-9ceb-44c3-ba4c-03b060db2ad3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7123c365-4512-4e8d-822a-7ed358472946",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d12d4cd-86e0-4d2b-bce2-eef8d67e76eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca213138-14e9-4629-838e-36615277f867"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7c77942-7cb3-4d82-a0c8-65ce205608cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "35a91934-ce66-40d4-b6e0-abad6d7ec2e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b996b652-c270-4899-b459-09d01f527f29",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12983175-9ff6-4c79-aa55-978267d07bc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63d6f180-e957-42b8-9809-a099d3394640"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52ff09bf-4968-432f-820f-6cb66d6460d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c0744aa-5140-43be-a95e-85ad2d80a876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e94f1f2f-e090-4209-96d4-6f75bd66b323",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d57f13c-7418-4dd7-8f3f-fef570fd2f5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28f00761-f762-4f7b-9469-6215a0c76658"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd474ee0-e1ef-4015-b74b-2583d8d94e31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8898fc2f-8ff1-477b-a49f-b815ee23a88d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d6ff5cc-e3ec-4993-824a-a6b09cf54782",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a601e21-4b23-4f22-85d0-667fb4b3e2d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1916971c-1e7d-43ee-8fec-8e9339bb7ec7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5a2493f-14ba-4583-a35a-ddce2077e94d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6150bc8-823c-44b6-9032-f17c476170f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a06f45fd-f49e-4ef1-b8fe-685a1169079a",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4edcd6f7-97d3-429b-995e-b4ac493e33c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0183733f-d5e8-4973-99ac-d0e82c1bdf2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94aa5c4b-1134-4220-9987-bed267324417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f5ef7777-8461-4a58-9798-316afe6f751e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89a69191-7f70-49b1-8b9f-57117779bfb1",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e44d1c0-f91e-42b3-9fd9-07c55827f042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e841de90-0e0c-457d-b8e7-0dd58e713d08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d6f1b40-866b-444c-9fe0-25667f336f00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3aa84b5e-19e0-44ec-9468-9179fac6ce5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31950d23-92e0-413e-a56c-2d544baceb9e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27c4acf4-06e3-4cea-8e77-79507987044a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d7d14fa-57df-4e01-b39e-20f1395739d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e3c3653-25a1-4e9a-bc61-a4491c08f207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "076eb26f-478c-4a03-b4f2-b8fd1e1ea0ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e483c58-4140-41e2-ae65-1c3b55f6c0b9",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4901791-09e6-4cc5-86e5-7cc662b960af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dad60f67-9707-4b1e-b1a4-6f7f9ff1042a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d323cd1-98ae-4f85-b1b9-c6ef72ed7c12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fcd5990-bcb5-4b51-8706-06beaf2124b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dcf9d61-23a6-4a2a-93b5-345ffa65f63b",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "070cb87d-063e-4713-ae0f-09c305d25f85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a296ffc3-fe9f-4358-951a-849f19642b16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47454007-98c0-45cb-a868-539e720db098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8eb3521c-c01e-4c53-ac01-108e2f7f55c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "500d60ff-a27c-4385-9fc9-f2a386ddcb16",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dca0c07a-19ce-4275-8e6d-a6d5c992b14b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fbc4bc4-b194-48c1-988d-38a7836513b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51451f0b-0065-41c4-b4fd-39caa4ffc1d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b59e6a9b-dc9d-434e-a0d4-eae7a69bbec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4b7623a-f3f3-481d-8b74-aedcabe2e991",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37772f4a-495c-44fd-8843-ad28a95758f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4965e43-3654-4bc5-a682-c7d36ef23941"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7edba1b-20b7-4be7-927c-6b889ef88497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2af44ad-f63b-43d4-9a48-4026b9d479ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2977e263-5dba-477e-9374-a3cd43b91fee",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "869f7683-bf88-44c2-914e-e89a59f03995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffe27f65-0494-4f3d-806a-32925bea174c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08751121-4723-4529-bc67-0ab7093228ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "40e88fe1-fa65-45b1-b74e-e6ec60c21aa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b133da69-03ce-42eb-b976-14504ebe4f54",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "492f75be-3e93-4eb7-83c6-19e4b24ee0f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acf5f142-34c5-4266-92f9-6dc8c9753dac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a73d5efc-e6b3-4098-bf4d-aaac1df22256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7cbb10fc-ca26-416c-b1ac-a09f18fa9dfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdf315bc-860c-44c7-a743-5ca0b6ddf31f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d81f394e-3c91-49b6-833d-ee47108e13ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d90cc61-202e-4eec-8831-4333d75db36f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db33ee72-b56c-4b6a-a3db-30cfd98ce864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "fbb64692-ba72-432a-b658-8a297aedbe10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8829095-cb1d-4fd8-862e-94ce48335853",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ccfb8c3-acd7-4ac5-b174-f09023292a87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86da0a12-b946-466b-b8f3-f40fec353c7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7f96602-4036-4bb1-9ecd-e3caa89ca388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc0833f5-f883-44ec-9713-37c42fa11b99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e68ce526-988f-43d5-ab36-d10c927d5011",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5c0f3b7-9d9a-461d-9794-26722e35ff73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ef5b8b9-b993-4b1f-8100-d7911b45249d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2defcce4-9f6b-44af-8d49-ba7d2a15bf41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4611757f-0803-4516-9724-a7cf644668b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0183593c-6a9b-4c28-baf7-c703a1c5f763",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a83fea8a-10e8-472e-83f6-994556fbf417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3abda89f-bdb8-48ef-b336-693c781a57d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "383f47c7-f1ad-4785-8a11-e9ccf1dc7d2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "75041725-2eaf-4823-9126-e162d479f566"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35ddecb8-3188-4771-86d4-9fc2f87cbed9",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c8993f2-33f8-4e4c-b21e-7fdc660bf91e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35244920-626a-4059-b546-c710dbccf8a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "531106bd-f221-4087-a057-45021cba0c42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c2bd18d-b5dc-45f1-8be7-0fa3d7449d4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3eec03f-c3f5-4c12-8777-5a708c47feae",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0e0dd12-b595-44bf-b765-361da0bc1cc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "955f5164-f4b7-44f3-8754-6a1c053db4e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2bc051f-e2c8-42bf-bbe5-d4650c0f1a46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec471e7b-197d-426c-be3d-8e15fd2495de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a0c3c43-df8f-4a2e-9b61-4bb560ba7e1e",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b619cc31-9891-489a-a671-265aa2bc095d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52423786-8eb1-4962-a06d-51b02528512f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a38dbf1a-c96c-4321-9418-a75548d6857c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb4a83f6-23bc-4abf-adf1-6810089b6fdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e9738b8-b5e0-4cfd-aad0-5ac85c49c069",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16d521d6-544a-4365-b5c7-c38a967052f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f84a94c-6d7d-4b9c-877c-cfaa931207de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fba09f22-c393-4b70-b2f3-66dda21c6339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1911693d-88c9-4dae-8ef2-7f6b861eba2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c95a7075-bd28-49f9-9479-4dc3baed34fe",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a44fe47b-20bb-422e-8d00-0001dea38b3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d28aecde-e514-48fa-955e-f69a2dc8a7c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6db95c9c-9ed2-4109-ba38-d8724623691a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a126c502-24ca-4677-9243-af1d780f4684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3a0e6fa-3834-4cc0-9e0d-a0dadc755f74",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94b9da4b-d0ee-4fcb-8911-cb9caffe421e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abe43a4b-03fc-4972-847b-dac9e5f78948"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c76e0210-e73f-40c3-be09-f49d099a8d73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d449ae14-e9f5-441e-9c98-13c695f4cdc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83f652b8-786c-4c37-a6de-8fd2cb50a21b",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06a551db-ce70-4ae3-ae0f-a320245ac380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79a8f0d1-34e2-4359-bc4c-90efcbc2c9b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "706c7cc0-fe9c-463c-ac32-f081e82b4154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ef86dc3-42a4-4486-89ac-a36ad46c043f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b22d23b2-07d9-4dca-a6dc-bf96c45c5b46",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e4fc3e7-c67a-4e51-a4bf-dbc0116ac329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06d5fe29-9fbc-4969-b456-7089e6f744eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f568e283-09d7-4450-944e-1020eb35df13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "43977e1e-9e86-48bd-9583-34a80b2644d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc8316eb-e0b8-4e80-92bc-00960073488e",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7a5479a-920c-47e7-ab42-c538eaf5c9cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ee8ad9a-5406-4844-bada-46418621c382"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4451c103-454a-4e36-ad9a-c1e6855fbadf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce522021-412a-4040-a9f2-b81e63ab85e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd84efee-3102-4cb4-a370-4f2d05cde05d",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ac49c71-0493-437f-a395-e6e0ec6b3734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25965b56-5244-4092-bba0-82e9697211bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e5967b8-9386-4b1a-a53f-ef01574406d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa7d07e2-8c0d-4404-8c1a-81ac7eb11fd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c0d1bf3-34ba-47ab-9552-3e8958ee7fdb",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9047341-e031-407f-b55d-3d7958266495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ded2239b-69dc-4c08-b69b-52783ebe6010"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e62cc50-11e3-4d73-80da-2448ff7ca1be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a875a762-33aa-4584-bff6-a0fc4e081a4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93bfeee8-b70a-47da-8639-8fda399eca09",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "061383dc-4c67-4616-be46-4ab659aeb41a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3e79fd7-f244-4393-9dcc-aff445b5607c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8fdb542-ea73-4af9-82f4-8e570b24043e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "24acdec1-a049-43aa-bcd0-0bb78da0fbdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dfe344c-c492-4ac2-b2b0-279a7be9d5bb",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c566c59-bb71-494e-86e5-b5f3d4e715d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f69f53c5-9415-46ee-bd5b-f18367ff69fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41e54f6e-da30-4fc6-8756-8bb31d2ca4cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1bae119b-684f-4418-aa64-1e23d7f9755d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e2fa58f-8483-4079-b9df-2cfdc1512e1e",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1c3c2b4-06e7-41dc-afc3-20e13376b0bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e3a7f64-19f1-42e3-9ae3-d80539a28510"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07c9aa94-4f7f-474b-a93a-4313713f3db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7ac8da1-9e93-4464-b5f8-b3ef4c95076b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eadad12-8f07-42be-b388-c1c5eb1629d3",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6873a63-2fe2-4480-9ec8-2eadab70914a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "618151fb-8681-483a-9cbd-e77e899ed325"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e93ea6d9-428e-4785-9c17-666b99ac1527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "16095782-3fb9-478a-9beb-75f59d752b1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9406f7d-b981-4c2c-8898-4d7f40960b5b",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9db5733-3e88-4834-86e9-1e279cebea08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1572f4e-9053-4a5e-95f0-3f23b5cd929e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2e17162-39a7-45c8-90cd-7f60b56f1d65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5980673c-8d36-4232-bab6-9fd231ff5611"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b54ebd5-5415-4ff0-a88b-b02c57726811",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6e4f680-6b2e-49a8-a282-d814b1a864a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26107f80-e4cc-4864-baf5-e794005b3bd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ed19f62-a78a-4091-b280-c12ab0435d9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c282145-0454-4ba8-a1a1-4799fa4d2ca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26239370-b636-44c5-85b7-b12dfdf88b5e",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65fe380d-5df6-4f77-9d4f-f8c96dc9345a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fcdaba5-eaa1-4d51-8092-d883403f18ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4677ecf-194a-450f-9aea-d0d395f375ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "334c7775-3ae3-4c86-bf0f-f99657b5533e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e9b93ac-ce5e-4668-abae-ef6a862aab22",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dcd41e0-3054-40eb-8446-3228451f78f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59007537-3fcb-4954-9bec-10e849585a77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "871af8a0-6ea8-4f77-ba68-4b1fa40771c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e2baf022-c7d9-4d54-9863-588e1db3e6ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57eaebb8-4551-49f8-9b82-ca3ef1c4ad96",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff1fa100-68c2-4f2d-ad83-d04143792690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3feabbc8-70e5-4fe2-a798-887425747465"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e6ec827-b138-4989-8557-d37cc1e4a7ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b30f4db-b50a-43e0-a00a-8008a8223afa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3415392-ed93-42f3-a237-0fe8e8d54ee7",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5feb48cb-18e5-4cb9-a7b5-5925e2b46297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1223609c-204f-4624-9ec3-8b74bc739a9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d9d5129-29f8-406e-9651-cc8c6e73ae25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac5642ad-b8c2-461d-a7b0-f23a82c5376f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c02f47a-f650-4fc1-a5f8-e1775124ad45",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70c9ed9e-fea0-45bc-a4b2-04d28a01ed6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81fb9e18-211f-40c3-b687-22b4cf7d67d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b59b4296-6f9b-493d-8259-97e17b124850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7a45b89-aeca-464c-a647-fb4c31e6f694"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87d64ab2-815b-4a12-8763-3ad335f9de7e",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ff8e8d5-02ff-4a3e-a5aa-c36b434f0a4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f7fdf21-7ac3-4c91-b060-baa7ab1f2428"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2256073b-6f8f-4d27-8f06-e37923c37322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "589cdd45-8227-4395-a76e-450127bbb4e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c661d2e-5d26-4247-95db-566095601a6b",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a702549-5ed2-4850-822b-8c7a4d7807ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba101941-1873-4aba-b601-99ca832b2fb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f718ee89-1f84-4090-b990-76f4f2e5c05b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4dc94303-4e63-4770-a4c2-ea4b9066b70a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e9e2daa-fccf-425a-b232-18a4076055da",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e1129f2-89f8-4c48-8c7b-f639b88344d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56796589-e8bc-41f9-98ad-2ce948df23ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11f3ebb0-7d3a-46e5-a573-de8e587a5d27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c4907c95-1324-4023-bc22-069dfe070edf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7bd42e9-358b-464b-97a1-7a4dab8b9667",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f3db048-98c9-4570-8a13-1413c89b92d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3455db10-f025-45ec-855a-bda8d1ac7ad3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e073be3-327c-4851-8ea3-2521b22c024e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d119e89c-3d65-4934-95dd-e3e84f76d787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "382551fc-1999-4943-bc66-8a5d5226275f",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2020caab-60e5-4680-9df4-34a17f57cda1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d09c30f-dcd9-4b42-ac5b-9f77c8f64a50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bda21a0-ce46-402b-b265-7d84e978ea77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3fd579c0-f199-43b9-a6a9-5855dbb3e7c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a62939ce-de81-486c-8b0d-99e5c24c8f2a",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c91e89a-6f0c-450f-9589-04e63afc9779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14eb6544-9dfe-40c1-b5b9-d4f5b52604be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6efb42a8-34f8-4ace-9fa5-4816b65a5e0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c69ed54b-ab61-4417-a9b9-980fcda8672b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "984f8cf3-12a9-4504-90d6-d41000f124e3",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04132038-9170-4d9c-a5aa-985920f90f70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c459939b-76ac-4c67-96ce-aa3213a14369"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26721570-701a-4ce8-92f2-f6dd9f4e6ad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a3067fb4-b825-442c-ad67-d5e16e514c61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1382338-2b07-44a4-9753-f619d613dcfc",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45191027-2d6e-49c8-b77d-a7fa0e68fade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26a12726-6c10-4aa3-99ef-035eff28545a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "953e2683-c866-47be-8497-008db5151cec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "acf5d431-dcde-459c-9c3a-efc404206474"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e581d27-942e-44e0-bcc2-b70edf8caf9e",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0f421c1-2de9-4a47-8443-28bc60a33eab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "b8cbfb3c-2834-4690-b285-29a30f55c3fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4ccc32a-4b1a-468a-9626-8525c9dbb60a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a2da4ef-37fa-4433-9465-39a3286a1d3c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6a0f243c-f493-4aa4-a579-1afa1bfeb1b4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6839d7b2-8fcd-4520-8fea-de6e9d8397c0",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "862b5ec3-5539-49b7-b644-8a383c8257ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "88c12b6b-5e13-47fd-85b8-672e6d4f6d74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adaf868d-f7c2-4e7c-b647-6c02acd44f71",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "66859239-7eec-4fdd-bcac-7ae9fa5b2725"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01436bb8-3a07-496b-895a-96dbabb6cd3d",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fd8095c-9e28-4d0a-9bfc-eecd9eefce96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "967edd81-80b8-468e-8466-bed86ac44f63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7114c4ca-aba0-4b91-867b-8d95e08e926e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "444f80fa-23c2-4295-8885-816863d8bfbf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "35063780-0e36-4726-b2d4-154daf0d3787",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fd28f7ac-a9b1-4420-b9fe-debad06b0d62"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7ee4e7d1-2050-4f92-a1b4-e078d25a78f6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "32caf3d1-680f-4c95-984f-4cb258dea2ce"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "21d08b56-533b-4f4e-bd10-50de88e7955c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0ed59a9f-255d-42ff-8d75-970ae9c9fca1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "238889ab-44f2-4739-a1a6-e5a629633987",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "951e67f1-1e7c-4c62-a3af-3eec8cab3aa7"
                }
              }
            ]
          },
          {
            "id": "6c7581b1-0b81-45c8-bb2e-711f3b55bfd8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a8a72312-42f3-4d89-b918-1b0a1aa1b344",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d5b98759-8d22-4172-a908-7e210f1e5acd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3b6edcab-42f0-4fc3-94c2-d05ee3324168"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3b177b3d-3991-42dd-887c-cdac4d522d73",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "01a84d2e-8a99-4c12-b17c-10322a50267c"
                    }
                  }
                ]
              },
              {
                "id": "b89b0d1d-81f4-4183-aba9-9520ab90e8b4",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "77bc1d3c-9cd6-43b5-816c-4be5d3c2a24b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f9d60e46-9bb8-401e-9f61-a8b6021b75b0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "507911ce-43c8-4bbc-b63f-e97f7df10434",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3d555fc3-279a-4017-afea-4ca8ce1b8aa0"
                    }
                  }
                ]
              },
              {
                "id": "85b9b90f-91f0-41b9-af8e-462390e6cf12",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d2af719f-abee-4b29-96f5-cf7788b06cb8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8865d193-371b-403f-b015-c1eb785acb4e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0f31dc9b-c589-4a29-a67c-f30b050c6b2f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f57d733a-7ddd-41fe-93de-33e9e82a3194"
                    }
                  }
                ]
              },
              {
                "id": "3a3bcf36-b4ef-49c1-bc56-ad2458656cf4",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9a8e3da3-13aa-4463-834e-11228a6f1b1f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "124c461d-b306-4163-a34c-87797d6002f1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4aa0f251-0fca-4a61-b5fb-94f39c04d40d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "121c61e5-779d-4166-af9d-994a44bc7d07"
                    }
                  }
                ]
              },
              {
                "id": "359702e3-4439-4fa2-9f72-212327caf9d0",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "62a838a3-19a4-41e6-96d7-e84aba734b7c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "420f1194-a792-4a95-89ee-0c051404774c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3db9bf59-d3a6-4104-ba0e-b986cb4ce561",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "d6087611-6bc5-4f6a-8b03-f9c253997713"
                    }
                  }
                ]
              },
              {
                "id": "860de0e9-a57a-4e25-98fc-320cac774d29",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1e0e7ee5-cd45-4ef0-b7a1-986cd3a61c84",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "73a42532-1bfc-43cf-a49e-a59fb24550f1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4d8be825-d06a-4df3-ac2a-2e1be143c712",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c5e9d6a5-3dab-4661-a9d1-094394c53aae"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d7a1d343-43c1-4a1d-ae14-b0e8a87cfcc6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "27363e50-5604-4bcd-96e8-e36869763894"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "93e786df-b234-46de-a61c-6c6045b8acef",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d9870a3a-5dbe-4247-94ee-e8c63665cae3"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3f83dd7d-7903-484b-8aaf-3d55a8dffbf8",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "580fa202-f6df-44ab-a112-2e4f48d8fe9a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b9ac1b87-eaee-4e65-834b-fffb4368059b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c997c3f7-15c9-4478-9bd3-a555561eff4f"
            }
          }
        ]
      },
      {
        "id": "2ee43e81-3205-4405-b876-0c8bf40d8a4b",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "c64f2439-2c00-4b0d-b461-e6710abeb8cd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "aff29974-2da2-406e-91d3-3ec39f5bbec2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c29cbe1b-fb24-4747-8bba-8e6100e328d4",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef034806-bbf2-470e-a0ed-b4fff4854cd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f924e746-56c3-4db0-94d5-eaf1aa536f67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0835aa8-b4fd-407e-89cc-443f7f32e9b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc0e6019-5b48-46b3-8228-5c4ce63113d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "427975db-2fa0-47e2-acaf-56b7e764d283",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cdaf219-9c31-4f0e-b3b4-3f995b3e08e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83d35517-5761-47a1-9ec4-a6c1e7c1b13e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7423d595-f55d-487e-91ea-2df91bb29cab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "46eb3eef-49ac-44c1-ba41-cb0cc558b9a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebe1d347-cd75-43c9-9a19-842a681732cb",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ec88b11-f6ed-44f3-a4bd-8c8de053dd08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a91b9fbf-143c-469f-ab30-6a9167735df0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88096d38-1c02-47f3-a147-414c27281e4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "81f40609-1219-44cb-8bb6-7edae208fa1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9bdb80c-9ddc-45d8-b628-27e1153c5f3d",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d270f235-2667-4d0d-a348-17de2758d910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48b6b9bd-e6d1-48e4-b5e6-5ff1ac755d23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67166ae6-0704-4062-8ced-a3dce3070c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b88d55c5-3309-4e86-934f-6c28339b5cc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee4098d6-ef31-456a-917a-d6b24e9915dc",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "957f8274-e21c-4fc4-8d91-7ed1c220cd02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11c2bf5d-00d7-4115-a872-3b1bd675f63f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc8a3a9f-6cef-4c89-a94d-dc8ad69f1a80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7bc5ae77-86ec-4f60-8d13-dea4cc8c32a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7142c99f-0600-4efb-a7c0-2f86c0f01202",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58eecbee-47ac-4cc7-bd5e-c42be24637d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d97f32b3-8d6e-4e24-a87e-560744982f81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a63b803b-cf2b-47c7-835f-ba17cdcde386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "af785a50-f389-4340-a3de-ef1b45250a43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd3d84d0-b6ba-4359-8d4b-78f1e840eedb",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e8ea4c0-4489-49dc-9db5-6a1f9eea9d9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d274c16d-1a54-4984-91f8-4f9f94d2b447"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89041e50-a83e-4656-84fc-e4ece90327dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "5632e882-f16b-4bac-bcd8-d559c879ae1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b1f849c-566b-4a1e-92fe-9beb6d01135c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e767e2a-b6a5-42bf-8646-bd4f1bcd5195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25272c77-6756-4281-a523-9b8502b6bfbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b7d5eae-45d2-406d-8115-56933ebcad48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1fe2faff-7c0c-41cd-87fe-fcacccd272c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ee3dc66-c45a-4c43-8d37-c4fc656978fb",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8133467-3573-4b3a-ac8d-d74830fabf0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7755fd7a-2aeb-4606-8925-ed15203cd497"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e3a3e7a-9b30-49b3-8aa1-a6237de8a26a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "57022ebd-a189-45db-85a6-04ab999a0683"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7ca60f0-a986-47e0-ad45-3eb1e3dfae4a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60bbd02f-caae-49af-a45c-a288dc417e47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16b2223b-6b47-41a7-aa40-b4f4d4975b4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb189d07-5e41-4a03-aa5f-f4504e3a5175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d859326d-9757-4d10-a9f0-95d555d95fc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b0d7553-99a3-41d5-b813-3fed8cb47cb0",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c42c747b-ddaa-42ef-a9e7-1cb16fd7d94e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e642d3e-fa19-49fc-a080-3045b9c994f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b7ec74f-42c9-4c14-bea6-e5181805fab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "6fa0b5d4-d22d-4033-b46c-02fc3cf61684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2a8d5b0-2bb7-4758-abd9-652131f24f8e",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c48a1137-8b0c-4b5c-a136-396e523d5672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a49c8312-3adc-4d68-8a7e-d3e173d3c30b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5431362c-45ce-452d-8c11-fc6752ce498e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e5088a95-e9a8-44e2-9150-04a39700d306"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2143e12b-160c-4549-a298-c3512cf2787f",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c74d787-ac4c-425a-8f9e-518bcc55aaa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26e0abda-dad6-40ce-9c29-05db7830b101"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48fda16a-cbf0-4134-b27e-0b493537d48d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f34d52d1-5685-4bc5-be22-2889e1a34b00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c44be066-f875-455f-880d-d020e8302062",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1228c89-e5bf-4c9c-9517-153eaf8d6da8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b40f5542-3c98-45ab-a0e4-14e0d295314c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f41a92e2-c2af-4d9e-a27b-19c903afe74c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "f04f05ac-fb96-427e-ba62-38493a63b0ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "548bf177-e500-4edc-b144-9b18129cf129",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de1fd9ae-e3a3-4252-a4c4-50ea7f7d3a73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e221734c-051d-47f6-8a23-e67387a891cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deb26c14-8707-4df8-92de-fcfc2cbc5090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8459fe1-d8e9-450a-ab96-b7bd67043dac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "666dab98-9b4c-4caf-91a4-f3574ebf828f",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10b66c3c-2aad-4cb0-9f57-c98caac7c64b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c33d67f-d1a1-4635-80ce-377d8ca50f67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e06ed69-314c-48ef-8767-72aad7f82ea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d9e731b-92c5-40c3-8093-45260c850e50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b3e154e-2fa7-4900-b958-3315a8f8c72f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efb084e6-e651-4cc8-bbf1-ec51f892e47f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f8ea809-34c4-4c5f-bcfa-c98450215589"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "822a3fa7-f6c2-4228-b1e0-ecee3265ba10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "610cc7d1-b281-4ceb-ade4-b07980268a84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf07259a-c873-4b0d-a3d2-9c41ca8b3ffc",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c1f7c70-84f1-4729-8fc1-6d137ffe6046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea5c6a2c-b2fe-43c3-a7d7-22e9ce81c4b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af781938-021d-441c-9b8b-5f6020ac0c05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "15012a12-a669-4820-8ac9-f1fdd7fb04e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69267571-c4bf-4dbf-a066-52a52ca7c6aa",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4440a3bc-f5a9-42ed-8f1b-4611c3eca475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "633601a3-f2e9-43e0-a163-826661c675ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07b03044-9620-414f-90b5-68aaa75ddaa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3615e24-6b1c-43f8-824a-25dc297975f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03bc5753-e270-4bb0-885a-1418e986421b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95b502df-f0f9-490d-a3ba-fb28bdeeb167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a77e2980-73fc-4cea-b452-7b618a003cf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbb198fc-f762-45b7-9e71-b78f2004d339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "becfc79d-1293-4ff2-b155-93f18ee44c7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "293a0979-c0db-44b8-8f9f-c0130c3fe5de",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2608f099-0edd-427c-8260-9f2548e17bb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a1cd38f-5113-4dde-bea8-4959bab45414"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db06d1f0-790e-4006-9ff3-6aabcab04205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3983f84b-ea2f-44b0-b878-a1666e84c72a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d030e2b3-9990-4505-850c-9a0d45903817",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cb46dd1-bee1-42d0-8aa7-9dacd3c7c374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a092d8b-2b1b-42ee-829f-797bdc376bbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfa5b03e-3463-4c8c-ae9f-a535923ab108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "883f0657-9281-4eb7-8463-d24d902d1e73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b4214fe-fbd6-47ea-a1cf-2de54e54eca1",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0b2d501-e8d4-4ef5-8457-856bfd7b0745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6a9a5ad-0c91-49b3-8c61-9753da5a44e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e469c04f-7e8b-4dca-a6c0-e2e02fd5da8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "87291b86-81c7-4454-bdf5-39553fc86375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f194dc00-8bea-4452-8f69-f5baa012fa50",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cf3478b-a432-46ef-ae75-db8290a0b399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a380dd0a-48d1-42b7-a200-b1e27f563771"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9de7892-80e8-4513-9f0e-0215aeaf8367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d7aaedd-9296-42a8-88ea-4ea8c401f5e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f1296c6-79b1-4601-9da1-5761daf1b6c7",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "426c74b8-a4d2-444d-827e-00681187a0eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e31399fe-a6a7-4ea4-b168-bb98125ff848"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "957eb2b4-5a9a-436b-a413-a2eb4a1f3f38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c70936a-340c-4b2f-9531-977c17e231d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cf4e5f0-ca1c-49b7-8e1d-b606b6f8a399",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59195e9c-2464-4f9e-9291-5945ccdfdc9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f41d2fa3-31d8-4ace-8f50-6bcde24e6af7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01a4cad6-763a-4b29-bd51-873e9c897f86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab8c8418-b5c7-4c97-8c93-74d64d366e69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cfd86a3-9e03-4558-bd52-9f49064970ac",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53fd0059-7158-4345-80cf-d84bd695bf6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3ac38bd-8c75-4ee7-9abd-221a4e0c29f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d62ebd43-6326-4fda-8145-98af06293e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ca34056-2096-4434-9fdd-a9a4158012da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31136c35-a4a1-4052-b1c6-034ab66d392c",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "897c5fa1-bf3d-4c96-9467-a1084b885a76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d73bbda-c748-4fb6-aaaa-fa288e44d331"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3dc6c0e-adb3-4f97-8b27-5d964724d1b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7e8615a-9f95-4916-b1f4-70b18e9f2f4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9bc85bb-7066-4cfa-92c5-1eb3a222ae04",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e728850-6af2-469b-9724-2e6595391412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f30edd8-f17b-4d3b-96dd-4b4b30e8aed4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01469c0e-3656-40a1-9855-5a745d8d5450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6ced769-b785-4948-939a-e3ed39928ee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3915f329-975d-493a-891f-2a8254442114",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c6df252-5008-42a1-96ac-63d0c569afdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9aa32f0-c876-4997-8ecb-2da4c022a4f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48c77ea7-2822-4903-8b9d-61426e133cff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d83b298d-04a1-4956-896f-cccccef053bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "208d5462-2a3f-4072-af21-f2748e9f8d4d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5be64a6-f755-45ed-8dae-dabc6fe19eaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c62ff48b-ad89-421b-b54d-b09617f09287"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "363129b2-244a-449c-af5c-d547cf5ce4dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e5c953a-27e6-4c39-bcdc-4f6c10132f34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c44e302-aaca-42a7-ac73-86c4a6c18bfe",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ce2522b-a617-4c3e-9030-141783294bba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca776369-6b8c-4ca5-b6f3-d590e4d68812"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86eb35c0-59bf-4913-a0f2-ab387db8abe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed141b73-4d00-4a1e-b31b-11617f39fb9d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1d22857d-4a25-4789-a4c9-8a75d5b001be",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "17558b58-1486-4d28-bfe6-6d75ebe94ac0",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc796c96-d3b4-4273-a07e-88880aed48eb",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ae7ca9ac-b3c1-4858-b66e-adaa9f45178b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bb06697-ac09-44b7-ae56-fed72d3ce1b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9af7864f-4c9b-484e-ae2e-16f77d54440b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e951555-9ca5-4770-8fed-a7bee2b4d92e",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05170bd0-5e5e-4551-9cce-8534e8c9d386",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "40f52d21-766e-4162-a1ba-e5df8e0ce9c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df94d449-d039-41cd-a8d1-f8d5ce861bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3b87c9fc-b24d-428c-8edb-cca053c04cc4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eb290491-06ff-42eb-81bb-fb58ff32e958",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b79a66d1-66a2-4117-aeab-1e656f68311d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "eb18cc9a-604c-4363-aeee-bc27e0960787",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "172d62d7-2cf1-42ff-b6a8-ef90817ff6dd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f0ea8960-66b3-4ac4-b435-f07c56611d1a",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ad3a6e76-a508-4494-aeee-f95a820b8d24"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "980b4273-1a5c-49b6-b099-572428f1b29f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "aa9cd378-6d15-4f7a-87af-97b8fe9f86f4"
            }
          }
        ]
      },
      {
        "id": "09f3da69-81fc-462f-aff4-c0dc4c95a55f",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "cc1423ab-0d3e-4b2a-946c-45da9712bf16",
            "name": "Negative Testing",
            "item": [
              {
                "id": "19c86cfa-bb51-40e7-9277-de30da1b7ade",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b52ef5b0-74ad-4998-ac9c-23f34dcba909",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "233ce6f3-237f-47e4-873b-05726903d3ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2571e73-9dc6-432b-b5b3-b8511c0840c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b46999d-d736-468f-a482-24cdc4e72cda",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5f2da51-8ba8-41ac-bbe4-75719b41fab1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2ddc078-9875-458e-9740-3dd255f37330"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68c27f89-7048-48a1-8fd7-a88a72d1067d",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e5932e2-3242-4202-8260-32941c3d0a70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4edc6144-05bf-4d48-8fc5-a4f3024db47b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13b64975-094e-40d8-b820-b65bbed05fb9",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af152f13-9fc7-4ce1-83b5-3d3e04cfd90b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbc85e23-5433-4283-be84-cc87a40ef74f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f817772-ab3a-424b-a2e8-b4d74d5b6514",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17629d3e-d50e-42e4-8ca1-50f0ca0c494f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "859e23f5-6bab-4f33-addb-d543e779074c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39b2b666-8c30-47cf-b3c9-933a66ef7c03",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56d1f981-9e19-4b39-b63d-af5808314dbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fb6e56b-38ee-44ce-ac6e-2a16c8d14e93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a1e5d3c-8959-4f14-b21d-a45a0962335e",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38b52434-539a-4cf6-9dcc-87878309b6c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba90028b-ff68-4c74-8f93-fdfce6a87d1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b54c33ed-6995-4868-a016-e035c8b224b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c94172fd-44b8-419a-8aa1-483621d07587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba4a78cb-de53-455c-ba57-03f0a59ba977",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff78e574-41b0-4642-863f-7609e8de9eab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11eddec3-6f88-43d6-b88c-710e6d0c918d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b9cf10e-5914-47db-9335-b243fbda08b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9066b79d-fc27-49f7-a289-60b20edfd3e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd8608aa-31d5-40dd-aa4b-33a9e036918c",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13384f85-e413-4fe3-b15c-fc289b731acc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e911f6ef-0fb7-43e4-8819-7a6f33a9c2bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7afad4a2-1c2c-4dfd-bffe-c16e8d270749",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9c29c73-b746-4aa7-bde7-b04fb36ceb64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccf08a8c-a143-4cec-8f73-debdd4c90bc2",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d53900da-c1d8-48a4-9b13-ba2fe6a07c58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4035d543-3157-4acb-bdd7-2820a1b6e297"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85f8af4b-83b5-48a0-841f-7f5951322a8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1cca95d-9195-42b8-ae12-a1fec1f0d99b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13db524d-b9e3-4775-b699-ee66cc1868fd",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "172de753-a9d3-42d0-a27b-59b472053eff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f72f3c2d-fa34-46fb-842f-3d5aa0b23565"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2000a921-109d-4079-a95d-a51984a3e5a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b51ea8e8-dcf6-4864-9178-f24aea010746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a366860-b74c-40aa-9387-6eb400cc46f0",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9ed1756-2160-49ea-ad22-7d3fcfc62c33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "765f027f-3e77-496d-89f0-5bf4b1d0f6e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9f51b0b-8a56-4130-b67f-aceee616153d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1702a11e-6287-4857-b83a-870164623064"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d349beea-5531-40a0-b015-1a2926b7be2e",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e94e9eed-144f-4254-8d62-09423afaafb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56315ea8-4efd-42b8-9d0c-48f010e1e83d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87119117-5aee-47aa-bb21-775c17d6b620",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f0e7ce9-f04b-492a-a161-967257a01cf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0c39d8c-33ef-4e78-bfe3-50cafb6c15e6",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "177508f3-9100-45be-b1e9-6c4b1db55d65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8bf4be81-8f0e-4d26-bbde-68a9e53d4204"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdb5effa-e85d-4bbd-b6b6-71ae229d7a50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c84f6b10-4955-4c91-b10d-53b75885fdc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d53df792-dca1-4992-8f4f-a128f468c7ae",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8f10aa4-66e0-41c7-8eb4-ac3dac2679c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81f95a9c-ba54-4a00-88ca-113393c1b527"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dbc1ec3-bf61-4bce-9124-b895d15d4d83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "796e48a2-9e73-4995-8c39-71a574944c25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7034d8af-e3e4-4596-8b4e-4f2bcf51e699",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32926af2-c99f-4561-a7ac-b29751b9acb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ede82db7-0f83-42d4-a1d4-472804d233e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c90b255-b580-4f0e-a377-72a01021248a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "652ef369-6297-4aad-b5f1-e7d940d7937d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d24e897a-ad96-4e36-801a-325457c641e8",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "927afa3e-2b86-42fc-ab8d-d9e9b6d8026c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63b711c0-8207-4d6b-bc04-9e22f38f9185"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d088664-eae3-4483-b349-03fb4f0a16d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d6de721-869b-4a65-b3de-0bd0efa2ff6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e43b68d8-f335-4608-91bd-e31ac7e30617",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49edfe13-1ae3-447b-a23a-700277ca6aaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c072fb0-1955-451f-a5f4-3bbcce2e853d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8a33c17-fdcf-486a-a65c-422e4995181c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9f2ac64-dc16-4f33-ba5a-ba4e87e4db9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8a14953-b4a5-4cc0-9e71-7d6bbde4429a",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e523448d-cc9f-480d-b021-d5d109bf4602",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "838b7b5c-0712-4e03-8b5a-15544b897e85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c040c2b-f0fa-441d-800f-f462ea12340a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "132aab85-9e4c-4cd3-9151-d0b5675894a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cdb2b20-1375-4ac3-a341-8eaac6ded855",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb59d183-1698-4d7d-89f5-8170633e2ef0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63dfca86-c854-40f2-9b95-4fe3b5c3ac74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41376235-575a-4802-8535-f13d5c24ee6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f047d247-dbcd-4ba5-997b-7340775ede9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca0500ea-cd5a-4b02-b788-e8a8f390d592",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c268532b-0b3f-4b5a-9027-0272cb4f8ca5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ecd71d7-4339-456c-ba05-32e4f72281db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d69889b-adba-4b2b-b88b-aba0276b4331",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8afe96a8-991e-4402-8856-5e3d00af5de4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6564fe57-e137-48a7-acd4-45394cfbad4f",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09401ef9-a330-4d19-9cf6-f1db37209e22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "437aa331-fbb7-4e25-9063-b2f28e839f65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa6bb26a-2c13-423a-9250-6f0358465329",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc5ba10c-c0b6-4fd3-a1c9-142e64adc4c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2330b82-347f-4a2d-a318-472667790231",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "241da1b8-8b7c-44e8-bac5-59c62d53d02c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed085bc0-1949-4b9f-bb41-cb24fe86ba56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3782761b-1eb6-4ad2-b3c3-678382a2df1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf16290c-416f-4d42-8323-6d1bb7fe46d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "433067c0-8f6e-4328-81cb-81510e1b0feb",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e376a1d2-389b-4577-98d9-26e9820149aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9af56fb-dc0d-4ed7-9ae5-88e3a21d9f24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e47f54d-2345-48df-a342-ebe12d277773",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad00bc15-3ad2-4e04-a364-74aeb8200a73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc6fb2cb-434d-48d2-8571-6c16b8dedf76",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36c9c9c9-a29b-4838-bf9b-aad07922fcb2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed6a313f-ba9b-4ff2-9968-04d97d9921e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cae356d-6b51-41f4-9d56-88a15a3a5844",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3c73ce5-813d-4c83-865f-82d91cef656b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d4212e0-d0ac-4f78-8ca9-d39a0dbfa777",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b3f209e-efa8-4ae8-b5a2-867eb32d7610",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34ddb829-8074-4d1f-9efd-5c15167f3694"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e900ed85-168d-4686-9534-809b01b4e5d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb99bfe1-ea5a-49d6-a2e2-3541e671fe4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e70311b-ccf9-4cee-9b4c-5ff1757553cd",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d7342de-d165-4a1b-9ad9-9a038c9c3bda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "359b603e-4b23-4a33-ab9e-e1c962d6f53c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6f8ef52-789c-42ed-8e3b-786d2e42df6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4227f655-e49f-45e9-b361-5cb805a59176"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74378076-bc77-4c5c-b3ba-de459254b6d8",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f69d35d4-9584-482a-a7d6-043f9df852bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98d1a5d4-dab8-486f-8161-acbbd9456f99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fab0278a-c221-4ece-9b42-406ce5d1eef1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2839868b-a9db-4683-9bb0-1becf896edbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce9f3e93-25b4-4d3b-a604-b2841988be91",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1fe24b3-8ab4-4bf5-a003-bac3309d2fe8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9509d6fc-711c-464f-9d63-3201556c5e93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aab406a5-0678-43be-9907-62952b80d53e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15e020ad-47b8-43ac-a2ea-da980abe25ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a83fe5f-244d-46c5-a8eb-23dc5cf0e3a1",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a2835ea-895f-4603-9016-cb92548e83d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08d54e24-3eba-44cd-84f0-045ae0c49a45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b6bf0e7-c0d3-447d-abf6-68015fad773e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e10d4422-56ef-46aa-80ad-23016736b713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b464654a-c742-4e31-87d6-748ba80b2725",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ba27341-88cc-49e2-9b22-e534e3453471",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3f34982-5fb8-4a60-8d49-31fadae1e753"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5e5ed6f-7026-4b80-b040-4e1ec2c23086",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6782e56e-cfb5-467c-8240-bfbef4f1deb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "953af99d-3eee-4b58-b1eb-216aaaa3ba6e",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e13e6ed-0d04-464b-ac5c-efd67d65e363",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f8c0817-d419-4977-8cd4-b6deaa1ba52d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ade5645d-ef0b-42f6-ad2f-89ddeadf3778",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31611a99-f9bc-4e18-a10f-6bf0aa3b3ffe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e64f0fb-48f8-4edf-9f02-9f6cf97273eb",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f66a1f81-b462-4227-b468-269857c86e4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b2e1577-ccbf-4d16-a873-8397753b7743"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d15dc4ba-6f1b-4f4d-b1f6-4289c06482f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfc866cf-dbcf-4b3d-b5db-1cf81b4a955b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4fb7612-9398-4eef-83b3-c54c6293e43e",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4300f6a-7b12-4be3-8296-5e290d97cc62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed6c4ba4-988d-40b0-bc57-49fb1d331208"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60856c94-eed7-4261-a0b4-fa9bff7308eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63825d36-6ff8-4d1e-91c8-5080586433bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdfacbdf-e88f-48e1-b1e2-5ac6e8161cb2",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8ac704d-9b4c-41f5-8e94-3759cd239f14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35dad4d1-bce2-485e-8a8e-a7fc37f4b6b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "148ac732-e913-4715-9521-9277818177e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "518bc3ac-9472-42e0-b824-5fd1856ed4b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f389bd68-c028-41f2-8aae-9005591c6ae9",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74a4c1af-a6b7-4363-894f-205d431d92bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83afd092-832b-4bd4-afa2-a4f7cf506daf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0401da06-ed74-4bae-a4f1-510daad5ff0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "149de305-f7dc-45f1-ba76-3b33a79f12ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12af4f42-72ba-4629-b882-8ee38e5a0f2d",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26410b7f-2d4f-40ea-aa00-71fecccd1cf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "728a5e53-64d6-48b7-ac49-d05b8db522de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f46b79d-81c1-4929-8d29-e01bf6909f10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32014e43-a816-4605-8a4e-5fc4ee1b54df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de9cae7b-2128-417d-9cff-9b114a0af085",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f77e5fd-1253-41a5-b3b2-158bc6191e67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ea36155-a2bf-4264-84a5-d53eaba53aeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "952affec-0e6f-4a88-8f32-97c65a08adcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09228f53-2080-4798-bf8b-c11a7e6f909c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d259f091-1de7-4c1c-aab6-67cf3af85c11",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8a0afda-8b78-43ff-a1eb-d57106e10827",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac52d6ae-0c28-41c2-8a59-f4276e44270d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a42a277-9333-4cc7-8b49-306c25e74fff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "822d95b4-5be9-4136-9a80-0d761f977d77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bc6d1df-95c4-49c3-b5b7-b50d05c78d7b",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf2a29f5-7336-42d8-a537-74d299f496d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1f2fdec-6ef1-47d9-807d-dfc6cfface85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f071c1a-10e6-4f6b-9c02-0c02e7511f5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19b6c719-7f29-4c3c-a5b5-54fa9d8c4421"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f333cefd-c736-4617-8799-78174f3cec08",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eed4ab0e-d35e-40e8-b1ca-c83002e19b8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a86a702-f950-4090-ab43-2479e9e94448"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "214d641f-ddd6-4afc-904c-07101af41fe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "790e34db-e020-4e51-93e1-8a214d651339"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1d1891f-cb32-4e4b-babb-e464bf56e288",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0c6e844-1c68-40e5-84d4-c80d236892bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77a564af-3417-482d-b8f6-e260fa301b1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f1e4939-400f-4a90-8b4e-40e1f862d000",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43f04ec5-4127-4a26-9fda-6a5ad6938e5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98afc55a-d93b-4e95-9835-e7d6b2a7aee9",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73c61018-43e7-43c5-bfd5-145b88e4d9a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06bcad4e-1e6b-4c94-bd36-7ee6e67901eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e758f9d5-36e9-4036-9505-dcb0bcb95e61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb206610-75c5-4d2e-bb79-ccb1d91124f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87ef621b-2c20-4820-9b37-21c07f0ae437",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d220e3c-d37b-4d66-b155-573cb5e41e67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9bd2a28-3ca1-44e4-83d5-4d3a050bad73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbdb0ea1-3a6b-4c1a-8404-e3eac91aa75f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3043ff6-2849-4f3d-aab7-4334f2a7ac09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3470e80-7f05-4ed4-b417-eddda2ca175e",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4201f2ad-8101-451d-a91f-b9990b6428c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fe01feb-7853-4f55-9192-10e3f89fc88a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b37455de-72d6-4787-9fce-f380129036d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3b7c037-54b4-49c4-a2fe-3863f2826e70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f11faea4-1798-4e21-9a53-c6e9f76c7433",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b18cd89-97b9-4dce-90f3-5496073ee4f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a255149-fd32-4ec4-bc96-0017c4a767a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9619b4a-f8e0-444b-8ef9-a293f7603460",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "042101b3-36b9-46f4-aebb-16de7001882e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f899f1aa-9407-4d92-83b0-c6ec04005059",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e883e345-c93e-4a3d-a321-477f1e4dae9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "897070b1-d721-48f7-a471-00cd8d1ca042"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "668e6f0a-7e70-46be-b649-26b338f12207",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70615663-0b6f-4e7f-98c4-6fb97cbfd15b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ac5cf03-ce5d-4b6f-9b21-6577b395f9de",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69538558-6f8c-44d0-9c38-20e65d764b4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59078b57-9642-43f7-931e-4fc905f39b91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c07b55ad-177b-4a5c-b039-a22b1c8c53dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a490ff80-447d-46ff-b6a4-ee5d094ecfed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f33ab598-eab4-4143-b0e0-8f5cb09cce1d",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d81fa37-c3ca-4c2f-b3d2-0e1655ca0bcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "513a2b08-66c8-4687-91cc-bb968ba3e483"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe4a0895-8f04-4938-abd5-50eced82d282",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbbfb27f-8261-4d88-8d5f-5331b335b65c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85e4d5ca-8d23-4406-bfba-745c1d0b5b92",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a001f7e-1080-4a2a-a6b5-16e1b9b24b88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30258819-9904-4ab5-a0ac-84c1ca874287"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7f80cea-c7cf-41ed-89c8-226efebc700a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84d26860-9905-464d-b295-4b5e372fd1c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66093ebf-5a91-4d95-8f09-31da8ac7868f",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84e38465-0044-471c-976a-788d218a0c2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7956ca7d-e971-4ed4-a9ae-da0053839bdf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afa3458c-834d-4074-a3ad-f2154b448eab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bda4f9fa-06db-4b93-b6b1-685bddc95cfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1294e1a-6261-4240-b8a6-5c3ddcfbdc2c",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b6e093a-04f0-439b-ac01-a848f8e584e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d59157c-8005-4b8e-ac48-465ff5e2d4c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8168293-5667-4b42-8ad8-0ed1412316a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b405abfa-40f9-4785-9c8a-88511e39d1f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f34c044-258d-4946-b605-c67467e689df",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df6b924c-99d5-4313-be2e-5a8eaa47f39f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c443502-6ca9-4ac1-a967-2a4ff51eede5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a99ce0e4-784d-432b-b37d-76175dd19ee3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4c47e88-5584-4986-833e-c1237e0ae9ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c5422d5-696e-4192-bf91-246734c3eec9",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5bf09b7-d84e-4111-9212-f85f26045a24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8deb107a-13d3-4b8b-9d35-31d1f48314ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "352fbcab-93d5-4a6d-bcae-0f63b8374d66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7e1e80d-eb83-4d19-bb7e-a979449f26eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f3a9041-8a3a-44ed-be7f-b71c5813a395",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c93f1a2-8e42-4ed0-9f17-46378654eb3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b722144-47ea-4a5e-9126-c14baed8f573"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa820d2a-2500-4e27-9cdc-a6dc0de60c2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2a61934-1ce9-4f64-bd6d-9d5cb771ddc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74e83f2f-2dec-4545-b1a2-0e4a178c03ed",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc8d17c6-eafa-425e-9588-a83e3936a161",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af3b03fa-05bd-48f1-8f57-f8d4261e3c34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fc12b67-602b-400f-95e3-1a46f427939f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc7e8ef2-3df4-4b42-bd5b-1c13439ff015"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0b26dcc-e7af-4c07-bfd8-dc0c0164b164",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c148e51-ecf4-405f-b21e-a99948c671b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c72df3d2-d642-453c-a167-bf42fdb48ef3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7f99f08-4260-4b07-8254-c7737248fa34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2df9b2aa-4769-4da0-aea2-5c2bd4306092"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dbd02ce-64a7-45bd-aca5-320fcaadaff3",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cb10c99-046a-4578-ba99-81d56b642f43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3246afee-3449-4255-be7c-98856c17cc4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40671734-d305-4d89-acaa-36537e0b69de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "072f11aa-0c67-4fc3-b40f-0996ddd610b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "771f86a5-7392-48f1-aee6-8becb025bee1",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d396d21-f72c-461d-8db4-c53109b621b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c529e93-5810-4cc4-af68-da34c6486a78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f00978cb-1ead-4072-886d-ce215731b6e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbc67138-b39e-44e7-a5c8-041ca88a36cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1c26411-975b-46cb-b590-04ae8484c9bb",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d866a159-0832-4653-9c6a-96f8a46463e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f7e4620-48e5-497d-9fc8-aba76cd060fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e774e1c-402a-4c66-89d3-0525a2a91c6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8740042d-f550-4ac7-b460-e97fe9af319b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c3aa0e2-24da-4178-a253-b9f100dd3375",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "997c2453-3a0c-4277-85cc-44b1feb2aa01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56d05274-10eb-477e-a904-01dd3d4af1f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f6a8106-f2ef-477a-8d5e-07d725778b52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72432db9-6fdd-4eb0-a891-c3c17cda011e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da0b5920-66aa-46cb-b56f-2cfdde021df9",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2848ea14-6e9a-480d-8a29-d3016cabb819",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "469c907d-af35-4e4b-a6f5-2c11242160fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7605dd79-2c0a-48e1-b819-60611d1712c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be7216b4-e32f-492f-9576-730db7648223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61173375-3eef-4bd3-b3f1-078a3707c963",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acd849e3-a6af-4a8a-8127-fadeb43e8eba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1933863b-3a04-4695-b2d1-8ff3eae39235"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f49cbd9-0ae7-4ff8-a970-28821389a3d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86ce3fa1-63d4-42d1-b5e2-aad6c4acf598"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49c927ca-d1a1-4d2d-90eb-27726ecfb4d8",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02d9ada5-79c6-4d8f-a561-e989f5e89c85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f25b8710-ba5e-4636-9a9e-69e0b16ccb52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64b42024-a2bb-4b25-b75b-ff374a9a2440",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ebe17dc-e1ae-4bf9-8e18-1894754ca824"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f649fe42-325c-4c35-95ac-fcc6604403b4",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1fd4cbc-ff90-4f04-be40-438b9ed70bdf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "deb94114-4b75-4aff-b506-7796a2a6bf9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73520a2b-a3aa-4655-8aab-d63196b8c2e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3e671d2-0de0-471b-bebb-861cf763384d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0ae5e41-9858-4b68-9150-e204e8dae48f",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f25c7a6e-0378-4014-b475-d4f233519e00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8bd06c24-87b6-4f78-8fa5-e73d0261eedc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a58d2d75-3d0c-401c-98a0-a3491966d96b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ce54a34-cc04-44e7-9059-c029505fba59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54963728-931d-43a8-aecd-7d6f17b42352",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed8b5de7-2d1f-4b7c-aec7-4e52eaf381e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8967114-dc3a-4e9e-a2d7-063ba675428a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77b47fe3-6152-44a9-9dc8-d1bf8063cd82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23b58cb3-1d18-4b7e-8bd1-644d846a6fb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce5ddf93-3e2d-4cef-9877-d4f5214ea086",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f55b5264-0871-4a48-8bba-b9805b601e1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c88a332-ef26-42f8-a4f3-7efd84a2f49c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "555a6854-053b-4717-a83f-48e9cc22c3c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4031a2e-386e-4e4f-ad8e-dd34596b6303"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8f47ca2-1bd7-4e6a-8e77-5dc62fc1feed",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8577eb6f-b825-4828-9ade-2df32e43d469",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b04bdaf-47d1-406f-b184-73bcf995e077"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d633d6a-7dde-4967-a4d2-3506308950d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29df0142-e23d-4226-aeb0-43bc1bef74df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a14c9b5-b4e7-4b96-a885-07f8dc3cd9a9",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84d627e1-9edd-4347-a0a0-e975c9ee542a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4fbac3c-5b82-4b06-b70d-b269787e36c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b980cf6-205a-4772-a45a-5b7f506a02bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c48f2b4-2710-4bf8-bdd6-a17ce4c9bd30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d10dd02-1957-498e-a722-cf3471067b5d",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48d28071-053f-4aea-8a4b-60219c0e63f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "723ae7a0-b060-4237-b695-c01d3d17d75d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d9d1c96-2569-451d-91ae-49e65ec850e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c9ab813-67f7-434c-abab-f605de3c8ece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "409990cb-7465-485f-9faa-0a454f6ae404",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ce3d5ed-813f-483c-a83a-8c174d6f3b42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "041b1d9f-d3e2-4f83-89a8-a52843b9bb18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bc6d97c-77e6-401f-9ead-02695a76cfb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e322339f-7f7a-40bd-bdee-d55435102427"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a275069-4f4c-4a70-a7eb-5607a99d4459",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a5a474d-5647-42f2-9426-89d51a4a33cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de713cca-607a-43f4-9d81-ca5be1388903"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "823f4d47-3626-422c-b54d-6efe5fe5d53a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03146f86-f68b-4a64-83f4-d38c5dad6919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee2655bd-7797-41b0-a9f5-ddeee332bbd0",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db49f9ca-e220-46d3-a6f3-0457ab70d0fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b947296-f6f1-4a1d-8b59-c7755b268c53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7670f88e-749c-4168-bff7-70376c381790",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23055a73-639e-4135-bbb7-57905e28ac15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cb7115f-d0d4-483a-a49f-3d316003abca",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a1ac6af-38dd-4da4-a58d-db5bff0f95cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8e5157f-3319-40d8-8db8-591116949610"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a070e2e7-6e79-4ca6-a9d6-6f3f8d9bbdd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab760190-12a2-4bd5-b6c0-edb9144aabbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb68a6b8-43ac-4ea6-87e1-cd6dedc06c4c",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6fde9c1-36d5-4cad-bfd7-fd2777dd7ed1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0806157e-1146-4519-b381-fe2b3eb4c051"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29bd9623-a715-4413-9ab2-a3f72688bf62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18ed0955-ac6d-4cfa-a358-06d738956cfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35c46e78-b63d-48d4-962e-f7e314dd7853",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c757ddfc-d869-48ce-a460-0fd713170719",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bcc679fe-9bfd-4d86-9d1b-11e940e04618"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "351a085b-abaf-434e-9def-dcb222e18509",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26679411-4afd-4f58-abc7-6ef5c4386ad5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32400735-44af-4a1b-b922-ad1773d1f13a",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a65f4300-73af-4d2f-93f4-0e4cb7993c25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a5e8ce1-32f8-4a06-a324-d8399173825e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e5296c1-f4cd-4c2e-b18d-da94283e8c2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b01485f-10c7-4742-bb2e-aa88dcdadf67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecfcdaae-5f4e-41d7-ae45-3fd136f26fe7",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1265b164-112e-42e8-a55c-75011a848331",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffe5fa0d-9953-4306-a2d5-2237cff5b3c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "515032b6-dc27-4629-a8b1-7745a3e92986",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f17cce1a-8975-4f55-a08a-e9bd38678395"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fac0221b-4322-4f2d-8683-44e5b8d0d039",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ea949ff-12a4-4eee-9a3b-34cb2f261b00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6bb3aa5e-c7c3-4269-a812-02e17ac229d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62aac08c-88e0-4ec9-9346-bb2ba270cae6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d031ca64-dd59-4b6b-b5f9-2ad6afe2143c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71766484-37b6-453f-b116-27a5bfda2da1",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd1beb93-354f-43a2-a76a-6c50e61f3be2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cbe8164-cba8-4a79-8d7a-08c16bc7bd8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a8ee9c0-0fe6-4a51-b279-2bf020f260a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18a54858-4c2a-44c9-a753-b6716d2bf9de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45bddabc-b105-4b01-b222-dd1e9b0d97d4",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a421258-f89c-4835-895a-e18867c5d24f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0b4ecb8-2710-4f62-ab44-e6c958a22049"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5da85798-1a4c-43c9-84e9-b585f10d415f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79a11d4d-82d5-4e82-bc70-b32460e70acd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb485f97-eb96-4a3c-ba49-e85d6b119773",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9c59bd5-a635-4b1a-8b23-b32dddfd9e94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "caa279ba-708a-4ae6-8b8f-fa8aa17ee2b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e89cf088-ea35-49fd-8608-6d4d1b070f3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3f51004-5771-4b8f-94a3-fcaadf1f99f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "914d31ff-9c96-43a7-a3fa-0788ff09fded",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f9eceb2-b243-4561-a625-3dfe6b2e7db6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9d99e11-be30-4d60-b005-8ed8ca5d8351"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b95faf9f-267e-4ff7-9b31-3c284ade626f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6fac0fe-10a4-442a-84ca-09d4519ffc00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99bec149-e4e1-481c-b371-ea253d7a169d",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31611311-8fd7-4230-afea-b627aa829cc8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "695ad846-66f1-4e3f-9b79-2184f868fb80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "748b040f-9919-4fae-8d4e-ecdbf2dee7cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "452abf5a-eeaa-44d9-a5e2-c1e4d1410425"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b81e91e-f252-4521-b561-9b4365b1946a",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "107e5c16-9de3-418f-9d31-13f188066468",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c287919-70d2-45e1-9330-67a5143843c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fe4fe06-baf3-491f-9aef-fd3a0d7de921",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "221fe264-d57e-4837-8832-afd3b4c4958a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fffb745c-588d-4855-b68e-0037a42fb387",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "004b1f59-22e0-4e40-aec0-be512075da91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a07a17e-12e9-48a8-bbe3-40c47e6283d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ca975b3-d0bb-4dcd-984d-c0b59b1cd370",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4e43324-1132-4c3e-bb88-68268b7a82e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee8c69fc-db24-4e76-94c4-36690970a00f",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0747840-587b-46f6-9706-c65063131063",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ccb1bd26-5235-42c2-bcf8-63575de337a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a4ca48b-1c05-43f8-8e25-e6ac89dd16a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c53cc64-9465-4840-b76d-629c69b582f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c1710df-2ce3-4242-9018-622cb3247ae7",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e765c990-83cf-4bf9-801d-e2af175cc85d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80937fea-80f8-4f18-b1e7-ce92fd87c9b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6b006a2-5a43-4e54-b6fb-d9d5b16b9330",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18fdbdca-103c-437b-a279-cc047fcc81e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5ac6957-5ecb-471f-b4c5-1b6c1bf9b4bf",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2326a9ea-6c15-4b73-80e8-ad615556468b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c878cb8a-5b6e-4895-b5b5-4c83ebd56ede"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7148a59b-105f-4bf4-a33d-34b3768ae6ac",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d4969e2-dd4d-4c7f-9b2e-77f0f1ba142e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e079a95-9969-40b5-a7c1-489af479f32c",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d4c40fc-be4a-4bcd-bfd7-3d97513838a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5fb4c35-eadc-4679-96ec-0297b8579e18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61022b3e-b622-4726-bc02-4cfc9f995daa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b10a882-9986-46e5-91a5-1a48102c8573"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca06ae28-0131-41bb-9fda-8c5cfb74c5aa",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8af05e85-e793-48b2-95d5-142f2baaf1dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc5d104b-d2b4-4c8b-9071-e3cdd6dae306"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "931dd62e-f32f-4281-9d1e-431fab0da7fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a134b330-6236-41ee-95f9-c3f53da5851e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "250dd6a7-0038-4455-a470-24f0705198da",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e4f85c2-7f71-4b9b-ab06-371378cf4d98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec3fd571-43b5-40f5-a41d-dce542e37413"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a1dd627-9c30-49fd-982d-bbc44a381edf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37c4f02e-0010-4c80-9c96-1bbdbec1e17a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d448d410-8f10-4028-ac1d-d30f7015b49c",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00aa20f3-172e-4747-beca-36f5d1a6ecd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4dfc19f-3c12-408f-b1a8-c214977235e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dcee07c-08ae-4d15-9d80-e0153abff09d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03f8e8a6-dbe8-4e37-885b-7cf2247a25f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02fec3d6-3bce-4ed3-816c-06a7e2f054ed",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b40e1f05-8fb7-4c82-9a3f-ba4a7d83317b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c7c5395-bb26-439e-9868-6253d18db93b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5ebb110-b46e-4338-851b-4bd00e0db6f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b855852-53c7-4d67-91f5-0f84021f88db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4608aa2-31d1-4965-a75a-5348e68a7c0a",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3b10cb2-6ec8-4159-9d5c-75c373394363",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6df4d46d-7b8b-43a0-bb96-d0b0740a5f04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a58c04b-1895-4b4c-8795-4eb2a027723a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6eba1866-6d43-4792-9167-0dfd6982a53f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "815797b2-a05c-4e4c-b297-c6ec6936579a",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5a9dbcb-0cb2-4e4a-83c7-fe0e95526137",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea87027e-aa53-412e-bda2-d6672a666f2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c34bcd5e-88c7-4cce-887d-054c80e178bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03ed2746-ff09-4bbf-b628-5c5927318dcd"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "90210195-78ec-4a59-b8e5-6cbd5c6e8d74",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d2da42bb-124e-449b-9ddb-b68c983dc968"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "be4504d3-907e-4f6f-aca2-90cfba06d8d0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a310a862-a586-4b12-839d-e478aa9b030e"
                    }
                  }
                ]
              },
              {
                "id": "3670607a-06ae-482a-bed6-cda9c51fb8e6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a7357a4f-d58a-4aad-bdfa-a92bb9fe9d48",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76ea359a-8420-4239-95de-437b076001d8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "970511b9-4d49-4ec3-b2fd-8add190a76cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fa2af94-ba5e-483d-8c06-3b25b11f7046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "49747e45-b4c1-4422-b32e-1a714da65902"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bf61c4f-6c2d-45b1-a87c-d02f7b7ffd4c",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34e0b6f1-a904-4930-b1db-d371f997880c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "daafd109-1085-4c80-ac95-03d650667118"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7d57316-88d3-4db3-aecf-bee030a8f47a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "25d36ac7-2f77-4a2f-8673-a8a96617ce66"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9be65c9c-9922-40bb-9fa7-230280483ed3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c4724c97-2176-44c8-8969-dd6b76f856af"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "58490054-c48e-4be7-a306-b78752f25e6b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cf6e5f68-88e4-4709-83d2-4d2caafd4ada"
                    }
                  }
                ]
              },
              {
                "id": "25a05494-5891-4b5b-be62-b898178d3c6f",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "dbb3fdf6-d7be-4b89-9045-b8b14e4cdb69",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2efd3ed2-bb33-4e7c-8ff4-42e5f2de17db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "a3cf5553-2e90-4931-8d99-1e51f505c8e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa3db47a-c527-4a4c-8e52-b2f7477974eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7e5646b-ad3d-4519-b803-4ee39584f0c3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c5250243-baad-4d71-aa55-249188a99b6d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7fca6ac5-0d41-458a-8e15-0e93888294dc",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "22348845-d454-4e75-b0a7-d7ac271099f3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "1e23cd59-b204-45c1-a116-e7cb21d79c09"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "de81464e-a030-4fe8-8add-546195529888",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8e40a091-21d8-447e-b167-8fc0511ee1bc"
                    }
                  }
                ]
              },
              {
                "id": "1e5fcfae-bda0-4515-a76e-649069b70d8f",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4c4b7715-031d-4ca0-b1b7-9f5ba09c72b2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "814fcc35-ed4e-4cfb-b0f6-e485bf9ac934"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "51377703-8151-4619-a9c5-776354a97538",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dc20debd-5546-4361-97c3-d8ac822229bd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "114a62ee-240e-49db-95a7-f8efa9c612fa",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "7fb1b808-5c0f-47d3-938e-04bc5c519504"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b92a401a-299f-4da5-83b5-5b4ca8b18d0f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3ccf3d26-5faa-4220-8147-5488d2dd86d5"
            }
          }
        ]
      },
      {
        "id": "7d68420c-20c1-446e-9288-7023a66e5597",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "0df3cbaa-5c54-4137-b51d-e0c96545ac0b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "04caa345-7b90-406e-8a35-d286ecd6f472",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bb99baf8-51ac-499d-9a16-ddbd9777ffab",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5612d301-f9d7-4ed3-95d8-a57af0501293",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2db37502-ba53-493c-89ea-52ae7a8dc961"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e2fa0c7-497c-4fcf-8a2d-3153eeb28a3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d85445fa-59a6-4d6c-83c0-6e29ee4722c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f33747c-914d-45f2-8061-c9b1974d2fb8",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35224d5b-b24e-4d1a-9a7c-833c2edbd0e9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c55d903c-e003-4025-b2e6-fc22d5030771"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8f07140-5825-4a0d-acd8-eceba7393c64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "479b82ea-53f9-4d42-8795-bc9e952f2c2d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d3b510b8-2555-4436-a359-3e3399593eb5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1a2dc9f7-fcb9-4448-abef-091e79cb0af0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b2906f5-4889-42a5-ba90-c1e7fbf1442a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a379aeb8-ee68-4ae7-9bd8-e199ba2465ca"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cafa2de4-ef7a-4352-8d1b-12a67481f8f6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8d80343f-0ba4-4408-b5e9-5668e307e3b0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cce71f1e-2ddc-4c7e-be6f-e472c79d2b6f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3262d6d9-4e69-4a77-8113-77f22f6d9ec3"
            }
          }
        ]
      },
      {
        "id": "6d0a12fd-ebab-470a-93b5-e85bbfae7525",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "f815671a-6601-4ec0-9942-c2a6accc1e7c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c9a59b95-917d-476e-b7e8-0b32675f0a9e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "59aee93e-3646-4afc-925d-e5e401222971",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f9324ba-53e3-4c78-8a4c-0a23d20962a1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cc8587eb-62c9-4045-9c82-60c0a572c467"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b98930ce-a58f-4dab-a5da-8a81cbb20ef6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "40845049-8a61-44e9-a12f-cf1d851e3bf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "494cac8d-ac0e-4cb7-9a98-5f71e8707452",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfccde07-308a-4f37-920c-ffa164030dad",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "0564374e-0a11-47b5-8e95-b1a0147ad1ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8229bd8-846c-4556-93dd-fcbe1bda6dd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "86998957-b412-4976-8313-9186fe6a9cf9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "27467b28-8e52-40bd-b952-84356238ebdc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "163caf3d-edaa-41ff-b448-b0ec040b8f06"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2cd448bd-3d9d-452d-92ab-bef5c1521767",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "944c45d7-84ed-49b4-97fe-336b797aaff1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8d1d4c83-63c4-4c8b-9377-50941698df47",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ac9787ce-c908-4b4e-a3b4-64a8ec65757f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2dd20c97-4e33-47b8-a341-b9dcc6ca2887",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c3e782b0-d6a8-4d7b-9ed1-d385171c9da0"
            }
          }
        ]
      },
      {
        "id": "3b223197-de00-4d3e-8ed7-62b751811797",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "764a043a-12e1-4822-9148-377f1c128a67",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c94601ba-2e0e-4069-b453-6b1059d0ec45",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "11ceb895-7567-4148-8344-bda298755903",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffd13dab-612a-4d4f-a0f2-249ada7fbe27",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "feb9bb6e-cb22-44af-8939-8a2ec4136005"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbac8f0c-bfcb-414a-a062-c9b25bbc1c3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "87f61546-c9c0-4eb0-a15b-4d52efd43a62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9ba9250-5104-4634-9210-65d9336b59af",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd4449d5-d838-404d-a44d-9b30331d1bf9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "f8a72012-dd72-4a60-b3e8-0d7aed99f0a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95494a90-be3d-49a5-adb9-cb990dd45533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "88c81c77-dfef-497b-80b0-714faee2e681"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "19ced634-020d-4bf2-99e7-51924d1c77c8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bbbf2910-6727-4e46-8491-f929d6a31111"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0d0b360b-f396-4639-a10e-a523c08b2d96",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0f75650d-53ff-491f-a1f1-7044582e5b38"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ff5ecfff-1418-46df-a5d4-ded4dcac9e87",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e0b8b4cc-57d5-431f-be66-38912e66b3ec"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3b105cf7-d584-489b-9236-5d314e650229",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "725e096c-4919-4157-b25e-2e2388423c75"
            }
          }
        ]
      },
      {
        "id": "c96a5479-b496-4d30-9200-a8435b7b30ad",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "69efe6ed-b073-4eb1-a151-ab0bc96d0136",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1fb7660f-79cf-4094-a13e-9a7ac790a7cf",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "408a644d-d4ad-4b71-82c1-4e802ff60e5c",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5b586549-075b-4a17-b66a-760899e257d0",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "96e4cc27-8d31-404c-bada-f93a468b3147",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 289.2807692307691,
      "responseMin": 6,
      "responseMax": 5612,
      "responseSd": 781.6480186214211,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1685320728149,
      "completed": 1685320815536
    },
    "executions": [
      {
        "id": "d670d522-fc4b-4d50-995e-1ee00b5c2fdc",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "53578058-1325-485a-b9a0-bbd79d2f59db",
          "httpRequestId": "ad8c111e-1794-49b2-88fb-c60ad168d3be"
        },
        "item": {
          "id": "d670d522-fc4b-4d50-995e-1ee00b5c2fdc",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "b9198241-81c7-480d-9fb0-b018980ec124",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 0
        }
      },
      {
        "id": "de6067e2-3657-4b83-a239-2b99925a80fe",
        "cursor": {
          "ref": "9ad56a72-e20b-4a7c-9552-f5b6040acba2",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "9c558fd2-91d6-43ee-b13a-7b025de03fd9"
        },
        "item": {
          "id": "de6067e2-3657-4b83-a239-2b99925a80fe",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "b6d8e079-6063-4584-b4e3-468c75417755",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "48a46d16-dcf2-4329-8a73-61eedaa27dff",
        "cursor": {
          "ref": "43ed0ff5-36d8-4140-903a-8fd404b475d3",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "590a5264-137f-47ff-92a7-7d96ade10f89"
        },
        "item": {
          "id": "48a46d16-dcf2-4329-8a73-61eedaa27dff",
          "name": "did_json"
        },
        "response": {
          "id": "639ffe71-7e4d-4adb-ac6a-d967b02577aa",
          "status": "OK",
          "code": 200,
          "responseTime": 703,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5288f6d-b423-4227-99ec-560e0ec43e65",
        "cursor": {
          "ref": "b58ca999-2e5f-462f-9cff-5eda2a768840",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "29044b85-cb75-441e-8c30-09a3edbae300"
        },
        "item": {
          "id": "a5288f6d-b423-4227-99ec-560e0ec43e65",
          "name": "did:invalid"
        },
        "response": {
          "id": "df96506f-d60c-4c8a-a658-b98e6fc64d98",
          "status": "Not Found",
          "code": 404,
          "responseTime": 924,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "a5288f6d-b423-4227-99ec-560e0ec43e65",
        "cursor": {
          "ref": "b58ca999-2e5f-462f-9cff-5eda2a768840",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "29044b85-cb75-441e-8c30-09a3edbae300"
        },
        "item": {
          "id": "a5288f6d-b423-4227-99ec-560e0ec43e65",
          "name": "did:invalid"
        },
        "response": {
          "id": "df96506f-d60c-4c8a-a658-b98e6fc64d98",
          "status": "Not Found",
          "code": 404,
          "responseTime": 924,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "ef858f33-5ee9-4877-99ea-f1f8b85cccc2",
        "cursor": {
          "ref": "1f0dd742-0704-4709-871b-2559b74f8db3",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "0a73e18d-beed-4776-8ada-1a50145727ca"
        },
        "item": {
          "id": "ef858f33-5ee9-4877-99ea-f1f8b85cccc2",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "266933f3-da60-4a18-abde-93830dcf9308",
          "status": "Not Found",
          "code": 404,
          "responseTime": 65,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5b8bc64-0ff6-4e14-800d-e0092f916cdb",
        "cursor": {
          "ref": "6d5c2153-4442-4147-a5ee-91b4cfd9d397",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "6cfdafe0-cc57-4aea-b985-867a8c502aea"
        },
        "item": {
          "id": "d5b8bc64-0ff6-4e14-800d-e0092f916cdb",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "c11a9a24-e475-45ab-95ef-5f3281bb029b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 75,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2064c220-08c6-4543-8468-2cb9cac2d7f5",
        "cursor": {
          "ref": "05129006-f74d-4643-83f2-9a2f7c88c93b",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "6495305d-0572-44aa-a512-100204286e8c"
        },
        "item": {
          "id": "2064c220-08c6-4543-8468-2cb9cac2d7f5",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "2ab9d7df-45be-499a-be2e-c6d798dcaf92",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "b87a2f0a-e9b9-402e-8228-043ee08d4f5a",
        "cursor": {
          "ref": "674d476c-7918-45fe-baab-35516522acc2",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9a177e34-d48b-4d04-8e38-fcfb42bc8971"
        },
        "item": {
          "id": "b87a2f0a-e9b9-402e-8228-043ee08d4f5a",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "ff71161b-8692-4601-b7c7-e479450d25c1",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "b87a2f0a-e9b9-402e-8228-043ee08d4f5a",
        "cursor": {
          "ref": "674d476c-7918-45fe-baab-35516522acc2",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9a177e34-d48b-4d04-8e38-fcfb42bc8971"
        },
        "item": {
          "id": "b87a2f0a-e9b9-402e-8228-043ee08d4f5a",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "ff71161b-8692-4601-b7c7-e479450d25c1",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "cec2c8c9-0b97-4411-9b9a-4fa9eefc2105",
        "cursor": {
          "ref": "dace6a4c-fe80-4632-b710-693dcdebc83c",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "a2c19a8f-feda-411a-82b7-dbbc1ecb47e0"
        },
        "item": {
          "id": "cec2c8c9-0b97-4411-9b9a-4fa9eefc2105",
          "name": "identifiers"
        },
        "response": {
          "id": "18902453-965d-4cf9-8a86-4362b2ee7c41",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ea91c79-91ab-4d7d-89b2-646d1a86397c",
        "cursor": {
          "ref": "7f8e85e9-79ff-43db-a5a9-bc399bb98b5b",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "7ef53f2c-d299-4edb-a3ca-3db4758e9cb8"
        },
        "item": {
          "id": "2ea91c79-91ab-4d7d-89b2-646d1a86397c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5b291856-9514-4ed9-97e5-c94036b392cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ea91c79-91ab-4d7d-89b2-646d1a86397c",
        "cursor": {
          "ref": "7f8e85e9-79ff-43db-a5a9-bc399bb98b5b",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "7ef53f2c-d299-4edb-a3ca-3db4758e9cb8"
        },
        "item": {
          "id": "2ea91c79-91ab-4d7d-89b2-646d1a86397c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5b291856-9514-4ed9-97e5-c94036b392cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4990e037-adf7-4d18-aca0-7eb3c0e04202",
        "cursor": {
          "ref": "0d7be391-f160-4a31-a1b5-02488ef629ab",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "76fbc387-f431-4aea-b41e-ec5e1c9f267d"
        },
        "item": {
          "id": "4990e037-adf7-4d18-aca0-7eb3c0e04202",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "acff3716-7142-495e-855e-8610c5239c5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d358b0bb-a755-4c40-b266-72687f256d7e",
        "cursor": {
          "ref": "f3787754-d117-4a24-b2df-4798af0be36f",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "55374528-a4f0-4b52-9e33-474bdf246c16"
        },
        "item": {
          "id": "d358b0bb-a755-4c40-b266-72687f256d7e",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "f140b1a3-421c-41be-8757-8539522f7e4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f219280c-7c14-4e30-ac19-c9bf151d08cf",
        "cursor": {
          "ref": "6a75e078-2ce4-42f2-aaec-92e340a4c511",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "ab8b1361-e674-4125-9016-a228e62a4a57"
        },
        "item": {
          "id": "f219280c-7c14-4e30-ac19-c9bf151d08cf",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "1fcf3cc0-a8d4-4c45-811d-85b261826c4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c57ec8b-dcc0-4725-9de6-8f4aaa3962d3",
        "cursor": {
          "ref": "1396a68b-5652-488e-9021-3c4a7136b6c4",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "e398c21f-2673-4df1-943f-8c3a8abbf190"
        },
        "item": {
          "id": "2c57ec8b-dcc0-4725-9de6-8f4aaa3962d3",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "b54488b3-b338-44ef-a92d-a10af4241a87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd714a55-eb83-4e67-b076-56e863f01393",
        "cursor": {
          "ref": "386100c8-3693-4436-aaa5-bb2eb892c49a",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "9c934aec-697c-423f-90db-8234aa579545"
        },
        "item": {
          "id": "dd714a55-eb83-4e67-b076-56e863f01393",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "c2f10c07-0cbf-4220-87ae-97d92583caa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d3feb11-fb05-4b00-a76c-2ffe1ebe5900",
        "cursor": {
          "ref": "c4bd5543-68c4-459e-8e35-909a28193fbf",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "acc77034-9253-44c4-8cd6-04980398af4e"
        },
        "item": {
          "id": "3d3feb11-fb05-4b00-a76c-2ffe1ebe5900",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "ee576418-7572-4a9d-a974-0413d8edff89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f59213bc-f9d3-481d-a167-73eaf072745e",
        "cursor": {
          "ref": "9eaf0bb8-6b75-4fc9-abab-8163a4d96e7f",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "816752a4-3c83-4f98-b70d-e5c765ac1b51"
        },
        "item": {
          "id": "f59213bc-f9d3-481d-a167-73eaf072745e",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "88227b9e-93dd-410a-82f9-ff09aee5ac63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd0095ef-51fa-4f80-acbd-9bcf89c38c8c",
        "cursor": {
          "ref": "4085445b-1b05-46f2-9e37-589cd92c31ba",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "4e781e37-784e-41df-87c0-0e020daa197c"
        },
        "item": {
          "id": "bd0095ef-51fa-4f80-acbd-9bcf89c38c8c",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "f997ae86-02eb-470f-921a-31a924feb110",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa28039c-2f93-495d-901b-7b6012a98a27",
        "cursor": {
          "ref": "38399c96-01b1-405f-8fa4-483f8b5c9b5b",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "bc8b0c31-726f-4d44-9c51-4c2c514a5049"
        },
        "item": {
          "id": "aa28039c-2f93-495d-901b-7b6012a98a27",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "b44ebd0f-b9b9-4d31-8613-78f15f71b5f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "852462d0-69f2-4a7e-973e-ba1d48d635ee",
        "cursor": {
          "ref": "c9947041-6fb9-4aee-bc6e-285ba5f42b92",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "abeaa5a9-8866-457a-a3e4-fc698d571d1f"
        },
        "item": {
          "id": "852462d0-69f2-4a7e-973e-ba1d48d635ee",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "eca16dc7-2966-41e1-9d7a-f4d2715be5f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "807d9daa-7cb6-4887-9858-371d7980ca74",
        "cursor": {
          "ref": "38c1cb99-9d08-4a15-a0d6-a99c29fb6113",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "1b99e9dc-ed80-44f8-9e8d-c5a9ef71e9a5"
        },
        "item": {
          "id": "807d9daa-7cb6-4887-9858-371d7980ca74",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "4222f267-49fc-4db7-93a1-3cd4a7f777b8",
          "status": "Created",
          "code": 201,
          "responseTime": 1044,
          "responseSize": 981
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "e0aae2d1-9abf-449c-ad16-790ab050f229",
        "cursor": {
          "ref": "37170708-815a-418e-9d8c-fbe52b988412",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "7ca5ee6d-a871-4964-a424-9a3b0a8b5f17"
        },
        "item": {
          "id": "e0aae2d1-9abf-449c-ad16-790ab050f229",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "5c201705-c18b-4738-9466-27e27ac53010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 209,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8109e84-ded4-4109-aab1-065c40b70056",
        "cursor": {
          "ref": "6efa33fb-2f4f-4526-a706-ec392df2daf3",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "0b68de8b-817b-4c79-b489-73581aab0391"
        },
        "item": {
          "id": "a8109e84-ded4-4109-aab1-065c40b70056",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "ba4caa18-4634-44e8-ad3a-ec1d3ef05f9b",
          "status": "Created",
          "code": 201,
          "responseTime": 5124,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "bd8f9c18-0a45-40a2-b370-e783fd0ae687",
        "cursor": {
          "ref": "bfce1e5f-6b24-495f-8fc7-15d18de7095b",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "39dfde76-aea8-4a1a-8455-ac8201efee53"
        },
        "item": {
          "id": "bd8f9c18-0a45-40a2-b370-e783fd0ae687",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "cfd8231a-8e27-48bf-9c35-7e6a400b20ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef35d375-d75a-48e9-aa59-292252941cc5",
        "cursor": {
          "ref": "6776e0ec-9e3f-475e-bd5d-72336a1ced68",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "00907f55-7317-48e3-854f-188575d7efeb"
        },
        "item": {
          "id": "ef35d375-d75a-48e9-aa59-292252941cc5",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "57940910-7673-4deb-8c2f-6b354cba8d7f",
          "status": "Created",
          "code": 201,
          "responseTime": 5612,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "38e28057-aede-47e8-8d65-fd8963e93af8",
        "cursor": {
          "ref": "82c59884-5ba2-4757-b387-b5ae76838abc",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "c8cae147-89f5-49fd-9f05-413fb6eca5bb"
        },
        "item": {
          "id": "38e28057-aede-47e8-8d65-fd8963e93af8",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "05b752fe-5b94-413b-a1cd-1dd8e3f46824",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deac3a3e-8800-4efb-9ad2-2865128a9d41",
        "cursor": {
          "ref": "0509370a-63ed-4f7e-8761-d73634401215",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "bd5f6ae4-38b8-4edb-8af3-f518a8806f02"
        },
        "item": {
          "id": "deac3a3e-8800-4efb-9ad2-2865128a9d41",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "48d000e3-6655-4770-b925-2c7ec3133a77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6dc959f-1b53-4d18-954b-7876362e55cd",
        "cursor": {
          "ref": "14cfd63a-5e9f-4b92-a492-9083c8184c2f",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "81f4dd12-8c19-4efd-bf26-31be4465b047"
        },
        "item": {
          "id": "c6dc959f-1b53-4d18-954b-7876362e55cd",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "a1793b67-d5ab-428e-ab66-c6800fcb0da5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc92529b-b4a8-42f8-a12a-cd7839dd5c9b",
        "cursor": {
          "ref": "c54198dc-8ef5-47bd-8e05-2a2ef4c3cd09",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "89bfd804-6cdb-4ad7-81d2-0cb82a0b1a1d"
        },
        "item": {
          "id": "dc92529b-b4a8-42f8-a12a-cd7839dd5c9b",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "dfd51702-8dea-4dc4-a766-409393863f7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55964424-bab0-4f90-bf39-b3081eba29f3",
        "cursor": {
          "ref": "b2fcdf63-6229-4d41-818c-19e29fdf10b8",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "980bce79-cb6e-4642-ac0f-f3881a8498c1"
        },
        "item": {
          "id": "55964424-bab0-4f90-bf39-b3081eba29f3",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "add84a73-d641-4265-b14b-de4cf8d4ba9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fbb70f6-971f-4fb3-96db-8b559ff595a4",
        "cursor": {
          "ref": "6afd9de6-259a-4c47-ba6a-554a39ae0881",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "daeb033a-1cdc-4bfb-bea6-d07911982c6a"
        },
        "item": {
          "id": "2fbb70f6-971f-4fb3-96db-8b559ff595a4",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "266d7a5e-e2f5-4afb-b940-f7784089cb62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1e7e255-7b3a-4ef8-8bd3-fc703e70f0c4",
        "cursor": {
          "ref": "a1beef3b-bd7d-4a10-a973-4a2b47f77fb2",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "bc9f0db4-79b4-4a19-92d5-39b3c9bf98f3"
        },
        "item": {
          "id": "a1e7e255-7b3a-4ef8-8bd3-fc703e70f0c4",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "6bfae7c3-fe82-44c1-8e8b-5a8d5a20e078",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 394,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23d2c024-d170-4c53-9c43-29b069e92c3d",
        "cursor": {
          "ref": "a22c2014-95a3-4b63-aa9e-182f7a87fe7b",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "914bd435-516e-4c25-a963-ff08e4912844"
        },
        "item": {
          "id": "23d2c024-d170-4c53-9c43-29b069e92c3d",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "b028b999-391f-4b69-b8c7-d5f407cbc3ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 273,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b548918-2754-45d7-8684-f8e49582ec99",
        "cursor": {
          "ref": "ce7234ee-e4ba-4e53-9fed-6b2a5248db0f",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "81b78459-78f7-4fe3-b1c0-e22233c553a0"
        },
        "item": {
          "id": "9b548918-2754-45d7-8684-f8e49582ec99",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "69f8eea8-aa68-4582-9dec-9446824243bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 188,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e3d2863-e279-46ee-8317-67ef235a7417",
        "cursor": {
          "ref": "5437bd52-6fb6-4721-a3ab-df02b839dafe",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "c28b5528-c063-498f-92fb-2591e09f2d8d"
        },
        "item": {
          "id": "1e3d2863-e279-46ee-8317-67ef235a7417",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "4efc2aeb-f69a-4746-84ed-579b360d3e37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b97d8ce-3233-400b-821f-a670b871e679",
        "cursor": {
          "ref": "995a7836-53ba-495a-a0a2-7a7f17bfd3be",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "b4f2bd26-502b-4447-bed3-7ad2216297d7"
        },
        "item": {
          "id": "8b97d8ce-3233-400b-821f-a670b871e679",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "d97d93ea-9817-4107-bbe3-b8367028b77a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f86c3ea4-5d05-4c22-9f8a-0b2093a3b81c",
        "cursor": {
          "ref": "fe96dcfb-4348-475c-98a5-cca83c6459c9",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "1fdd194d-6107-439e-98a7-3e149a234eff"
        },
        "item": {
          "id": "f86c3ea4-5d05-4c22-9f8a-0b2093a3b81c",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "3821c442-9886-4592-977e-16315b80dab3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "014dea3f-3da9-4315-85ee-a842b5e9f8db",
        "cursor": {
          "ref": "2349fef0-2569-43e0-8c6a-2e1f29c27ac3",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "7c9e6759-add2-4f65-b3a7-15f40ffe447e"
        },
        "item": {
          "id": "014dea3f-3da9-4315-85ee-a842b5e9f8db",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "e8797be4-5244-4233-84a4-5b1259b74aee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5e8ff02-5cb7-4c76-8b77-2208b8d57d93",
        "cursor": {
          "ref": "555ede15-d4da-42ec-8c7e-c682685f8a50",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "f8b8de82-af59-4794-9d01-323228f56728"
        },
        "item": {
          "id": "b5e8ff02-5cb7-4c76-8b77-2208b8d57d93",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "fd189f04-a7ec-4965-8876-39c04ee5b7cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9199eb66-a496-46c1-aa6d-c849ebfe5ec0",
        "cursor": {
          "ref": "1de99884-9212-40da-ae5c-212e63cd2724",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "4f111c3a-ea13-4e09-adc3-b765611749a1"
        },
        "item": {
          "id": "9199eb66-a496-46c1-aa6d-c849ebfe5ec0",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "69f004c3-6be9-4df7-887c-8d0bfd2a32e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ca51f4f-5d14-4a3a-8195-4f85de480133",
        "cursor": {
          "ref": "2d9f652e-0e2b-4418-b65c-404f2ae1edd2",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "0496c161-ca6e-459a-ae32-6749c14ae31c"
        },
        "item": {
          "id": "4ca51f4f-5d14-4a3a-8195-4f85de480133",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "c1d4d356-3463-48cb-ac2f-2d1dbb172c11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12b39731-5ae0-4f85-8aca-fc17cd770426",
        "cursor": {
          "ref": "037d609a-9c8c-451f-88ec-19c1dc5af4de",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "4d2a485b-0adc-4798-a4eb-e80813a13fab"
        },
        "item": {
          "id": "12b39731-5ae0-4f85-8aca-fc17cd770426",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "8fd819f0-5ea5-415c-99a3-a8543b6ed1cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2041149f-ea43-4bce-9bc3-765e5a68c72b",
        "cursor": {
          "ref": "a8a14629-a24b-4298-939f-97fb218cd6dd",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "ab00d8be-ed17-4fdc-b093-608f4012e1b8"
        },
        "item": {
          "id": "2041149f-ea43-4bce-9bc3-765e5a68c72b",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "64ad592d-1010-478e-a136-882b79f66242",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58235850-2f01-4997-a255-c24457212da6",
        "cursor": {
          "ref": "5f1b6f2e-970f-4158-980b-5ed08fcaab52",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "e69bb258-3fc4-43bb-8975-c49ce798820b"
        },
        "item": {
          "id": "58235850-2f01-4997-a255-c24457212da6",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "d1bbd9aa-4080-4a28-ac60-9338514d8caa",
          "status": "Created",
          "code": 201,
          "responseTime": 2661,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "8afed5a8-7189-4769-b5d1-4c3c360120df",
        "cursor": {
          "ref": "a258253f-8148-41b7-89c3-c24156ad94d6",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "c516ada4-0229-43f8-a087-a080ed374067"
        },
        "item": {
          "id": "8afed5a8-7189-4769-b5d1-4c3c360120df",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "559594de-f428-4f7a-afd6-bbb2ebf99e9b",
          "status": "Created",
          "code": 201,
          "responseTime": 2377,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "ecf0f6e8-23d9-4b0f-a2cf-6433e38d4ce6",
        "cursor": {
          "ref": "dca6d4c6-9229-4114-b656-494885dfb4d8",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "46a62ecc-02af-4b0a-a95e-1e73af9fdcd9"
        },
        "item": {
          "id": "ecf0f6e8-23d9-4b0f-a2cf-6433e38d4ce6",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "b2484878-f304-4c6f-ab6a-fa8fb8f0620b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 491,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe641dac-fb52-4181-9b89-c66403788811",
        "cursor": {
          "ref": "746c8f48-5a95-4d15-b8fe-598fa431c094",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "1f54f8fc-92aa-475e-bc5f-12e0e61f6543"
        },
        "item": {
          "id": "fe641dac-fb52-4181-9b89-c66403788811",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "8aaafd43-a371-499c-99b2-b18b328ba477",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "592422ee-42e3-4117-a9a3-7d9f6efa51b1",
        "cursor": {
          "ref": "a9456366-0cac-4ec5-acc1-c4a0e8bfbe67",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "b41168d8-5e27-4cc9-b96f-5bae7a2816c9"
        },
        "item": {
          "id": "592422ee-42e3-4117-a9a3-7d9f6efa51b1",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "a4e65570-bd44-4b37-be04-57c01f344fa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae767ec2-3ff2-42be-b6d7-443adf4b0aee",
        "cursor": {
          "ref": "4a049332-346c-4305-a58e-2ca915b579c1",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "6c3783f2-51c3-4ddd-a17d-72d81ed1f84f"
        },
        "item": {
          "id": "ae767ec2-3ff2-42be-b6d7-443adf4b0aee",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "620ed9b3-ebaa-4070-af56-ed6f40c27169",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac82d121-9453-4d09-b32f-3f06523e70e8",
        "cursor": {
          "ref": "7024e7c4-1cfd-46d7-81a2-63896fe57032",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "208377f8-7236-41f0-a8cb-7227c22b5f65"
        },
        "item": {
          "id": "ac82d121-9453-4d09-b32f-3f06523e70e8",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "0ce30e22-8470-4171-a7c7-f8cbbb1773e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00968940-943a-40f3-aaa7-c738bdbcaee8",
        "cursor": {
          "ref": "da2d9243-e71c-42f8-9991-8786f2f731ad",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "8026f0b7-ce43-40eb-a2d7-78774d1ce9a0"
        },
        "item": {
          "id": "00968940-943a-40f3-aaa7-c738bdbcaee8",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "1977195c-c2db-48ec-819b-774617a2a1ea",
          "status": "Created",
          "code": 201,
          "responseTime": 2414,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "9cbd9101-2b40-4e81-b362-58eff389c400",
        "cursor": {
          "ref": "d91ad258-a2a7-401f-8e43-558cd8af16ce",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "e3639a9d-d806-4d99-a824-8352d6f2848a"
        },
        "item": {
          "id": "9cbd9101-2b40-4e81-b362-58eff389c400",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a7dce5fb-28cf-4fcb-b612-dbd40fa518b7",
          "status": "Created",
          "code": 201,
          "responseTime": 2486,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "52da771c-5f39-4fee-a30e-e112dedc7ebd",
        "cursor": {
          "ref": "414edc17-f8ce-46aa-bafb-c4841d994f5c",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "543959be-971d-4d9f-bb5c-49b0ec4c75ec"
        },
        "item": {
          "id": "52da771c-5f39-4fee-a30e-e112dedc7ebd",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "ca725ad8-9453-4163-8061-0e695a29ca79",
          "status": "Created",
          "code": 201,
          "responseTime": 2570,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "7123c365-4512-4e8d-822a-7ed358472946",
        "cursor": {
          "ref": "d82d9d89-cc92-4e22-85ef-36e34fc0177b",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "3837d63d-c56c-468a-ae91-c5bf3c589da6"
        },
        "item": {
          "id": "7123c365-4512-4e8d-822a-7ed358472946",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "febdc755-dad8-49b3-a9ba-0387330d3f4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b996b652-c270-4899-b459-09d01f527f29",
        "cursor": {
          "ref": "d0ca9863-a126-4147-931a-b35e14ebcc05",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "7d643451-ae6d-416c-bb8d-acec400dad93"
        },
        "item": {
          "id": "b996b652-c270-4899-b459-09d01f527f29",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "39227aff-353e-4297-91cd-d1b97c6ceb1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e94f1f2f-e090-4209-96d4-6f75bd66b323",
        "cursor": {
          "ref": "ed3945e2-740e-4e36-9f44-cd5a278011a0",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "7b798272-3a0c-4868-b626-54c80ad6d32c"
        },
        "item": {
          "id": "e94f1f2f-e090-4209-96d4-6f75bd66b323",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "4f734310-b610-4d75-9833-22bf5dadb1c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d6ff5cc-e3ec-4993-824a-a6b09cf54782",
        "cursor": {
          "ref": "73a521a0-b152-4797-9313-a20bd431d8cb",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "09c5d1e0-e835-47b6-b47e-0d2c1e943110"
        },
        "item": {
          "id": "6d6ff5cc-e3ec-4993-824a-a6b09cf54782",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "96f267a5-0fd7-4776-9d0e-85381f5abfba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a06f45fd-f49e-4ef1-b8fe-685a1169079a",
        "cursor": {
          "ref": "dbe25d17-8de7-41f8-b6f8-83f07908412a",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "6e573fe6-ddba-4359-883a-c69c0cf39800"
        },
        "item": {
          "id": "a06f45fd-f49e-4ef1-b8fe-685a1169079a",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "befe9d60-8a3c-4438-ab9f-f8c56416d293",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89a69191-7f70-49b1-8b9f-57117779bfb1",
        "cursor": {
          "ref": "d02e2220-c500-48d5-98f4-50e5ccb958a7",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "54f252d7-3d97-44a0-ad55-22f2bec53e0e"
        },
        "item": {
          "id": "89a69191-7f70-49b1-8b9f-57117779bfb1",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "4ea0a6b4-66ad-43af-9c5b-71bc26636dec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31950d23-92e0-413e-a56c-2d544baceb9e",
        "cursor": {
          "ref": "306c3c74-ea7b-456e-8b45-e1f4145fc7ee",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "62ace7c4-43fc-4acc-b480-4ea3d131b0ef"
        },
        "item": {
          "id": "31950d23-92e0-413e-a56c-2d544baceb9e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "3c34ec29-b02f-4270-acd5-1e815e02c545",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e483c58-4140-41e2-ae65-1c3b55f6c0b9",
        "cursor": {
          "ref": "c4b4e8df-a41b-494b-87cc-e9f3093ac7a1",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "b875750d-9128-46d2-ab2f-a46e5bedf371"
        },
        "item": {
          "id": "9e483c58-4140-41e2-ae65-1c3b55f6c0b9",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "ae6800a8-61b8-4a37-a600-30c7eb3c61b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dcf9d61-23a6-4a2a-93b5-345ffa65f63b",
        "cursor": {
          "ref": "9c6913ef-13df-4736-b983-12e3a98f01f3",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "5afe613a-4f68-4c8e-831e-031656662404"
        },
        "item": {
          "id": "3dcf9d61-23a6-4a2a-93b5-345ffa65f63b",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "881ee9e0-7f69-4ac8-8220-743c49674230",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "500d60ff-a27c-4385-9fc9-f2a386ddcb16",
        "cursor": {
          "ref": "cc53331d-1a15-483d-8905-8e69aaf5db26",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "22e74d27-0bae-46dd-94c9-9d3052415509"
        },
        "item": {
          "id": "500d60ff-a27c-4385-9fc9-f2a386ddcb16",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "12314135-6a3d-4c28-9b74-fc6221226fbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4b7623a-f3f3-481d-8b74-aedcabe2e991",
        "cursor": {
          "ref": "28c4b90a-637b-41f2-b7ae-e998abdcc12a",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "78fd27b5-0b9a-44e2-a933-ef5d921d43bd"
        },
        "item": {
          "id": "a4b7623a-f3f3-481d-8b74-aedcabe2e991",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "94e74f8c-097b-4ba4-a230-3699085b40af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2977e263-5dba-477e-9374-a3cd43b91fee",
        "cursor": {
          "ref": "5403932c-4bf6-4d81-9e4b-b261942acd99",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "5c3041a5-b1ea-4e93-a97b-dc089eaac728"
        },
        "item": {
          "id": "2977e263-5dba-477e-9374-a3cd43b91fee",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "5a1892b6-9f7f-4b33-a3cb-9351746b4214",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b133da69-03ce-42eb-b976-14504ebe4f54",
        "cursor": {
          "ref": "0e5c48d9-97a9-46c9-a5a2-1bacbcaffc63",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "0eaa9957-f150-404a-925b-8bf75fd4fe23"
        },
        "item": {
          "id": "b133da69-03ce-42eb-b976-14504ebe4f54",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "c570719c-b365-437e-8c42-f64fd2dceddd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdf315bc-860c-44c7-a743-5ca0b6ddf31f",
        "cursor": {
          "ref": "f929f67f-214e-4a18-bf9d-ca5db8df3b4f",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "02efcde6-c524-4a5e-8c15-698a64936486"
        },
        "item": {
          "id": "bdf315bc-860c-44c7-a743-5ca0b6ddf31f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "7801a08f-3a69-4f76-b5d2-bb6c965b0fb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8829095-cb1d-4fd8-862e-94ce48335853",
        "cursor": {
          "ref": "f99ad9bb-af3a-4b0c-bc33-0dd51bd77e35",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "b5bd032a-98c1-40b5-942b-525c81f8b7bd"
        },
        "item": {
          "id": "b8829095-cb1d-4fd8-862e-94ce48335853",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "887a761a-bf3d-4327-9e44-019767581400",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e68ce526-988f-43d5-ab36-d10c927d5011",
        "cursor": {
          "ref": "5ec6c6dd-cbb5-44fb-8fd0-b3b928d9548a",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "528db0fa-7a64-4e1e-83a5-4cab3bb54902"
        },
        "item": {
          "id": "e68ce526-988f-43d5-ab36-d10c927d5011",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "e0ac1cba-eae1-426e-a352-cf5db6a678c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0183593c-6a9b-4c28-baf7-c703a1c5f763",
        "cursor": {
          "ref": "8e758e4f-891a-47c5-b128-452ef38a8083",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "cfafd3f4-c99a-4604-b5f3-c5699a32a2b2"
        },
        "item": {
          "id": "0183593c-6a9b-4c28-baf7-c703a1c5f763",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "59e8eeaf-3cd8-4f25-86a8-b3db11a65831",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35ddecb8-3188-4771-86d4-9fc2f87cbed9",
        "cursor": {
          "ref": "1a82949d-c234-459a-9559-27b5d11ce078",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "c2d855ef-0f0e-497a-ac0c-0fefd303f3da"
        },
        "item": {
          "id": "35ddecb8-3188-4771-86d4-9fc2f87cbed9",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "5d1af354-fbb5-446a-915a-272f085f2d28",
          "status": "Created",
          "code": 201,
          "responseTime": 2761,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "b3eec03f-c3f5-4c12-8777-5a708c47feae",
        "cursor": {
          "ref": "fc4548d4-4c12-42ea-bff1-4eb4dd884d10",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "8db4ac4d-a515-4c95-b91b-60de0afc097d"
        },
        "item": {
          "id": "b3eec03f-c3f5-4c12-8777-5a708c47feae",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "8c46ef70-5f62-4d56-8f6b-49d0454135cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a0c3c43-df8f-4a2e-9b61-4bb560ba7e1e",
        "cursor": {
          "ref": "16c4592f-61eb-498b-b82c-70034773fc14",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "f9b8b8d8-7846-4634-922c-bee105ec3615"
        },
        "item": {
          "id": "5a0c3c43-df8f-4a2e-9b61-4bb560ba7e1e",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "88d084a5-9300-4d36-895d-32b1677a46b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e9738b8-b5e0-4cfd-aad0-5ac85c49c069",
        "cursor": {
          "ref": "cd4c77df-3bc2-4307-b3d8-2b9f7aca0c0c",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "2954d1ec-7a96-4313-bedc-ac15b45e493e"
        },
        "item": {
          "id": "5e9738b8-b5e0-4cfd-aad0-5ac85c49c069",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "c359db05-1fb6-47fe-a499-f6f32775916f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c95a7075-bd28-49f9-9479-4dc3baed34fe",
        "cursor": {
          "ref": "6d1c118b-c997-439f-8f28-50813dd22eed",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "ad4dc4a2-9c47-4e57-90ac-b011f51dd0be"
        },
        "item": {
          "id": "c95a7075-bd28-49f9-9479-4dc3baed34fe",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "9b6627e4-f54e-48a6-9d9c-01e60cd0f630",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3a0e6fa-3834-4cc0-9e0d-a0dadc755f74",
        "cursor": {
          "ref": "4f229458-eebb-40d4-acf6-bfd4c4d788f9",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "e7f9bb0a-e264-4bff-90e5-942a5bf26938"
        },
        "item": {
          "id": "a3a0e6fa-3834-4cc0-9e0d-a0dadc755f74",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "311281d6-61e6-4a74-811f-f0ddad51908d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83f652b8-786c-4c37-a6de-8fd2cb50a21b",
        "cursor": {
          "ref": "dc6dc7e5-a415-417c-817d-6597ddf3ec4f",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "57e4bef3-a47d-4e6a-8423-3819f34eab1c"
        },
        "item": {
          "id": "83f652b8-786c-4c37-a6de-8fd2cb50a21b",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "5c15c938-3f3a-4f2b-b21d-2dc6a24ab6bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b22d23b2-07d9-4dca-a6dc-bf96c45c5b46",
        "cursor": {
          "ref": "1e7eae8b-49e7-49b6-8fbd-73b3c76cfca4",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "95b58a18-1387-491c-acb4-5ceb6f8e8594"
        },
        "item": {
          "id": "b22d23b2-07d9-4dca-a6dc-bf96c45c5b46",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "b66abce9-a57b-48d4-ba6d-f7f9b413d532",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc8316eb-e0b8-4e80-92bc-00960073488e",
        "cursor": {
          "ref": "3dca22fb-65a7-4cf8-9a05-131cead6c20f",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "0421f280-ca27-41ba-9817-5b9d4971e381"
        },
        "item": {
          "id": "cc8316eb-e0b8-4e80-92bc-00960073488e",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "7003978f-b509-4e79-99d7-6a813661ddba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd84efee-3102-4cb4-a370-4f2d05cde05d",
        "cursor": {
          "ref": "da4313c7-fe0e-44a3-9782-a3984de872bb",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "210dc05d-9ce1-45f9-bd54-03753337b57d"
        },
        "item": {
          "id": "dd84efee-3102-4cb4-a370-4f2d05cde05d",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "cdb41881-0dbd-4839-8571-5700aa154c9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c0d1bf3-34ba-47ab-9552-3e8958ee7fdb",
        "cursor": {
          "ref": "69ba2855-de33-476b-8f64-235cc35bd674",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "a34ab066-880a-47c0-845e-6f3ea172ad46"
        },
        "item": {
          "id": "9c0d1bf3-34ba-47ab-9552-3e8958ee7fdb",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "4d6e1f07-e3f0-4770-90a2-9a44486e5158",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93bfeee8-b70a-47da-8639-8fda399eca09",
        "cursor": {
          "ref": "82a97ded-d009-477a-a5a7-a6d3ccba5dfc",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "b4731583-f81d-4da0-b79b-8ac03388eadf"
        },
        "item": {
          "id": "93bfeee8-b70a-47da-8639-8fda399eca09",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "7269d465-4c68-40ed-9b3d-d760fde7daa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1036,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dfe344c-c492-4ac2-b2b0-279a7be9d5bb",
        "cursor": {
          "ref": "9ff98872-d390-452c-95a2-3fb4a62a04b0",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "b7bb71b0-3ba1-4181-b56d-e69059ca187e"
        },
        "item": {
          "id": "5dfe344c-c492-4ac2-b2b0-279a7be9d5bb",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "8ac5f819-43ec-462a-ab63-dd14de288715",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e2fa58f-8483-4079-b9df-2cfdc1512e1e",
        "cursor": {
          "ref": "47121fe4-c4be-4ae7-8658-8c3653c67a59",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "8169e8cf-addd-4ac9-948c-6a80a9dd396c"
        },
        "item": {
          "id": "5e2fa58f-8483-4079-b9df-2cfdc1512e1e",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "6f61151d-8ecb-40f6-910a-7ce281ab6214",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eadad12-8f07-42be-b388-c1c5eb1629d3",
        "cursor": {
          "ref": "4a750283-5b2a-4f39-abcb-8ad38696e7c8",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "42bada9c-113d-4dd0-baef-14d74e812b41"
        },
        "item": {
          "id": "6eadad12-8f07-42be-b388-c1c5eb1629d3",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "a05531e2-a6d0-4e5a-9174-61a4af941648",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9406f7d-b981-4c2c-8898-4d7f40960b5b",
        "cursor": {
          "ref": "2755caec-5562-4c6f-94bf-cc997f36f788",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "bdf85f0e-5ae0-4e21-ac8a-95851b991faf"
        },
        "item": {
          "id": "d9406f7d-b981-4c2c-8898-4d7f40960b5b",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "4010e5f9-a8a9-4dd8-a713-bcd84d5ed811",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b54ebd5-5415-4ff0-a88b-b02c57726811",
        "cursor": {
          "ref": "680f0500-c25f-4e17-b49e-4ea5021aeda5",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "09baf6d5-d6d7-4d3e-93f7-d87b65a8a386"
        },
        "item": {
          "id": "5b54ebd5-5415-4ff0-a88b-b02c57726811",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "a3f5b8e2-bd42-4c13-96a4-da158f124229",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26239370-b636-44c5-85b7-b12dfdf88b5e",
        "cursor": {
          "ref": "bf3a8465-bd03-4e06-adc8-70ddef2af099",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "2e08e28c-61fc-403e-a68e-c222b43282ed"
        },
        "item": {
          "id": "26239370-b636-44c5-85b7-b12dfdf88b5e",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "80ee07c8-d829-401d-abff-84c152e7cd22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e9b93ac-ce5e-4668-abae-ef6a862aab22",
        "cursor": {
          "ref": "fdb017d5-6430-4b36-b5aa-c02ba20f936f",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "134a4309-78ab-4181-8d9c-dfee8797501c"
        },
        "item": {
          "id": "8e9b93ac-ce5e-4668-abae-ef6a862aab22",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "437f2147-75cd-4fe0-9750-5d179caedf32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57eaebb8-4551-49f8-9b82-ca3ef1c4ad96",
        "cursor": {
          "ref": "e86e7b1c-e620-450e-a06c-51e9fcdc1603",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "f064f511-e6ea-4d9e-8f92-026d51779a7c"
        },
        "item": {
          "id": "57eaebb8-4551-49f8-9b82-ca3ef1c4ad96",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "4dbc3a23-ba61-4513-a961-ccaa4b7fbaa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3415392-ed93-42f3-a237-0fe8e8d54ee7",
        "cursor": {
          "ref": "05102246-db0a-467f-a9ae-425b3d3f2685",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "7a6decda-0d9d-4a8d-8dd7-2bd79b9e02b0"
        },
        "item": {
          "id": "b3415392-ed93-42f3-a237-0fe8e8d54ee7",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "ac24c05f-9c85-4fc7-bd3a-9eb7bde05970",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c02f47a-f650-4fc1-a5f8-e1775124ad45",
        "cursor": {
          "ref": "cffb3dad-da6e-43b6-bbf9-25699005a9da",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "3400ebec-06e6-41ae-becd-a5a8f463dc1c"
        },
        "item": {
          "id": "1c02f47a-f650-4fc1-a5f8-e1775124ad45",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "0b4df6c3-535a-4495-b95a-de40fe608a63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87d64ab2-815b-4a12-8763-3ad335f9de7e",
        "cursor": {
          "ref": "3435c2e3-899a-4ae7-a70a-7a61b65e53cd",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "0832ea79-f7f2-480a-bbb7-ae0d13a058a0"
        },
        "item": {
          "id": "87d64ab2-815b-4a12-8763-3ad335f9de7e",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "5f538b11-4281-40b9-8852-3de92dc1d0aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c661d2e-5d26-4247-95db-566095601a6b",
        "cursor": {
          "ref": "b1814096-1412-40f5-9e38-bccab656306a",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "7f9a427f-24e0-4c06-9483-148edb1c9d8d"
        },
        "item": {
          "id": "6c661d2e-5d26-4247-95db-566095601a6b",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "bf15a27f-0b95-44ed-b33e-62995599153e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e9e2daa-fccf-425a-b232-18a4076055da",
        "cursor": {
          "ref": "ba1d66d3-a0d6-421d-abad-cbffb72bacaf",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "dbe95212-1a2f-442f-a359-5e863ae85e2a"
        },
        "item": {
          "id": "9e9e2daa-fccf-425a-b232-18a4076055da",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "10391bee-cd52-4c22-8e00-459f153c2156",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7bd42e9-358b-464b-97a1-7a4dab8b9667",
        "cursor": {
          "ref": "5c1d7b58-8e45-4d79-99de-5e0d50a9683a",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "d0caaa8a-e4e2-4b33-8806-4a778e455931"
        },
        "item": {
          "id": "f7bd42e9-358b-464b-97a1-7a4dab8b9667",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "845decc1-99b9-4465-9977-681b97ef9150",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "382551fc-1999-4943-bc66-8a5d5226275f",
        "cursor": {
          "ref": "0f18662f-c555-4336-90a7-8abdba9f638b",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "742c1535-b9c3-46ec-a651-92fa92565874"
        },
        "item": {
          "id": "382551fc-1999-4943-bc66-8a5d5226275f",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "8ca0f6d7-66bc-439c-9524-182fefa1c1bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a62939ce-de81-486c-8b0d-99e5c24c8f2a",
        "cursor": {
          "ref": "168d93e5-0abc-40a8-ba1b-72fbccc7207c",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "d0c0f59c-d215-4849-80b9-93f00df190c3"
        },
        "item": {
          "id": "a62939ce-de81-486c-8b0d-99e5c24c8f2a",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "6437c231-a988-4aa4-a684-8024cff9fc03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "984f8cf3-12a9-4504-90d6-d41000f124e3",
        "cursor": {
          "ref": "f7c22788-ec6b-4df8-9d48-5e8dd9068f76",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "b8b00993-a220-49e8-821b-3a1b7673187e"
        },
        "item": {
          "id": "984f8cf3-12a9-4504-90d6-d41000f124e3",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "4bd28f10-62fc-4808-a59b-ac130a1ec18d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1382338-2b07-44a4-9753-f619d613dcfc",
        "cursor": {
          "ref": "e4620b1b-a254-43ee-903d-ceeb014eb107",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "62a0c8c7-3eca-41ed-b5d4-155157630299"
        },
        "item": {
          "id": "f1382338-2b07-44a4-9753-f619d613dcfc",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "d3dd38de-0fbd-4b7a-bb24-69443b776fef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e581d27-942e-44e0-bcc2-b70edf8caf9e",
        "cursor": {
          "ref": "0a691177-c3d7-4a09-ab78-eeff00a8980c",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "19c6c86e-e174-4cef-8e6a-25a704ccd1d4"
        },
        "item": {
          "id": "3e581d27-942e-44e0-bcc2-b70edf8caf9e",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "0f0f97c3-51be-4531-b625-03a12b324738",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6839d7b2-8fcd-4520-8fea-de6e9d8397c0",
        "cursor": {
          "ref": "1ec1aa1a-7ab7-4c24-8edc-ce98c976ed3e",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "b1886135-76f3-4906-a46e-f657d39d1f06"
        },
        "item": {
          "id": "6839d7b2-8fcd-4520-8fea-de6e9d8397c0",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "8f02c4ba-555c-4db1-80d9-b04c6d39c596",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "01436bb8-3a07-496b-895a-96dbabb6cd3d",
        "cursor": {
          "ref": "5e64843e-8e33-457e-92a4-e0412b95f1f1",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "349571fe-ccd6-48a9-8a50-668caab5e62c"
        },
        "item": {
          "id": "01436bb8-3a07-496b-895a-96dbabb6cd3d",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "673f5585-c334-40a5-9ae1-99ce329c5bc0",
          "status": "Created",
          "code": 201,
          "responseTime": 2530,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "a8a72312-42f3-4d89-b918-1b0a1aa1b344",
        "cursor": {
          "ref": "af65910a-f978-46b0-9840-cceb73f7172b",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "08fd56d3-1634-42b2-94a6-f83b58d4e065"
        },
        "item": {
          "id": "a8a72312-42f3-4d89-b918-1b0a1aa1b344",
          "name": "credentials_issue"
        },
        "response": {
          "id": "b932bad8-da5f-4fb0-a69e-571d926f8fd5",
          "status": "Created",
          "code": 201,
          "responseTime": 2703,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "b89b0d1d-81f4-4183-aba9-9520ab90e8b4",
        "cursor": {
          "ref": "aa35d25c-3d7b-436a-9183-3634abed3ca1",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "6dfc2d6d-ceeb-4fc2-b4b6-d9abfb440ed0"
        },
        "item": {
          "id": "b89b0d1d-81f4-4183-aba9-9520ab90e8b4",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "c6251cd1-e4fd-42ac-9961-21c31cc022d9",
          "status": "Created",
          "code": 201,
          "responseTime": 4772,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "85b9b90f-91f0-41b9-af8e-462390e6cf12",
        "cursor": {
          "ref": "c6610207-81e2-4f49-a7c2-9e82bcb18871",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "1d44c2c8-7180-4687-91d4-0e845e98340e"
        },
        "item": {
          "id": "85b9b90f-91f0-41b9-af8e-462390e6cf12",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "6595563a-d779-46b5-a542-ff7f024f9a04",
          "status": "Created",
          "code": 201,
          "responseTime": 1991,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a3bcf36-b4ef-49c1-bc56-ad2458656cf4",
        "cursor": {
          "ref": "b5797950-e1be-4b1b-acd3-9b8657cf1feb",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "ef259abb-cf62-4de3-bda9-1ee816ecbbd0"
        },
        "item": {
          "id": "3a3bcf36-b4ef-49c1-bc56-ad2458656cf4",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "782ffffc-8f30-4eba-9f8f-6233876ac976",
          "status": "Created",
          "code": 201,
          "responseTime": 2356,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "359702e3-4439-4fa2-9f72-212327caf9d0",
        "cursor": {
          "ref": "ffc64673-d93c-4f9d-bd67-06e21b8d71fb",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "29119a57-3219-4596-97a9-fadf15693a8d"
        },
        "item": {
          "id": "359702e3-4439-4fa2-9f72-212327caf9d0",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "355cd53b-0013-4773-b770-959d5788aa65",
          "status": "Created",
          "code": 201,
          "responseTime": 2585,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-05-29T00:39:48Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-05-29T00:39:48Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "860de0e9-a57a-4e25-98fc-320cac774d29",
        "cursor": {
          "ref": "6cc6028b-f54c-4da7-8113-03ae38e5d2e2",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "c4e026b2-ada9-4cbe-bbc7-74e53ab60cd2"
        },
        "item": {
          "id": "860de0e9-a57a-4e25-98fc-320cac774d29",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "063f50cd-42e8-4d64-b2b4-140b69e3268b",
          "status": "Created",
          "code": 201,
          "responseTime": 2959,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c29cbe1b-fb24-4747-8bba-8e6100e328d4",
        "cursor": {
          "ref": "e8bf27bc-5f91-45f9-86f2-606a2d50242e",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "f3d4659a-0d41-4058-b330-3bbea3885106"
        },
        "item": {
          "id": "c29cbe1b-fb24-4747-8bba-8e6100e328d4",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "99aef36c-9404-4702-ba0c-3082cd26ba79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c29cbe1b-fb24-4747-8bba-8e6100e328d4",
        "cursor": {
          "ref": "e8bf27bc-5f91-45f9-86f2-606a2d50242e",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "f3d4659a-0d41-4058-b330-3bbea3885106"
        },
        "item": {
          "id": "c29cbe1b-fb24-4747-8bba-8e6100e328d4",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "99aef36c-9404-4702-ba0c-3082cd26ba79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "427975db-2fa0-47e2-acaf-56b7e764d283",
        "cursor": {
          "ref": "60eb625c-0a9e-4ff3-8335-8854850f6126",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "2f7bba7c-71c3-4c9f-ad75-9f3d50922be9"
        },
        "item": {
          "id": "427975db-2fa0-47e2-acaf-56b7e764d283",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "66955e17-c6c6-4c26-8146-90c846bf219c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebe1d347-cd75-43c9-9a19-842a681732cb",
        "cursor": {
          "ref": "d2903b44-f67e-4942-a249-7980a511c1c4",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "6f08d6e5-fc26-48c0-9824-bb6e2698088e"
        },
        "item": {
          "id": "ebe1d347-cd75-43c9-9a19-842a681732cb",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "444b3b7a-04d4-4cd0-8c72-8d85185b569d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9bdb80c-9ddc-45d8-b628-27e1153c5f3d",
        "cursor": {
          "ref": "8106637d-4d6e-43e6-b406-08ccb6eaf8f9",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "7288309f-bb00-4a5a-82d1-d74ca9eabeed"
        },
        "item": {
          "id": "d9bdb80c-9ddc-45d8-b628-27e1153c5f3d",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "10fc398e-c310-4f1e-a569-04c89ecfe3d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee4098d6-ef31-456a-917a-d6b24e9915dc",
        "cursor": {
          "ref": "6f715d98-499f-4988-9c35-d668cb617fff",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "80df52de-6c1c-4761-bd65-fc2451640764"
        },
        "item": {
          "id": "ee4098d6-ef31-456a-917a-d6b24e9915dc",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "d4b431a7-4415-464d-acd1-abb0f28301a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7142c99f-0600-4efb-a7c0-2f86c0f01202",
        "cursor": {
          "ref": "d0c576a5-fede-4dc3-8540-aefa157d2b89",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "e3633809-e722-4102-b5be-8352fa9d3e1a"
        },
        "item": {
          "id": "7142c99f-0600-4efb-a7c0-2f86c0f01202",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "b683ae11-8f15-4b00-831f-a342a3e1e6a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd3d84d0-b6ba-4359-8d4b-78f1e840eedb",
        "cursor": {
          "ref": "cce10f03-3ca9-49ec-a130-febfd79675c6",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "05c55ee3-6c33-4fa8-b59d-91d2c0d2b9e3"
        },
        "item": {
          "id": "dd3d84d0-b6ba-4359-8d4b-78f1e840eedb",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "7a58066e-ae4c-4024-a24e-ec7535e5f1af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b1f849c-566b-4a1e-92fe-9beb6d01135c",
        "cursor": {
          "ref": "821275d6-53e6-4d34-b4fa-067eb3bb43a5",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "86292c01-afa3-4c1e-8029-38ad1d55166c"
        },
        "item": {
          "id": "5b1f849c-566b-4a1e-92fe-9beb6d01135c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "2c39fe2b-25d9-45f7-844d-90ff7a944bec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ee3dc66-c45a-4c43-8d37-c4fc656978fb",
        "cursor": {
          "ref": "f547c63d-0bed-4213-9d89-b704d0f70832",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "43c16182-78ca-4ebb-8e7f-ba6a29be4de2"
        },
        "item": {
          "id": "8ee3dc66-c45a-4c43-8d37-c4fc656978fb",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "a3a5b87e-60a6-4738-8b99-9a2a01de0cd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7ca60f0-a986-47e0-ad45-3eb1e3dfae4a",
        "cursor": {
          "ref": "65526c0d-cff2-4d3b-bcfe-fe12051d00e2",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "f9ba2d06-d0d8-4955-ab2d-4204e2b3de8b"
        },
        "item": {
          "id": "c7ca60f0-a986-47e0-ad45-3eb1e3dfae4a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e72b4f53-a741-484d-b3a0-6d9c819deedf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b0d7553-99a3-41d5-b813-3fed8cb47cb0",
        "cursor": {
          "ref": "209d48ac-f169-4c46-bf29-cab923abecaa",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "6999c22d-12d6-4c3a-af1c-d363b9b8868c"
        },
        "item": {
          "id": "8b0d7553-99a3-41d5-b813-3fed8cb47cb0",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "7615e987-48f0-4409-b361-71849b169b31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2a8d5b0-2bb7-4758-abd9-652131f24f8e",
        "cursor": {
          "ref": "e59e4ee4-3da9-4d9e-ba11-cb77ed3ae538",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "c94312f5-4030-4d55-92f7-fd629d80e368"
        },
        "item": {
          "id": "c2a8d5b0-2bb7-4758-abd9-652131f24f8e",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "2e770e95-00f8-4168-98af-1b9a5ba84109",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2143e12b-160c-4549-a298-c3512cf2787f",
        "cursor": {
          "ref": "d6b4a52e-1c99-4bd0-8d15-ff8a512ddf4a",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "94e0d442-4c64-420b-8ad2-e261d10e0419"
        },
        "item": {
          "id": "2143e12b-160c-4549-a298-c3512cf2787f",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "4ad74324-488a-4ab3-be1f-b2115972e961",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c44be066-f875-455f-880d-d020e8302062",
        "cursor": {
          "ref": "09bfa98f-2753-4e8c-af8b-272d103ea791",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "dbb2a023-cbe6-4f1a-aad6-732de3917ceb"
        },
        "item": {
          "id": "c44be066-f875-455f-880d-d020e8302062",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "98e34924-38b5-41a4-9895-0741cfedd7a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "548bf177-e500-4edc-b144-9b18129cf129",
        "cursor": {
          "ref": "833001c3-cc5e-4a01-be8c-49ef3bf500c4",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "e3f0b4ba-2149-4eb1-9b84-64be37a1a9f5"
        },
        "item": {
          "id": "548bf177-e500-4edc-b144-9b18129cf129",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "e7d5efbd-eacd-44cd-afbd-7e97a82095f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "666dab98-9b4c-4caf-91a4-f3574ebf828f",
        "cursor": {
          "ref": "8e2c9a29-e030-4713-86ed-04c263d963f1",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "3fde8260-a1e9-47df-a82d-e71316533b77"
        },
        "item": {
          "id": "666dab98-9b4c-4caf-91a4-f3574ebf828f",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "40962949-93f7-4c5b-84d9-f85596f71771",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b3e154e-2fa7-4900-b958-3315a8f8c72f",
        "cursor": {
          "ref": "fe3f59fc-99f2-414f-868a-a869a7a85e54",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "7f71ce8a-fff5-4f25-a520-7180c0d156cd"
        },
        "item": {
          "id": "3b3e154e-2fa7-4900-b958-3315a8f8c72f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "6fa8a5a2-7ebd-44b7-8760-c0d3f8892279",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf07259a-c873-4b0d-a3d2-9c41ca8b3ffc",
        "cursor": {
          "ref": "32e373aa-1c29-4f44-b690-764a3fa45b1f",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "3eb45987-4be0-4e46-b06e-a97daffe9d4e"
        },
        "item": {
          "id": "cf07259a-c873-4b0d-a3d2-9c41ca8b3ffc",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "6e17a683-ad3a-49f9-a441-a857e22bbeaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69267571-c4bf-4dbf-a066-52a52ca7c6aa",
        "cursor": {
          "ref": "2c4cdfb9-01d2-44e2-8f5c-5d31e5024825",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "72a96471-6dd5-4af5-a9ea-a42119004521"
        },
        "item": {
          "id": "69267571-c4bf-4dbf-a066-52a52ca7c6aa",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "199e8ec3-6cf6-4480-8ff5-bb1d09614726",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03bc5753-e270-4bb0-885a-1418e986421b",
        "cursor": {
          "ref": "f6160f93-fe5b-4cb4-a2fa-10a78c9b81a0",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "78f9865b-e539-48eb-bb3d-661ff26d22e8"
        },
        "item": {
          "id": "03bc5753-e270-4bb0-885a-1418e986421b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "eef0bb31-477e-4bcd-9f0a-ce8bda1e2815",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "293a0979-c0db-44b8-8f9f-c0130c3fe5de",
        "cursor": {
          "ref": "0f907b57-9d36-43e0-bbcf-3190aa36f4d3",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "2cec583e-eb85-4edc-99a4-5b90f3729c6d"
        },
        "item": {
          "id": "293a0979-c0db-44b8-8f9f-c0130c3fe5de",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "fe2f3921-063a-42ae-9678-1e029c931f32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d030e2b3-9990-4505-850c-9a0d45903817",
        "cursor": {
          "ref": "d912ab8b-0959-41e0-b08a-f349da186743",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "111618df-41c6-42d7-9000-832392f51b6c"
        },
        "item": {
          "id": "d030e2b3-9990-4505-850c-9a0d45903817",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "af86e87b-d884-4035-a1bd-b4913ab849a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b4214fe-fbd6-47ea-a1cf-2de54e54eca1",
        "cursor": {
          "ref": "c85d857c-2689-4cd2-a12e-8cf5498355d4",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "67a77ead-9327-41c5-b1a7-db6561d11d3d"
        },
        "item": {
          "id": "8b4214fe-fbd6-47ea-a1cf-2de54e54eca1",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "17dc8283-774b-4bed-bba4-56bff441dc38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f194dc00-8bea-4452-8f69-f5baa012fa50",
        "cursor": {
          "ref": "8b6070e5-82ac-47d6-8352-2d3b06f9d24d",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "6864e1d7-ae66-443c-bc61-dd684be8c5b7"
        },
        "item": {
          "id": "f194dc00-8bea-4452-8f69-f5baa012fa50",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "5ed9c29a-eec0-4b18-96bc-b29fb545d438",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f1296c6-79b1-4601-9da1-5761daf1b6c7",
        "cursor": {
          "ref": "b84dc012-01cd-4272-a08f-90412dcf98fc",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "1bad3f2f-4636-47d9-9aa5-0aaa37c48375"
        },
        "item": {
          "id": "3f1296c6-79b1-4601-9da1-5761daf1b6c7",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "bce04f9a-e3aa-4383-bffe-b63667602f61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cf4e5f0-ca1c-49b7-8e1d-b606b6f8a399",
        "cursor": {
          "ref": "fed6dc62-583e-4bad-bcb1-e159b35c8e99",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "5f9fc00e-e678-4a6a-8bd7-e3cd783465ca"
        },
        "item": {
          "id": "2cf4e5f0-ca1c-49b7-8e1d-b606b6f8a399",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "902d5ac8-0fc4-4a8b-8d5f-b930b4236afa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cfd86a3-9e03-4558-bd52-9f49064970ac",
        "cursor": {
          "ref": "05b28da2-f7d0-4263-871b-b4c816895acb",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "eb16a184-b4b3-431b-aa18-0a4df4b703ed"
        },
        "item": {
          "id": "2cfd86a3-9e03-4558-bd52-9f49064970ac",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "9a5afcab-18a9-441c-bc6e-41f502e37d5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31136c35-a4a1-4052-b1c6-034ab66d392c",
        "cursor": {
          "ref": "683ee91a-9fcd-4788-99a2-1e1b451bbd4f",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "16aca2f7-55c7-4b56-869a-2e7bdcd9a5bd"
        },
        "item": {
          "id": "31136c35-a4a1-4052-b1c6-034ab66d392c",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "640ae7a2-0418-425c-880c-2cbbb7bb023d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9bc85bb-7066-4cfa-92c5-1eb3a222ae04",
        "cursor": {
          "ref": "146d7062-8a38-4b8f-bfcc-8ce6b689441a",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "99883b5c-c98b-40d2-aa01-52494d8ecd6d"
        },
        "item": {
          "id": "e9bc85bb-7066-4cfa-92c5-1eb3a222ae04",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "de2ee485-8b91-44f4-9b56-4d4a4533a512",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3915f329-975d-493a-891f-2a8254442114",
        "cursor": {
          "ref": "76acc062-591a-430e-a8ab-e18157a2a50f",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "630b3da1-9070-4cf1-ae96-1000459dfa19"
        },
        "item": {
          "id": "3915f329-975d-493a-891f-2a8254442114",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "e2a02748-314d-4e23-9573-082fcff6623b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "208d5462-2a3f-4072-af21-f2748e9f8d4d",
        "cursor": {
          "ref": "664ae504-f498-46da-8552-816b09ded64f",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "13dcf3ea-a989-4eea-aa52-25ba91f26977"
        },
        "item": {
          "id": "208d5462-2a3f-4072-af21-f2748e9f8d4d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "3b95a8bd-78c9-4a98-848a-f9685fd39053",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c44e302-aaca-42a7-ac73-86c4a6c18bfe",
        "cursor": {
          "ref": "2fa7e98b-8d8d-418a-b77e-5c4ac2861866",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "463b3c13-c249-4f69-88e9-c5bef9be5cfc"
        },
        "item": {
          "id": "5c44e302-aaca-42a7-ac73-86c4a6c18bfe",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "7bde80df-c133-4255-93b4-f983327370fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17558b58-1486-4d28-bfe6-6d75ebe94ac0",
        "cursor": {
          "ref": "c8302ee5-b404-4ccb-9bcc-cd1abaa429ab",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "f2ee27f4-4b7a-4ce5-adc3-ff0a74d8b80c"
        },
        "item": {
          "id": "17558b58-1486-4d28-bfe6-6d75ebe94ac0",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "36432c3f-0496-4279-9cf1-a2c2b5db6ae2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "5e951555-9ca5-4770-8fed-a7bee2b4d92e",
        "cursor": {
          "ref": "df7ef6b9-9787-4d09-a214-035350369c69",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "883e9f70-1c5b-4e46-bc09-0da33a32e3b4"
        },
        "item": {
          "id": "5e951555-9ca5-4770-8fed-a7bee2b4d92e",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "5cb62f64-9a6a-4e74-bfba-8e286a77b476",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "b52ef5b0-74ad-4998-ac9c-23f34dcba909",
        "cursor": {
          "ref": "253c7e8b-ee3a-45ad-ae65-3aa5b93f56dd",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "159747fc-3e5b-4a47-9cb5-523cb7359300"
        },
        "item": {
          "id": "b52ef5b0-74ad-4998-ac9c-23f34dcba909",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "05cf6535-7883-4438-8375-0af1fc9c5fd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b52ef5b0-74ad-4998-ac9c-23f34dcba909",
        "cursor": {
          "ref": "253c7e8b-ee3a-45ad-ae65-3aa5b93f56dd",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "159747fc-3e5b-4a47-9cb5-523cb7359300"
        },
        "item": {
          "id": "b52ef5b0-74ad-4998-ac9c-23f34dcba909",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "05cf6535-7883-4438-8375-0af1fc9c5fd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b46999d-d736-468f-a482-24cdc4e72cda",
        "cursor": {
          "ref": "4ce19cee-24f8-4613-b6f1-88f53f5acacf",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "ef26458b-3a68-4eb8-b5ff-4a329824b801"
        },
        "item": {
          "id": "4b46999d-d736-468f-a482-24cdc4e72cda",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "13c15331-5e6e-45af-bf9f-02febea76d4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68c27f89-7048-48a1-8fd7-a88a72d1067d",
        "cursor": {
          "ref": "f0583f5d-23d0-477b-af6d-751246dc99aa",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "abd4c3f7-289b-498e-be34-012c9b19d71b"
        },
        "item": {
          "id": "68c27f89-7048-48a1-8fd7-a88a72d1067d",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "91bf88b2-18b7-4ab8-aea2-162f8354a2df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13b64975-094e-40d8-b820-b65bbed05fb9",
        "cursor": {
          "ref": "8c46c0d9-89c5-4759-a554-26413a3a73bd",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "025f7ca4-c7dc-4cc8-a842-3d49a63b118f"
        },
        "item": {
          "id": "13b64975-094e-40d8-b820-b65bbed05fb9",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "6ec81851-c2ca-4c02-aa3b-d07892d12930",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f817772-ab3a-424b-a2e8-b4d74d5b6514",
        "cursor": {
          "ref": "79c47eb0-0158-4bc5-af12-6a2f49798a7c",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "91abb555-6025-4601-8749-ceca93a7bebd"
        },
        "item": {
          "id": "6f817772-ab3a-424b-a2e8-b4d74d5b6514",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "c4ffacfe-2304-4649-be96-5e2eafebf808",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39b2b666-8c30-47cf-b3c9-933a66ef7c03",
        "cursor": {
          "ref": "69d992c8-ca64-44f9-8f4b-704fd7ed4f20",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "e26bb3a7-5cb2-41f9-895d-2f6f16538371"
        },
        "item": {
          "id": "39b2b666-8c30-47cf-b3c9-933a66ef7c03",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "5248eb50-fb2e-4a71-83c1-0f259d573c8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a1e5d3c-8959-4f14-b21d-a45a0962335e",
        "cursor": {
          "ref": "9a993c98-cdb1-4ace-b88a-7e34f0c2dc31",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "5f24b117-e805-4cd3-b235-b9a013b9c892"
        },
        "item": {
          "id": "1a1e5d3c-8959-4f14-b21d-a45a0962335e",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "2b4e954a-5f93-49d5-b2a8-1197a4cc0f1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba4a78cb-de53-455c-ba57-03f0a59ba977",
        "cursor": {
          "ref": "353eae7a-ace7-431f-b680-232d72a0f070",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "294c0ea4-1a27-44b2-8caf-54f4357525e3"
        },
        "item": {
          "id": "ba4a78cb-de53-455c-ba57-03f0a59ba977",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "b68eeb57-a870-4ee3-97c5-20ab92da9197",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd8608aa-31d5-40dd-aa4b-33a9e036918c",
        "cursor": {
          "ref": "b2f9816e-c5f9-43cb-aa92-d16bc431e1e9",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "71a8013b-81df-45b4-94a3-28bb9165a72c"
        },
        "item": {
          "id": "fd8608aa-31d5-40dd-aa4b-33a9e036918c",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "2367bd06-67c4-41f6-8d34-49a00bba9849",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccf08a8c-a143-4cec-8f73-debdd4c90bc2",
        "cursor": {
          "ref": "09551874-ea61-4c55-bbe1-714e6a3180aa",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "610e904c-bbda-4162-aedd-7904acaf4762"
        },
        "item": {
          "id": "ccf08a8c-a143-4cec-8f73-debdd4c90bc2",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "15b57c94-1e03-4086-a326-e75bf800be5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13db524d-b9e3-4775-b699-ee66cc1868fd",
        "cursor": {
          "ref": "0b757ad1-fde8-4390-a28b-aa6bf1f3c391",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "949147bb-7025-453c-b8af-512b6ac5332b"
        },
        "item": {
          "id": "13db524d-b9e3-4775-b699-ee66cc1868fd",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "65695d2f-c29e-4eff-b566-2a3ad23d7320",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a366860-b74c-40aa-9387-6eb400cc46f0",
        "cursor": {
          "ref": "3c3763d1-f692-455e-a94e-8940a29b0c92",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "6501687e-12a0-4ec0-8540-500ce036be48"
        },
        "item": {
          "id": "9a366860-b74c-40aa-9387-6eb400cc46f0",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "a8c8555d-c705-4d24-a823-33bfa5464cb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d349beea-5531-40a0-b015-1a2926b7be2e",
        "cursor": {
          "ref": "4a1ab0d8-ae17-4f22-a985-c72d35c7638a",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "effc9963-9f70-4b98-94a0-c900d8eb7d14"
        },
        "item": {
          "id": "d349beea-5531-40a0-b015-1a2926b7be2e",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "1dae37bd-4d87-4a57-9366-c1f880fa27bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0c39d8c-33ef-4e78-bfe3-50cafb6c15e6",
        "cursor": {
          "ref": "145832c7-634a-4759-8b0b-0fcef05c91dc",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "e74d50aa-8cec-484f-9ad1-4816883431e6"
        },
        "item": {
          "id": "f0c39d8c-33ef-4e78-bfe3-50cafb6c15e6",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "636fdb33-ab24-4e16-86fe-96d0a05f9000",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d53df792-dca1-4992-8f4f-a128f468c7ae",
        "cursor": {
          "ref": "e4b8f181-973e-429c-b464-1040b11a074a",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "a63ef095-af36-4cb9-acc3-339b728455d1"
        },
        "item": {
          "id": "d53df792-dca1-4992-8f4f-a128f468c7ae",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "550bf046-8786-4342-8fab-2db01ef8bb04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7034d8af-e3e4-4596-8b4e-4f2bcf51e699",
        "cursor": {
          "ref": "857a400c-c503-4b38-975b-aed0803448e1",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "7de161af-4371-47d5-8349-df59bcfaaf0c"
        },
        "item": {
          "id": "7034d8af-e3e4-4596-8b4e-4f2bcf51e699",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "98f1f8f4-de55-4e67-8aca-d96501f2e285",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d24e897a-ad96-4e36-801a-325457c641e8",
        "cursor": {
          "ref": "5b016ffa-75c9-4e18-88f1-783ddc158597",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "8d3702f7-1ad3-4a54-9d6e-5b03a385d59c"
        },
        "item": {
          "id": "d24e897a-ad96-4e36-801a-325457c641e8",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "fa2a864c-a4f9-4b80-9ac0-b8baf3a5dfdd",
          "status": "OK",
          "code": 200,
          "responseTime": 266,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "e43b68d8-f335-4608-91bd-e31ac7e30617",
        "cursor": {
          "ref": "38d63be8-19d7-4473-a07d-4589ff9c2c6c",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "21efd498-2252-42e9-9c02-9c21c511e6b4"
        },
        "item": {
          "id": "e43b68d8-f335-4608-91bd-e31ac7e30617",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "bdcd8444-d86f-4c32-953f-8fcceb78ed09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8a14953-b4a5-4cc0-9e71-7d6bbde4429a",
        "cursor": {
          "ref": "563c87d4-6a75-49f9-84de-c84d43795dc2",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "a4d81bcd-22b7-468f-a6fb-0bb82d7642aa"
        },
        "item": {
          "id": "b8a14953-b4a5-4cc0-9e71-7d6bbde4429a",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "f647b54b-c2d5-4eac-b560-52784bce6566",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cdb2b20-1375-4ac3-a341-8eaac6ded855",
        "cursor": {
          "ref": "7fc242de-703b-49af-96ee-a4222fa73f0c",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "77a89f24-1472-44d7-90c7-3cfd8c12e7db"
        },
        "item": {
          "id": "7cdb2b20-1375-4ac3-a341-8eaac6ded855",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "733f4c60-fe3e-43fa-b569-8866bce2195b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca0500ea-cd5a-4b02-b788-e8a8f390d592",
        "cursor": {
          "ref": "289021fb-362b-4bb5-acd2-4a6f08ab72d8",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "bc29e7f6-100e-4de9-8b0f-878aad7fd68e"
        },
        "item": {
          "id": "ca0500ea-cd5a-4b02-b788-e8a8f390d592",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "f1b34fe2-6834-48e7-9e47-8be5754d3835",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6564fe57-e137-48a7-acd4-45394cfbad4f",
        "cursor": {
          "ref": "e2b16503-4e34-4ff5-a80f-e8ad19825c16",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "a57f9a53-3aab-4f98-afd0-f4beb92b851a"
        },
        "item": {
          "id": "6564fe57-e137-48a7-acd4-45394cfbad4f",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "2c65c2ca-9454-4cf6-ab0e-bd5709c1f124",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2330b82-347f-4a2d-a318-472667790231",
        "cursor": {
          "ref": "c29308ed-d679-4694-8bfe-e7d6b04be282",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "48005318-e6b9-4ce9-a050-15f8e8c17c94"
        },
        "item": {
          "id": "c2330b82-347f-4a2d-a318-472667790231",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "056380ce-c5c8-43a9-9da7-41b0ae9e8151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "433067c0-8f6e-4328-81cb-81510e1b0feb",
        "cursor": {
          "ref": "084edda2-2d92-47b2-872a-89419ebbef53",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "8b54ff50-e0d2-4697-81d9-6cafef24e1f6"
        },
        "item": {
          "id": "433067c0-8f6e-4328-81cb-81510e1b0feb",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "de5d045a-07b8-40bc-a507-d935e7668ae7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc6fb2cb-434d-48d2-8571-6c16b8dedf76",
        "cursor": {
          "ref": "eb5d5455-fb86-44b2-a93b-5e38b52c4c36",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "5e41af13-d6cd-447a-b9b2-017078062151"
        },
        "item": {
          "id": "dc6fb2cb-434d-48d2-8571-6c16b8dedf76",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "1e092a40-9ae2-4941-a66e-bd72d67936dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d4212e0-d0ac-4f78-8ca9-d39a0dbfa777",
        "cursor": {
          "ref": "bfa3087d-3bb7-419d-b64f-3c710b3568a9",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "53a5f8e1-7fbf-43ae-86fc-25b6d97add4d"
        },
        "item": {
          "id": "5d4212e0-d0ac-4f78-8ca9-d39a0dbfa777",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "c253edfa-5ce2-4993-97f2-13373a45ee8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 178,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e70311b-ccf9-4cee-9b4c-5ff1757553cd",
        "cursor": {
          "ref": "5d3351bc-1e8a-468c-8830-866958773dd4",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "ed2e2427-5379-4c79-b465-5d40d1426a63"
        },
        "item": {
          "id": "0e70311b-ccf9-4cee-9b4c-5ff1757553cd",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "b0e35773-504c-4be4-8b9d-033cbacf25f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74378076-bc77-4c5c-b3ba-de459254b6d8",
        "cursor": {
          "ref": "006d4cc5-7b24-4672-97bd-a9d3bb69076e",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "12b2fb21-1b45-43d7-b34d-c5a7bffb0779"
        },
        "item": {
          "id": "74378076-bc77-4c5c-b3ba-de459254b6d8",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "f8a6ef5f-641a-432e-8f5c-cc2ad4901157",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce9f3e93-25b4-4d3b-a604-b2841988be91",
        "cursor": {
          "ref": "257801c9-d091-47f2-9de0-24ea6a37181e",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "152ff99f-b6cb-401d-bc2d-4a7a186e5547"
        },
        "item": {
          "id": "ce9f3e93-25b4-4d3b-a604-b2841988be91",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "63faf01c-69a2-4800-b3ed-f7fa213ac3ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a83fe5f-244d-46c5-a8eb-23dc5cf0e3a1",
        "cursor": {
          "ref": "588188e0-9558-4341-a792-9f5e59340008",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "d5545d23-ee81-4300-81ed-a9399b2376a8"
        },
        "item": {
          "id": "8a83fe5f-244d-46c5-a8eb-23dc5cf0e3a1",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "119fac8e-4cf6-4cd1-9211-a41213e89702",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b464654a-c742-4e31-87d6-748ba80b2725",
        "cursor": {
          "ref": "e7c1677d-fc1c-45a2-8a95-42aa0a787ae9",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "14434b9b-8e47-4fd7-b706-75815e4128dd"
        },
        "item": {
          "id": "b464654a-c742-4e31-87d6-748ba80b2725",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "522a39a3-176e-48e0-91e8-ab51be31adb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "953af99d-3eee-4b58-b1eb-216aaaa3ba6e",
        "cursor": {
          "ref": "fae60eb4-95ce-4952-8e04-0564c4ac73c3",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "83a49221-f87c-4944-bcc8-997691bc2b40"
        },
        "item": {
          "id": "953af99d-3eee-4b58-b1eb-216aaaa3ba6e",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "b890fd44-ca60-45a6-ba8a-82c5c3b3601a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e64f0fb-48f8-4edf-9f02-9f6cf97273eb",
        "cursor": {
          "ref": "b54f3007-7411-41d3-abf7-0875ed794d48",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "282bbf72-b69a-4066-9f2a-0a79bc301ede"
        },
        "item": {
          "id": "9e64f0fb-48f8-4edf-9f02-9f6cf97273eb",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "7e0cf01e-5820-4cb4-b58d-13b9f29cb0c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4fb7612-9398-4eef-83b3-c54c6293e43e",
        "cursor": {
          "ref": "120f43c7-150f-426b-ad1c-1ebffe45d63d",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "9fd0f028-3244-4535-b294-2cef4d24cfa6"
        },
        "item": {
          "id": "d4fb7612-9398-4eef-83b3-c54c6293e43e",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "1d084338-1ea6-4289-be0d-bf042ca3c879",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdfacbdf-e88f-48e1-b1e2-5ac6e8161cb2",
        "cursor": {
          "ref": "e632652c-1459-4d8a-ba15-524c77b79fc0",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "d486d5fc-454f-41c8-a82d-c31330856652"
        },
        "item": {
          "id": "cdfacbdf-e88f-48e1-b1e2-5ac6e8161cb2",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "fc16270f-f692-4d2d-a129-0bb8037a7db5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f389bd68-c028-41f2-8aae-9005591c6ae9",
        "cursor": {
          "ref": "db4c4746-b5e2-4b4e-a211-b2ce5af0c4af",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "254db5a0-5c77-49c6-bc23-e05b33bc645d"
        },
        "item": {
          "id": "f389bd68-c028-41f2-8aae-9005591c6ae9",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "529ac30c-5b79-4ae0-8345-b3c03ccaaa73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12af4f42-72ba-4629-b882-8ee38e5a0f2d",
        "cursor": {
          "ref": "3395a608-31af-487b-a990-e3c41ca5ee19",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "caad3a69-deee-4a38-83e7-ef99ffa40a68"
        },
        "item": {
          "id": "12af4f42-72ba-4629-b882-8ee38e5a0f2d",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "0cbd8be8-95ec-4d74-850c-e2a3b393da0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de9cae7b-2128-417d-9cff-9b114a0af085",
        "cursor": {
          "ref": "d96d52fa-55b9-4ee2-9f52-b99073d56553",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "e03f16de-f122-471f-97ba-22f3d96d774f"
        },
        "item": {
          "id": "de9cae7b-2128-417d-9cff-9b114a0af085",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "41aace30-7a03-4378-9103-e62a0aadfc4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d259f091-1de7-4c1c-aab6-67cf3af85c11",
        "cursor": {
          "ref": "56420e79-6dde-4d12-a9cf-519ce19f995e",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "64e85b30-ff1d-470f-9e76-6ff37e24d2d9"
        },
        "item": {
          "id": "d259f091-1de7-4c1c-aab6-67cf3af85c11",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "ca466843-8cf3-4306-9583-54c028057e02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bc6d1df-95c4-49c3-b5b7-b50d05c78d7b",
        "cursor": {
          "ref": "2a6272eb-5be5-41be-a29d-a612868e71a0",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "446a22d6-1541-4f0b-bfcb-6706b5447993"
        },
        "item": {
          "id": "3bc6d1df-95c4-49c3-b5b7-b50d05c78d7b",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "b823ebd7-a449-41ac-a866-ee2808491fcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f333cefd-c736-4617-8799-78174f3cec08",
        "cursor": {
          "ref": "09f943a8-0310-4066-a815-a10d776d984c",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "6111fa89-888a-42e2-aae2-6295733c5ab0"
        },
        "item": {
          "id": "f333cefd-c736-4617-8799-78174f3cec08",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "2fb7e5b4-866b-4949-957f-63ca03c580ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1d1891f-cb32-4e4b-babb-e464bf56e288",
        "cursor": {
          "ref": "60de6263-a9dc-413d-897a-8f3a2429b914",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "30d9088c-398e-4e82-9cd5-db4e8fc228a6"
        },
        "item": {
          "id": "b1d1891f-cb32-4e4b-babb-e464bf56e288",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "7324fc4f-d537-48d6-a6d0-a464831e0210",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98afc55a-d93b-4e95-9835-e7d6b2a7aee9",
        "cursor": {
          "ref": "503a2f6c-aedd-4b50-aed8-bd7f90be150b",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "82f8ee55-271c-45fa-8869-899a4fdd8481"
        },
        "item": {
          "id": "98afc55a-d93b-4e95-9835-e7d6b2a7aee9",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "23176479-7b37-40aa-aa57-17636be4e72b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87ef621b-2c20-4820-9b37-21c07f0ae437",
        "cursor": {
          "ref": "279a89a0-b401-4a42-baaf-50224bdb6813",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "5346155a-410d-4e91-99ed-4d2d8696a2fe"
        },
        "item": {
          "id": "87ef621b-2c20-4820-9b37-21c07f0ae437",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "aa3c5b6f-9f82-4e4e-b1d1-f80bd798931a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3470e80-7f05-4ed4-b417-eddda2ca175e",
        "cursor": {
          "ref": "b7a7740b-feb3-4a76-b192-97d40b2a7650",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "6f6f46d7-4f21-4a70-aa26-abde4b071091"
        },
        "item": {
          "id": "c3470e80-7f05-4ed4-b417-eddda2ca175e",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "9acb6739-0c01-4594-b62e-6b67b423c84f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f11faea4-1798-4e21-9a53-c6e9f76c7433",
        "cursor": {
          "ref": "4c4d161d-cf76-4ac3-ae94-8586e74bee2c",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "a48029d3-c17d-48ec-b089-15f704630d4b"
        },
        "item": {
          "id": "f11faea4-1798-4e21-9a53-c6e9f76c7433",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "b5980c77-d168-4dad-bbbe-c2829e9a9713",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f899f1aa-9407-4d92-83b0-c6ec04005059",
        "cursor": {
          "ref": "ee8c9dc4-cd77-47db-a7e9-df7058e870da",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "c0bade6f-dfdd-475d-bc46-ef9afb949c23"
        },
        "item": {
          "id": "f899f1aa-9407-4d92-83b0-c6ec04005059",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "15923706-3053-49a8-aa37-7f29c6df0959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ac5cf03-ce5d-4b6f-9b21-6577b395f9de",
        "cursor": {
          "ref": "94f54c99-b2a9-469a-add7-1ee9c2d58af1",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "cfb75d81-f303-4b43-973e-f84535d42a6c"
        },
        "item": {
          "id": "4ac5cf03-ce5d-4b6f-9b21-6577b395f9de",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "b87ec4e6-67d4-4a30-a2ac-0c033b0ca5ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f33ab598-eab4-4143-b0e0-8f5cb09cce1d",
        "cursor": {
          "ref": "a9596986-6864-4612-9a24-caa3784537e0",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "aa7e9246-5128-4f1b-a3dd-0b6d3b28e913"
        },
        "item": {
          "id": "f33ab598-eab4-4143-b0e0-8f5cb09cce1d",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "1b15427e-abd6-4e6a-a08a-8b648088c3f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85e4d5ca-8d23-4406-bfba-745c1d0b5b92",
        "cursor": {
          "ref": "d62e348b-e6ee-4063-8ced-1a530f0aa9ea",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "3b82db25-5d48-4038-9f33-f07f3f2bedd1"
        },
        "item": {
          "id": "85e4d5ca-8d23-4406-bfba-745c1d0b5b92",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "3c1a337c-86bc-431c-9b70-39dcd8fc879c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66093ebf-5a91-4d95-8f09-31da8ac7868f",
        "cursor": {
          "ref": "53017eb4-0049-4aff-afe1-410f545d475c",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "6d006d00-f5fc-4c87-9341-282660876bac"
        },
        "item": {
          "id": "66093ebf-5a91-4d95-8f09-31da8ac7868f",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "81f5f528-a375-489d-96a4-e75780ab2514",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1294e1a-6261-4240-b8a6-5c3ddcfbdc2c",
        "cursor": {
          "ref": "c9759422-d293-4ec0-9a5f-8fbf237e1ccb",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "82924331-06fc-4dcf-bffc-db97b9eb9cf9"
        },
        "item": {
          "id": "a1294e1a-6261-4240-b8a6-5c3ddcfbdc2c",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "81dc4284-85fa-4d64-9007-2c124b037b1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f34c044-258d-4946-b605-c67467e689df",
        "cursor": {
          "ref": "0ea6cba6-65c7-4274-8be2-8e0214319165",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "1f3c03bb-e3fc-4ea6-864f-fe368a4e8968"
        },
        "item": {
          "id": "4f34c044-258d-4946-b605-c67467e689df",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "67bfce33-343c-4734-ad4c-ad17195197e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c5422d5-696e-4192-bf91-246734c3eec9",
        "cursor": {
          "ref": "0f732329-0757-4bee-b0be-e1c376d0c0a7",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "8db74d81-8c7f-45bb-9375-469fd986d184"
        },
        "item": {
          "id": "8c5422d5-696e-4192-bf91-246734c3eec9",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "c2e84ef4-dbb2-4e29-8510-94c6d34b8763",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f3a9041-8a3a-44ed-be7f-b71c5813a395",
        "cursor": {
          "ref": "db6186eb-3750-4a34-b5cd-bffa89e6cf99",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "d466eebc-2256-451e-9d50-bc1c72c59155"
        },
        "item": {
          "id": "6f3a9041-8a3a-44ed-be7f-b71c5813a395",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "d0b60483-4d61-471d-9c7f-b825520affe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74e83f2f-2dec-4545-b1a2-0e4a178c03ed",
        "cursor": {
          "ref": "6fec4a90-31dc-4f76-a378-e31daa2a33a1",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "b39d8205-f376-4640-8db4-346cb90116ce"
        },
        "item": {
          "id": "74e83f2f-2dec-4545-b1a2-0e4a178c03ed",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "d632af90-7345-41e3-a30c-4509207f4a04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0b26dcc-e7af-4c07-bfd8-dc0c0164b164",
        "cursor": {
          "ref": "c42196d3-77fe-4226-9854-08aa06f65841",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "4ef1377f-5941-4bf0-9e16-4ae23fd8f911"
        },
        "item": {
          "id": "c0b26dcc-e7af-4c07-bfd8-dc0c0164b164",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "fc3fed6f-ad73-49c3-9534-1f787e084010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dbd02ce-64a7-45bd-aca5-320fcaadaff3",
        "cursor": {
          "ref": "83671261-5716-40c5-afea-bfff35c9f33b",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "03ecddb6-5fce-4a04-98ca-bc3404a91b88"
        },
        "item": {
          "id": "6dbd02ce-64a7-45bd-aca5-320fcaadaff3",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "fe496957-ebea-4a38-b492-82212a3fcdc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "771f86a5-7392-48f1-aee6-8becb025bee1",
        "cursor": {
          "ref": "56b0bfcd-1fdf-48f3-80e0-a1c9593c3858",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "45dfa937-eb72-4525-8322-df03b57bc271"
        },
        "item": {
          "id": "771f86a5-7392-48f1-aee6-8becb025bee1",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "841578e3-7d93-43c0-a429-9bee495b0126",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1c26411-975b-46cb-b590-04ae8484c9bb",
        "cursor": {
          "ref": "e46f690a-8482-4262-8c53-a81548639412",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "888447fb-1c6d-4235-9d9c-9adaed8ffc26"
        },
        "item": {
          "id": "f1c26411-975b-46cb-b590-04ae8484c9bb",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "f9f93ab0-f991-406a-ab36-c006567114ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c3aa0e2-24da-4178-a253-b9f100dd3375",
        "cursor": {
          "ref": "5c4f393b-8f88-41a5-a65d-8502c522dea8",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "08519de9-51d1-4d3e-a1e6-b5ca360de0a6"
        },
        "item": {
          "id": "7c3aa0e2-24da-4178-a253-b9f100dd3375",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "f9e1999d-ba7d-4de8-9cb1-ab9f3479e3f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da0b5920-66aa-46cb-b56f-2cfdde021df9",
        "cursor": {
          "ref": "b85bb20b-54d9-4f76-aa39-22691e9e2195",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "569f11fc-8005-48ca-ac19-517c3c55a86e"
        },
        "item": {
          "id": "da0b5920-66aa-46cb-b56f-2cfdde021df9",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "6d179247-f4af-415c-b355-0660e5700190",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61173375-3eef-4bd3-b3f1-078a3707c963",
        "cursor": {
          "ref": "30bceba5-873b-499e-923a-449fd8078332",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "045212bc-a434-4ab3-aab1-d6cd31607d33"
        },
        "item": {
          "id": "61173375-3eef-4bd3-b3f1-078a3707c963",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "03a4736d-069d-4ecb-a838-2563cb3187b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49c927ca-d1a1-4d2d-90eb-27726ecfb4d8",
        "cursor": {
          "ref": "706a9357-67ef-4cd1-8840-3c48a45b8d59",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "10593719-0f12-4bcb-8a8a-a98f30afa8c7"
        },
        "item": {
          "id": "49c927ca-d1a1-4d2d-90eb-27726ecfb4d8",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "9967799c-41df-452b-8a5f-4aae3ca83146",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f649fe42-325c-4c35-95ac-fcc6604403b4",
        "cursor": {
          "ref": "8f6581df-0e1f-4fd3-83f3-2aa7a55be6b3",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "8903f73b-402a-46d8-b77e-d92861f28c29"
        },
        "item": {
          "id": "f649fe42-325c-4c35-95ac-fcc6604403b4",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "62d5347a-f9a5-4d4e-99cb-6077cbf83205",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0ae5e41-9858-4b68-9150-e204e8dae48f",
        "cursor": {
          "ref": "e9d22359-4442-4ee1-a0dc-5194cf320411",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "00765167-6ddc-4039-9094-569a1708fdc4"
        },
        "item": {
          "id": "c0ae5e41-9858-4b68-9150-e204e8dae48f",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "9fbdffd9-bea4-4c5b-b192-638298680409",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54963728-931d-43a8-aecd-7d6f17b42352",
        "cursor": {
          "ref": "202640ac-e51d-485a-b2a1-cb2a3317acef",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "fc083927-584d-4a2f-91e7-6a2e06b6e9b4"
        },
        "item": {
          "id": "54963728-931d-43a8-aecd-7d6f17b42352",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "b5da1a1b-52af-45f1-8122-bfdca44aa416",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce5ddf93-3e2d-4cef-9877-d4f5214ea086",
        "cursor": {
          "ref": "0d567727-0e66-40f5-8ee6-73ede96fc8e0",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "47556d8d-5cf5-4c5a-bc4b-ef5bab5bd47c"
        },
        "item": {
          "id": "ce5ddf93-3e2d-4cef-9877-d4f5214ea086",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "570fb140-d221-42c6-8d45-282e15a8e8f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8f47ca2-1bd7-4e6a-8e77-5dc62fc1feed",
        "cursor": {
          "ref": "c18652e5-5dc5-47f3-a50b-aca4728e3226",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "b1404227-839f-4067-8293-771b2a4cc760"
        },
        "item": {
          "id": "b8f47ca2-1bd7-4e6a-8e77-5dc62fc1feed",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "7598fe0b-20f5-4473-af8f-010364a5ef17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a14c9b5-b4e7-4b96-a885-07f8dc3cd9a9",
        "cursor": {
          "ref": "708679e8-b97c-4d0a-828a-403e9952f4da",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "ce468d4f-f97e-417e-b881-f5b619378233"
        },
        "item": {
          "id": "1a14c9b5-b4e7-4b96-a885-07f8dc3cd9a9",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "2bbcdd5c-7619-4e9f-b788-71afdd85d32c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d10dd02-1957-498e-a722-cf3471067b5d",
        "cursor": {
          "ref": "db288feb-fdc8-4c59-a3ff-c31b5ecc0618",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "84ce451c-252e-4d2b-b0ed-d6a6a51331e0"
        },
        "item": {
          "id": "2d10dd02-1957-498e-a722-cf3471067b5d",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "a6536aff-60aa-492f-bb67-9eea7712f704",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "409990cb-7465-485f-9faa-0a454f6ae404",
        "cursor": {
          "ref": "b6afa468-4481-4ee4-b713-9eb9bde92a9b",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "f71a4fbf-3b59-4fa1-a2e0-8b99e4f07f83"
        },
        "item": {
          "id": "409990cb-7465-485f-9faa-0a454f6ae404",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "66b5a15f-1ab7-44ef-ba40-47d3575aeddc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a275069-4f4c-4a70-a7eb-5607a99d4459",
        "cursor": {
          "ref": "a08b33b1-c822-455f-a2f7-462a0718ee13",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "97c2c6e4-7857-4cef-8cf6-3b2cd3827f17"
        },
        "item": {
          "id": "2a275069-4f4c-4a70-a7eb-5607a99d4459",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "c0750763-8175-4874-9a17-1c7a1468e445",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee2655bd-7797-41b0-a9f5-ddeee332bbd0",
        "cursor": {
          "ref": "66b247d9-858e-4163-9d24-bb46c40fef36",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "eb780f98-5f58-4e95-b4d4-d043d9eae1d4"
        },
        "item": {
          "id": "ee2655bd-7797-41b0-a9f5-ddeee332bbd0",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "d8eccb0c-14a2-4eeb-8eea-5ebd5efec6b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cb7115f-d0d4-483a-a49f-3d316003abca",
        "cursor": {
          "ref": "d7fccf51-381b-4ade-9113-3f091cd33342",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "9d0b90c6-eae7-4475-8b98-9fa34e2aa2e2"
        },
        "item": {
          "id": "0cb7115f-d0d4-483a-a49f-3d316003abca",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "a8148c92-66aa-4cfa-adad-f3e53695ec0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb68a6b8-43ac-4ea6-87e1-cd6dedc06c4c",
        "cursor": {
          "ref": "2db59ed0-7ebf-42d8-938d-f60b1823bbe1",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "77e5d43e-ec23-4c44-a5e3-bd2e2824bfe0"
        },
        "item": {
          "id": "eb68a6b8-43ac-4ea6-87e1-cd6dedc06c4c",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "253b161a-f517-4357-a7d6-051fd37d76c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35c46e78-b63d-48d4-962e-f7e314dd7853",
        "cursor": {
          "ref": "43f2c005-6de0-4573-bb0c-91c50871c16d",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "465fe539-b00b-434e-ac9f-0b65ecb593c8"
        },
        "item": {
          "id": "35c46e78-b63d-48d4-962e-f7e314dd7853",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "d13f879e-2547-4584-a874-34b2f0ca6fa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32400735-44af-4a1b-b922-ad1773d1f13a",
        "cursor": {
          "ref": "dba41010-9a65-495e-9aae-67368c1ed9f1",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "e0ad8882-dc49-414a-bcb0-b42dc0fc5aca"
        },
        "item": {
          "id": "32400735-44af-4a1b-b922-ad1773d1f13a",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "7d6ede8c-8ad2-42cb-b190-57002ab011da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecfcdaae-5f4e-41d7-ae45-3fd136f26fe7",
        "cursor": {
          "ref": "d9e3f26a-c937-4f61-8e7f-a3bd2f5a9044",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "c0389aab-fb36-491d-94df-465586c96553"
        },
        "item": {
          "id": "ecfcdaae-5f4e-41d7-ae45-3fd136f26fe7",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "67dd118a-fd1b-41a6-9bb4-e9bbaba7dbc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fac0221b-4322-4f2d-8683-44e5b8d0d039",
        "cursor": {
          "ref": "9bf098cc-718a-4e2f-aea6-91d50a5979e2",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "a7b10933-f385-4551-b861-e2e46966c42a"
        },
        "item": {
          "id": "fac0221b-4322-4f2d-8683-44e5b8d0d039",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "3151c0c3-48f4-4424-a883-96c655371a49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71766484-37b6-453f-b116-27a5bfda2da1",
        "cursor": {
          "ref": "492e7228-96ee-4500-aa48-0b2f398b4f07",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "9187e7ff-05f8-4535-8be6-785353cad57e"
        },
        "item": {
          "id": "71766484-37b6-453f-b116-27a5bfda2da1",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "81163f0b-aeb3-4f46-b661-bf5bfc886947",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45bddabc-b105-4b01-b222-dd1e9b0d97d4",
        "cursor": {
          "ref": "fb7349b3-d9cd-4159-9a86-efde2ff54f2b",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "7e421980-08e3-4f54-918b-dad218446671"
        },
        "item": {
          "id": "45bddabc-b105-4b01-b222-dd1e9b0d97d4",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "d6c3eb09-7f8b-49e9-833e-966a424c53ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb485f97-eb96-4a3c-ba49-e85d6b119773",
        "cursor": {
          "ref": "d0e55fe0-1bc0-4df3-8964-d478ffd89d83",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "28d07cb2-46c4-4cf3-933e-76de2fbc8015"
        },
        "item": {
          "id": "fb485f97-eb96-4a3c-ba49-e85d6b119773",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "474eae8f-a3b4-4839-838c-8f2f53cab2e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "914d31ff-9c96-43a7-a3fa-0788ff09fded",
        "cursor": {
          "ref": "3586864e-4228-4692-9b68-61850fc9fa83",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "b4d3266b-97d3-4123-a848-835bd5c63305"
        },
        "item": {
          "id": "914d31ff-9c96-43a7-a3fa-0788ff09fded",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "1043f0f1-d442-4ef7-8400-91188e02127a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99bec149-e4e1-481c-b371-ea253d7a169d",
        "cursor": {
          "ref": "2ca1f0b3-43c3-4f8d-a0ae-80615556b7d8",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "daa17c17-93af-4781-9ea1-f1fe225cfb3a"
        },
        "item": {
          "id": "99bec149-e4e1-481c-b371-ea253d7a169d",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "572b1d6d-a4b8-47b6-b0c4-7593e668015d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b81e91e-f252-4521-b561-9b4365b1946a",
        "cursor": {
          "ref": "966c104b-056f-4203-8fae-ca066063c407",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "9ecb7dbc-53b8-41e6-abe7-14823a775a44"
        },
        "item": {
          "id": "6b81e91e-f252-4521-b561-9b4365b1946a",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "6aa5059d-b06a-4652-b38c-aa8b2e7521d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fffb745c-588d-4855-b68e-0037a42fb387",
        "cursor": {
          "ref": "f31add8d-9032-47af-a08a-d7468294fbae",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "174ae9ad-b1a9-4623-b1d1-21357983a191"
        },
        "item": {
          "id": "fffb745c-588d-4855-b68e-0037a42fb387",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "fd2d6152-9965-4787-b653-1772b98e8fd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee8c69fc-db24-4e76-94c4-36690970a00f",
        "cursor": {
          "ref": "6d6c80aa-81a0-4384-b184-ed2e29842bed",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "d4171704-5940-4f97-8552-45da0e5ec52d"
        },
        "item": {
          "id": "ee8c69fc-db24-4e76-94c4-36690970a00f",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "a2a485a0-5c0c-471d-aeca-b7c7d2278b6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c1710df-2ce3-4242-9018-622cb3247ae7",
        "cursor": {
          "ref": "c704081e-127a-4f7c-bfc3-37996e317855",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "96e47a08-fe70-4a1e-85fb-3850b29721e6"
        },
        "item": {
          "id": "9c1710df-2ce3-4242-9018-622cb3247ae7",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "ef5aafbd-3594-467a-a31b-a149d50e1901",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5ac6957-5ecb-471f-b4c5-1b6c1bf9b4bf",
        "cursor": {
          "ref": "1142bf9d-cc2a-4f25-adb0-07ad0d3230bb",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "ed941476-8986-4f91-93f0-e9760d1308b4"
        },
        "item": {
          "id": "f5ac6957-5ecb-471f-b4c5-1b6c1bf9b4bf",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "57a01553-c97a-4677-8331-828d6eaa0482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e079a95-9969-40b5-a7c1-489af479f32c",
        "cursor": {
          "ref": "5c00d934-931c-47d1-b2d8-bdd71565719d",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "03bf8ff0-f77e-47dd-baec-79e04bd33154"
        },
        "item": {
          "id": "2e079a95-9969-40b5-a7c1-489af479f32c",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "3b09acd7-879b-44c3-8780-dbbc0bbef431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca06ae28-0131-41bb-9fda-8c5cfb74c5aa",
        "cursor": {
          "ref": "0ebf0d71-c98c-419f-810f-caaded3b5e87",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "9a5db42e-0bb7-4eec-a136-6e8f76fa2c3a"
        },
        "item": {
          "id": "ca06ae28-0131-41bb-9fda-8c5cfb74c5aa",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "95077629-e004-468d-838e-dc17674bbb5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "250dd6a7-0038-4455-a470-24f0705198da",
        "cursor": {
          "ref": "4c43fcc2-fd39-49af-91ae-ca8bb9dd5eb6",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "bd5a8235-690a-4692-8031-c5fa64d12638"
        },
        "item": {
          "id": "250dd6a7-0038-4455-a470-24f0705198da",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "48b97ac8-0c2c-4fa4-81f5-cdd8a9c6552c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d448d410-8f10-4028-ac1d-d30f7015b49c",
        "cursor": {
          "ref": "b30be5e7-cf69-4c87-8e89-92822ecb81d3",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "5734d5c3-4899-42a9-b462-190266a6b1a7"
        },
        "item": {
          "id": "d448d410-8f10-4028-ac1d-d30f7015b49c",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "b9f14ec1-8bb2-442b-b7b7-c06206e161f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02fec3d6-3bce-4ed3-816c-06a7e2f054ed",
        "cursor": {
          "ref": "c68338ae-a9a7-45c0-b0de-6d1d8ce179c9",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "6995eb15-ac00-4c3f-91b5-7dc10ded4305"
        },
        "item": {
          "id": "02fec3d6-3bce-4ed3-816c-06a7e2f054ed",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "d8b5ab8e-bf4a-4d78-872c-20a888f3c066",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4608aa2-31d1-4965-a75a-5348e68a7c0a",
        "cursor": {
          "ref": "93d2ce2b-7f7c-4cad-ad5b-683374e541b0",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "508b2c12-e165-4e93-9b27-480e0fbb0059"
        },
        "item": {
          "id": "a4608aa2-31d1-4965-a75a-5348e68a7c0a",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "29741ce7-8b1e-4421-8dbe-dbe752eb04ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "815797b2-a05c-4e4c-b297-c6ec6936579a",
        "cursor": {
          "ref": "b2e36750-8417-43c7-826e-7267f9a6f3b1",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "9085519d-26ab-4514-b8f8-0cc4bb6a2943"
        },
        "item": {
          "id": "815797b2-a05c-4e4c-b297-c6ec6936579a",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "96aedb33-817a-4d6b-8435-ddf7e0dd2a46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7357a4f-d58a-4aad-bdfa-a92bb9fe9d48",
        "cursor": {
          "ref": "59977323-55f4-4445-88e2-89b7ab684fff",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "f644c11c-b6c3-4f7c-99bc-dcbba76054e1"
        },
        "item": {
          "id": "a7357a4f-d58a-4aad-bdfa-a92bb9fe9d48",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "2c252b75-61ac-49f5-9ada-19ed93da1b6e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "8bf61c4f-6c2d-45b1-a87c-d02f7b7ffd4c",
        "cursor": {
          "ref": "8e5a8fee-e840-4685-a036-67330a3262d7",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "73ee2f43-8e5f-4af1-b2f3-0828245e461c"
        },
        "item": {
          "id": "8bf61c4f-6c2d-45b1-a87c-d02f7b7ffd4c",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "dfdcb2b1-0279-4906-9080-65879add1aeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "dbb3fdf6-d7be-4b89-9045-b8b14e4cdb69",
        "cursor": {
          "ref": "6aeed17b-f971-42b8-bafe-ac1b32da355c",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "fe5f9a71-14c4-4cc3-9598-a77bccec3996"
        },
        "item": {
          "id": "dbb3fdf6-d7be-4b89-9045-b8b14e4cdb69",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "d00bd365-cf48-47d3-9dd8-347fba09bb6d",
          "status": "OK",
          "code": 200,
          "responseTime": 175,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fca6ac5-0d41-458a-8e15-0e93888294dc",
        "cursor": {
          "ref": "d6528eb8-7d39-464d-885b-91525adab40e",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "5fc85e17-a37f-43c0-a8f8-036dcde36716"
        },
        "item": {
          "id": "7fca6ac5-0d41-458a-8e15-0e93888294dc",
          "name": "credentials_verify"
        },
        "response": {
          "id": "20f00122-5c7b-425b-84f3-5c73ec7283df",
          "status": "OK",
          "code": 200,
          "responseTime": 1996,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e5fcfae-bda0-4515-a76e-649069b70d8f",
        "cursor": {
          "ref": "c614e70c-b9ca-4f94-8e88-af751cd533cd",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "40d47842-da0f-4e8b-ba6a-ce613908413b"
        },
        "item": {
          "id": "1e5fcfae-bda0-4515-a76e-649069b70d8f",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "326c2671-96f0-47e1-bf4f-b9c4295413b1",
          "status": "OK",
          "code": 200,
          "responseTime": 2208,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb99baf8-51ac-499d-9a16-ddbd9777ffab",
        "cursor": {
          "ref": "aac78225-0645-43e0-be67-3b670680c99d",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "9f105516-9310-43c7-bb5f-95443cab4489"
        },
        "item": {
          "id": "bb99baf8-51ac-499d-9a16-ddbd9777ffab",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a06ee0a9-038e-4a87-9090-a482f54c659d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "bb99baf8-51ac-499d-9a16-ddbd9777ffab",
        "cursor": {
          "ref": "aac78225-0645-43e0-be67-3b670680c99d",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "9f105516-9310-43c7-bb5f-95443cab4489"
        },
        "item": {
          "id": "bb99baf8-51ac-499d-9a16-ddbd9777ffab",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a06ee0a9-038e-4a87-9090-a482f54c659d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "bb99baf8-51ac-499d-9a16-ddbd9777ffab",
        "cursor": {
          "ref": "aac78225-0645-43e0-be67-3b670680c99d",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "9f105516-9310-43c7-bb5f-95443cab4489"
        },
        "item": {
          "id": "bb99baf8-51ac-499d-9a16-ddbd9777ffab",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a06ee0a9-038e-4a87-9090-a482f54c659d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "4f33747c-914d-45f2-8061-c9b1974d2fb8",
        "cursor": {
          "ref": "d10e17f3-b226-4301-8553-161560bfe27b",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "82701580-634f-43ac-bb1d-f15b0c53bb14"
        },
        "item": {
          "id": "4f33747c-914d-45f2-8061-c9b1974d2fb8",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "6f404fb5-3994-4f8d-8840-5f181f6ac159",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "59aee93e-3646-4afc-925d-e5e401222971",
        "cursor": {
          "ref": "f82a1128-6c2c-49f0-8f7a-39ee3990d160",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "620526fc-8110-4b6a-82da-07774d80b74c"
        },
        "item": {
          "id": "59aee93e-3646-4afc-925d-e5e401222971",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "db5e2cb0-4257-4aa2-aa94-4f1ea76eaa1a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "59aee93e-3646-4afc-925d-e5e401222971",
        "cursor": {
          "ref": "f82a1128-6c2c-49f0-8f7a-39ee3990d160",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "620526fc-8110-4b6a-82da-07774d80b74c"
        },
        "item": {
          "id": "59aee93e-3646-4afc-925d-e5e401222971",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "db5e2cb0-4257-4aa2-aa94-4f1ea76eaa1a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "494cac8d-ac0e-4cb7-9a98-5f71e8707452",
        "cursor": {
          "ref": "1bd89245-1279-411b-8872-ddadfe7af89e",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "567bfb13-155f-4e5f-9200-dca97dddba63"
        },
        "item": {
          "id": "494cac8d-ac0e-4cb7-9a98-5f71e8707452",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "04e85790-6b55-4dd3-b63f-0ce8b18078c4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 195,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "11ceb895-7567-4148-8344-bda298755903",
        "cursor": {
          "ref": "907f6b40-57a7-4c0d-b64f-d7e2460a681a",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "e96c084a-1c5f-4a63-bff1-c979229f997c"
        },
        "item": {
          "id": "11ceb895-7567-4148-8344-bda298755903",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "92980d64-b67b-48d1-8a8c-220e53dc10d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "11ceb895-7567-4148-8344-bda298755903",
        "cursor": {
          "ref": "907f6b40-57a7-4c0d-b64f-d7e2460a681a",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "e96c084a-1c5f-4a63-bff1-c979229f997c"
        },
        "item": {
          "id": "11ceb895-7567-4148-8344-bda298755903",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "92980d64-b67b-48d1-8a8c-220e53dc10d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "e9ba9250-5104-4634-9210-65d9336b59af",
        "cursor": {
          "ref": "44ebff5f-adb1-43cb-bf0b-87ec274963b9",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "d87194dd-2999-4de2-b3e6-4ba8f9d4529f"
        },
        "item": {
          "id": "e9ba9250-5104-4634-9210-65d9336b59af",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "c2c422cc-96d5-4516-96da-789ef6bc0fa2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 104,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}