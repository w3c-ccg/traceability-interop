{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "b944be41-1833-46a7-8d84-bf86f1f600d1",
        "name": "Clear Cache",
        "item": [
          {
            "id": "71c4f760-93fd-43b2-a734-2cc8cdfd4185",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "27f1034f-43d0-4f4a-818c-67147fb204c9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "fb87a881-a1d6-42b3-8608-da5bd9f70e5a"
                }
              }
            ]
          },
          {
            "id": "ff78a4fe-3e0d-458a-be5e-896ad8282958",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a60b0ad1-781e-49a1-9adf-177fea923e94",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ba115e91-4115-467c-92bc-7a66812adcc1"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "32c98f6a-191a-448f-b966-fd3006cf7c2d",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "1755cce7-b65a-4a1f-9061-c2999d01f51e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "031a5ed1-e8c4-4752-9ac6-a4a0e59b30ba",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "339df05e-385a-41f7-a82f-51b37ac24d10",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4d2d2c08-8737-459b-a68b-581a982541d6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "31a33199-b0b3-4616-bbf9-19c04ed0da11",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "25ac3958-65a3-4f7f-9541-edf29dbb9b3b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c0b00579-954b-49bd-92d8-3b0b9b6555e1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f7daeea1-0bec-42d7-919b-b6fe9846e361"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "33c75dac-2b0d-4651-b448-20b597663c92",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "7aa40d12-0e80-40e0-a719-34661b12ff9e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b37f0f72-752e-472b-9c6d-5c7f6461df63",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6205c1d3-9920-4e07-84ff-35a4a5dd0562"
            }
          }
        ]
      },
      {
        "id": "65496141-4a17-4f31-bcdc-4ecd95e259f2",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "0b1a8c51-30c9-4e35-8c1a-4413965c8e0d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e6a71f06-da72-430a-a5df-6f332f16d06d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8cc98bbd-c677-4e88-8a04-6fa45cb9eba4",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1477e502-9236-477e-8673-88eb196b7b42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ab37fdb0-2543-4b8f-bb9f-d9d39424fa54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7d8aa84-fe7f-4e9c-93f9-08604d6f3e24",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9651de9-3263-4a55-9ad4-3516e82a303d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3ea77f00-db5d-47e4-80f9-daeca3fae9a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2df97ba-bfbb-41c9-854f-02cf4e6b24a3",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46ab3dad-ea3c-41be-996c-bff35a5c94dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c6e92489-e83d-4fd2-82d7-00124b88f26b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b8fdd258-fde2-464c-a687-4359861a9016",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "99f6089e-c44f-460a-b707-1e5e3364a967",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2723356-cc8a-47e8-9f4a-9ee31b87c9a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "81a95742-b5fc-4ae5-9e6a-d3b2e8b72cec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67fc037c-2483-46db-849d-52084c50d97b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f3caaaa-fcfc-4483-841d-702b93477e36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf75cdd9-6754-496b-983b-81e3a75bd2c4",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b93a1274-f656-4cc5-8e2c-1585670f3a5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4c59e3a6-e4e5-49a5-b3fd-b6490741699d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d58f410-f9b4-48eb-b588-432d4338f45e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "9c06d0b4-56eb-4145-8d81-1d48c92ebc62"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1ab936b5-3ff0-47b8-ad34-ec9a1df667b1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f0737190-f8c1-4180-8ca5-70a54bbcd029",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "01ac789f-faaa-40bb-8067-70fe3329a768",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "06f27625-43e8-4aaf-b277-3ed85575480d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9acff8c0-f301-4aa9-844c-9e2cbb5cd1bb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "63f9c12e-1ced-4a8f-900d-2b4ad3b568e8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2138445b-8c40-40f8-be6c-474d913cc2ee",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cc7f2437-e62f-4424-a1cd-a2b1103d02e4"
            }
          }
        ]
      },
      {
        "id": "7a493d49-6078-4ea2-9a4f-cc4cfec9be59",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "9706d9f3-ba99-4d60-8da7-6626871fd8d2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c724860d-faf7-46d8-841f-6b8cf3e63093",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "f8b42b7b-356c-4968-a0a4-231e7b290ae7",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81b9692d-6e5c-472c-8fe8-76c5dbb6b679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cacdd58c-c0a8-4dae-bfad-19e8784e1897"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dd684c6-1c49-4675-a66c-da17a983ab8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ca799c3b-0877-4dd6-a77b-040ace15d373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fd8872f-ee58-4173-ae92-327467f0cb94",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5093af1-1256-4326-a7f0-0e3afc9a53da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3207ab88-ba5b-4f4e-8352-382ea2ef9270"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51bb85b4-3ee2-41f0-bb80-84cc0f7c41e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "40bc509d-7551-4290-a70b-e7a061f7e469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7811b73-9175-46b0-ba64-a37949bf9c18",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dafb352f-31db-49d3-9901-339d0a8abd1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d340603-337d-44cb-b208-291694485754"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "330f045a-d79c-48f5-b087-ede19534054b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bfba7a1f-dd02-4bc5-a3f1-0144d5c39088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29f5d330-6854-45fa-a100-fd8bda7cd3cd",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73f932c4-e943-47a4-b6fd-d076f41ad321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a44fd639-b107-4bf8-b79c-d30af514fa2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d83997b8-5522-4d44-9ece-edc10a8a6068",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d1c19828-75d5-4b24-8562-b2a3d172abdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fd714f6-7b60-4d9c-9d51-92e55439f758",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb3805e1-e50d-46c6-a77c-4198045185d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07c3b40d-010f-46c2-98cb-2d68b46d5128"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0567306-cd61-4fa0-88b9-37c489d8b2ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d45aecc6-921a-4f52-a334-6bd93ab72db0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d96b371b-40a6-41fb-a129-8bc879ca0845",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce7c99cd-42ea-4ee1-83e6-75bf360000c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cbca21b-113b-4e43-859e-a76a3eefb930"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2590510-8705-47cc-ae90-1994105be6d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "399e3cae-2321-417e-8f31-7829b8cf0ed5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a95a1f0-f1ae-4258-ba95-9e0f5f46e63b",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8688223d-5fc4-4e88-b647-8ec5e8aa63d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dae8471-8d88-488f-b3ba-970d51c177c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afe10ccb-daf2-4b9c-9372-99371b93ce90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5061c831-7bb6-49ae-8f0e-6259160de3e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3c76e73-dff8-4b25-8149-5b7d29d1b894",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8c3f926-52d7-4173-9012-40af0a628185",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "205adfeb-1f3e-4797-bebe-d9c155b1871b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8d6c10d-ba55-4e1d-94ab-cf68ae135c76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5a57c3f6-bbc1-4b5b-a7aa-c429b4d20b7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c89cd546-9d35-4a7d-b44d-4292bcbabca4",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb60bb27-0bb9-49a4-9a21-50cd59e2dcb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53703946-9e1e-4e18-94e5-8d8a23c06e31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ee4269f-fc21-4b24-986c-d562ba8dd36e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e73ddcca-842e-4c72-8ffa-0afa67bfbeba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bde2120d-b709-4cf7-97e4-f201097990aa",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43e005ed-0d6c-49d1-94a8-250c8ff857a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79fbfa3d-0e00-4246-80f1-a8a1ea1ed633"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42257bc9-caab-4e9f-9ade-d15356c60a5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "acf27936-f49a-426b-8cc1-0876ed92c3c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a11970a1-9e9c-4026-8190-ee03167602d2",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0091fd4c-7eef-4a5d-809b-e232e7f4396e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d63ff40-f8ff-4a9d-b937-829ef1b6a49c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bcbf06f-9cdc-4245-9d9d-a1bf3db1e00a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "45bb9b61-bd16-4552-aaf8-c9a9bf74c97c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09d0fcc3-2231-4e01-9fd5-626f215c3939",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5a589c0-ce0d-48b7-bbff-12934e02f3fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ea9b433-d225-41fc-b944-5756206fd182"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b1443e4-dc4e-4430-879e-1ff6a6f0dcca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b9f5f323-3f6f-4672-8df8-a862a0624757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55f4528f-2943-48c7-b5e4-84728e24a87b",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb9a1eb0-1db1-4552-9203-6caf84b1e92b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "437d8031-963d-44ee-a6a1-cb7529322849"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b610a9b2-70c1-4c2b-9502-a7d0de866948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2a075869-71b3-4c3f-b04a-d370ebf24698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96b6f8c3-1af5-4dac-aa89-47e8bfb6bdfb",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b15515b-5d3c-4475-857c-f0bb594914e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "785ed605-fb42-4ad6-85e7-587123ef3781"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cb040fd-4523-40d7-b882-a2f4e8ba6334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f050975e-9be8-4f59-8db9-fa9bf65d39e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4cd961e-533d-4c8f-a019-9965ee2c6800",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a3bdd57-aaca-4653-aeb2-eff3b90f8a34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9f5c2ab-5846-47f2-9721-ca83bf61adcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf19d41a-8c8c-414a-8118-43d3164eac92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "93a7de70-981f-4864-b3bc-8806bb4f28c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d722bd3-745a-49db-9fd4-f30801024e44",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "550d3e2d-0a26-493f-a942-9f906fa300e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a74b3b13-38fa-4ec2-9245-0e6d18338567"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a60e3369-a096-41e2-8257-ae9dba50d7f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "db58587e-379d-4bac-a20c-52881f9e819a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "687a34d2-50ba-4171-8d27-812bb7f2480f",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be2d3526-00f4-488c-9b17-bc830b89a6d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af8b0f9a-9c1e-4129-8ac8-9ab4a9a41355"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cce57e00-0266-4b24-8784-e65f1c7bbbef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "36931f00-70d1-4ce5-bfe9-bd77f50565df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22812066-324e-48b2-80f9-f8f1e249ddd3",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cec3b6e6-952f-4d23-9506-3e8025a9ad80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d543a9f0-b7a9-4df6-ac30-110e086760b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f153d171-aec7-42b8-85d6-a4629589ae48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbd71fe9-f4c0-460b-9386-fadb57437081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdf01575-2237-43cb-9b1a-9fa66e0a648b",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "330949b5-95d8-48fa-81a7-459689b23eee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f15a2614-d1c2-4b79-8fb0-788f9798cc81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad9795fd-9c6e-427a-8203-dd151d242cfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f3af50d-b682-4070-9309-5f90d3caa43b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac2ef768-b93a-4adc-85be-61a4cb96fcdc",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d27eb70-99a7-4fbd-82e8-8b6608396321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "930deb91-0851-4803-8203-1b0ac794f8d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "040f423e-385d-47bc-ac86-fb1e4483a7d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e50e820-ff61-4b2f-8f3a-44a337d5aabc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b6bcb93-f03b-4a83-ae5f-07d6c7d125ac",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a9bdc97-b5b5-4694-b97c-d18d5eaf20d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fd43649-07e1-40cc-be0a-4e0d04c2090b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b226a5e8-a084-474f-baca-5dbd1edc45a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "450b5152-1491-4d01-9c4a-a13d95c9fff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "625bcf13-500a-496a-9b5f-e8201ec8d062",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbdff850-2cf6-4ea5-9269-b9e944dda556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94dc6ee0-1d2d-418a-8b06-0e00b4fc96bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87ef3216-2bb8-4e09-be29-e19843e4942f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "76235f03-4691-4c1d-928b-f87b363798c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2f5f9e0-a31a-42df-9ebd-4b5b841f2804",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19d963d0-eabe-4ebb-a104-63f27fec205c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d44f64e-6848-4e7f-ade9-1d1f01da2504"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2da98d1e-c961-4b11-900c-d9897aa630c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c356626d-60ce-417e-b2f6-776f02c9f4bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "083c0647-8e2a-43fd-a929-e6eb181b9f4f",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f504c51-c74e-4aad-8111-b5380c58f859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4817abf-0e4b-44b7-a1b8-d1fe50b915d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bab0fbe-4754-403d-8bd1-c9f65cafccfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "819be082-ae56-409a-b257-c719f17ba28a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efa2fb47-c333-462d-843f-fa479abaaa6e",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8c0ecde-37f6-41c0-9be9-a936a053ccce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4f5b8c1-bd4e-473c-824b-0a9f1ac82af4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4add61f1-43ae-41bc-8f57-597f8d886988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "27cadace-fa38-45a5-b808-3dbe09d6c453"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9d39012-0be2-4d3a-bb16-4fe1bef18654",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "456f743b-0afa-4c2e-aebf-804535d04940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8780d043-7b1f-4980-bb5f-4770b816a5f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26e30030-cb19-438c-bbc4-ba2fd3e7c270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "19e41be4-efd8-465a-a550-c22d3f7babb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab43ce96-d85e-4c42-887f-994ff1a5918b",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaba8a3b-2b9a-4a83-b936-1282b8915b05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19cfd1fe-84af-4233-8616-b06d71a22567"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e57ebd9-cd3f-4203-8a85-55d1ee1c8f62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9dbf523-4c31-445c-be76-427ca342a9b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "512266f3-47b6-43e9-af90-080fa3716611",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "893dd1a3-8283-4cbc-9341-150dfae54f7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d61a1221-0f1d-4097-b80b-17e9ca4a148e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "465af52d-fad7-4673-ad3b-5b9c5e2e8071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "28e4c37b-a3e9-4da8-a9b0-607bcab20d1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3f2a727-0e4b-419e-a5a7-39fa76fc4573",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7d25e8b-4b6f-4511-b269-6b9a7fb3dacc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13d5c3a2-554f-4104-a07e-b8a2ae54d70d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b2a29c6-2dee-436e-a756-4407af176292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7040a4e9-78f3-4ed1-8c9e-598b627fdc2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b61ab7c6-8cc8-48e0-a196-714d8db9e0a7",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91e8b823-95b3-40a7-af16-42c475bd9851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ddd7841-0069-43f9-900c-e4291100532f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49856809-80fa-437a-8a51-e3067d79fbee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "fdcc2558-cada-440e-b9d7-e43b67c466e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62c770c9-2be8-4420-80bf-2662ef5c3af7",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b23eb84-8000-4910-88bb-25a33a6f4cd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0d7b324-4406-4066-9740-9b84557d5ba2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0942575-e6c3-4ff2-804d-1c925eaf087a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce52b6db-df58-458b-a274-40d1a66a1934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa7ac624-0c50-43c6-ae43-69cbf3e3d804",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c99ecd5d-9712-4b8a-9184-d6a0d754d3f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "672376f4-aee8-4b15-b457-5788d2efd4ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "623f7781-c334-4a9b-b747-759d71f31639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d38143d-beb4-4995-bc87-47f908237bd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77eaef3c-4279-4c84-b290-5ea93b71bfa0",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bc18f7e-afad-4597-884d-cdbd71ad6d4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20d91a0b-8116-46c9-bd6f-e15e677db003"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca287fb8-7f7c-4a37-8df1-d1fcf5de6203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "de5cca6b-12a4-4c48-aa0d-8c1574ffabd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9557e35-b99c-42ba-bbb5-9566cb820521",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "238050c3-d005-48be-afd5-698539849d17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "940e8acf-8aef-450c-8600-1afd54428aba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3978d09-3cd8-48aa-8d02-dca99b39b3a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "11c8caf8-c046-4ad7-a0a6-9152133a31b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c639dda1-f118-4dbf-a787-9f875ffa49c7",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b1674b3-5f56-4681-bcf5-c28852fe5113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa3e47cd-e33e-4d21-a132-7ab7c84ccbdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b57b8c8e-972c-447f-b7e5-5ba58fc2eeb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "f5293a58-3fc8-4c08-bde2-e12a62fed97b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed69c021-559e-408b-a83a-0381f5613fb3",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb331e70-86f6-42ba-b0f7-735afe50f638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8d1a895e-d4f2-4dad-b4d8-1be6375e04cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cfcd0e9-b4df-44aa-a53f-26048cb9e265",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4574f04e-3e96-4b67-8e78-f636b97c7b56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75d6155a-2c67-46bf-bcc9-51a72875fec7",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "052edaa0-2f70-4589-a702-6db9f7e72088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1af7df70-ff63-4e41-a248-1b5972e6a0c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5edab7b9-fe7b-46d3-bab9-fc09eb46e247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac168eb7-9c80-4ff6-989e-51addf18f401"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5abdddab-722c-48c4-92c9-583244e96056",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d67c2834-3d2c-4f1e-aeb6-2a3227d763a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "640f244b-8ec2-4ade-ab64-56a2eae2b77f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a33d4d7e-dc81-42f8-82e6-41a6195c2aaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "694bed7b-3521-4c2b-9bdc-1e9b686565ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9098a283-695b-49ec-811a-ca4f95413b04",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64eb861c-fcc3-4ed0-8e72-22f13b22a80e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c772c11-939e-4864-a995-0a20b631200b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eb0a794-d139-4534-8ca2-4add22c5e3cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "165ca1ac-25e3-4214-8415-a16bf045670d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35fa02fe-aac7-4323-92ff-547589398bda",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18e9772e-8a3b-4981-a5d2-275132fad0a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f55ac63-b9bb-4759-9591-f77af9a81947"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e8887d9-fbd8-4bb6-8777-fc391ca28f1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a5e3d16-fd8e-4b7b-9064-cda7d4631184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "041e9e5a-e843-4f02-92a4-cbf859fda202",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b31d6f05-b0c0-4f4f-8cdf-67fe1412543f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "263c196e-5e29-427c-a24a-d111e123a8c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edac55b4-0836-4738-9b20-046e0ad51f79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "410922a7-9f14-4577-9564-62243a9571c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b65e1f4-24b7-4d16-ba7a-52b41ff8f514",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "089ae60d-f196-44d9-a028-9d396bbd0a4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31cc43de-b638-4f1d-9340-1082c831148b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "effa087f-fd7c-4d89-8b95-c5b3be37e769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "2692dfd9-02c6-4d7a-a607-a399ed81613d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "314dbfaa-a211-44d8-be13-01f8356eada2",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1259c64-2fb0-4f84-bf4c-800650e06cc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42a1442c-3833-49d0-a338-56c55113cd70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83d991c9-25c6-457a-b643-6430672b2b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f7b4fe9e-2961-419c-8e28-75459383bac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "797184d1-f582-4978-852a-8297587b84af",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92285e2d-dea1-4630-adff-b08656a683cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3160f938-af09-4e8d-87a5-1a4ea758a4bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da261a00-639f-4044-9800-a23ac3f42e8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5204a41-a38c-4589-90e9-35ba9e069e07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "343f8312-b28f-445e-8083-683384bb3cf0",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b2431a0-228c-44b5-bba7-41c8d5c8d29d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9c8353d-5ebd-40b3-b028-008f164cb279"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d44e277-103c-414c-ae82-c1bc3461ccb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d359f84e-f0d8-4c27-8a4b-36858b5b7d9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "273b9483-3328-4d51-bdd8-13a82f6905b5",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d2d35c9-3995-4838-a4fb-d656355b599f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55d9bf32-27da-42f8-a39d-fda5db376cf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deedf5a6-897b-43c8-9f10-25d96011ae72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8689436b-8da5-4a33-8ab4-f03a718dc232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b77bd0ff-691a-48e3-ae8b-b5cda22d74a5",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a02754c5-3844-4e08-a7ee-42ad1306cd38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80ca8d5e-1b2f-41c3-889c-308bc03a748b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad300025-0c9c-4b94-a031-9fc13c66e4cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea03d6de-3896-4d02-ae6f-8cf48f53d8c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2d5cdce-eb23-4c2c-9ef0-87d92188f322",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0092ac6c-d812-465b-991e-b815d4cce6e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "814b6d7b-bda6-473e-8ea1-87a3a580284b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21cdd5a3-d04f-40ec-91a4-10b8bd3ea0bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5fed7de-fe47-46d3-bf88-bb961b485572"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbd7b27d-7736-411b-9146-05a33d224c7b",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b7c1f1d-7b7a-4620-9276-62520dadf4cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f916df90-8000-4268-8983-7d3eefa0a267"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43691bca-090b-4ff0-aa6d-62531c699741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff5cf607-cafa-4c0c-97b3-686b4ed35f18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54758733-12cf-4375-a5aa-330c8f865954",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3308ce0d-d73f-4a93-9f73-755a100f6f05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49fadfcb-af41-4040-8d46-ba4c4185a015"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb8fa7a6-8340-4679-8900-3afe8329dac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4f20c99e-3724-4fd5-8dda-cb7bb78afad3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14977ccb-e228-4ef2-acb4-a89b0b695155",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df425243-b6bf-4f5b-a94d-523f1ad75de5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b8856e6-1285-40af-be55-f00504dbfd46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00a5a07a-6e49-4d36-968d-7019446b3a16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e5999f3-ede9-4408-a877-0cae9684c18c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31b8581c-48ab-4454-bc9e-75451d4267a0",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61a0f86a-0b5a-4705-83f3-c4eb67ab8aa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75f9dd4f-0b36-4b1c-a1bb-5c098be824af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7b572d5-a3f9-49af-87c6-fa360fb2ecb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b0c492a-da11-445b-9f9d-ae0fcb92b5df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12623120-2dc9-43fd-9f22-7edbd586ca52",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "903a118a-0230-40fc-b22a-219b154371c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7282da34-ce42-44b7-9845-d84278b29209"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3ac6606-4cf6-40da-bf72-37f4e69fa892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b565f8bd-2280-4eac-bfe3-d3cff77e3f72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "061532b4-4a0c-4351-9410-b579a602d4f7",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a507a8a5-2b62-4fee-a29f-c99d981cf781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30eb29a1-a407-4627-bc9c-5411166f1b58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b8b260a-836d-4ad2-a5e6-8ed6939a01ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e22eb8c-906c-4b95-a578-72e0353bc5bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6bae993-4db3-4483-9aca-078cf7b45a6f",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30659cf0-9efe-4d41-8df8-ae7f624acb96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4065d550-782c-437e-9a72-855a066d4beb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0da2762-8455-4ea6-ae8a-9c216a0a1e94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4423ec7d-2130-4b9e-8471-2f92cc2dbb25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc432fc6-8f21-415e-a9db-ea4cfbdada08",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaba57c4-b9d8-45c3-beb7-0e93259388a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8033033-c8e9-4577-9a56-49957c279d77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33cbd394-84dd-41e6-8fb5-de08215ac395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "d2dbbee0-dba9-4d16-8025-76ec309b2179"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d94bf9e6-ad55-47b8-aa00-6269ef6ce54e",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fda5a802-9392-494a-90be-fed8789f11d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffdd9572-9049-4b51-94e9-d25503a53bba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5333c32a-8de9-41d6-89b6-495af5c4496c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c850ee02-6310-4c7c-8079-0b2130785d95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cc050e7-c174-4423-bb15-5916691eb29b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dad46c17-e799-4ff8-ab15-b0b76968a999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a06c3718-853c-40ed-989e-6dda9cb49757"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "780fa70e-cf11-4ed6-90d8-21f3b74ed4a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "df1d0249-bfd4-4ebc-bf64-ad6abe98ec1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0925f127-a1fd-4665-8aed-53e96d61547f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08895dd2-ac48-4c9e-bbde-c74b3605691b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22eda9a9-dbf7-4558-b9c3-229bd36eba3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61a1a5d3-fd19-4e85-bfde-d2b26e7bfee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "30e8282a-e9ad-4544-9098-caf3188d1eaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd7627d7-ffc7-494c-a063-3937abb2fb3e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b6175b2-33c0-49cc-920a-cc3da117da9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce350c90-da03-4034-b8b5-e691f7968230"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33d017a5-0dfd-49d5-93ef-8d93de506f21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "12d7f76b-4787-4f6a-8957-ce6e3edc2d6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aa92575-02e2-4f3f-9b4b-8f23988d709c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15f5380f-3c17-45b2-aed4-242993df8b4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1015c19-e9f3-49e8-af1d-a9450eae485f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa73fa24-6d41-4392-a3eb-9ef41dc988f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c11108e-6303-4b9a-8106-b70d9cc4f43a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17f90436-4dcb-437f-a4a7-71244ffc1212",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4757a7d0-be32-4f4a-9d87-f10044296dfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e410f6c9-d3d9-4adb-b9a7-e1397593e279"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3369ecad-69bc-4ce1-a510-91073d3d2fcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "b37c2fdf-2a5c-4838-87ed-bcdecbfb7c06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5183babf-060c-4c76-8290-56984fa6a79a",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80f94ca9-00be-40d0-949f-c29e51fa43ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1627dc1-748f-4542-8ff7-bd29e9d564a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9431dd1-e08c-40ff-a19b-5bc3c45f06b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "713de4ab-a931-4b80-956f-96ac5d039940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "714cb1df-8cd6-4b0c-8324-4f94ff651e7c",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df55b0bc-6245-4507-ae3e-3a1f23705d94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69ef1273-01b3-47f7-a2a6-48f3288e02af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "702d9597-ef07-4848-b746-7b0d6e2b7b03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9b8e620-7556-4666-b7eb-6b13edec8a02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a31dbcac-4890-4212-96e9-f35a7edce6bc",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec0161a5-3bb3-441d-82d8-7a91bc521b56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "866e739d-358e-48a6-99b1-eb74ea8924c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4592333b-c1b0-46cf-8e48-6466a0e3ce2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "af4d7b03-7afe-4251-a631-091796feebd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41aebe94-9894-4fee-94f8-4874277427cc",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "640b38bd-cd29-4135-b20f-5b96d0146371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a754aac2-01b7-4826-bc37-2010da2eb746"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c37ce95-b03d-4973-a727-258db850fe61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "35ca21f3-df5f-44fe-b2d6-9298d8037b5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e893811-2e64-4e0a-a1ff-d6ba44346f6b",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38b89f7d-7628-4481-b6dc-d7628791515e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89aab48f-5ef6-4509-8bb0-c2c1e38ca9ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b839f85-7a8b-4863-80b0-3562dec3837b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d3298ece-29a9-49bb-9e4a-2663d82fed29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99fca58d-299e-41e2-b00d-ef73ee6824f1",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f46d1341-da2f-44b2-8ee2-4828794624a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3025bf93-1998-41d7-8e22-2bf073f9d39e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c26dd0af-cdd4-4e8b-8884-2a4bec1a2b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "74b21294-cd32-44ee-989d-1b36742ced73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "222a3151-5dd8-4023-82af-a175ecb0978d",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c60408ed-d0f8-4099-a7b3-54d560ea64ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "738efb85-b47b-4ebc-9a52-0e6e2e03633f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75fce5b4-1fb3-4700-ae09-efa21b8472c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4615dbe-7e68-4d59-8b54-c1dd77ae8e23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1d72739-1158-4a96-acaf-f90bb8dc2cc7",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f08b1e43-862d-41eb-811f-c5cd8439dff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c0bd8d3-1942-45c0-a47d-7aec266235d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe99a623-a8fb-49e5-b01f-c42681c48970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "23e79004-028d-40b4-8f52-8e873a9ba273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc36dbe9-074b-4388-b449-a830549c4c36",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05453492-5887-4555-980e-b380e80bf5b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00eec52a-ef04-4d7a-b1dd-01f785b80241"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3908afbd-f8e9-431a-98eb-dc0cb9083737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2834a1ae-4cfa-47a1-8810-4e7bb87f3b61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "759d86ea-5cc3-47d7-ac06-43b7a2fc5654",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ea90693-c0e1-4318-b6c9-12ac9e3fe5f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ed67d92-699b-494e-8629-9d4a75d62b64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d96d985-d817-4605-9df8-8c2e26ceb352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "328e4b00-ea87-4c14-92a7-61e97c4bf0f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b8a0fda-bc85-4842-b2e0-acb2a1e2d3be",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af2bfb72-5e6b-481e-a290-65503d01eb1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f8689d0-3697-4512-ad67-0a17d9b6fabe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43275b67-c0b2-4ab9-9c75-b72eb4a97dfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c3397cd-2f71-4d20-9899-b120ef61b7e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bc3ebd7-4e7a-4d47-9040-2bd7349a61ef",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "733862f4-3478-4c7a-897d-dcd3375aea5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a187fbf-a222-4320-83c7-0e78ba5bff5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e9f60b9-7ddc-47f8-be5c-b111bfa67f9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "63e584c5-e0bb-4e8b-a296-d885e489f2f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "510302b4-7957-4248-8397-d0a3dd7f7345",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "976be228-d084-42bb-99cb-c6bd5efe23a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07675af1-1677-4983-bac4-efe643659aed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1e18ed5-e22f-4b27-bcbd-7238cc299732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "125eb326-513e-4e0a-a8cc-6e65a09f33eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07b67a77-a4fc-4aec-b4aa-231c87bbef40",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faec0533-8c2f-432e-b093-bc364361b9cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1b28b56-e7b4-4d0a-9b02-9f006a95d4cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89255754-dd2b-4716-953b-147b64cfec93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b62218d-bdf7-4965-a3a5-29b762667b9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33bb6ab2-8c6a-42ba-a604-e6a14b9c4911",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "361bf41d-e8be-439c-bf56-d0a60b0d183e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "580823ee-cafb-4429-b373-710e49058c6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e95280c5-ebbb-4ec0-8122-10ed01a0d0d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "53c33dcd-183f-4a82-a9b2-6e2a8fd70e19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8b886bc-e5ad-4a83-967f-62c0f5b7d9bf",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b8dd915-365a-4646-bb46-9ac0f64660c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42356081-f95f-46cc-be64-9953ff23aac5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b8ced41-049c-4d84-955a-07246f3bdb2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "850bee55-22f0-43cd-9248-f2fd5af4acb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "717654b4-2348-4916-ab1a-66d82c288a9e",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b3c09f5-484b-4583-8fc9-025a8b37136b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "794736c9-e0b5-453e-8b79-fb1edecc384c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e8416c5-3c8c-4279-bf1f-7cccc14f1014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4e94c1f3-74be-4f92-8c34-5453d0a21db5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cc9ec62-2ffd-4aef-91e1-ca6f89a79e63",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a211e410-0915-4879-bd97-a7edb6293de9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04861e93-ea2b-4b86-bddc-7b6fac7d9cba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bae2d72c-d663-4a01-8787-6644d258bdf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "80297b0b-a303-4caa-b851-f34c4e9ad42a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "613de333-c24b-44d8-9174-9f85598d71c8",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b738b23-852c-48d6-8638-539ad174b442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad79c7da-da04-4e21-99f2-bd8bc769d812"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d5c4eec-9208-46ae-94f6-bee93c1300ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c77ffcf7-7317-4f62-8c22-1c8d3d8582d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c584f19-5943-4754-993e-c67c3bbbfbef",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eadab87-5ed6-4b2f-b829-66463903e5d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58bab71f-c945-4940-991a-409548affa20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54658dc8-031b-47f3-b7c9-67fd7801bc6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bbc71eee-d9a3-4529-95f6-1cf57359a0e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbe27b71-d020-4339-94e8-7f57c4050765",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2de7c251-0d86-4961-a582-bbbd286654cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7652d67e-3a81-4353-8758-df5fb3e8d9dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7a9ed99-2244-4368-aa9b-f2560f03e2c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0729f831-9488-471c-b830-ae7261058ea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25408390-1feb-42cc-b5f6-51a0edd21d64",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c9cdf77-a70f-40cc-b83d-9adf2680a5df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29b555cf-48be-4999-9f96-4d6001e11aff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3750b97-5d21-4310-babe-95d8206a8341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0051edd-d8f4-40d0-8127-5c82baa4dc76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1bbe844-3441-430b-a48a-38179d460a4b",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37fb50e2-e01e-44b7-b832-69aa0b5816b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a077f9d2-cc45-4522-8c10-cc854becb203"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bba3b40b-0fea-480c-b05f-3d14d27ed671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c4141898-39b5-4980-b5d5-72412df88fa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "167cb600-dfea-4798-93ff-66cde3066be2",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0274d5b-fb85-4714-a92b-aae6f97ecfcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9060f2b-df6c-46c6-85dd-1857c30b55db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d09b3e43-d421-4b69-81eb-5b1fef6ed57d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "48310382-d4d5-441a-bbb4-242d69679fff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7928f96a-dbed-4569-af5b-0fb3e3f00817",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bfa3722-c6ae-405c-8e50-6a5f4855635e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70be0757-c692-41b9-9a7d-98942a7f7bd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5847b914-fd9a-4128-877f-05f8c85d25f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f0014fa1-b680-480d-affd-b58ed2324b4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea41081f-9d83-4da8-abf6-83ea5c02d6a4",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a21b822-9071-415c-ba39-71a7ec84b591",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74783417-6883-4dc0-938a-ed6af719915b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6e5ca18-5ebe-476e-81f8-4028190c85f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b360e567-b8b9-4007-8dce-60bac06d1692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "357ea90a-4274-470b-b433-ba137e303062",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "054c5d67-62e3-40b0-935b-3ea4bb3a2a45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf0c4109-8cb3-4896-bffc-a8f6cf927e40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c0bc7e2-fef2-432a-8fd8-5cfa7060d38d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "71afed12-0b2f-4127-ad81-d3989d7d756c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6a180f6-51ac-46d6-8093-6bd08092e2c4",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6845d68-8ffa-421a-ba46-c131fd5ee0a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea5943e8-a2b4-4e1f-8dad-092c01310cf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbb8aba8-3f7e-41ed-8c3c-5fb334bc895e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c7c859ef-a488-4ab2-8064-92149c785742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b01aaa53-d6e7-4d3b-9d8c-e80a48977008",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b707f90-505a-46b7-92cd-ddfc7d71d70c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb3113e6-e48d-4dcd-9a87-f1af438f006c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "977e9425-4c4d-4710-8fee-1b2d0ac574df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b946e8f4-870d-45b1-9fa5-2f6c923fcd51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fe74055-1506-4a4a-81d2-e19513e3c95d",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7711eaf6-81d3-4790-b89e-e249f0c489d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "48aa56bd-f57d-422f-851e-6091a3f0ac03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "780953d8-ffa2-4996-a439-fd26a8fe69a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "924c79d9-858f-4d4b-a914-a71ae05cf5d7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "20d12021-0fbe-4371-9cbc-440fa929ffa1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "77a86832-3ced-4f23-9610-129265e76d74",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae710ee0-f634-4f24-861e-4aee586c036a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9e8fcbcf-0881-4a2b-ba3f-6adf8905f7c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f16b9ca-4353-4b1e-a499-cf108c3d6187",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5bed987e-4f85-47fe-a596-b4f6c1e1dfe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bff1481-6bc1-4f01-a554-3af03f3b5f82",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "728fa7cb-0084-405f-9a95-6184a870fe89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8b7db7d3-5592-4a4e-969d-58e1985e26e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "978b2ee3-c5a1-479f-9dd7-637f0544395b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d5e28c94-3284-4484-afa8-7ebd0b961a7e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "35a8b55f-9f08-4abd-b618-794fab77a172",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f0f8e4e1-2e59-43d8-bf05-6fd5113e1842"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "aa19fd11-9fdb-433b-8da0-dacbd3dcf4d5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a6ba87b6-46da-4d0c-8935-632125c1bba8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "763011f0-032f-4f63-88ca-82d438f524bf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "83b9ea1e-37a7-4989-9898-7d46cb157720"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ca6b3858-e97a-4f44-a547-56084e48822f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b640a2e0-25bd-417e-a4ea-c638d301e30f"
                }
              }
            ]
          },
          {
            "id": "8fab0a79-fe25-4b76-8e92-9152e25a1393",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e12214e2-1b9e-4721-8590-fea213f0e4b1",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a00c145b-c622-4f3f-ae56-7a2356c62a40",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b8526289-ee0f-4758-8396-d73cc9414c4f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "de56730f-1572-4491-aa32-2ea3d79cdd84",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0df3a7b8-f81b-440d-b860-1d5ca26cf50d"
                    }
                  }
                ]
              },
              {
                "id": "f4b13538-8939-49fe-977f-1a65de576783",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5062b9e9-b4f0-4494-aa8e-39fc8f23212b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "da1b8002-9b3f-48b4-a395-ace03aae8beb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7b46ad26-e869-422c-9f1e-7fa96e98460d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "15c787e2-a944-4022-a5ba-a76857a98891"
                    }
                  }
                ]
              },
              {
                "id": "f91d2093-248b-421f-a722-ab36cd08d1cf",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "308956a1-f390-42d8-840e-b8e8cbe7a05d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "32b531af-a28e-4b82-b942-cacd08762aaa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ec5cb97b-0dbc-46d0-a765-43d473a08ff4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "832afc8b-cd56-4c6e-beef-699dbe9c511c"
                    }
                  }
                ]
              },
              {
                "id": "772c185e-11a0-4729-81aa-6596e1e6f0a8",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "40946c84-8fa8-464e-adea-bb365b9128d5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fc7dca9a-dbc9-458d-8321-c333d7c4313b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aa4946e9-4f6f-4baa-a688-7db72fd09ec6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "17047f18-d09a-4258-9e08-68bcecd17de0"
                    }
                  }
                ]
              },
              {
                "id": "850a6e85-d0eb-44f4-9f6a-14d545ebd278",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "97c5fbf0-bf75-4fc9-b48e-094eb0131ddf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "48b319c1-58d1-4cf3-9b9c-386bd4520ad7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a9da71f1-ab24-4f7a-8ce1-d6aab2972f1b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "44a8b6ac-6a09-4799-8fa5-691545cdbb6f"
                    }
                  }
                ]
              },
              {
                "id": "f2649bef-8341-49cd-99ee-280d33c20c64",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "608bbb1d-b568-4d23-ab57-1b55f13a5b46",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "07a82808-6370-4e45-887b-12c3a13a9330"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dc6b6e8c-ec7f-4210-97ef-2f2c2b3c246a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "04bb8126-0644-4522-b5da-9e8fd233ca85"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "55c02fa2-b13b-4a04-97ea-b698ebd9f47c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "97e87ae7-7337-4718-99c5-24c688d6eeba"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fad50905-3b80-4e92-8b42-98e8310339bb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3bcb70cb-16ac-4e14-8cce-907ac9946159"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5d29aa5f-542d-4c0e-834f-9c8f31117cd7",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "875e2d6f-71dd-49dd-a2c2-129a63f41f23"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5c964fae-a19f-44c6-ac43-45005cf9952c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5695e702-b3d7-41dc-9451-a8194c0f13c3"
            }
          }
        ]
      },
      {
        "id": "da69ec2d-10c2-4a5b-9f05-85c733f2901c",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "3bc4754e-2529-4c9c-8bf3-266203b785bd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6b0299cb-dc8d-466d-b96e-cd3aa97cf31e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "06ed8bca-2980-4d54-909d-6a6382f548b9",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdfeeff8-da3d-4fde-895b-28c0b53e953b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41f9c7d6-de7e-43ad-86df-917af6a2c8f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "529e26fe-0369-46a4-b56e-d868ff5f75be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "8431d214-7122-4a33-96e4-67a9f27e5e1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16585e6b-3527-457a-9b43-aa27585924bc",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e613aa5-362a-44a1-99ee-95068478f4fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b37464b-f517-4a31-b33d-25fbc0b8c856"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64995990-b27a-492a-97fa-8024f20b6aea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e8643c5-65e6-44c7-a7a7-71b2d601cf50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e199ecbc-49ca-4cb7-9b0d-c63778b0b5ca",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6759e197-cdeb-4049-8641-fed85cef8f4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21313071-f7c5-4d4a-8109-fade04d88374"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "897f22c1-a581-44c1-8e44-91c36f5f8879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ec5cc6e-200e-45e0-9946-5a77607cc59a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df2fbfdf-d507-4127-800a-a5b2e458f4ee",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b18727e-7b8f-4749-972d-7053eb23f0b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcc3e1dd-f0d4-43a1-99b7-b0115f9af439"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b88cf74-5ba0-4c95-aa8b-7a028b60fc79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a139dc88-71e8-4e51-a858-d07fff2d20f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "014f39d6-0506-40a9-b3aa-4686eb670f2f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32d7d98c-994e-49de-8e09-1a21dd36e629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfc03594-d942-4d30-b9f1-4e2459c2dab5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6806dad-4d37-48f3-812d-178f77d95dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "da55da8c-2228-43c4-b65c-d141374db417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f068db8-0a38-4de7-bcd0-793f1527a7c4",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6f85847-2371-47ae-9959-fd2f9c689399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d52cb303-45a4-4cb2-a896-966883a43ad7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4945389d-24b5-4f98-8b89-b239f0874f32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "360b1bc6-a186-4fdc-ad5c-3e63bfd6195c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0a6341c-0167-4ff9-b27f-1b35b7f96c40",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dbc04cc-b12c-4213-bea6-b2d6c8305c02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "550a15a4-5922-4fe3-8980-c111aa58ac69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcbd383b-069f-4bba-ad7a-3f70ef085f76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f92d7509-387e-4a30-bdac-848600b860bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c2e79ea-26ff-4745-bd7e-3a5f50d60e34",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78dde4bb-b1aa-4dd5-86fd-ae8a3bed8e87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd1349b9-7194-492e-bbc3-c6aa63a059e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "268fcb64-3df7-4b79-9944-e04ccaa814e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "26f0b0f6-a0c1-48ee-8b92-d926bf25bc6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca5a982c-9d90-4516-a881-53048fe83f75",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "658c2f78-bfe4-4895-bea2-20470d658d6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd5a541c-c817-41ee-a121-f6095e51c1cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80f7ed80-b6c4-43cc-ae90-6fbe5fe0a676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f962240-5cb9-400d-aa02-ed268b99ab9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a266514-b0d9-40d6-8ef8-524c72a60366",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c597bc5b-a9a5-4ba2-a52f-26f69d5f7e07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "693596b5-d29d-4aad-8856-2a4dc25279a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cde2264-94bb-4d8e-843d-47b3063719b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2fc7040-2fb8-481c-a393-1d1b3c1d0edc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d4bfecd-50a5-45f8-bce4-f5b5f2bc977f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "129cc221-c47a-4e96-a866-621dea426c42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65853163-059e-4e75-83bb-d2fd0ed6621d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d218665a-1fd8-4358-b521-8b1c08d66304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "3288e20f-2449-413f-8a82-688e8f8bdbc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "736fc478-725f-43fc-9036-04ba18a1b400",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be3d2d7b-4abb-4431-82da-02e72746db4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22408b7e-30de-41c1-98d7-7d916a0a8767"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e713b12d-f5d3-4286-b5e6-6ae1e0b412c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f8b1b030-70c2-48f5-87ee-2c851f1184ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23faded7-f941-4282-a530-f510353cb7ef",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f0ae225-1cad-4e30-9d07-0e640f12ba45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d6de291-37e3-4b53-a9ed-300e7dd7aa50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e917d5ac-2def-4436-b2ff-a3a2e46a6c09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3e3d2e0-050d-4fce-a4d5-e54cadd1db71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6559f865-1edf-4010-9448-161a0ccfbf88",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43dba18c-fc17-4793-be6c-af8a9025505a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f179c914-7538-4431-9650-e7a413980fb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5205da2-c6a9-4810-a55a-fe131e9588fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "337862b8-967b-454b-b3c2-a27593404040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d8d8ec7-0be2-415d-9a03-b7fa2092f0ee",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ac3a595-af49-45a6-974c-891f63247def",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b522fd3-f9bc-4810-bf4d-a73c853d3fd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ac1c203-8da6-417e-b2cc-d4c1b2952fc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e3d159e-bc35-4984-a19e-dfc91f85f003"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c66d6a82-8fa6-4678-8e89-73ef019df595",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "825c7348-74ca-4ebf-80eb-ed76cc4adac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61e88481-31ae-4199-bfec-588557cd3325"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22ea4b20-6d15-4c10-b1ff-6aba76f0d68c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "435d5a7e-de21-4f0c-9eab-9f6c02f7af84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe73f832-c8c3-476c-85fd-4dc5a53afc1b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d177e14-bf4e-45d7-9b91-4778c4aad730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a20a3b75-7391-4547-8fc3-b0347161723e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b34b5ce-5a1b-4c95-9e95-8aa38bf158f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5ac7e25-ce35-4a9a-bab8-ffdbe2823ef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "770edf58-9eb3-442a-a632-803d90d64914",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "201d4e69-6142-4071-bfe0-1e5962acc265",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcc13707-1bba-4db8-9459-4def7c0c669a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f36272ff-b349-47d6-b70f-3a498614e25d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3b625d9-9adb-45a6-83a0-5bf20ea3f7c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cb5931a-703b-4884-82ca-e4597f299878",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bb094a0-06fa-430c-bf51-dc993e5a2ea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7ad38c6-c999-4f36-a98c-6c809dda5c67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a181ed61-59cb-4d6f-8068-863ed7b02bc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "093a8ab1-f436-4cde-b908-0c0c573d757c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce6e1aa8-6b08-4a72-abb1-fa417c67149e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f8cbd40-d76b-409c-90b9-8e498129dff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3e36fe9-77e2-4885-bce4-9d66147ccdee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a620e55-4b57-4244-9997-fc309bbf0e4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b661ea6-4d0c-4480-b762-3d62bd7bc19d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ca2c21b-2b2f-4305-96c0-e63f06d38e61",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46d7c153-2764-425e-a30d-0654ffe57380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45911576-be06-4776-a3fc-f84e2c974d83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21886253-dff9-4eab-97b3-ceada3063747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9db4a0ce-dd56-422c-a993-21486640d6bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89ca6917-87ae-4d25-b470-92bcd8b649e7",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca9fa853-9e06-43d6-ae86-a24c8b567b9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc447957-8c93-459a-9db6-7054b1c21804"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a1756fc-f44c-45f6-922c-33709bb31bc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4bf59c06-bb7f-4285-875e-5da2ba2bb1f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a13736d-53fc-4b8f-a15e-2a5f0f0d5a66",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "479b3350-1d90-4e57-8631-5f83df1f3239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a7beaf8-d81c-47aa-8457-1e03d7b933d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fb6bc47-21fd-4e12-ba47-3e790425d7a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "05e4517b-de78-4c41-8813-6b39dfa9b4e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a84057d3-1528-4804-a2d8-9ffeec59fcdc",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d719ba60-9772-40af-b20a-c99bdd7fbe6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47aadf96-9f54-4e59-ab26-35b339165b0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "480c9a5d-f8cf-4a88-a5ca-e474f61591ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad48f7ae-e327-43e8-b150-d0dbd0ee5374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9be88619-9de7-46e8-b477-3f052b99bdd3",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c17ffb5b-eefb-473b-bafd-d6350e2f615f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e740baa-bbfa-4fc5-af57-bf778552c813"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d29d11e7-a008-4061-aedb-1abea1ac7076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "96e8e2b1-1afd-46b3-bdad-497f83e4af36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a9516ce-938a-420f-a1e0-5a3ccd09e4c4",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "608c2868-e563-4190-baca-279a826bc786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d4d4a64-8b31-4f11-9cf0-55917f53c2ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fb40419-1e50-4ed5-97e0-a1a627f1c41a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "03bc061a-a276-4280-8350-b1df3da0d336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7126026e-2eee-4f59-a5bb-568c7bd9bfc0",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bb238c9-ab78-42f3-8de5-cd3e6fa70e3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d06b2e63-8044-4c6c-b5a7-0d24ec7fb584"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6877d9aa-ed68-473e-8903-68fb4283e3e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7921c52d-95ba-4213-b729-e1327656da9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57ba8efa-5fab-41da-ae2b-c3be791fc3ec",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea902811-2edb-43ae-92c9-b5d1e8606a39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48ffa9c3-e27f-4405-8d6b-dc00814d1b1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3f3f1da-f53d-4398-9038-9bffd0f377c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c316fdf8-7f45-4c2f-881d-d9cd82aa28a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4c6f26c-bda7-4769-9f32-9cb715619a45",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94a641c0-9d1a-4291-8780-6a9f8d374c7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c03af720-748a-4a56-a3c1-aeddad90f2a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e0ed219-766f-4207-bb3b-b9057050f215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2189431f-524e-4792-b1b1-f16ce6681b50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "762c607e-c7c2-4c32-99e7-95b97ca8558f",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d60f5960-3cb6-43e0-a5d2-50f59e6e7128",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ecb9088-b0e1-4aaa-b4c4-c34d5156a8a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07fd02ce-ac49-407c-aa46-b2673814c687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0f5c133-916c-464a-adb7-b9579e0d26c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d4c9c25-03b1-4d91-8444-352e23679bfd",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b18c89db-826c-4651-a328-e599f3e321a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d43c06b8-d6ae-4f27-ac6e-51f5306f45fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d12b2e2-ccaf-44fa-a8dd-792916792650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "45d3b961-5f61-4cb9-8617-70c0f3f9e509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fd5d00e-aa92-44a6-b796-7b72d7b71792",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fce0f6a4-c0fb-4cd1-aeaa-8d1ad8fcc64b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17a7bd62-fae6-4618-879d-f6f3853f1ca3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03811150-37e9-473e-8b8f-613e3374f940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4d71340-1e51-41b3-aca3-2484257b3de7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2668b2ee-c8c2-4dc6-9c42-8a3ad9faa078",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ba21f482-416c-41d1-829c-0c06cddb9826",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15d6d5b4-aaf8-46ff-9299-d4ca32aee6fe",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "889c03da-9d03-4a50-83f3-8a44344082dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "898c0222-79d3-451d-9aa8-4033b863087b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9ad9d6ed-1857-4130-af71-c1583c4e27b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a158624-12da-4ea0-9ae1-f6397d3d181a",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62fb537c-0b69-4819-b411-71ddddd9bbf4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "76b16fce-7d84-4080-8d62-220edbf4b84e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "303fb53b-8353-4db1-a3b0-8f5997664b01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9e2f6c21-c95c-4c7a-9726-d9732433be6c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b83f5431-bffc-407a-9b60-26ba8da408a9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5bd49bbc-441f-4272-8330-e0d8de441ec8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cf935003-85f4-461b-91d1-630f6901cd34",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5615eee9-70e2-4e6b-ade4-a8afeccb6684"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a54d3f20-e8a9-476a-878a-04ebae836df8",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "41e36cf7-50b3-4883-b567-8aa560055212"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "81862db7-58dd-4043-be7b-b5c12d1db346",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9b05a767-b8b6-4dd0-a404-02ff0fe2ec38"
            }
          }
        ]
      },
      {
        "id": "0144c738-f3f7-4923-af10-54491047d031",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "9e63a041-abcb-4d93-82bf-923a74f5e019",
            "name": "Negative Testing",
            "item": [
              {
                "id": "23b3cedc-479f-4ae5-b85a-9e3e72976015",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b5a4fafb-956f-404f-ad02-9c14205e0f5d",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79e2e089-9660-4617-904f-1d5fe1ddff6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77a05d1b-98e3-4594-beb0-daca8816bdb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a02f93e9-d508-4ec1-8f22-61bb6e530b03",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e75e019-5d72-4efb-8df0-9b1fcf656f99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "606183b2-98e7-46a5-967c-d25e1e27eb6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4827594-da2e-4a45-aeee-addc56168853",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6012bc7-0c6b-46e9-a8d2-e1ecdfb00a96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95eeb48f-30b9-4fc6-b141-c1f46f86469e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b00c021-fe94-4571-9d80-633020d91bac",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25a74eca-dfae-455b-a3d2-59455377e3d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e4f69f7-b09f-4ed6-891d-5ae4f7f234b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46149261-b9ac-4569-9783-9a9b191a6e3c",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce270337-1abd-4093-b0a5-cf4d845b1eae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7970c93b-4d76-4fd5-87f6-146befbf8153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c47fb15-6a7e-4c0c-bd57-c4fecca12642",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "087c5715-fea3-4061-9f63-25ccdff645ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "650f487f-c6a5-4ed9-bd5a-b395fccf554a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cec60a1-08ce-4c2a-a714-a9d693fb6da7",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61300c1e-73ce-4969-a994-f04e6d099491",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d0a185d-6fdf-47ec-a3c2-043996f7c560"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ec43c9a-c3ad-4bd4-b23b-80146a9e55af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b858983a-c7a3-4ef0-aa9a-663dcd318768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6de0dac7-da75-493d-bca7-e2fdd08eeb34",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e251d96-70b2-46ce-b84c-bcd6b7b66b95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47ee1ea2-a867-46d4-976a-47f4e575adce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c84a7795-6a01-4df8-8180-20dfdb756200",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46c1d82f-1ffb-427e-97ea-2a03b2098c2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30fc8c5b-f0a0-4a6b-877a-124b7d5a2900",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46bc3ed6-edf8-4f39-89e8-aa45a83325ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7dc5eef-26c7-4e48-a742-6084c8e9a6c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7e3d04a-a227-46fc-91b3-3a84f58925d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "742112c2-179f-4580-8a40-9bddf0ee6454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "081e189d-09f4-4db0-aadc-136592a7e3ee",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74985184-26ae-43fd-90e6-4446fe099cf9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf1722ca-976a-43b3-899b-34c0dae6dca2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41b1adcb-aa34-43d4-aaa1-a7f83ec91a78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa236690-375b-4339-a7ef-134abe3bc143"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95bf2b90-cac9-48fb-8a2a-00c589543f91",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b11e62e-e153-4d09-999b-bfa9a6f9d4f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1fa8472-3c23-40fe-94e5-f6f82df69ccb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eb4cc5c-9e59-4b02-9820-ec4e0a566b9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3122836f-2749-49dc-aa61-42064669bf51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54a7fdc3-d568-4c9e-9cdd-798631ff73af",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abcfc683-2f9f-4175-b400-2bd82884b630",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "839e0add-0e61-4d3e-81fe-0e29bcf4f61b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8f29546-1f58-400b-a062-01854e852c8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a74d5ce-615c-4b2d-9074-ccff8cfbd354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ab1958c-3680-4fee-93ed-70f3c5aaae85",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db445830-b17e-4d5a-8027-27cf3442e3aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d94598d-120c-4a19-8581-3719ab0b94c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbaa4211-e8a4-4d32-92c2-c7abe98fa128",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "860eb1ea-53b7-45b2-bef9-dbe19622d05e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef108433-c030-43fc-a4f7-5641f1f899bc",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9d2de23-086b-4f0a-a13c-a6edddc8a14b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57fe5126-91bd-4678-861a-e5a0beb3dbb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf70827e-fe6f-4d2b-874f-71691e4345f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "383348d7-b9d4-4fdf-8969-f74084a98271"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec444836-a5d0-4394-879c-eed8f198b70f",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0e1b55a-3a75-4fca-9089-13d3d12946eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11d503ff-da58-4b1f-944d-1225ef2495b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e2d6992-e9da-4979-bdf4-9b70d3be6246",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9924cf84-9679-4d77-9e82-36a482191007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ddf09ac-5db8-4e62-af82-2eb6b9967e8f",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "414e1e19-6f60-47d8-b466-1adf216c24bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "052632aa-8319-4c44-bc74-87794ecf1852"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "013da0bf-1fe6-44b6-b544-f4b7b7952d78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecdb7edd-b999-4d9e-a32b-157f1fafc0f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d1ce56c-7cd3-45ca-85c7-208a0572b780",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9fab654-54c5-4554-af91-34a6a28ea2fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d5c3f2d-914d-47cf-bb05-8f6b97b5b0cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4809ff7d-6842-43ba-8cb1-cbb7e724bd51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "907872d6-c500-43b0-8fb7-41cb287d0d4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62f4211b-e7a6-4c6b-9340-f84fd66c1df3",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b7342bd-f3ec-4045-944d-99e6dfdae25f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d244344f-76b5-4c65-9f75-dd9e45ad987c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "433437b9-101f-483f-91ab-75596119ad78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cda29da6-ef71-49de-9ffb-fdc8467fc201"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d262ec4-9986-44b4-bb53-ae3a06758258",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "800c889b-20d4-4f8f-ac72-2cc9e332b79a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04f41142-5fb9-49a3-87cf-988f485ba83e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9e4a3dd-df8f-456c-9a43-350f5cd20b15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ecc0a98-5ebc-4b5f-ae48-aa5ceeffcbff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "527e7988-53ce-4b71-875a-7c40dcad78b4",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eafc970f-bd33-4dbe-b4c8-d8737ddc5e27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31ad53ab-e63a-4c7c-b44b-d7f965f03859"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e65b72ae-f5b2-4150-b399-0ea9fdae9713",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "059536f2-3d23-4b22-b54c-5ed8e69bb7be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f443189b-765c-41cd-9e2a-34a21c90acab",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2fc7201-e84b-482c-8e4d-6c6013e03ede",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "471efa0a-6320-4a8d-b22f-8a6d24280001"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed1f4f0f-4856-4924-b592-e6037f6cfc7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00477113-37ec-480c-aab3-ed0c0231d690"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa2e20de-9b0d-43a1-aef4-c5ab0c587753",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43c35148-3c46-4d21-aeab-b046d1a19227",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73116eb8-7405-4650-919c-a934888f49b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3003980c-d04e-4585-acac-f64699c3e1ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa6ce1e4-1456-411e-ba27-94aa2544a76e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b34765ed-3ac6-498e-98de-a59e8c211c66",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e1a2784-6acb-4afb-84ed-ea46e48d42ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e44a5f9-cb40-4b48-839e-9b0f5e768670"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e754b503-37f5-47e9-a7fc-63f0e909eeaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "322698b3-6a55-4b5c-ae13-1fe1508edbe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06482f11-7ded-4a55-890c-2832d26142e7",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f851f432-e8bd-4898-a406-c1d6542651d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76eb1960-5d92-4e43-8c53-ac73edb44eaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0831b2b8-b120-4f81-b9a2-420ef7c9c77b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8f3f30f-b591-4e6c-914a-c9a8513b6b68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "257264b9-bbd9-4558-bfa3-48fa4cc256b2",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccb6ac64-19dc-4899-a8f7-73e0d65dd3f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fb1cc0e-7f5b-46f4-a3b9-b070554ba162"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbcc692a-f2f8-4b62-a7a9-7bbf17f92124",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e83589ef-8763-4c6e-be40-dcef89fb78be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5a9c1c1-7a9c-4cf9-9af1-4b2eeb5cc1a8",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a77d5436-4608-480e-94a8-090e3ba50293",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa9725c2-e331-49fc-bb0d-700a01f0b275"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5b3e8dd-3384-4794-8040-5ae64f189b13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b49b127-ccee-486d-b2f2-f9cbd6ae4942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95a70038-5e1b-41d1-ba13-8baaeaa93aaa",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9c3b61d-6010-4773-a3ad-ff5607983a74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8808262a-ca48-4e25-af8f-2628613ced04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3854ccc0-85b8-449e-b949-a5553adfe3fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f64fa9bf-967b-47c9-8fc5-8f648b438e64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2114f36a-1f83-4cf1-b7dc-2477b8df28c8",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2697a1b-f186-432f-a1d3-c3ee0def6699",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5811742-240b-46a6-b4cf-f7bc4ac672a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf3f0b2f-f4ce-4eec-9ca1-a326ab405dd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac69f72d-7aa4-4481-a800-b110e35e0757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fe69b93-c086-4928-acee-488fb0d9b115",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b04e2dc-47d9-4c1d-beda-cf8b5b0c9e67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0c3ae2a-e756-426b-8ac0-17f705d81d95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "825d95f9-74fc-417c-8543-2b2b86189abd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c64b92a-8ed6-4794-8582-2af48bac999c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63cb0e89-5cd6-471e-87f6-c897553222b1",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b38c4ac-26e8-4d83-85b1-06a9f06e9153",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae401636-cc1d-406c-abd9-ec1ab5c3c0eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5785f11e-c95e-458e-9264-b590aa6cf9b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66a410e5-22b7-46a8-bc8e-00aeeac893d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ab7bd11-f339-4835-af41-29b7bababfb6",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4199aed-2f6b-4396-9db5-b1fec7a962db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40a68f8f-8f52-42ee-ba69-11f73d3c33e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "041e5b26-39ed-4f79-9725-d99af6fbecae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a881303f-faaa-4efe-895d-91e1a9dd999d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95139a12-af86-438f-aa59-3601d5b5a216",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28c31976-8116-4ad2-a92a-5d6bb38df614",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd2a004a-bc1e-4f5c-b05b-d221194b49f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c3ef950-6484-4e62-9b23-15fe6f71f3ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40fda8d1-a6d9-40f0-a2e1-8fcc3a4b1d94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afd93619-a0b6-4c3c-858b-14c9662d237b",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6133b824-2a08-413e-ac57-cea7d2637c59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51c8bee4-cf65-40b7-9983-f5aec17fd439"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acab8a6a-595a-46b0-9856-fcc8373c9914",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a103f05-bb65-4298-aa8c-66459f5cadbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e558e1ce-c1bc-4ff5-80f0-d18746705380",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6692775f-01c5-489f-9941-cddb3b265af7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "153516eb-11d5-436c-a327-82cb032613db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07435e9f-8ead-4a8c-908d-75c910e31d1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97c0df39-90b0-4dba-bdf4-f8532c16fc9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f1fc743-2804-42a1-a1e8-71e78a4617db",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ee85ba3-c9ba-4465-bd0a-553841df8d45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b553b4d-9689-4768-97d5-059d6d314d0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdbc5239-0c55-4f52-b6ad-931eb334c90c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fb4bcae-8d50-4d84-888d-d51cd951a009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6b27c96-1b6b-400f-9732-52143eb3fe9f",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c69dad3e-1b4b-4237-9224-e039e48a22ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2dee336-9baf-4730-8736-369d4f2aefcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20591a64-f297-417e-9ccd-ada044abc078",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "685103bc-a491-4152-afd8-f9995124a9ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10e34d38-b47d-4468-a11b-7ad8b5a00145",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49286ba1-825b-4194-80c8-1ba2af05c74f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d422620-a69f-490c-a636-73c096f43a73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dc72a54-ff26-42cb-9167-886385e8b34c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5bbec3b-ab27-4998-b1fb-ca7cf9f6beba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1694e77-48b9-496f-acb0-11d5180f16ff",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de05c662-fef5-426b-882a-1ca3384f1b67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7941e34d-8255-454d-b483-94f4c598ec11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a71089b0-edbe-463b-8fae-2425680e2a1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60cd5219-d467-4c2e-b8f3-fc5cf47b9d76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dc82464-96fb-40bd-8c50-c99def4f224f",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4660d8c3-bcaa-4cbb-bc76-b5ab9f6224a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8102947-fb73-426f-a3df-1d517c488555"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52c62ac1-ffb8-4069-925d-f830ab1125af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40312e49-5850-4ff6-9c33-a12984225a41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44ca2d43-fd98-4b65-9e30-462539871f60",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b34c03e4-f3fa-4c20-84c6-332a35316d5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ace1a0b-a3f7-418e-98e9-64909bfac026"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fc72de3-91ab-4770-9c82-cda1c29ad84e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f326ddfc-7edd-471c-8ffc-8ae629978f69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22a91e3b-59ce-4632-baa3-405a95b3b239",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5369cee0-170e-42c5-bbef-f19e6e8efbfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0bdf03c-17e3-46c7-a3ac-9d9533a58592"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55122499-ae2a-4ae4-99ff-06f86dce20c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02c9f579-0668-48d4-a712-9c9ecb408bad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8580258e-4f0f-49c4-a50b-95cdc58e5770",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b77c1294-15da-4e05-b925-329e6261548c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ff6ed5a-aab7-4095-badd-36595643a4f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ef2d5d8-8059-430e-8a1a-1609d1ef3cb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e06b09a-58ea-4cbf-a653-46176ca79a5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc0e41a9-a465-45ac-af00-1ac196f916cf",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c04edd37-4ea3-4b1f-a5d9-bf6bb940f9d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c10b5e8-36d0-4f84-a2f7-5e79f39e0d22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af884fbb-8f63-4202-806c-6126ee4dfc2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcf02593-91a8-476a-b4f3-23b1f6c3caf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8434a9d3-a03b-4ef9-88ef-488d359d5441",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c67051ce-e9d2-468d-9842-3a692958faa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0afd1376-06cb-4365-a4d7-fa6188a2ff4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f2cc8ae-d766-4aea-b021-e408a3e29691",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e190021-129b-46eb-b418-24b28c8f04a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77f8b6ec-10e6-4322-be13-e4657d2a43d6",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dfe0e41-a703-4689-80e8-aaa760c1d36c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7083deb8-e52a-4a75-9d7e-96de7bee6d9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59057327-f3da-42dc-9cd8-fbb3e2dbecea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85be6764-242e-44bc-90d1-a0f5b39be322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29ed3fea-38f0-4781-be38-4527fff7fdca",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81c60c21-9f07-4cf2-90d1-c3285412ab99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f5780a9-cdea-4bcd-8591-73a22b0ba8a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdb8218e-53f5-457f-a81d-07cf37b9700e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7832b43b-b585-45b6-9752-520669edd3ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc9b4886-568d-400e-a79c-c77a94095f2c",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a0d88fa-3967-49a3-89d3-28e5f929c4d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "351a9121-b5e9-4264-bf54-ef43f750ede8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "544af4ed-7eff-4fb9-8701-1404b7afc39f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09bfb932-db0e-408e-90ac-bdfd84c574ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad203674-04c3-4f94-9a27-9cf769ba0d76",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcc26279-d1ca-4b2f-b191-400a0861926f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba055793-4777-4022-847a-15c691c1c877"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2d39620-e8f6-40e3-85e7-065c966b208e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebb3c63a-de8f-4f44-962f-71536a9a6306"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36c27e84-2431-4b91-b55d-855c29449822",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ec562fc-de21-451b-831f-28648a362c25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e28ed38c-5e3d-4efa-82b3-09df30f8525a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d5fd89e-cdaf-4c21-8822-d1d32ec5872e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec4ea329-f851-4087-9353-903c57527f45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c091027-f473-45de-9f67-6b31920ce407",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b25b6ba9-9679-4a41-a94e-96a059270c0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0816b77e-0f6a-41bd-9680-adf28fb41999"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "202c4f9c-ce8c-4058-a539-c1138e8027fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61625ce7-61bf-4019-84de-221f17445839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07aa46c6-0370-4791-b160-1d8edd992ccc",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3e96ea9-f362-401f-8eb1-5961b8bac242",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dceb3ca7-783d-439b-9f37-164300aefdaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b7ce306-ea3b-471a-a476-a0a8d1a2b73f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43188105-3702-4149-917f-727968c8fa3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f834151-d1a7-4964-9fee-a7184a328e7f",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8092b320-9cd4-46c5-a153-658ccd2f4737",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3141bf16-002d-4739-a16f-e9a9f127bfca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2873263b-830f-4a6d-ab23-cd27d4ddaafe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63994e46-a7af-4488-80a1-6a1f0de93db4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98500b08-9411-4a86-a8c7-4e84fa2299cb",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8ac7d88-f559-4f30-bf08-0a6b059a006f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29db80eb-07f1-456f-bdcc-d29a24d35907"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc9a2906-c397-4e3d-9510-49cdca39d31a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5065d30-73d7-4881-92e0-93b003dd8aff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f7eb3b3-0d81-4461-a0ef-1188f640adac",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91f44670-1ba4-4d6e-ad01-74bef299ceaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d424cda2-418e-43a2-8021-2d53c3e909eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18ced6ce-cfe2-40d3-9e4d-3d98b946a3a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7abc2db-ceae-4f09-8c18-5a40002082ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b44e5fca-1feb-4285-8a10-e0a3c04b1462",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8b66805-fb9b-41d7-be89-39598f7fbfd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "928ae554-9357-441d-a0fe-a7b271aab82f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b24eb0b9-e53a-4f2a-96f2-4a7d9614a3ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd98696e-8ca4-4d66-91f5-bb4a5f517b57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e42c2ce7-f073-45f8-b573-563224f63dba",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f1c9c78-6dd8-4e67-8c29-65a83159806b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "217b2f22-0351-4a1a-8959-0403b8d32419"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c4ade25-8715-458f-bdce-b1f2a5e8dba8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "251746f2-4aea-4c36-b439-1c27ea80be3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d281890-b0b5-40aa-aa3a-794387b6bb40",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13c0dbff-98f8-4382-8f68-ce09b7af8dca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bb6853d-d026-45c2-a88a-8b6f1e63ad3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50e8b409-c561-4899-b1d9-d2646087f8a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c972507-ec7c-41a9-ba0c-38982604b552"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6032e4bb-d25d-4f10-96d0-d58782d8b497",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ef16d61-6d87-4f9f-b520-4fc1f3c695e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5f48c9b-5753-4674-8d68-53243605592e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17055ab7-eff0-4080-8898-2ae893397afd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d02146e8-3216-4aa4-9339-380774a076ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c648107-35d8-455c-a8a3-6e5646413012",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58610383-037b-4c55-98bf-c758f64a3db9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50d8c6a5-1105-41ef-afd2-89fb48812c0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c36dc8c2-8152-47de-8d2c-fcfea77dab3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aebb354-a4a7-4403-a84a-a83d10e733b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "272f92e1-1a40-4f15-8efe-e5e3e589c786",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07e0eb1e-ab06-440e-ab1f-bc10d527a6a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17fd8374-00dc-4cdb-b87c-3758feaf2a15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e6dd349-7260-44ac-9e00-b8f0de7ba991",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b553e210-0e4e-4431-9f3b-85aea490409c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dc4e417-32f9-4709-8dbc-4966d78c1226",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f3a93a4-3482-4c86-b59d-beca5775b606",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f049a247-8e4e-4c0b-b04d-a7bd1750d5be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af30212b-1963-4ad8-b2b5-83bbe4211eeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fec7fd34-791c-4657-b513-0b14ea0fa21e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77e72ba1-33c9-43b1-b0be-31715082483b",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9e9c537-d5ee-45d0-9782-d2b6ffc31a83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47df0627-61a5-49f2-bfbf-78b3e2890d08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a0a10a6-e624-4d28-a167-7b520127ba1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caf8eb27-d837-4e7f-abea-f98507ebaf1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd0e0a20-ede8-479f-9072-294132677bab",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9f629f9-4945-4524-b357-ca6b78552e09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59f2ae1c-142d-4209-a5d8-fa8cda25ab48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cde8f2c0-e61e-41e9-8a76-291458f745bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9a47c2a-d6fe-4250-81ee-76a339c52175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c19ecfc4-b702-4ef6-9e8d-214cdf68a0f2",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65042050-4243-42a2-b5e3-ebb65c4deeda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d84d9192-97f9-4e3a-894d-4399d42a71ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "496a9038-d424-4969-af6a-996bfcc387f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08ca419d-eb2c-4aca-9a19-0150a35e8615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02f09c7b-8454-4e7d-935e-de0ce53a5097",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0267023f-ce18-4637-a978-c92c0305a9e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "074f7a6d-9678-4897-90e1-d2bbf9bff5f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "563a63ea-df34-4d74-af2f-79d6e3544c5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f23d66d9-bc02-4819-8884-dc1b98674ffc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa5848c9-9e7a-44f5-95b6-c9c88ba29f00",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5da86a11-9f6b-4c8c-a231-64ed1eac3ab9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "621f23e9-dbfb-4b76-953a-5ddcdeae828d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "999b6c77-3a59-4e78-a169-f5ba6e0dc2b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3430a8a1-8c4b-46cc-a81d-b5c874c0ff3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7215481-bce8-4af9-b244-44c08c6518a9",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "586f990a-becd-433c-a38d-8330cf971ae8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d868b2c-74a5-4d57-891d-155f801c1af3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "623f3f77-0456-4be2-8858-4f07115ebb57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebe99392-5b81-4468-aa22-f5d158db80cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f967db31-cc2c-4410-bf5e-3cda78d1f539",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "571ce975-af33-4b61-b868-6faf207dec26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b34e267-97d7-4987-8f96-6f183f3b3e3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f93f5ae-ef08-4edc-9831-cb6d3f908f05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe073fac-47fd-4769-bbb9-7619aec4d32f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1080598f-e5d7-4e1a-a103-08e099b257f8",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac912917-0800-4c20-ad57-ce39656cda54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a79512c-2473-47bf-924c-32dd59556c7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3f1edea-4d39-400e-93c6-22905e9f8db5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5de0ac9f-4fac-4dd6-affd-8ecb618a8327"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0bdd70b-914e-4d29-ad2d-b983d63f4846",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4df9f2e8-1467-43b8-b3dd-909372d07455",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "463c14ae-a94d-4fed-a46b-e7bbdb3b489d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c9e81bc-8de1-4ed2-90af-3ccc4d035069",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27a82461-dcbe-4da4-ac88-38533cafa2e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aed474b8-89db-46d9-9a5d-b9295ecb42c4",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5efc65da-eeae-4edd-8bd0-4596b0f7fb93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88d9a91d-fb9c-406b-b46f-33a1e04412a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "baa32ae3-a344-44f3-90ad-1b90e5b424ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90a03751-4d03-4aaf-90ce-536d96df0da5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97bcff1a-2de2-46fe-a32e-1bbd3330b357",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7c6bb44-a3b6-4063-88cc-a7d8ae91b066",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "443ba880-97be-4bef-b969-fc943f666f68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5681b6c3-a3f6-4d24-9b83-90ca26926525",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac5eeff7-2af5-4455-96c2-96e3eef9857a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6ed7088-e547-478a-a031-76f9af9a8096",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55b4ea28-09ef-4084-a6ec-d4a82a2be395",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "143eae0f-9108-404e-b2ae-d5aade5648f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec0dd612-c859-4a0e-94b7-5f21c68e2627",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6b26ecb-4106-48c8-86a8-e54315964546"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18692362-76ac-4619-82c7-fe77b2afcb02",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c91b7433-a566-4ed9-994a-679fe555f33a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "940e6586-e36b-43c2-b846-078d20417837"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b22478a6-3310-4291-9494-ee75666423cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c380b35-4313-4867-a50e-f771374fbbf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b2784dc-0dca-4ab1-ab4e-4d1666d65f42",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ca93637-497c-4f21-872e-f1cbde92732f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "426fe7a8-0687-48cb-bc0f-f2dabeeffa48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e9ce6f1-62cf-4fa9-b9bd-2034222c476a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "488789d0-199b-4e1c-96f3-698b921ad5e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f53645a1-9d82-4f99-a47f-adc736d067d1",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb50a1f6-1510-459b-a164-7e04850c4851",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "575cf683-9587-4db6-a35d-234049f91f57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e1e76f6-4605-40cf-8c68-feeb168cab26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c754a7a2-df0d-4586-96a5-489c788ed012"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b8105e7-cb82-4dcf-878c-62a81f0f8a75",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3154edb0-1b17-405c-9f95-45905a6cf84e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af02cea4-33ad-4db3-a525-caefb3604b97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33b521d6-d633-4598-8ef6-b5dea71459a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26b5b1c9-7229-47e1-bf02-7e2613c16b73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68109678-0554-4572-b0f4-c75954c16a93",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b789306-3195-440c-a621-c139e3324cbf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7808cd7-5d66-4709-b90d-73a4d0846961"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7d5b4b7-9585-4118-9516-9dcf9033ba41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf39b23d-8b95-426d-be4d-747426bc10aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13bbfef8-6145-4c86-bc19-a571d9612328",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37cba727-a382-4b2f-b643-8e5494f5f320",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39a4c663-b9ae-4f80-ab0c-56d337c66b4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0b29522-85f0-46c3-8dec-94fc6fafe760",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d7ef35c-3b2d-49cb-910c-76b47f584ece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2a3f22d-f916-4dba-bf92-b6a11f8744da",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8588621-5939-4472-94f7-46991571c1df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82442b51-ffaa-42ab-becf-ce772667b9e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c39c7dd0-4117-4d68-9612-d270aefc0770",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63804a06-0a67-40f0-a94a-b756c121f41d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfbdfc6a-9d93-4ddc-ba4b-95a5d88ba1eb",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f076d07a-63e6-4c35-9227-4dfd69aae219",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af4aa164-73d3-4f00-8d32-108162f8d0b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "622d64fe-0019-4a73-9402-aaa940e93b55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d20a7c5d-760c-4b53-a0c1-122735b46f83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69e0f5aa-ece9-4393-847d-838eaadae9cd",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e88495d-3cbb-499c-8bb2-3a7a6dd7638f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be312fa4-47f0-4b9a-8dcb-f674352bfd1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12881bea-dca6-410d-9bc6-8bdb751d54ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b7925dd-44d9-40d9-ba4c-b4be6e55b0af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8adc6b10-a12f-4d6d-9348-efa55fc72dd3",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d8bc5b9-d59f-43e4-b2f5-3ee09f0e6e34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "748931fc-0ecc-4627-b594-ba9dca606b22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "599b378e-99dc-458d-9ad8-ce8337865e8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbad173f-2b9f-4a93-b42b-d55f55c4fb35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee8c88f4-19bf-4044-b25b-c6cc44a362d1",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dd0be40-a1ba-4628-a3fc-1ce3f5119b20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd7b6bd3-ed2b-495e-b986-960545c22606"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88206f9b-8350-4ad2-8cbd-7d44cc79ab70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d60c5e7-9212-4290-9576-6a470d90c471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0604f341-a928-4a26-b07c-03c237d9baa0",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86a7fc73-a389-4637-b6a5-00cec3c63594",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eede49bf-ce42-477c-ac6b-c2ec36d1a73d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65d6c45f-3e8a-4209-9f7e-d03a0f07ffea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcb9e649-da36-487e-b8bd-e6fa1a5fc471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e0d27ae-48cf-458a-95b4-c84ec13e9c24",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e56b42ee-271d-474e-9d97-05ef6c1233c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32d65952-4bbb-4dda-a28c-b886dd7e2f80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f2f88ea-5087-4216-aa40-816f4bab8dae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d39c024c-8f05-48b7-ad78-36d6ca3f7f5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "896fba1f-b8ed-4d27-b0de-8bdb6716e0f3",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e9656c3-735a-45c5-ac0c-73fbc25d00bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a526a3e0-de9d-4f92-8617-0368ec56653f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03a09266-6346-464d-84ec-e9e1f7894f37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f55dbd58-3f6d-4e73-842f-774b124e1525"
                        }
                      }
                    ]
                  },
                  {
                    "id": "641bcdd6-3546-4f9c-9540-56729bde8a20",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26787fc2-53f6-474d-8b96-8310a8e4f5c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec852893-d616-4b8f-a607-51d1f1d9adef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "222af856-6841-4266-b575-6b81b687ab2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "292d1fec-87a2-4f37-965c-75db2148b641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba878a73-7da3-4cd0-aa22-4be6edf17d1d",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0aafe60-031d-41b4-8089-df7289001a2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3186a53c-43e7-432a-b7f2-c7d65daa9b25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78175305-fbd1-4b8d-b057-4f5270c35bf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51efb28f-36e7-49d9-b660-f2c1a230dc5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f51d2696-a327-4076-b671-ab0fb947a0df",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79d5beb5-0d32-4739-859e-0a5899acfb30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57c0e08b-56a4-44d7-95d1-2e115fcf01f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a2f75aa-9f8e-442f-8fa0-2ef8cfda07f8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c26042c7-ec41-4754-9c2b-ee2fe58239f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "842100d9-1732-4764-94c8-fbcebd207fe7",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4816f68-0c97-4fee-a504-40eca3596d76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88938c6c-9f70-4208-8ad8-f847bd8f4f04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "235b9cc8-c48c-4945-8702-1c39a52d7320",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abdb99b3-e8b9-481f-ad12-5271466e8c5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41c92c2c-ea7b-4b15-b87e-c3483fae1382",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af603bd6-826a-43d8-bd39-90459f293493",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3df75cb3-d830-4769-af99-fe5edfd2edf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af868ba4-97d5-45fc-88d1-56caf3da022f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0bc6ffa-0c52-41ae-8efa-ad32e280a7f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22602408-991f-469a-ab7b-8ec70dd76226",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dfa6a6b-4b10-4eec-b634-1817e494fb9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3000361-8677-4c37-9bd1-4a2b41fc3c45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3441c34-ec24-43ae-984e-68cf0f948859",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18bb0ba5-187a-4ecd-adc1-bbb2abf4b93f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "536b5488-3b7e-47a3-b83b-a4c5d58094ef",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f219747c-5961-489b-a332-cec2dd0b7cde",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "334dcb6c-0b6e-4c8c-b12e-24c464fdbbd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "194f4327-22d1-4e33-a9b6-cbc567992c0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c3aa841-9ea2-4064-962e-05977f791165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61d8cb44-eb85-44e9-8b11-d94a81b0b3d7",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f668f495-ccc7-4482-9a52-3e09c72c19bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "846bcf30-1979-4958-88d3-cb7420017a63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afc91915-91e5-4a1b-8507-8492048245fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f89f101-2934-4b88-b28e-68afc4670336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bac4bfc6-9851-41c5-bbc2-a46dde5b4be7",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03ce6df1-d991-4f19-87bd-882fe5d9d521",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60cc3fdd-07f4-4e11-a2c7-128f52867738"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8890bd39-66ec-4c89-89c7-5d49813808dd",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ef50860-9091-4cc8-8ba9-bf93c452597f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a84ac0bb-67e5-4227-a3f2-ee2eec6f610c",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57b5fda8-288d-44e9-957b-cd88aa2fcae7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1bc14f3d-80d2-4fb9-a20f-ecec1877acaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a71f6089-2eae-48a2-a07b-58db2b6decf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3964d8d8-cedb-492d-bd98-fad86535a1fd"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1b608643-4974-4c47-892c-bd4fcc114594",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "642e8884-66cb-4625-9249-8161298f475a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b6e0766c-b542-4135-b29d-8fd958dd18a3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2897a279-98ed-49d4-b709-58e3c5e2093e"
                    }
                  }
                ]
              },
              {
                "id": "2ce614a6-6e8f-4ef9-b9c7-4692e1ef64b7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6a098dfd-c8af-4350-bf35-8bbf82d1a0e1",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1adc73a0-3298-4373-a4fb-a3d00a002a98",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "ad27f223-8e2b-4e78-86a3-9f9786c9eca0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eb34e40-70f4-40d7-a065-5870a7f5c924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "94e5db6d-8b83-4f67-b20d-af0a07938663"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82b90de4-6b19-43b8-8e90-2d9f599754a2",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe9a0f6f-3535-4a70-9a33-1c2dc5d822fc",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "9232682c-ba51-4d5f-9e80-7d1b5abe83b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "027c01e5-3dd7-4528-b744-5338f8392df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b1669126-5f23-4eb3-af52-25faaa1b764c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e004bcac-857b-46d5-9f80-5727b130b5ea",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5bc3c458-bf7e-4813-9f59-9415417c6bab"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b5ad471-56e9-45cf-8776-a431ee906569",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4a9e4330-5b60-4aba-b944-2d20cd7ff080"
                    }
                  }
                ]
              },
              {
                "id": "cccb81d3-6528-4ccb-97bb-faf429eb3347",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "72434910-0d2d-46a6-af16-b0073e97e1f7",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "503e9700-956a-4145-bd8d-ed628f66b5dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "4ca62ad0-9cda-4308-8121-5618b5393bfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d5c417c-5894-467d-a486-61f4fd15f38f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a0dd298-b330-4b3b-8210-f114370b1ad7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "47614ce5-506a-4613-be4e-ede7e48c54e4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a7aec5d0-8385-447a-80d9-6dfd5e7b92fb",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f541d0ac-c539-4468-91bb-6d373b00bd99",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f1bbad83-c5fa-494b-a949-133a45c0bdc4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b45530f6-9d8b-4b2c-849e-711df03b8986",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a41d5693-e3f0-474f-9a90-adcee24b0866"
                    }
                  }
                ]
              },
              {
                "id": "f0579637-5c0d-4da1-a90f-e3fcf5057ae5",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5a8a5b8d-6175-49e8-a681-4ee6b4f55d07",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "4a692c5f-d396-4ada-84d4-bdcc5bddf19a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3b4d90a0-66f0-4df1-9b11-5c532d950561",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "922dc042-034f-4a7b-9c51-61a5f71267b6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "27dd4fd2-380a-41c5-84e4-0ce912b1425f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "93e5956e-e4e5-4280-b113-271d17ff8b1b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1dfdc613-2cb1-416f-a8bb-f41181fdf52a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "95d8cc2e-783f-42db-959b-80ab3bd3565b"
            }
          }
        ]
      },
      {
        "id": "cb2fa14a-b94d-477c-bf83-06e32e365641",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "59bcc9a3-cd49-4319-8f9d-973cd7ba721f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8c4d1287-706d-44b1-a203-a849469f2951",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0be6ad9f-448b-4731-9288-c8d287cdf9f1",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6de4ef4f-6434-4a9a-b6da-55d48971e10e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "18c33d76-7998-4686-8a17-4738e24809df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad39981f-5d9e-4d0f-9ca6-7dfe068ecba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "27c57fcf-bab8-43c2-bfda-22aa2ad6c018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8fab05d-de45-4fe9-a7cc-af940d6c2c38",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fd3175c-bd65-4af6-b9c2-e3ea20de2ed4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f507bc07-9e94-4b65-b708-ce9879db0f13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b0f6dbe-2c88-4e52-b201-74cc94675c39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ae999f64-af69-4a50-b81a-0870bf3cab38"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8698dfe9-54ec-4617-8ca6-7d42cfe2b335",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f5c07865-cddb-4e30-9bf4-23ab9aeb848a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a855bbd6-cc68-4417-b546-988c6d9c9ee8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8d3d881a-c22f-47e5-b132-20ceace9f8dd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "58a19678-179e-4c18-bab0-0393ccb74ad8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "425adddb-aca0-423b-a343-b67fddc3c8f0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0d30e055-646d-4469-a752-8f096e35d05b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ff278493-8ae7-483c-9985-bbe484471517"
            }
          }
        ]
      },
      {
        "id": "74961e23-cd13-4b25-9335-9733e9087543",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "0d636fb5-e643-44db-b129-19ae4e89554e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d36117e1-19d9-47c1-a020-75fe237c71f3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "88338ffc-9772-4460-9d6b-a16a411bbfaf",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41506908-7d4b-4c50-b1a9-f2734d67b713",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "28d46f01-4bdf-4d28-8a3b-aa36ea1ddba6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62600037-64b5-452d-a871-5b0ccd6eae0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9f792497-73fe-424e-9f1d-f98345bdb22a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fadea2ae-54ac-4765-a183-4f22adf487ef",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc55064c-b8fc-4b41-ae3c-3f0f2b1123a2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d7897ecc-bcfb-45a7-9310-74204b6afe3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ae6eb2b-bf34-4aa9-9ed3-bdbb8762c625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3e9e7945-a891-4027-b37c-f8cc8961887e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "68d24b82-c68c-46af-8697-50d5fa283231",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1c873579-e1c5-406e-88cb-c51040e6ad3b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "828401c7-c2e7-457a-8e2a-1541f3038359",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a6733acf-5e48-4989-afe6-b9cbc1be1b7a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e8ad128f-81c8-45eb-88d2-52919af3b578",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2c83fcba-5046-40b4-8111-33ecc0f9cd18"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fd6e49df-89ce-4092-9ac2-b665fef293c6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e6574815-125c-4fec-8d6e-415e86f04f43"
            }
          }
        ]
      },
      {
        "id": "6ee0d5f7-a4b6-4679-80f6-e9f770f76090",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "b0304d5a-8393-4efd-9f15-c2a38f58a79f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "572be226-2e35-4b8c-8561-0235302d873c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8eb45cdd-20a0-4560-97cc-9278e0fce1fb",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0b507e5-c4b4-4486-8d2f-61f7e644a415",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4b6c0af1-365a-4c15-805f-3c65d3746290"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "488c49c2-115a-469e-8078-f2e439040527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "815e7014-db77-4c17-9475-3a7541e4520d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46fb77d6-d55b-444f-8e5d-a6ab25a630fa",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5351b354-8ec6-4765-adc8-a1187c24fb4e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "fe1ca8b9-652a-41ff-a2bb-b06b0eb12472"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84d5a338-ec96-4db7-8edd-1cbf3a4e9567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "128fedea-0ade-423d-bdb7-79203f17b015"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c0ca4a07-a788-44ea-a09e-10b63c46f33b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c9c93e04-c38b-4ad2-accc-316db3cfcdc9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8df0db03-2797-4eea-b352-cc12129f2843",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5d89f41c-9ea1-4287-94f9-a3fcce78b314"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "91a86f6a-91ff-43dd-9bc0-4cf7a399f831",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "985bf7b6-22d7-4968-82b4-cf980e9acd9c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b5548dba-40b9-4001-a4fd-35fe23523dee",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1e3f55f0-a979-459b-bcab-a070fe07f504"
            }
          }
        ]
      },
      {
        "id": "1f20439c-a049-4297-b3e0-47eb5e3415d3",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "58871155-f1cf-4752-8b8d-86ab73af72a8",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3d72bdb5-180f-4c43-b8a0-a81f33e42284",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "760dee5c-ee54-4205-8627-13bc81cfe68b",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c1e2ae5a-f495-4be0-8fa4-068e4ea218a4",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "95a6d759-192d-4e73-abc1-b571e975c5d7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 254.57692307692295,
      "responseMin": 15,
      "responseMax": 5730,
      "responseSd": 691.5559086957983,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1682642299726,
      "completed": 1682642378422
    },
    "executions": [
      {
        "id": "71c4f760-93fd-43b2-a734-2cc8cdfd4185",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "430a11b4-333b-487e-b96d-02278fc2cdaa",
          "httpRequestId": "a132262d-e3ed-4a28-b137-00a9625d933f"
        },
        "item": {
          "id": "71c4f760-93fd-43b2-a734-2cc8cdfd4185",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "ea625a0d-372a-4941-96d9-5db155e05142",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 0
        }
      },
      {
        "id": "ff78a4fe-3e0d-458a-be5e-896ad8282958",
        "cursor": {
          "ref": "66d45244-febf-4a5a-be3a-01db237934a1",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "bb887690-a546-4128-aa2e-68fc588e6cf5"
        },
        "item": {
          "id": "ff78a4fe-3e0d-458a-be5e-896ad8282958",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "33b9aa99-d901-4b52-bdce-a3fa8ad7628e",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 0
        }
      },
      {
        "id": "031a5ed1-e8c4-4752-9ac6-a4a0e59b30ba",
        "cursor": {
          "ref": "aff4c948-c827-4a0c-aff5-b12a4913f83c",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f5ebf85e-f2c2-4096-ba0a-0a4aaa07b5bc"
        },
        "item": {
          "id": "031a5ed1-e8c4-4752-9ac6-a4a0e59b30ba",
          "name": "did_json"
        },
        "response": {
          "id": "02eaba36-b870-4037-877d-df7c93521b2a",
          "status": "OK",
          "code": 200,
          "responseTime": 566,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cc98bbd-c677-4e88-8a04-6fa45cb9eba4",
        "cursor": {
          "ref": "2abe1483-2477-4d33-841b-8f0cc54e5e87",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "fbed4be6-40a5-448f-ac5b-35e02da79e06"
        },
        "item": {
          "id": "8cc98bbd-c677-4e88-8a04-6fa45cb9eba4",
          "name": "did:invalid"
        },
        "response": {
          "id": "05650e7c-d796-42b9-8cf9-8587b2367462",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1679,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "8cc98bbd-c677-4e88-8a04-6fa45cb9eba4",
        "cursor": {
          "ref": "2abe1483-2477-4d33-841b-8f0cc54e5e87",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "fbed4be6-40a5-448f-ac5b-35e02da79e06"
        },
        "item": {
          "id": "8cc98bbd-c677-4e88-8a04-6fa45cb9eba4",
          "name": "did:invalid"
        },
        "response": {
          "id": "05650e7c-d796-42b9-8cf9-8587b2367462",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1679,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "c7d8aa84-fe7f-4e9c-93f9-08604d6f3e24",
        "cursor": {
          "ref": "aa8527e9-4dd1-4607-b620-629fe0bb8d13",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "643748dc-c151-4e5c-87de-d81e94a9d1a3"
        },
        "item": {
          "id": "c7d8aa84-fe7f-4e9c-93f9-08604d6f3e24",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "5191b8a9-d496-44f6-a631-dd851f4de505",
          "status": "Not Found",
          "code": 404,
          "responseTime": 171,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2df97ba-bfbb-41c9-854f-02cf4e6b24a3",
        "cursor": {
          "ref": "3ab7f696-9ae7-4c2b-b52a-736a9548c337",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "3bc18c71-2fe0-446f-83e7-ebbb75e097e6"
        },
        "item": {
          "id": "e2df97ba-bfbb-41c9-854f-02cf4e6b24a3",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "4abeed0e-1980-4d74-865d-05961867d29d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 49,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99f6089e-c44f-460a-b707-1e5e3364a967",
        "cursor": {
          "ref": "5759d738-6f83-49e2-a400-b931ed15bd41",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "475ffad5-84a0-4c92-9f74-58477229397e"
        },
        "item": {
          "id": "99f6089e-c44f-460a-b707-1e5e3364a967",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "27426b93-32a3-4ea9-925d-e91206e3e9df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 69,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "cf75cdd9-6754-496b-983b-81e3a75bd2c4",
        "cursor": {
          "ref": "bb818162-e852-4aa5-adeb-92bc3d598352",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a2cda253-3326-4bbb-aa27-efd287275c03"
        },
        "item": {
          "id": "cf75cdd9-6754-496b-983b-81e3a75bd2c4",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "e553f9c4-8a30-421a-90c3-ab1539a947fc",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "cf75cdd9-6754-496b-983b-81e3a75bd2c4",
        "cursor": {
          "ref": "bb818162-e852-4aa5-adeb-92bc3d598352",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a2cda253-3326-4bbb-aa27-efd287275c03"
        },
        "item": {
          "id": "cf75cdd9-6754-496b-983b-81e3a75bd2c4",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "e553f9c4-8a30-421a-90c3-ab1539a947fc",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "f0737190-f8c1-4180-8ca5-70a54bbcd029",
        "cursor": {
          "ref": "c00c91be-0fe0-42e8-bc5b-599e51d6cb6c",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c834aea5-352f-4e74-b17c-423e8438bdd6"
        },
        "item": {
          "id": "f0737190-f8c1-4180-8ca5-70a54bbcd029",
          "name": "identifiers"
        },
        "response": {
          "id": "2134bdf4-74cf-4e91-b7ab-df92a1f58baf",
          "status": "OK",
          "code": 200,
          "responseTime": 59,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8b42b7b-356c-4968-a0a4-231e7b290ae7",
        "cursor": {
          "ref": "fad1b835-853b-484a-9960-877345aa1af0",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "1f6316e6-1b9e-4f2a-a081-26c0769284d5"
        },
        "item": {
          "id": "f8b42b7b-356c-4968-a0a4-231e7b290ae7",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "8a7e3de3-feff-4004-91b0-b2f81f4542e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8b42b7b-356c-4968-a0a4-231e7b290ae7",
        "cursor": {
          "ref": "fad1b835-853b-484a-9960-877345aa1af0",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "1f6316e6-1b9e-4f2a-a081-26c0769284d5"
        },
        "item": {
          "id": "f8b42b7b-356c-4968-a0a4-231e7b290ae7",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "8a7e3de3-feff-4004-91b0-b2f81f4542e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fd8872f-ee58-4173-ae92-327467f0cb94",
        "cursor": {
          "ref": "c3114c04-c6e0-4430-8a69-d8833014452c",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "83cf69e8-d721-49e7-9190-28e17dcf5333"
        },
        "item": {
          "id": "5fd8872f-ee58-4173-ae92-327467f0cb94",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "2b31b14c-cdf5-4021-b78f-179dc6a9ff0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7811b73-9175-46b0-ba64-a37949bf9c18",
        "cursor": {
          "ref": "2311542e-38a7-42e6-bed9-69e9e68983f8",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "3378353d-a37b-499a-adef-08a0f3cf1c11"
        },
        "item": {
          "id": "d7811b73-9175-46b0-ba64-a37949bf9c18",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "fd94b32c-2e22-44e0-8823-547000c5e32e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29f5d330-6854-45fa-a100-fd8bda7cd3cd",
        "cursor": {
          "ref": "672b3a50-5baa-42b2-9318-12f669cc5c61",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "c4380aae-9bbe-4e79-acaf-14a8ad43c676"
        },
        "item": {
          "id": "29f5d330-6854-45fa-a100-fd8bda7cd3cd",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "5d1e3fed-0c09-455e-b945-b2d7f9a9c246",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fd714f6-7b60-4d9c-9d51-92e55439f758",
        "cursor": {
          "ref": "f46b83ae-5936-4b61-9c66-f83638df27ae",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "f326e44e-9a3d-4c4a-b2bd-ddc8f2ca8790"
        },
        "item": {
          "id": "9fd714f6-7b60-4d9c-9d51-92e55439f758",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "b5ccad0c-f247-4538-8a1d-6c906dda9fda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d96b371b-40a6-41fb-a129-8bc879ca0845",
        "cursor": {
          "ref": "aeea40bb-f143-4f37-a58b-448c1e047b6e",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "68728200-0890-4eec-8d42-ae4c88913b07"
        },
        "item": {
          "id": "d96b371b-40a6-41fb-a129-8bc879ca0845",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "83446ee9-44e0-41ed-95c0-e2a5220c293d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 592,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a95a1f0-f1ae-4258-ba95-9e0f5f46e63b",
        "cursor": {
          "ref": "7a8512cf-17ef-4f8e-8347-ad96a8d813a9",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "0a41c8f6-3ddd-4c89-b7f5-8bbc3306fd91"
        },
        "item": {
          "id": "5a95a1f0-f1ae-4258-ba95-9e0f5f46e63b",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "0ba141e1-79ae-4da5-8e7b-360e2c7fde09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3c76e73-dff8-4b25-8149-5b7d29d1b894",
        "cursor": {
          "ref": "5bbf6cd3-e94f-443a-9013-ba1faa3b52c5",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "9fd2bf1f-dc39-4ab2-807b-ba6d2809ecf5"
        },
        "item": {
          "id": "e3c76e73-dff8-4b25-8149-5b7d29d1b894",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "3fc3b717-e890-49df-a09b-3e95b368ea96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c89cd546-9d35-4a7d-b44d-4292bcbabca4",
        "cursor": {
          "ref": "a86eed61-8d29-4793-a73a-526150c1a958",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "252142b1-71a8-4b1d-8877-3e817bbe0181"
        },
        "item": {
          "id": "c89cd546-9d35-4a7d-b44d-4292bcbabca4",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "819e07c1-693e-4a15-ab0b-ff22322aadb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bde2120d-b709-4cf7-97e4-f201097990aa",
        "cursor": {
          "ref": "b620e826-cbc8-49aa-859a-903a4d01dcca",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "6f44a0a9-a014-42d7-bbed-d4ced11da3ae"
        },
        "item": {
          "id": "bde2120d-b709-4cf7-97e4-f201097990aa",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "636ee95d-8ede-4b40-b2d6-0c9e7fc58cc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a11970a1-9e9c-4026-8190-ee03167602d2",
        "cursor": {
          "ref": "3ef5a2c9-5db7-4ed3-827b-df4aa238d457",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "4750ea1a-9302-4aeb-aca8-f07e4920c473"
        },
        "item": {
          "id": "a11970a1-9e9c-4026-8190-ee03167602d2",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "ba7bb67f-97a8-45c5-a5f3-a17923bc9dc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09d0fcc3-2231-4e01-9fd5-626f215c3939",
        "cursor": {
          "ref": "596f61f5-6e70-4615-86c0-b2972ac04523",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "efe68b23-4522-4870-a7a7-60891ccb8c48"
        },
        "item": {
          "id": "09d0fcc3-2231-4e01-9fd5-626f215c3939",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "06442b65-8c65-465e-803c-fea176cd92fb",
          "status": "Created",
          "code": 201,
          "responseTime": 972,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "55f4528f-2943-48c7-b5e4-84728e24a87b",
        "cursor": {
          "ref": "e6090b0a-f5dd-496d-8aa5-4f851c792d49",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "bf89bda5-513a-4de9-9041-6f1a510ca127"
        },
        "item": {
          "id": "55f4528f-2943-48c7-b5e4-84728e24a87b",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "a0af5dea-9938-4231-bbcf-4b694a630c76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96b6f8c3-1af5-4dac-aa89-47e8bfb6bdfb",
        "cursor": {
          "ref": "9f51d8b3-5873-4bcd-8c9e-ac9418d6a67f",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "950ad86c-1366-4d4e-b736-10eb29d0cf06"
        },
        "item": {
          "id": "96b6f8c3-1af5-4dac-aa89-47e8bfb6bdfb",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "aebf972d-6b13-4648-8ec2-49e4ab596fc5",
          "status": "Created",
          "code": 201,
          "responseTime": 4526,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "b4cd961e-533d-4c8f-a019-9965ee2c6800",
        "cursor": {
          "ref": "11a1717a-9308-419d-b288-154138201633",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "9c858fca-92fc-4221-862a-bd3a5c8a29e5"
        },
        "item": {
          "id": "b4cd961e-533d-4c8f-a019-9965ee2c6800",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "096aabc7-5e5e-409a-a5d7-4de540ef1ef4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d722bd3-745a-49db-9fd4-f30801024e44",
        "cursor": {
          "ref": "4bacc971-b873-469b-8777-d71b36005fe7",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "c4589312-9e35-42aa-8bce-e37212b62210"
        },
        "item": {
          "id": "6d722bd3-745a-49db-9fd4-f30801024e44",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "4fe586e5-f19c-4551-a0a4-27486615b3b6",
          "status": "Created",
          "code": 201,
          "responseTime": 5730,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "687a34d2-50ba-4171-8d27-812bb7f2480f",
        "cursor": {
          "ref": "7a7c93cb-9b65-4bdd-baed-ca87f89f67c1",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "ccabdb60-891b-46bb-b1fc-3472dbf5040e"
        },
        "item": {
          "id": "687a34d2-50ba-4171-8d27-812bb7f2480f",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "18952b88-e596-4d92-8d3f-162393471b55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22812066-324e-48b2-80f9-f8f1e249ddd3",
        "cursor": {
          "ref": "26667018-9ab3-4840-a627-80189be8f31c",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "8163a179-bf6b-4dbf-9fde-0c918aad90c3"
        },
        "item": {
          "id": "22812066-324e-48b2-80f9-f8f1e249ddd3",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "f1539747-58e2-4075-9a52-f6d5ea291c34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdf01575-2237-43cb-9b1a-9fa66e0a648b",
        "cursor": {
          "ref": "24ac2e5a-47f0-4b7f-9c35-38aa41c932c8",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "fd235d97-897d-4b7f-832f-c609deccfcbd"
        },
        "item": {
          "id": "bdf01575-2237-43cb-9b1a-9fa66e0a648b",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "76c99c9b-44ad-445f-b594-726dfdc15c68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac2ef768-b93a-4adc-85be-61a4cb96fcdc",
        "cursor": {
          "ref": "17d76a4a-23b6-4f27-8ec6-4515549fb628",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "2f511266-2260-4d13-a787-597c9a989c74"
        },
        "item": {
          "id": "ac2ef768-b93a-4adc-85be-61a4cb96fcdc",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "0750e804-4968-4458-ac97-2f184c113782",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b6bcb93-f03b-4a83-ae5f-07d6c7d125ac",
        "cursor": {
          "ref": "5b7022a6-4e00-4714-98fb-f4a687b132a4",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "fd516936-5a55-4a43-92f5-da5af59eb7ba"
        },
        "item": {
          "id": "9b6bcb93-f03b-4a83-ae5f-07d6c7d125ac",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "5f23a0bf-d2aa-4aef-8a8e-8c21be9af3e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "625bcf13-500a-496a-9b5f-e8201ec8d062",
        "cursor": {
          "ref": "bf1e7a04-fbbf-4bde-9b4b-ef6534de0482",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "efe9ecf6-dcc5-4db7-921f-df60a5b6659a"
        },
        "item": {
          "id": "625bcf13-500a-496a-9b5f-e8201ec8d062",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "11118e2e-20a8-467e-9bc5-a28425154079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2f5f9e0-a31a-42df-9ebd-4b5b841f2804",
        "cursor": {
          "ref": "f552ce7e-fe9a-4f69-b275-f6b19255d473",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "be5d9f2f-d42f-492e-9b06-cbfafc09f11a"
        },
        "item": {
          "id": "d2f5f9e0-a31a-42df-9ebd-4b5b841f2804",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "20f2269c-186e-4150-8f71-2d5842fa0d68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "083c0647-8e2a-43fd-a929-e6eb181b9f4f",
        "cursor": {
          "ref": "bec7ff93-1975-46db-ad4c-15401442bc18",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "73abe3ae-a267-4e32-b437-b6b04e93b805"
        },
        "item": {
          "id": "083c0647-8e2a-43fd-a929-e6eb181b9f4f",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "282635a4-c921-42a2-a84a-6a6711f4e852",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efa2fb47-c333-462d-843f-fa479abaaa6e",
        "cursor": {
          "ref": "733891d3-e0d4-4037-b437-bffa7b797402",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "1c99f11c-18e4-47a0-ae74-56b6be58cf88"
        },
        "item": {
          "id": "efa2fb47-c333-462d-843f-fa479abaaa6e",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "00675ff3-516f-48f2-a0fa-fa64b52c95d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9d39012-0be2-4d3a-bb16-4fe1bef18654",
        "cursor": {
          "ref": "cac16a1a-fce2-4189-8a18-8e4928a8341f",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "067d2fb5-9c54-4338-918e-7c2ddb7c25f3"
        },
        "item": {
          "id": "b9d39012-0be2-4d3a-bb16-4fe1bef18654",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "d70503a2-0b28-43d7-b5b9-a1b728a089fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab43ce96-d85e-4c42-887f-994ff1a5918b",
        "cursor": {
          "ref": "5d5216ba-f335-4586-bc5b-f05ddd6f2f95",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "ff51a5d2-7b0a-4559-bc52-ce45076c4d82"
        },
        "item": {
          "id": "ab43ce96-d85e-4c42-887f-994ff1a5918b",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "cb776218-77ca-4bd4-9486-1efd9c47ed58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "512266f3-47b6-43e9-af90-080fa3716611",
        "cursor": {
          "ref": "7ddfb345-2f9c-4215-a404-60b8f6a71b9c",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "60e42784-0cac-4d61-955c-709de3fa1b4a"
        },
        "item": {
          "id": "512266f3-47b6-43e9-af90-080fa3716611",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "4f4cbc78-2eba-46e8-b143-5dc97beb89af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3f2a727-0e4b-419e-a5a7-39fa76fc4573",
        "cursor": {
          "ref": "5bbe07a9-7d47-4e97-b4ce-db223537daba",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "0c5dfb9c-de47-48d8-af01-70ab364a38a2"
        },
        "item": {
          "id": "b3f2a727-0e4b-419e-a5a7-39fa76fc4573",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "2b919082-4bb2-4efe-a94e-970c2e279ba2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b61ab7c6-8cc8-48e0-a196-714d8db9e0a7",
        "cursor": {
          "ref": "f7bad9bf-2523-470f-b3e6-0aeabec13002",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "c8b2e98d-f7db-4791-aed5-28097bfa7633"
        },
        "item": {
          "id": "b61ab7c6-8cc8-48e0-a196-714d8db9e0a7",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "4c976463-1ba5-4571-b686-2a47bd3141c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62c770c9-2be8-4420-80bf-2662ef5c3af7",
        "cursor": {
          "ref": "4aa75a6b-cfb4-4c91-a4f5-3dfc616792b4",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "8098a1ed-a15c-43b3-adf7-c1eb745d80e1"
        },
        "item": {
          "id": "62c770c9-2be8-4420-80bf-2662ef5c3af7",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "88ed7be6-3486-4304-b3d4-f03bffe9c3f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa7ac624-0c50-43c6-ae43-69cbf3e3d804",
        "cursor": {
          "ref": "0155ee48-c8b6-4cc1-b618-553cd2ea834c",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "556c0bea-38e2-4582-9bb3-d63ea07bf043"
        },
        "item": {
          "id": "aa7ac624-0c50-43c6-ae43-69cbf3e3d804",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "8f0f0b78-4fe2-4115-9761-6a1f9e87032b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77eaef3c-4279-4c84-b290-5ea93b71bfa0",
        "cursor": {
          "ref": "d9b45b40-3945-4363-99bc-69111764ca81",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "1b42955a-1bdf-4a42-a9bc-c0109b1397d4"
        },
        "item": {
          "id": "77eaef3c-4279-4c84-b290-5ea93b71bfa0",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "c0ca5e3f-7da4-4ee1-b71f-3d5a6a299c6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9557e35-b99c-42ba-bbb5-9566cb820521",
        "cursor": {
          "ref": "1078e5db-91bb-4dba-b2c3-b85a234e1117",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "7a2ae3ef-b09f-4b70-a2cf-7cc947fec32a"
        },
        "item": {
          "id": "a9557e35-b99c-42ba-bbb5-9566cb820521",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "037412ba-7a66-4d4d-98e1-b452d21681d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c639dda1-f118-4dbf-a787-9f875ffa49c7",
        "cursor": {
          "ref": "ce415ce8-0693-4cc2-9e79-b0ca34da367b",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "331b3666-3d7a-4fdb-a695-5fa5e04c1a44"
        },
        "item": {
          "id": "c639dda1-f118-4dbf-a787-9f875ffa49c7",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "24891ca6-3758-4e9c-a021-9e1c80522759",
          "status": "Created",
          "code": 201,
          "responseTime": 2448,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "ed69c021-559e-408b-a83a-0381f5613fb3",
        "cursor": {
          "ref": "233c254b-f69b-41ef-b00c-27cf7e92c7d2",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "3e304651-d8e6-465f-a813-112510ca6274"
        },
        "item": {
          "id": "ed69c021-559e-408b-a83a-0381f5613fb3",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "f3292a97-dcc3-425c-8754-9255b76b9dc5",
          "status": "Created",
          "code": 201,
          "responseTime": 2382,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "75d6155a-2c67-46bf-bcc9-51a72875fec7",
        "cursor": {
          "ref": "e9985696-eee0-4a06-ae59-f4ba74e89e38",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "bab0b411-9e36-4ed3-bb84-9df9dd526f39"
        },
        "item": {
          "id": "75d6155a-2c67-46bf-bcc9-51a72875fec7",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "a8d6877c-1713-44bd-a391-1fcc8fdfb64b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5abdddab-722c-48c4-92c9-583244e96056",
        "cursor": {
          "ref": "49e8d4e5-5942-4ba2-8e35-01cbf8a2fce6",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "cc103a84-70c0-4698-ba7a-f7019935adb5"
        },
        "item": {
          "id": "5abdddab-722c-48c4-92c9-583244e96056",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "f959b96b-9392-4ff7-9c11-79542d670cf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9098a283-695b-49ec-811a-ca4f95413b04",
        "cursor": {
          "ref": "8467e598-6c1c-4d63-b307-ccc4134b8d1d",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c085a8e6-784b-465c-b9dc-b8fd3f1c21a2"
        },
        "item": {
          "id": "9098a283-695b-49ec-811a-ca4f95413b04",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "7acb1624-96ae-4902-a0f0-55064b92db53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35fa02fe-aac7-4323-92ff-547589398bda",
        "cursor": {
          "ref": "afded0fc-f758-4314-be36-9fb85abd9fbb",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "2c5c816d-586a-4656-bbd0-98cc5957ac41"
        },
        "item": {
          "id": "35fa02fe-aac7-4323-92ff-547589398bda",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "3d486369-c9a4-419e-a30a-6e5b9eeaaa0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "041e9e5a-e843-4f02-92a4-cbf859fda202",
        "cursor": {
          "ref": "6ca59276-3383-4262-865c-ebc502c779b9",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "beed0bab-1831-4fd1-8fd4-6986b6686515"
        },
        "item": {
          "id": "041e9e5a-e843-4f02-92a4-cbf859fda202",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "ce141e7b-5a32-49a4-a853-db3d58f3c937",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b65e1f4-24b7-4d16-ba7a-52b41ff8f514",
        "cursor": {
          "ref": "d9a895c0-f217-4606-bfb6-03517696e441",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "35818e5c-3425-4feb-833d-494d16f4d7b9"
        },
        "item": {
          "id": "1b65e1f4-24b7-4d16-ba7a-52b41ff8f514",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "4c7700f7-e07b-46f7-a114-ffb31ecb2992",
          "status": "Created",
          "code": 201,
          "responseTime": 1839,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "314dbfaa-a211-44d8-be13-01f8356eada2",
        "cursor": {
          "ref": "23cf638d-4d41-43d3-ad41-71e58fa16b4a",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "07157248-b086-4d5a-8218-5c979193ac69"
        },
        "item": {
          "id": "314dbfaa-a211-44d8-be13-01f8356eada2",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f3de392b-3473-4888-86c6-66fa3f153534",
          "status": "Created",
          "code": 201,
          "responseTime": 2496,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "797184d1-f582-4978-852a-8297587b84af",
        "cursor": {
          "ref": "c6e05edc-3c92-4095-8f25-16f0b72061d0",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "8281939c-d84e-4654-b7e7-22aad04b328b"
        },
        "item": {
          "id": "797184d1-f582-4978-852a-8297587b84af",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "2b5f62f8-7a8d-4cd4-aae7-c2e03fd6e800",
          "status": "Created",
          "code": 201,
          "responseTime": 2427,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "343f8312-b28f-445e-8083-683384bb3cf0",
        "cursor": {
          "ref": "221a7ddf-ac69-46e8-b1b6-a96ac25d2d9d",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "9a2ee0ae-a37e-4e76-b3fb-1754a441b7ed"
        },
        "item": {
          "id": "343f8312-b28f-445e-8083-683384bb3cf0",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "d5cd2208-4a52-4d7e-b98f-d438f31dbb98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "273b9483-3328-4d51-bdd8-13a82f6905b5",
        "cursor": {
          "ref": "c30a8980-b4a1-4f5b-9548-a5889f58f787",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "c9c23215-b92b-45a1-88f6-3ef15fd7d1fc"
        },
        "item": {
          "id": "273b9483-3328-4d51-bdd8-13a82f6905b5",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "918f239e-6343-46b1-911c-a1fdd16847c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b77bd0ff-691a-48e3-ae8b-b5cda22d74a5",
        "cursor": {
          "ref": "e7a9fb9a-90e0-4171-b723-cc744143e164",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "798c1d74-dd57-42cd-9fbb-7360f3df1461"
        },
        "item": {
          "id": "b77bd0ff-691a-48e3-ae8b-b5cda22d74a5",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "0d6ed94f-b158-4500-be23-22fc4bf42533",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 257,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2d5cdce-eb23-4c2c-9ef0-87d92188f322",
        "cursor": {
          "ref": "d949c8d4-75ca-4cfc-a049-20556f314aa6",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "6fc5687c-02d0-484f-8dd8-4a09810ffa69"
        },
        "item": {
          "id": "c2d5cdce-eb23-4c2c-9ef0-87d92188f322",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "dafd1cc7-53fa-4e7f-8da9-1ce78080c587",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbd7b27d-7736-411b-9146-05a33d224c7b",
        "cursor": {
          "ref": "d8f54dfd-0f7d-4f4a-87c8-c97dd681c52f",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "f8e2cff6-f2d6-4217-87fb-759e3b2eb1e4"
        },
        "item": {
          "id": "cbd7b27d-7736-411b-9146-05a33d224c7b",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "5b3db564-90ff-47ff-a365-dc5d809ed0a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54758733-12cf-4375-a5aa-330c8f865954",
        "cursor": {
          "ref": "d9b7ec38-8367-41e0-9e20-d8e63c3e3db3",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "8f6b93b4-9d5f-4586-a85d-7b79d6fc0783"
        },
        "item": {
          "id": "54758733-12cf-4375-a5aa-330c8f865954",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "0e30c563-fb1f-48f3-928e-8b11720da64a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14977ccb-e228-4ef2-acb4-a89b0b695155",
        "cursor": {
          "ref": "c1737875-4e85-4fac-9aec-0e046651451d",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "674fd18b-dd9d-4aaa-b9f9-eaf342d94a7a"
        },
        "item": {
          "id": "14977ccb-e228-4ef2-acb4-a89b0b695155",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "5a0ec70a-f509-43df-83f1-481cb4929063",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31b8581c-48ab-4454-bc9e-75451d4267a0",
        "cursor": {
          "ref": "205d2f51-69e3-4566-b371-38c947f02287",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "100af3bc-398f-4e4c-92ad-14317ff986a7"
        },
        "item": {
          "id": "31b8581c-48ab-4454-bc9e-75451d4267a0",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "038eb126-1eea-43b5-8d43-d9bc71c50d83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12623120-2dc9-43fd-9f22-7edbd586ca52",
        "cursor": {
          "ref": "02ba9a2a-1fcf-4fcd-a1f3-b52629e3c790",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "3af36dff-8b29-4725-bee9-4bd097a60cda"
        },
        "item": {
          "id": "12623120-2dc9-43fd-9f22-7edbd586ca52",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "95163408-8f93-4a88-b5bf-7b3fa9ea87f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "061532b4-4a0c-4351-9410-b579a602d4f7",
        "cursor": {
          "ref": "a701ef98-c9ec-49f7-92eb-1fab7a27ca83",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "54e22887-7eba-4af5-97f5-9d67ed107910"
        },
        "item": {
          "id": "061532b4-4a0c-4351-9410-b579a602d4f7",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "14d3659c-84af-4244-a6d2-cbb0d940d1df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6bae993-4db3-4483-9aca-078cf7b45a6f",
        "cursor": {
          "ref": "8237b357-61f3-4fc3-8418-ad06f879df54",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "cce531ee-e1de-4a37-9db9-3fa943b7903d"
        },
        "item": {
          "id": "f6bae993-4db3-4483-9aca-078cf7b45a6f",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "50ac8530-3f6c-4333-852a-721b324c82b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc432fc6-8f21-415e-a9db-ea4cfbdada08",
        "cursor": {
          "ref": "c10d3744-f49c-42f7-af14-76741c370698",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "31bf9719-52d2-4e18-847f-f2b9a29fa8eb"
        },
        "item": {
          "id": "bc432fc6-8f21-415e-a9db-ea4cfbdada08",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "2027a00e-8279-464a-a4ee-ddb6121bb09f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d94bf9e6-ad55-47b8-aa00-6269ef6ce54e",
        "cursor": {
          "ref": "e823704b-3048-47e5-bfde-a34a96d54064",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "b370b43d-c2c1-458d-a3e7-d95a8075532b"
        },
        "item": {
          "id": "d94bf9e6-ad55-47b8-aa00-6269ef6ce54e",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "fab5194c-62ce-4bee-9752-96ab5373cd85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cc050e7-c174-4423-bb15-5916691eb29b",
        "cursor": {
          "ref": "f8c6b9bf-b86a-41a9-a5f8-1ac69faa78b8",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "c3f1578a-013e-4836-acee-c5d9a0bdd95a"
        },
        "item": {
          "id": "1cc050e7-c174-4423-bb15-5916691eb29b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "ef454b0a-c637-4009-bec7-6c8d3f4cc375",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0925f127-a1fd-4665-8aed-53e96d61547f",
        "cursor": {
          "ref": "8a78bbf9-7780-432a-a1b6-126c0f778848",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "189c90e4-cb51-4a36-b9f5-249248582696"
        },
        "item": {
          "id": "0925f127-a1fd-4665-8aed-53e96d61547f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "5feda047-ddc6-4306-bebf-e2af87e2b4c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd7627d7-ffc7-494c-a063-3937abb2fb3e",
        "cursor": {
          "ref": "809dbf84-9134-4710-95b1-17282c49b5ee",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "183f5518-fcef-4642-a356-12caad0a94a9"
        },
        "item": {
          "id": "fd7627d7-ffc7-494c-a063-3937abb2fb3e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "97a7bab4-3437-4593-94c4-bf5d8c9aa255",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aa92575-02e2-4f3f-9b4b-8f23988d709c",
        "cursor": {
          "ref": "363d4086-e298-47c2-a7e3-8378a4d71c8a",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "a1a3ca6d-fc61-4db4-b7c3-32a2b0a1e85f"
        },
        "item": {
          "id": "7aa92575-02e2-4f3f-9b4b-8f23988d709c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "efa6c785-9fba-4588-a609-c10967e9f8a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17f90436-4dcb-437f-a4a7-71244ffc1212",
        "cursor": {
          "ref": "932f85e6-d85d-4333-809e-2f944572e7a5",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "ff53ac7e-10c3-4273-9de9-a222a7ae79a0"
        },
        "item": {
          "id": "17f90436-4dcb-437f-a4a7-71244ffc1212",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "4e7664d2-1849-40ad-8ac8-e4ad6153c6c0",
          "status": "Created",
          "code": 201,
          "responseTime": 1931,
          "responseSize": 976
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "5183babf-060c-4c76-8290-56984fa6a79a",
        "cursor": {
          "ref": "5a6e3dea-f0c9-4ec3-b06b-d021e9b74715",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "fa18744a-20b5-415b-81c0-8404ad6a4a69"
        },
        "item": {
          "id": "5183babf-060c-4c76-8290-56984fa6a79a",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "3e94d36d-c3a9-4455-aaa4-daa0a63f3a66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "714cb1df-8cd6-4b0c-8324-4f94ff651e7c",
        "cursor": {
          "ref": "88bb2b05-f036-49c4-abcb-2e741dcf32c9",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "e8759425-7122-4add-b306-50ff37311584"
        },
        "item": {
          "id": "714cb1df-8cd6-4b0c-8324-4f94ff651e7c",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "2e0fb17d-8584-476e-b65e-3163b44a78ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a31dbcac-4890-4212-96e9-f35a7edce6bc",
        "cursor": {
          "ref": "d43bf79e-f8e1-46af-badd-d7b6c5341b57",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "da843dfb-503f-4e76-8cad-7089e2e68151"
        },
        "item": {
          "id": "a31dbcac-4890-4212-96e9-f35a7edce6bc",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "1878b6f0-2e2c-4a27-81f8-b07a8c5d5ed6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41aebe94-9894-4fee-94f8-4874277427cc",
        "cursor": {
          "ref": "59e1157b-cc44-4359-bc71-c05cee518e93",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "45e20385-c225-44d2-856d-5487a93f65f7"
        },
        "item": {
          "id": "41aebe94-9894-4fee-94f8-4874277427cc",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "61a7bea3-8fb0-4c43-a29b-01ebd911dbbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e893811-2e64-4e0a-a1ff-d6ba44346f6b",
        "cursor": {
          "ref": "4fa10168-8c44-44d0-b6ec-38b70311dad4",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "eadd0ccd-31f4-41c4-a39a-97df0a044971"
        },
        "item": {
          "id": "5e893811-2e64-4e0a-a1ff-d6ba44346f6b",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "c7842876-abe7-4091-8a4f-6af9f1dccdc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99fca58d-299e-41e2-b00d-ef73ee6824f1",
        "cursor": {
          "ref": "8cb896c1-0bf1-4bc0-8bad-fb766edfab19",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "22872a48-24d8-4b8c-8ed1-804af8cba656"
        },
        "item": {
          "id": "99fca58d-299e-41e2-b00d-ef73ee6824f1",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "8259537a-22c5-4d11-a0a9-b050811a099a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "222a3151-5dd8-4023-82af-a175ecb0978d",
        "cursor": {
          "ref": "9ad0d84e-1948-49b6-ad6d-cd1f22e4b068",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "13005809-fad7-4d1c-80d1-a190bc239a6b"
        },
        "item": {
          "id": "222a3151-5dd8-4023-82af-a175ecb0978d",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "d3416b46-64bb-4c98-8ed5-1580520caba2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1d72739-1158-4a96-acaf-f90bb8dc2cc7",
        "cursor": {
          "ref": "995c284f-f740-442d-9704-a446fcf9c9cd",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "9e157746-92ac-4c67-b595-242b21a1cea9"
        },
        "item": {
          "id": "b1d72739-1158-4a96-acaf-f90bb8dc2cc7",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "980a2fe7-1d1b-4a19-aefd-e0815891f669",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc36dbe9-074b-4388-b449-a830549c4c36",
        "cursor": {
          "ref": "27e0b5a9-14b9-4396-a41f-04d98e8f041e",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "1add8329-2948-44a2-9f59-b411ffd2357e"
        },
        "item": {
          "id": "dc36dbe9-074b-4388-b449-a830549c4c36",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "dfe9b89c-0e98-4507-98b6-ab6eb485687f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "759d86ea-5cc3-47d7-ac06-43b7a2fc5654",
        "cursor": {
          "ref": "a03b7244-6e69-4d25-8b58-a51679a2ea23",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "98359c87-cbe7-42bf-9cb9-2d0f8b6e603c"
        },
        "item": {
          "id": "759d86ea-5cc3-47d7-ac06-43b7a2fc5654",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "4c7c740d-1902-4f19-90d1-ef55b74edd9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b8a0fda-bc85-4842-b2e0-acb2a1e2d3be",
        "cursor": {
          "ref": "ecb0642d-5f72-4b69-a37b-72df476acaf4",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "d86985e6-7d1b-403c-8e31-4972f87675dd"
        },
        "item": {
          "id": "4b8a0fda-bc85-4842-b2e0-acb2a1e2d3be",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "996f1806-46c9-4b9f-b27c-8a77b1c321ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bc3ebd7-4e7a-4d47-9040-2bd7349a61ef",
        "cursor": {
          "ref": "b861a014-dcd0-488b-ba3a-32259f429bb8",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "ac12de45-1c90-405b-bc32-3cd78915dd40"
        },
        "item": {
          "id": "0bc3ebd7-4e7a-4d47-9040-2bd7349a61ef",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "8ee7e83e-9bda-48c8-9416-42a794b69677",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "510302b4-7957-4248-8397-d0a3dd7f7345",
        "cursor": {
          "ref": "1798512d-4c6b-4913-975f-c3e6f1814484",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "2fafce66-9ad8-46bd-a47d-2bfea64eaba1"
        },
        "item": {
          "id": "510302b4-7957-4248-8397-d0a3dd7f7345",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "d4507e22-2f61-44a5-aef0-5321b549d6ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07b67a77-a4fc-4aec-b4aa-231c87bbef40",
        "cursor": {
          "ref": "213acabd-a3df-4bb6-8f73-26b8324f0a05",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "d4183ecf-03ab-4080-a5ff-beec207637b7"
        },
        "item": {
          "id": "07b67a77-a4fc-4aec-b4aa-231c87bbef40",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "d0773c49-f53c-4dcb-859a-d2fc8d833937",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33bb6ab2-8c6a-42ba-a604-e6a14b9c4911",
        "cursor": {
          "ref": "8bdba4e9-6b35-4b90-93e5-aecaedc9f9c3",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "22bda589-7c95-4f75-ac6a-ddfc3559cda3"
        },
        "item": {
          "id": "33bb6ab2-8c6a-42ba-a604-e6a14b9c4911",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "8fd7ec7d-7185-492a-b3af-ec17b5560f36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8b886bc-e5ad-4a83-967f-62c0f5b7d9bf",
        "cursor": {
          "ref": "3528b818-2368-4fb7-8e6a-baf632a0c3bd",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "7d04d2dd-8a2a-4e93-9b18-34c09d6a94b4"
        },
        "item": {
          "id": "e8b886bc-e5ad-4a83-967f-62c0f5b7d9bf",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "06f0d084-8129-4085-b3c4-baf2ed2ccd25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "717654b4-2348-4916-ab1a-66d82c288a9e",
        "cursor": {
          "ref": "49adee2f-58df-4514-b115-14b8c9845eaa",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "03dbd3aa-c3a1-417f-8eff-f0fc46ef93ee"
        },
        "item": {
          "id": "717654b4-2348-4916-ab1a-66d82c288a9e",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "e2e32cf5-eab2-488d-8ece-578cfee61951",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cc9ec62-2ffd-4aef-91e1-ca6f89a79e63",
        "cursor": {
          "ref": "5a0b5daf-fd92-4f63-9f87-96e3fd651cbe",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "dab91855-9e45-44e0-9524-8512963058e4"
        },
        "item": {
          "id": "0cc9ec62-2ffd-4aef-91e1-ca6f89a79e63",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "22688082-222c-42d4-98b5-a3824666e333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "613de333-c24b-44d8-9174-9f85598d71c8",
        "cursor": {
          "ref": "064ff414-c6c8-4d34-bd9b-744d28f34b2a",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "cb4a08bd-0911-4c6d-904b-5ed6cb0b4089"
        },
        "item": {
          "id": "613de333-c24b-44d8-9174-9f85598d71c8",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "b4494bf6-88e1-4cb6-8689-0dfffbf4c983",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c584f19-5943-4754-993e-c67c3bbbfbef",
        "cursor": {
          "ref": "cdd11406-d7db-42a2-aac9-4903d06e6c1f",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "0b3326bf-f92f-4c8b-8522-92c0163e67b1"
        },
        "item": {
          "id": "5c584f19-5943-4754-993e-c67c3bbbfbef",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "06ea1ff0-2452-4098-8383-74ae2d556436",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbe27b71-d020-4339-94e8-7f57c4050765",
        "cursor": {
          "ref": "70cc2cd9-318e-4cd8-a4c3-0f8df01fe73c",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "cce1f58a-c4e4-4985-ac86-4351999b4cf0"
        },
        "item": {
          "id": "bbe27b71-d020-4339-94e8-7f57c4050765",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "08676fe1-3ea8-43ba-8700-e3c09fe9a9c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25408390-1feb-42cc-b5f6-51a0edd21d64",
        "cursor": {
          "ref": "1d05285b-2b72-414b-9b65-f548be36194e",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "d71e1f3a-ca59-4155-9fce-3e6ccb99d9e2"
        },
        "item": {
          "id": "25408390-1feb-42cc-b5f6-51a0edd21d64",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "623cfff0-7642-4fc8-9669-6d4e45d9fd40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1bbe844-3441-430b-a48a-38179d460a4b",
        "cursor": {
          "ref": "1827e079-e2b7-4c1e-b31c-80cd4aeab82a",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "2b623dc9-a4df-41f3-b38f-26d95d098cb2"
        },
        "item": {
          "id": "d1bbe844-3441-430b-a48a-38179d460a4b",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "8411f922-fe1d-424c-a275-5fee05891816",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "167cb600-dfea-4798-93ff-66cde3066be2",
        "cursor": {
          "ref": "9de2a6fd-7f13-45f3-9727-64d0d6cdfa63",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "844777a9-5445-45f0-ba35-95d3a57c05b3"
        },
        "item": {
          "id": "167cb600-dfea-4798-93ff-66cde3066be2",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "f285c04c-f786-487d-b48e-97bee39f5ac7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7928f96a-dbed-4569-af5b-0fb3e3f00817",
        "cursor": {
          "ref": "d423eb7a-3e15-40e4-9460-cb0573edbdb6",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "47238627-2b02-4429-9a61-55be223d3929"
        },
        "item": {
          "id": "7928f96a-dbed-4569-af5b-0fb3e3f00817",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "d0348c66-6e27-404b-bf6c-1872917b15b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea41081f-9d83-4da8-abf6-83ea5c02d6a4",
        "cursor": {
          "ref": "2482e02f-47e7-4ee8-956f-19d71968e442",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "e1237471-a739-4a63-aad2-536a50f7fba3"
        },
        "item": {
          "id": "ea41081f-9d83-4da8-abf6-83ea5c02d6a4",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "1b24ec71-d266-4510-9970-56b88d7313c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "357ea90a-4274-470b-b433-ba137e303062",
        "cursor": {
          "ref": "36eac1c1-79d7-4fb8-ba47-1b883731323e",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "7eb0baef-db2f-444c-9bcb-04534928308a"
        },
        "item": {
          "id": "357ea90a-4274-470b-b433-ba137e303062",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "5d2c0ae2-4a7a-44ae-9ce2-9432b1021224",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6a180f6-51ac-46d6-8093-6bd08092e2c4",
        "cursor": {
          "ref": "eef95bfb-f6da-4e89-a7e5-7bae648b572d",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "8626063f-26d3-4453-8f83-cddc330daead"
        },
        "item": {
          "id": "c6a180f6-51ac-46d6-8093-6bd08092e2c4",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "dde38674-d383-4dfd-9865-af8406c23d92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b01aaa53-d6e7-4d3b-9d8c-e80a48977008",
        "cursor": {
          "ref": "3aecdf3d-0d35-4256-b8ba-6813f873c337",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "c6ac39da-53d3-4a9a-8374-ea66f1b09d4e"
        },
        "item": {
          "id": "b01aaa53-d6e7-4d3b-9d8c-e80a48977008",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "f94ce3ca-e6a4-456a-a4a9-ea56ffc9cacf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fe74055-1506-4a4a-81d2-e19513e3c95d",
        "cursor": {
          "ref": "68591cbf-9df7-4fd7-ad67-180f37674ad7",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "c087e963-d3be-4ba6-be2f-b282cc21388a"
        },
        "item": {
          "id": "3fe74055-1506-4a4a-81d2-e19513e3c95d",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "2f4c88e4-0945-448e-a908-04c88a803195",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77a86832-3ced-4f23-9610-129265e76d74",
        "cursor": {
          "ref": "dfd4c36d-4913-45ea-b291-7d4819f61888",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "8ceb7e9e-58ed-4279-adb8-945ce8d08c35"
        },
        "item": {
          "id": "77a86832-3ced-4f23-9610-129265e76d74",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "ab9bd964-eaae-4403-8b7f-319d7356548f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "5bff1481-6bc1-4f01-a554-3af03f3b5f82",
        "cursor": {
          "ref": "d781e544-d952-48a2-b48c-9b37926b66bf",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "07542f5e-ba35-45c5-83d5-8406365e9bf3"
        },
        "item": {
          "id": "5bff1481-6bc1-4f01-a554-3af03f3b5f82",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "bddfc6db-906e-4d23-9229-ddc2ac833744",
          "status": "Created",
          "code": 201,
          "responseTime": 1896,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "e12214e2-1b9e-4721-8590-fea213f0e4b1",
        "cursor": {
          "ref": "973ce469-97b4-4546-a0ea-22b345a2f356",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "d88e9709-c404-460c-8be6-bc464e9141ff"
        },
        "item": {
          "id": "e12214e2-1b9e-4721-8590-fea213f0e4b1",
          "name": "credentials_issue"
        },
        "response": {
          "id": "3e0451db-5f62-44c1-a346-ede0430d70c0",
          "status": "Created",
          "code": 201,
          "responseTime": 2405,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4b13538-8939-49fe-977f-1a65de576783",
        "cursor": {
          "ref": "360b3376-b2f8-4253-8ccf-e0651e9c945c",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "9132ba91-980f-4abf-b472-f3f98cf0942f"
        },
        "item": {
          "id": "f4b13538-8939-49fe-977f-1a65de576783",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "4a8e59fb-3417-41ad-ab24-ea515108a799",
          "status": "Created",
          "code": 201,
          "responseTime": 2509,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f91d2093-248b-421f-a722-ab36cd08d1cf",
        "cursor": {
          "ref": "8741f5c9-3a4b-4e16-954d-f5c88ce8520e",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "4c2193f1-dbf3-4778-9462-4b921619c88a"
        },
        "item": {
          "id": "f91d2093-248b-421f-a722-ab36cd08d1cf",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "06e332a9-66ec-447c-8779-3f9a5449474e",
          "status": "Created",
          "code": 201,
          "responseTime": 2279,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "772c185e-11a0-4729-81aa-6596e1e6f0a8",
        "cursor": {
          "ref": "887bb1fc-3f80-430c-b747-d2fdb309419d",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "92415598-7fb5-4809-988a-0a9b92414c39"
        },
        "item": {
          "id": "772c185e-11a0-4729-81aa-6596e1e6f0a8",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "94317855-3f8b-4483-84d1-ecffbc6c3ad7",
          "status": "Created",
          "code": 201,
          "responseTime": 2244,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "850a6e85-d0eb-44f4-9f6a-14d545ebd278",
        "cursor": {
          "ref": "7da5fde4-cc4f-470b-82c4-6c73c47269a1",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "ee04372f-c457-4956-93b8-eb6d87e4dbc1"
        },
        "item": {
          "id": "850a6e85-d0eb-44f4-9f6a-14d545ebd278",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "b628e249-2311-4afe-b281-bda5bf63cfc6",
          "status": "Created",
          "code": 201,
          "responseTime": 2317,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-04-28T00:39:13Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-04-28T00:39:13Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "f2649bef-8341-49cd-99ee-280d33c20c64",
        "cursor": {
          "ref": "0afd5d76-069e-4aa2-8314-d0bb969a2662",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "2d9887a2-7855-45c3-8192-ae5cd1006d91"
        },
        "item": {
          "id": "f2649bef-8341-49cd-99ee-280d33c20c64",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "483bcc12-165b-4d40-aafa-2365cd4cfe76",
          "status": "Created",
          "code": 201,
          "responseTime": 2402,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06ed8bca-2980-4d54-909d-6a6382f548b9",
        "cursor": {
          "ref": "4297c806-a66a-41ee-98e7-d1539ca08fce",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "5f74d307-2a05-4c37-a248-04be8611e08a"
        },
        "item": {
          "id": "06ed8bca-2980-4d54-909d-6a6382f548b9",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "9a5470cf-f131-44d0-b12b-f2193cfd09fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06ed8bca-2980-4d54-909d-6a6382f548b9",
        "cursor": {
          "ref": "4297c806-a66a-41ee-98e7-d1539ca08fce",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "5f74d307-2a05-4c37-a248-04be8611e08a"
        },
        "item": {
          "id": "06ed8bca-2980-4d54-909d-6a6382f548b9",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "9a5470cf-f131-44d0-b12b-f2193cfd09fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16585e6b-3527-457a-9b43-aa27585924bc",
        "cursor": {
          "ref": "a04a7b51-9a8c-44f7-8e66-2b1a29d5a225",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "4c22f0c8-d9db-4fb0-a6ff-8d8da28bdf4e"
        },
        "item": {
          "id": "16585e6b-3527-457a-9b43-aa27585924bc",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f26df7a8-2de8-4343-9312-1b2751b7dcae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e199ecbc-49ca-4cb7-9b0d-c63778b0b5ca",
        "cursor": {
          "ref": "83bbd7a4-ad29-4215-96a2-03ab1f654543",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "ec1ea734-d66e-40ef-b508-bcdd8a51a80f"
        },
        "item": {
          "id": "e199ecbc-49ca-4cb7-9b0d-c63778b0b5ca",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "3c362cf3-279e-4754-9259-fed756b3d8b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df2fbfdf-d507-4127-800a-a5b2e458f4ee",
        "cursor": {
          "ref": "c3931cb6-9f70-463e-a053-8610eef910b2",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "88166ffa-94a3-40ff-9a71-7441c1145eb0"
        },
        "item": {
          "id": "df2fbfdf-d507-4127-800a-a5b2e458f4ee",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "dddead38-1963-49f4-bc13-51e46b8e3089",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "014f39d6-0506-40a9-b3aa-4686eb670f2f",
        "cursor": {
          "ref": "808d2758-4717-46a9-9487-afe58128adab",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "94fbfe1c-a466-4ac1-860d-e01cd6ddfa40"
        },
        "item": {
          "id": "014f39d6-0506-40a9-b3aa-4686eb670f2f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "30eba2a3-181d-4375-bdeb-6e89fac0106c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 164,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f068db8-0a38-4de7-bcd0-793f1527a7c4",
        "cursor": {
          "ref": "4ddc3243-a626-488e-b191-f42d52ef2c8a",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "37613b3a-8724-41ba-9f24-ec6147092eff"
        },
        "item": {
          "id": "0f068db8-0a38-4de7-bcd0-793f1527a7c4",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "45b792b0-73ff-4744-9789-5ecc7088eb6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0a6341c-0167-4ff9-b27f-1b35b7f96c40",
        "cursor": {
          "ref": "fd602748-848d-4941-9c80-6dee6b051487",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "06297245-5e0f-44f0-8bf9-bccf42b58fc1"
        },
        "item": {
          "id": "f0a6341c-0167-4ff9-b27f-1b35b7f96c40",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f248a8c3-5b70-454c-8822-057b83adebef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c2e79ea-26ff-4745-bd7e-3a5f50d60e34",
        "cursor": {
          "ref": "89b61bbe-b116-40a5-a366-31f00e836b4b",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "b0934894-60bd-4d57-939a-02b7021f81c4"
        },
        "item": {
          "id": "0c2e79ea-26ff-4745-bd7e-3a5f50d60e34",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e4b7733d-b5a1-4143-839b-c4be9edc1816",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca5a982c-9d90-4516-a881-53048fe83f75",
        "cursor": {
          "ref": "eed0ed1f-14a0-4e01-9a7f-0958ae7bece9",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "8ef857f8-9ac3-4fc4-96df-1f3a963dfea5"
        },
        "item": {
          "id": "ca5a982c-9d90-4516-a881-53048fe83f75",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b8f170fe-1fe8-46d8-9081-20aaf68f2ea1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a266514-b0d9-40d6-8ef8-524c72a60366",
        "cursor": {
          "ref": "992f8a83-c3ac-4f54-b13d-e67e6bb50313",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "eb32fad7-d04b-44b2-ba20-f835c2c5a76f"
        },
        "item": {
          "id": "3a266514-b0d9-40d6-8ef8-524c72a60366",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c8523f8c-57be-4f47-97e6-0daafcbfce9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d4bfecd-50a5-45f8-bce4-f5b5f2bc977f",
        "cursor": {
          "ref": "dcb333b4-b468-4b45-ba99-970aabbdd233",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "510d5235-d74e-4875-8cda-6a67cccaf5ad"
        },
        "item": {
          "id": "9d4bfecd-50a5-45f8-bce4-f5b5f2bc977f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "39bca6b2-0c8c-4473-bb34-1f60f1448426",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "736fc478-725f-43fc-9036-04ba18a1b400",
        "cursor": {
          "ref": "db916cfd-f6cc-4a69-8be2-e2800c207c89",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "19f495bb-e708-4b9d-9465-afe980d1fb2d"
        },
        "item": {
          "id": "736fc478-725f-43fc-9036-04ba18a1b400",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "ce167af4-2bd7-46ca-a722-f9321453c30d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23faded7-f941-4282-a530-f510353cb7ef",
        "cursor": {
          "ref": "c67b5000-cf75-4965-bcdb-ed52fa106d72",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "bb59d73c-0f31-49b3-926e-2c657a173fc6"
        },
        "item": {
          "id": "23faded7-f941-4282-a530-f510353cb7ef",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "a5be4932-b653-4086-84ab-d0cee98da76c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6559f865-1edf-4010-9448-161a0ccfbf88",
        "cursor": {
          "ref": "afef5c4a-2d76-4722-a7fd-8f82a0c74fa4",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "4f7698db-3f36-4d45-bc2c-b5b53690c166"
        },
        "item": {
          "id": "6559f865-1edf-4010-9448-161a0ccfbf88",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ac1648fe-214b-40e0-bd4c-0e0c5ab4c856",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d8d8ec7-0be2-415d-9a03-b7fa2092f0ee",
        "cursor": {
          "ref": "ed116b02-f82e-4c12-9057-990626ab51b3",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "757843c1-f210-40df-a646-25874c0a0eef"
        },
        "item": {
          "id": "1d8d8ec7-0be2-415d-9a03-b7fa2092f0ee",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "8a175c48-d65e-403f-a263-0d6787e39ada",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c66d6a82-8fa6-4678-8e89-73ef019df595",
        "cursor": {
          "ref": "229be58c-8eea-4a4a-8228-b11cfaa3109c",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "2ad43a6f-cb59-46ba-8fac-d74de40c29ea"
        },
        "item": {
          "id": "c66d6a82-8fa6-4678-8e89-73ef019df595",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "7bb348dc-712c-4a38-bb36-fac1b370758b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe73f832-c8c3-476c-85fd-4dc5a53afc1b",
        "cursor": {
          "ref": "ea043f40-2017-45b6-aa5f-1dbd8d96fe88",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "29ad4bce-1000-4a77-be18-3d998e6d5746"
        },
        "item": {
          "id": "fe73f832-c8c3-476c-85fd-4dc5a53afc1b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "8a54d75b-8a80-43c6-a6b5-519dcfd23d2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "770edf58-9eb3-442a-a632-803d90d64914",
        "cursor": {
          "ref": "4aab8d0f-68c6-42a9-abfd-fa622b215e12",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "2a784116-e0ef-4d6d-a4af-4f6334466ed9"
        },
        "item": {
          "id": "770edf58-9eb3-442a-a632-803d90d64914",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "414f10be-1f69-465f-bc69-a6dd0dc5b816",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cb5931a-703b-4884-82ca-e4597f299878",
        "cursor": {
          "ref": "b3ada459-264e-48f8-9678-4834ff1f2a47",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "67e42865-a307-4b25-9dce-3a0a0d012233"
        },
        "item": {
          "id": "4cb5931a-703b-4884-82ca-e4597f299878",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "90040b38-599d-471f-8799-97e0d0752bf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce6e1aa8-6b08-4a72-abb1-fa417c67149e",
        "cursor": {
          "ref": "7386e9de-a3d8-4159-85a3-0e50a62f8a8f",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "6e638209-39c4-4a2d-b608-998e8533ec2c"
        },
        "item": {
          "id": "ce6e1aa8-6b08-4a72-abb1-fa417c67149e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "38aac4a6-7aad-45a6-afa0-6d44059cb335",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ca2c21b-2b2f-4305-96c0-e63f06d38e61",
        "cursor": {
          "ref": "e82a36a6-bcc3-4d82-96e6-aa14f8f6e4a9",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "de3cdef2-fa96-4c5d-972d-d0f12f318b83"
        },
        "item": {
          "id": "2ca2c21b-2b2f-4305-96c0-e63f06d38e61",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "58eb955d-67f7-451f-af72-ea4a4b791965",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89ca6917-87ae-4d25-b470-92bcd8b649e7",
        "cursor": {
          "ref": "a5e2578b-0a02-4218-9ba2-9e5b2877a524",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "28f1d141-4784-4230-bb47-6618acf83ae9"
        },
        "item": {
          "id": "89ca6917-87ae-4d25-b470-92bcd8b649e7",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "bdbed350-0c09-44db-87dd-555430fca3ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a13736d-53fc-4b8f-a15e-2a5f0f0d5a66",
        "cursor": {
          "ref": "fd2e7c07-e1c7-450a-9bb4-00fb9bb07363",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "330000aa-8f58-4195-bffd-ce7734756ac3"
        },
        "item": {
          "id": "3a13736d-53fc-4b8f-a15e-2a5f0f0d5a66",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "26cb4ea0-d14e-4c51-b299-d9ea97bd3749",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a84057d3-1528-4804-a2d8-9ffeec59fcdc",
        "cursor": {
          "ref": "37d4aff1-8799-4856-ba64-4ebe6f4ae514",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "4a9e7a78-52e1-416e-ad06-5bca75833888"
        },
        "item": {
          "id": "a84057d3-1528-4804-a2d8-9ffeec59fcdc",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "165609b8-cd2c-459c-a8c2-5d41cd996404",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 131,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9be88619-9de7-46e8-b477-3f052b99bdd3",
        "cursor": {
          "ref": "bfd81db7-9e94-4e3d-b01d-1f05a9c63dbb",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "72c51f5d-7492-4c9f-854b-4e174d2808b5"
        },
        "item": {
          "id": "9be88619-9de7-46e8-b477-3f052b99bdd3",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "5beed72f-4d4d-4b82-b305-1ae102e636ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a9516ce-938a-420f-a1e0-5a3ccd09e4c4",
        "cursor": {
          "ref": "112ce5cb-1907-45a8-b6a2-f64476817f4f",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "57d02371-4fe9-4fac-893e-9aeb432eac07"
        },
        "item": {
          "id": "8a9516ce-938a-420f-a1e0-5a3ccd09e4c4",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b5c833aa-9088-4e65-8e87-d3f6611af08c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7126026e-2eee-4f59-a5bb-568c7bd9bfc0",
        "cursor": {
          "ref": "f64f2f24-6213-4166-80dc-bd2301cd64d8",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "91b6e72e-7e52-47e8-8aa1-8896509c3523"
        },
        "item": {
          "id": "7126026e-2eee-4f59-a5bb-568c7bd9bfc0",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "71d864f6-b34b-45d6-a8cf-0b6788e21acf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57ba8efa-5fab-41da-ae2b-c3be791fc3ec",
        "cursor": {
          "ref": "02b4b017-2603-4132-86c4-c7353768788e",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "efc1dbde-9fc5-4b7a-a50e-c75f941ee5fa"
        },
        "item": {
          "id": "57ba8efa-5fab-41da-ae2b-c3be791fc3ec",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c7c81da4-a19a-44eb-8db8-291513240c70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4c6f26c-bda7-4769-9f32-9cb715619a45",
        "cursor": {
          "ref": "ee59b010-8235-47b6-834c-871fee630197",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "c95502ff-56c1-475c-8ce1-48d378eccdb1"
        },
        "item": {
          "id": "d4c6f26c-bda7-4769-9f32-9cb715619a45",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "16f9bda7-19e6-4ef2-9800-fd34ebfc47ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "762c607e-c7c2-4c32-99e7-95b97ca8558f",
        "cursor": {
          "ref": "06ac051c-ef27-4cba-a197-3da09f289f86",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "4f457d1b-e725-4e5e-a17c-4c11ff6fd9a1"
        },
        "item": {
          "id": "762c607e-c7c2-4c32-99e7-95b97ca8558f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "5c2f2004-2f42-4ac7-b601-328bcfc7365d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d4c9c25-03b1-4d91-8444-352e23679bfd",
        "cursor": {
          "ref": "19e02eb8-70f6-45bd-8992-aa71345bfd15",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "9b3c12f2-173a-4614-8adf-db2d99e364ad"
        },
        "item": {
          "id": "0d4c9c25-03b1-4d91-8444-352e23679bfd",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "5787d085-1a66-49da-a42c-0e773a56d142",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fd5d00e-aa92-44a6-b796-7b72d7b71792",
        "cursor": {
          "ref": "b3b0e036-5280-4ef4-a4da-5b33f69e8c5f",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "f2ef60a5-bff6-4cce-af2a-0c4e7bbddd53"
        },
        "item": {
          "id": "5fd5d00e-aa92-44a6-b796-7b72d7b71792",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "f904794c-3199-48d4-8aae-e18ac1492c1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba21f482-416c-41d1-829c-0c06cddb9826",
        "cursor": {
          "ref": "ebb4dfba-7d40-4431-8227-d045c742844b",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "158f4d7f-184f-44de-8c3d-f67d199fdb3d"
        },
        "item": {
          "id": "ba21f482-416c-41d1-829c-0c06cddb9826",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "46e25ecf-88fd-4460-9b19-2af92a997a2f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 40,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "3a158624-12da-4ea0-9ae1-f6397d3d181a",
        "cursor": {
          "ref": "9cede652-be65-41e4-8a05-04acac426bfd",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "66a57188-4ec7-4ddc-bee4-67b9432a225e"
        },
        "item": {
          "id": "3a158624-12da-4ea0-9ae1-f6397d3d181a",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "d31e2b5f-d006-47d3-9fc1-3dc619aef8d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "b5a4fafb-956f-404f-ad02-9c14205e0f5d",
        "cursor": {
          "ref": "942547dd-9d08-40a7-ac21-4c4d3529d452",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "2044df1d-c445-4f39-b789-c0ff98e82389"
        },
        "item": {
          "id": "b5a4fafb-956f-404f-ad02-9c14205e0f5d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "0343b937-042e-46ae-afc9-b90c983d4cd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5a4fafb-956f-404f-ad02-9c14205e0f5d",
        "cursor": {
          "ref": "942547dd-9d08-40a7-ac21-4c4d3529d452",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "2044df1d-c445-4f39-b789-c0ff98e82389"
        },
        "item": {
          "id": "b5a4fafb-956f-404f-ad02-9c14205e0f5d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "0343b937-042e-46ae-afc9-b90c983d4cd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a02f93e9-d508-4ec1-8f22-61bb6e530b03",
        "cursor": {
          "ref": "01499600-9cd3-4b1a-bbf5-c53b144469d1",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "7b13681f-5e68-421c-9748-3a13b88556df"
        },
        "item": {
          "id": "a02f93e9-d508-4ec1-8f22-61bb6e530b03",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "4cf251bc-5575-443f-ad41-19e3659a2d7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4827594-da2e-4a45-aeee-addc56168853",
        "cursor": {
          "ref": "329b766e-ccf3-4f4b-b0b9-73dd0250c492",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "234d6a2d-b836-4663-918d-54eca36b6a85"
        },
        "item": {
          "id": "a4827594-da2e-4a45-aeee-addc56168853",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "79f36d4f-e435-4b53-8708-6e63ee1c4cc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b00c021-fe94-4571-9d80-633020d91bac",
        "cursor": {
          "ref": "d6d8a94b-f3ba-46f4-8847-18e6862d65e0",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "96743b97-0978-400f-a37b-c03edbdeed94"
        },
        "item": {
          "id": "0b00c021-fe94-4571-9d80-633020d91bac",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "0460851f-b030-4955-8918-976c9d5c4cee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46149261-b9ac-4569-9783-9a9b191a6e3c",
        "cursor": {
          "ref": "b2d1501f-8d49-41c5-a7d8-a0805cbf43d7",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "100096ed-2e1b-4000-97cf-dbf33744d91b"
        },
        "item": {
          "id": "46149261-b9ac-4569-9783-9a9b191a6e3c",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "372ca5fd-e611-450a-834c-995a4c8fc307",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c47fb15-6a7e-4c0c-bd57-c4fecca12642",
        "cursor": {
          "ref": "ba64e563-1422-4cee-a886-d7d81c7a35be",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "d633c5b9-ed66-4d5e-aaae-bef2b5e9e06e"
        },
        "item": {
          "id": "7c47fb15-6a7e-4c0c-bd57-c4fecca12642",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "f3aca5dc-2978-4998-9a75-8ec5f3040df7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cec60a1-08ce-4c2a-a714-a9d693fb6da7",
        "cursor": {
          "ref": "c5d9a123-64e3-462f-9c8b-acf692162113",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "1318737f-136f-44e9-8685-ca68bfa91b0e"
        },
        "item": {
          "id": "2cec60a1-08ce-4c2a-a714-a9d693fb6da7",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "71750e48-765f-4504-a696-6c995f89c073",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6de0dac7-da75-493d-bca7-e2fdd08eeb34",
        "cursor": {
          "ref": "0b76b4a8-b53a-410f-a8f5-70936ec3f9e3",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "91b3c3a4-983a-41d8-9a68-feca71336f8d"
        },
        "item": {
          "id": "6de0dac7-da75-493d-bca7-e2fdd08eeb34",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "19d06ab9-7e1a-4e16-9d87-094058d9e30b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30fc8c5b-f0a0-4a6b-877a-124b7d5a2900",
        "cursor": {
          "ref": "dc324193-bfd1-4ed6-9850-e341e44f1aab",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "8aa975b0-2128-431a-84b1-eb6de38e3264"
        },
        "item": {
          "id": "30fc8c5b-f0a0-4a6b-877a-124b7d5a2900",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "ddbf731f-5eb8-49b0-8511-4196684494a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "081e189d-09f4-4db0-aadc-136592a7e3ee",
        "cursor": {
          "ref": "0c699285-c02c-41f5-8d4e-6fdc7fac0189",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "7cc2030f-43a7-400b-b960-9864af300470"
        },
        "item": {
          "id": "081e189d-09f4-4db0-aadc-136592a7e3ee",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "c019623f-fb00-4b37-a16c-1938267af9d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95bf2b90-cac9-48fb-8a2a-00c589543f91",
        "cursor": {
          "ref": "e0eaae53-bc84-455a-82bd-7e61dc122c8a",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "2e2fd970-815e-4fd0-94c2-c30446b37a94"
        },
        "item": {
          "id": "95bf2b90-cac9-48fb-8a2a-00c589543f91",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "c5d3b8ab-faed-465a-9406-0d27266a6da3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54a7fdc3-d568-4c9e-9cdd-798631ff73af",
        "cursor": {
          "ref": "c22a61e8-6417-4ce8-bd2e-9f7869d9feab",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "87242020-441f-44f5-bbf4-5f1657e0685d"
        },
        "item": {
          "id": "54a7fdc3-d568-4c9e-9cdd-798631ff73af",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "b1fa166d-319e-4ee1-ba0c-c1a06add4ab7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ab1958c-3680-4fee-93ed-70f3c5aaae85",
        "cursor": {
          "ref": "d4d9e467-394b-4fb1-83b4-a92a0728597f",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "bd952677-e4c7-4470-850f-88a6e3c5b8d7"
        },
        "item": {
          "id": "7ab1958c-3680-4fee-93ed-70f3c5aaae85",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "eb17a2fe-9dad-4433-bfb1-0e5eb0941c89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef108433-c030-43fc-a4f7-5641f1f899bc",
        "cursor": {
          "ref": "24a8d7af-305b-4d56-b2dc-a44fe0083980",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "7c8d5a3b-02f3-466a-8529-c9e3d77e61f3"
        },
        "item": {
          "id": "ef108433-c030-43fc-a4f7-5641f1f899bc",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "5b5350f4-afa8-4d4c-b4ee-fd3561aa3062",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec444836-a5d0-4394-879c-eed8f198b70f",
        "cursor": {
          "ref": "fbd9bd36-ea06-424d-9ee1-d44b983b4f05",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "694a113a-d2b1-46bb-860d-96b2e4893a8f"
        },
        "item": {
          "id": "ec444836-a5d0-4394-879c-eed8f198b70f",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "9779a2af-f784-48ce-aa54-ffa7ede52eb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 147,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ddf09ac-5db8-4e62-af82-2eb6b9967e8f",
        "cursor": {
          "ref": "87a3c8e9-8886-43ba-8f70-d4b140beb643",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "43f717f4-5067-4b61-8136-d5724707a602"
        },
        "item": {
          "id": "5ddf09ac-5db8-4e62-af82-2eb6b9967e8f",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "403f93e1-6691-4a7c-8cb8-54f62f14a71c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d1ce56c-7cd3-45ca-85c7-208a0572b780",
        "cursor": {
          "ref": "28e9a221-8f9e-4fd6-a60c-257830becb8f",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "f35aece2-a155-45e4-b4aa-18a80b5971bb"
        },
        "item": {
          "id": "5d1ce56c-7cd3-45ca-85c7-208a0572b780",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "2bc5e8fb-1737-42c5-a6c3-2d1159c14d50",
          "status": "OK",
          "code": 200,
          "responseTime": 222,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "62f4211b-e7a6-4c6b-9340-f84fd66c1df3",
        "cursor": {
          "ref": "6f8e18dd-4ef1-4d87-91b0-12a3e97df5d4",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "2de85d7a-3098-4f66-a8a5-b7cf60d6ac6d"
        },
        "item": {
          "id": "62f4211b-e7a6-4c6b-9340-f84fd66c1df3",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "a8f4dc82-4bdc-4409-9b7e-776c663807c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d262ec4-9986-44b4-bb53-ae3a06758258",
        "cursor": {
          "ref": "177be750-3c0b-45bc-90b9-023ffb503807",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "1ae73d0b-bcc8-4418-83d5-566db9ce1106"
        },
        "item": {
          "id": "2d262ec4-9986-44b4-bb53-ae3a06758258",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "1934d854-8f54-4bc6-b5f4-fa9157d59232",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "527e7988-53ce-4b71-875a-7c40dcad78b4",
        "cursor": {
          "ref": "8bb234dc-efc7-466a-a3f4-9ffd578f5919",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "da613f67-168a-43f5-b418-dc6d3e95384c"
        },
        "item": {
          "id": "527e7988-53ce-4b71-875a-7c40dcad78b4",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "109e738f-8b3d-4f2d-85f7-1a4026370d04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f443189b-765c-41cd-9e2a-34a21c90acab",
        "cursor": {
          "ref": "2df416c0-8d1b-4531-9439-70f604cc48e4",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "44f537de-2bb0-4146-bd04-3995a28a3844"
        },
        "item": {
          "id": "f443189b-765c-41cd-9e2a-34a21c90acab",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "c1ab4051-d559-4d72-83ed-569817edd756",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa2e20de-9b0d-43a1-aef4-c5ab0c587753",
        "cursor": {
          "ref": "3388955c-b5ae-4dd5-b34b-4def8a030883",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "b10d3ef6-99a3-4be8-bb16-214ecc3af623"
        },
        "item": {
          "id": "fa2e20de-9b0d-43a1-aef4-c5ab0c587753",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "8e2d3ca5-bb9d-4947-a533-9e50cbf59eba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b34765ed-3ac6-498e-98de-a59e8c211c66",
        "cursor": {
          "ref": "81954326-739c-4c66-851f-2194d23fcf12",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "66d8dc34-32d6-4f7c-a207-df79b06ddc53"
        },
        "item": {
          "id": "b34765ed-3ac6-498e-98de-a59e8c211c66",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "9e39867d-80bd-4dc4-847f-c5c265c4f6cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06482f11-7ded-4a55-890c-2832d26142e7",
        "cursor": {
          "ref": "6a9bdb8a-2505-4d1f-8406-58d6c05103c4",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "36ac79f2-6116-44dd-b02f-76086aa12e74"
        },
        "item": {
          "id": "06482f11-7ded-4a55-890c-2832d26142e7",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "481bc206-28ac-401d-a7a8-d966b444b368",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "257264b9-bbd9-4558-bfa3-48fa4cc256b2",
        "cursor": {
          "ref": "904a3207-c73b-469d-9951-dc9fb6ecee82",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "81450f9a-3297-4c4d-a296-7d01aba3bbd6"
        },
        "item": {
          "id": "257264b9-bbd9-4558-bfa3-48fa4cc256b2",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "f074528f-2db2-478e-bc42-b12288fb7de0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5a9c1c1-7a9c-4cf9-9af1-4b2eeb5cc1a8",
        "cursor": {
          "ref": "a353df3a-62c1-4191-9127-1602d20881d6",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "41382117-898f-434d-87d0-9ecaf093d28b"
        },
        "item": {
          "id": "f5a9c1c1-7a9c-4cf9-9af1-4b2eeb5cc1a8",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "aaf00cba-11cf-44f9-a692-fa5177ef3042",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95a70038-5e1b-41d1-ba13-8baaeaa93aaa",
        "cursor": {
          "ref": "40c1d0fd-5b3e-4748-a927-a43bca99de2b",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "77b98c64-7eb8-4d1d-a645-1b48d939466f"
        },
        "item": {
          "id": "95a70038-5e1b-41d1-ba13-8baaeaa93aaa",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "e103e9fd-c289-4269-aa3f-bb448571c322",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2114f36a-1f83-4cf1-b7dc-2477b8df28c8",
        "cursor": {
          "ref": "a5e6a7ae-1d07-44c2-a1ec-d8b8477a07b1",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "3f6944bd-2414-49b8-92dd-66fb645175e0"
        },
        "item": {
          "id": "2114f36a-1f83-4cf1-b7dc-2477b8df28c8",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "152ed85c-e11f-4dff-b233-6b8f332508a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fe69b93-c086-4928-acee-488fb0d9b115",
        "cursor": {
          "ref": "e8d84c77-e931-4fd1-9ec1-9aa93fc134e0",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "8f1173b4-96a4-468a-9be2-22156d2e51d2"
        },
        "item": {
          "id": "9fe69b93-c086-4928-acee-488fb0d9b115",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "9ed81184-5a38-4b39-a57e-e73c7c7f1a44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63cb0e89-5cd6-471e-87f6-c897553222b1",
        "cursor": {
          "ref": "716fd235-a327-45ab-b962-693cea5574cb",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "a3bdc11c-e3c2-4da3-add4-dbbd5b2da1e8"
        },
        "item": {
          "id": "63cb0e89-5cd6-471e-87f6-c897553222b1",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "d3d0a88f-e69b-458b-828e-26f4b6071a0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ab7bd11-f339-4835-af41-29b7bababfb6",
        "cursor": {
          "ref": "df60e5c8-35c6-4533-9dbd-9c50e462bff6",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "d3fd3f24-2c6f-4ec2-9a4b-af04ce9402be"
        },
        "item": {
          "id": "5ab7bd11-f339-4835-af41-29b7bababfb6",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "49cf4a65-91a1-47c7-a85c-64ba0d8eb795",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95139a12-af86-438f-aa59-3601d5b5a216",
        "cursor": {
          "ref": "72c08f79-1445-4b7b-b346-98b5fba8d8e2",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "d5ff7885-0a58-408f-8175-1db6af6a81cf"
        },
        "item": {
          "id": "95139a12-af86-438f-aa59-3601d5b5a216",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "3cec9901-074e-43d4-8569-15ce621af321",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afd93619-a0b6-4c3c-858b-14c9662d237b",
        "cursor": {
          "ref": "6f3d4788-325d-4b33-b316-3578b1fbc2ba",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "6e90d1c7-0a4d-403d-a231-e60a1cacfd2b"
        },
        "item": {
          "id": "afd93619-a0b6-4c3c-858b-14c9662d237b",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "a90eea88-33f8-4293-b826-fc0104b77c69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e558e1ce-c1bc-4ff5-80f0-d18746705380",
        "cursor": {
          "ref": "fe680d15-eb26-4f39-b725-73b50d0abb93",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "f080c43f-f559-41db-92e2-1c9d99383595"
        },
        "item": {
          "id": "e558e1ce-c1bc-4ff5-80f0-d18746705380",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "2807097c-6529-4b2f-96c2-47fb7bb7177b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f1fc743-2804-42a1-a1e8-71e78a4617db",
        "cursor": {
          "ref": "94d8e0e0-219e-4d4e-9b5a-4a4042f58e26",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "b19bcf31-f7f0-4284-a17a-dfe210784500"
        },
        "item": {
          "id": "2f1fc743-2804-42a1-a1e8-71e78a4617db",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "435802ed-733b-4c60-bc63-59075e501092",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6b27c96-1b6b-400f-9732-52143eb3fe9f",
        "cursor": {
          "ref": "026f034d-0f00-4361-b109-8ea5e5a79602",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "0838059e-f818-4707-9a7f-72824780c296"
        },
        "item": {
          "id": "b6b27c96-1b6b-400f-9732-52143eb3fe9f",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "a62bea05-200f-45c8-87cb-2138f0aa986b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10e34d38-b47d-4468-a11b-7ad8b5a00145",
        "cursor": {
          "ref": "4eba0a16-4d52-4560-9f02-447a87294684",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "0a36db9c-78a3-4b1f-8c65-d4ae61b02260"
        },
        "item": {
          "id": "10e34d38-b47d-4468-a11b-7ad8b5a00145",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "90a6c6f0-5ebd-45cb-bfd1-211395a6d312",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1694e77-48b9-496f-acb0-11d5180f16ff",
        "cursor": {
          "ref": "2b915cc6-cc1e-4cd1-b4a0-0798ca0b1a0c",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "a0dd9ece-0e1a-47c9-b62f-05f12899eaed"
        },
        "item": {
          "id": "a1694e77-48b9-496f-acb0-11d5180f16ff",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "a56e995c-c477-4c7f-9266-2543c3588054",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dc82464-96fb-40bd-8c50-c99def4f224f",
        "cursor": {
          "ref": "68413aa6-ccf4-4894-8283-172e8b196c4d",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "0e88f8d0-6f2f-4663-a336-926ff3fa1369"
        },
        "item": {
          "id": "9dc82464-96fb-40bd-8c50-c99def4f224f",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "db2b3d8f-a89d-4614-83c4-7dfe67681456",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44ca2d43-fd98-4b65-9e30-462539871f60",
        "cursor": {
          "ref": "f4319d89-3b4a-482c-b80f-80f41f033474",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "97fdc7da-e8a9-4ca6-92c5-4bc021ad4118"
        },
        "item": {
          "id": "44ca2d43-fd98-4b65-9e30-462539871f60",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "44cefef7-84f2-42ec-899d-4edf72b53b5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22a91e3b-59ce-4632-baa3-405a95b3b239",
        "cursor": {
          "ref": "97c38638-8a41-4464-8377-20dfb6d373de",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "3cba54a2-b89c-4986-8587-9046dc16901f"
        },
        "item": {
          "id": "22a91e3b-59ce-4632-baa3-405a95b3b239",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "be9cfc05-266f-4533-abd9-17226e9adc11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8580258e-4f0f-49c4-a50b-95cdc58e5770",
        "cursor": {
          "ref": "37f8219f-122b-4129-966a-7a20e7e1760d",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "0f1f5943-364c-45fd-ab04-8c268785d9f7"
        },
        "item": {
          "id": "8580258e-4f0f-49c4-a50b-95cdc58e5770",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "ea0960b9-e338-484f-b827-4edb38c055de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc0e41a9-a465-45ac-af00-1ac196f916cf",
        "cursor": {
          "ref": "d0266998-4103-467c-bac1-8f3be034d2f4",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "a53c06d0-45ff-4400-92b6-f0882d630351"
        },
        "item": {
          "id": "dc0e41a9-a465-45ac-af00-1ac196f916cf",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "9b2492f7-8d4a-4024-b8dc-f6758e8dfd1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8434a9d3-a03b-4ef9-88ef-488d359d5441",
        "cursor": {
          "ref": "371ef6f6-e4f2-499b-9d23-be35b9b363a9",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "6c91c6dd-4a34-4980-9b5c-22d86ce31bfc"
        },
        "item": {
          "id": "8434a9d3-a03b-4ef9-88ef-488d359d5441",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "0514da3f-7134-40b9-bbab-ae80d8af4706",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77f8b6ec-10e6-4322-be13-e4657d2a43d6",
        "cursor": {
          "ref": "2119d3e1-8252-4513-9503-4cd83a7f66a8",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "84df33cf-d933-46f0-a7d8-b382d3b1467d"
        },
        "item": {
          "id": "77f8b6ec-10e6-4322-be13-e4657d2a43d6",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "daa7b1f9-7d33-460c-9b5a-59ef498dac49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29ed3fea-38f0-4781-be38-4527fff7fdca",
        "cursor": {
          "ref": "a94ce73d-7a92-43aa-8b27-e9023222b676",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "c5b782d8-6f36-444f-a99e-4d20c61a3eaa"
        },
        "item": {
          "id": "29ed3fea-38f0-4781-be38-4527fff7fdca",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "0ec0c176-6ddc-42b3-b555-2b2c8af07242",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc9b4886-568d-400e-a79c-c77a94095f2c",
        "cursor": {
          "ref": "c1a2d317-79ac-4c0c-addc-e0be504bb2e8",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "d7be8528-bbf2-41cb-96e5-b4d0cc837751"
        },
        "item": {
          "id": "dc9b4886-568d-400e-a79c-c77a94095f2c",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "fb3299b6-8163-403b-9909-d6cab6ae0d04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad203674-04c3-4f94-9a27-9cf769ba0d76",
        "cursor": {
          "ref": "393ff961-9d72-4312-818b-085abd058af8",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "19fa96e4-9d2b-457a-8fdd-64bbd13ead94"
        },
        "item": {
          "id": "ad203674-04c3-4f94-9a27-9cf769ba0d76",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "36d360cf-d82f-4d05-8633-7e35f09f8139",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36c27e84-2431-4b91-b55d-855c29449822",
        "cursor": {
          "ref": "21b24f58-85c7-4d31-b9ae-743038f58295",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "d58a44c8-3ee5-4061-9aba-c7b8fe7f1251"
        },
        "item": {
          "id": "36c27e84-2431-4b91-b55d-855c29449822",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "95002e57-fe37-4407-826d-36f970ab4136",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c091027-f473-45de-9f67-6b31920ce407",
        "cursor": {
          "ref": "3e100e25-e595-4cff-820c-6b30e665b0fa",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "be7205fa-0499-4844-81fd-3445afc2c709"
        },
        "item": {
          "id": "8c091027-f473-45de-9f67-6b31920ce407",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "5545f5a3-e1cc-49b8-9c1b-381488c069d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07aa46c6-0370-4791-b160-1d8edd992ccc",
        "cursor": {
          "ref": "920f4cf4-0c2d-4525-a3ed-b3e207100d37",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "452f6f08-5cb2-420d-9fe7-8654d93948da"
        },
        "item": {
          "id": "07aa46c6-0370-4791-b160-1d8edd992ccc",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "a749edc4-b8ee-4aad-8044-725fe68281a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f834151-d1a7-4964-9fee-a7184a328e7f",
        "cursor": {
          "ref": "1f8d146a-82aa-4a5a-930c-6c376fae0245",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "9af261a4-08c8-48ef-aacf-4b7af51396e4"
        },
        "item": {
          "id": "8f834151-d1a7-4964-9fee-a7184a328e7f",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "9f9ff374-c046-4791-b3f4-a0dbb3b9ebcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98500b08-9411-4a86-a8c7-4e84fa2299cb",
        "cursor": {
          "ref": "fe13f630-eb81-417d-ae4c-f8efa1420938",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "5a981faa-c93b-4e07-b779-0021b471176e"
        },
        "item": {
          "id": "98500b08-9411-4a86-a8c7-4e84fa2299cb",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "1284b40d-a7ec-4da1-8a9e-6c7062bd78cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f7eb3b3-0d81-4461-a0ef-1188f640adac",
        "cursor": {
          "ref": "3a779fc5-4451-4dc5-a323-ee49593cadd0",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "1963a1fd-c1ca-4996-ae50-6012621d92c9"
        },
        "item": {
          "id": "8f7eb3b3-0d81-4461-a0ef-1188f640adac",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "46c9b0b1-e091-481a-93c2-9179725233df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b44e5fca-1feb-4285-8a10-e0a3c04b1462",
        "cursor": {
          "ref": "b0f89aec-b0a1-4d8c-8efd-818915a6251c",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "7860c4ab-4e60-482c-aaac-bd74d7615c06"
        },
        "item": {
          "id": "b44e5fca-1feb-4285-8a10-e0a3c04b1462",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "4cc3e29f-d66e-4355-b6c7-39cfd0b982b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e42c2ce7-f073-45f8-b573-563224f63dba",
        "cursor": {
          "ref": "88579a6c-5dfd-4414-9940-46aa939f5f80",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "59b1f067-fb70-4e14-8a32-e9578b286bb5"
        },
        "item": {
          "id": "e42c2ce7-f073-45f8-b573-563224f63dba",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "d9d5b379-4502-4229-ae24-204fe520edd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d281890-b0b5-40aa-aa3a-794387b6bb40",
        "cursor": {
          "ref": "0820b9f8-8971-4acf-9511-df36c51cc1e0",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "0799761e-a8fb-4f1f-b691-1e8e4cb3326b"
        },
        "item": {
          "id": "9d281890-b0b5-40aa-aa3a-794387b6bb40",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "79c99cd9-663c-47a4-a98c-9cdecee05c46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6032e4bb-d25d-4f10-96d0-d58782d8b497",
        "cursor": {
          "ref": "ada89498-48b6-4687-bf43-2869a955b0f4",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "a0117385-a0c5-4fd8-85ae-adf53c3c1dda"
        },
        "item": {
          "id": "6032e4bb-d25d-4f10-96d0-d58782d8b497",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "89db26a7-143e-4ce0-979b-b030ba85f17f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c648107-35d8-455c-a8a3-6e5646413012",
        "cursor": {
          "ref": "cb8cbffd-8f2a-4d08-a66e-eb5702d00bec",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "392acf3b-30b5-4609-93e0-c6000da0cf20"
        },
        "item": {
          "id": "2c648107-35d8-455c-a8a3-6e5646413012",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "f37993b8-1ad2-43de-919a-55e39126a405",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "272f92e1-1a40-4f15-8efe-e5e3e589c786",
        "cursor": {
          "ref": "15834a1f-6b58-46c8-ad73-89504ce2f937",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "e5dcfbbb-a851-4e46-a3fa-56091e44bc58"
        },
        "item": {
          "id": "272f92e1-1a40-4f15-8efe-e5e3e589c786",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "14a06968-bf0a-4a22-a1d4-67ff1dfe981a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dc4e417-32f9-4709-8dbc-4966d78c1226",
        "cursor": {
          "ref": "517f4b07-0a83-4b26-a517-3783e64fbc1f",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "cd840a3c-67a4-48ae-a752-76ab2f348d47"
        },
        "item": {
          "id": "4dc4e417-32f9-4709-8dbc-4966d78c1226",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "b06f9ad3-8c46-4ab4-8fc4-b1f5739d61a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77e72ba1-33c9-43b1-b0be-31715082483b",
        "cursor": {
          "ref": "9c95d490-f54a-405c-8f2f-66b118ff3349",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "d50115e8-9e64-4ff7-b43f-545d74708e8a"
        },
        "item": {
          "id": "77e72ba1-33c9-43b1-b0be-31715082483b",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "0ed9241d-3ed4-422e-b671-b5893fa46213",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd0e0a20-ede8-479f-9072-294132677bab",
        "cursor": {
          "ref": "c326d506-5a6d-4fa6-ae1a-834faeeff90e",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "b59c2881-946a-43fa-a5cc-7229a01cf139"
        },
        "item": {
          "id": "bd0e0a20-ede8-479f-9072-294132677bab",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "477d5925-0084-46b4-ae0a-595f6a1b0caa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c19ecfc4-b702-4ef6-9e8d-214cdf68a0f2",
        "cursor": {
          "ref": "2abf1c5e-d57f-417e-81f9-9580d53aefc2",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "b9de40cc-69a9-4bf1-8568-82c26a4099df"
        },
        "item": {
          "id": "c19ecfc4-b702-4ef6-9e8d-214cdf68a0f2",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "f1b6f786-079d-45ba-9fed-fbb9270cf752",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02f09c7b-8454-4e7d-935e-de0ce53a5097",
        "cursor": {
          "ref": "e2309ec7-ceb9-462d-82ac-9d63e48e0350",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "c4c5e0ee-777f-4baa-a2ff-af1e356102eb"
        },
        "item": {
          "id": "02f09c7b-8454-4e7d-935e-de0ce53a5097",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "ac702d66-352d-4ae3-aa37-be2ed9b625ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa5848c9-9e7a-44f5-95b6-c9c88ba29f00",
        "cursor": {
          "ref": "d95da036-3880-48c4-983c-65a070790abc",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "5761196d-bb2d-4dca-8fa9-0321e70a9a07"
        },
        "item": {
          "id": "aa5848c9-9e7a-44f5-95b6-c9c88ba29f00",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "49618348-0e0f-4856-a4fa-1266fd74ed3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7215481-bce8-4af9-b244-44c08c6518a9",
        "cursor": {
          "ref": "f00b443a-019d-49e1-b97c-27f184daeaa1",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "21726818-71eb-4ad5-9222-cf32e7271a68"
        },
        "item": {
          "id": "d7215481-bce8-4af9-b244-44c08c6518a9",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "471de594-2f9c-47d6-9305-53890fa11163",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f967db31-cc2c-4410-bf5e-3cda78d1f539",
        "cursor": {
          "ref": "540fabdb-4559-43ea-8b62-d05dbd8e6e3b",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "892a0933-1528-4a94-bc80-5fa2ec3a2e85"
        },
        "item": {
          "id": "f967db31-cc2c-4410-bf5e-3cda78d1f539",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ccf40abb-6b59-4d40-ba00-e1e6372b98f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1080598f-e5d7-4e1a-a103-08e099b257f8",
        "cursor": {
          "ref": "89af7576-d4dc-40d7-83bb-e3c647f8abb2",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "3306db66-b74b-42ca-a16e-185b52d45acd"
        },
        "item": {
          "id": "1080598f-e5d7-4e1a-a103-08e099b257f8",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "c9950cf1-9c79-4476-8ad8-e2c4fdd3b7e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0bdd70b-914e-4d29-ad2d-b983d63f4846",
        "cursor": {
          "ref": "ea7f4659-15f3-469e-a36b-5eb17695a8ce",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "40433ca5-b07c-4bde-92a7-d35d6b6f7692"
        },
        "item": {
          "id": "a0bdd70b-914e-4d29-ad2d-b983d63f4846",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "f359cb64-77b4-486c-8418-d326995570a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aed474b8-89db-46d9-9a5d-b9295ecb42c4",
        "cursor": {
          "ref": "f68a18b5-0be9-4bff-86d3-cb9ce49ed293",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "549a95ca-815b-4bd5-83d8-725f2f776e56"
        },
        "item": {
          "id": "aed474b8-89db-46d9-9a5d-b9295ecb42c4",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "8065ce2e-bf12-46da-a2ba-fa7ac6c6c8fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97bcff1a-2de2-46fe-a32e-1bbd3330b357",
        "cursor": {
          "ref": "64366207-f15a-4162-b9e4-af329176b2f2",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "2c714714-d609-4828-8b80-6c1939531ccf"
        },
        "item": {
          "id": "97bcff1a-2de2-46fe-a32e-1bbd3330b357",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "db9be03e-e65d-4640-98e0-d0b21f34da3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6ed7088-e547-478a-a031-76f9af9a8096",
        "cursor": {
          "ref": "1c4e7250-4e6a-4905-b19b-24fbeff31d54",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "013baa4a-6e71-4cfc-bb07-7746182abbf6"
        },
        "item": {
          "id": "b6ed7088-e547-478a-a031-76f9af9a8096",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "b50c65e6-53ca-4dd3-9b33-fb362cad3164",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18692362-76ac-4619-82c7-fe77b2afcb02",
        "cursor": {
          "ref": "3535043e-516d-47d8-b3e5-481d86a3a0c2",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "b05cd3c9-ef11-459f-b474-e6faeb7c1e76"
        },
        "item": {
          "id": "18692362-76ac-4619-82c7-fe77b2afcb02",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "8746ea9f-8789-4f90-aa5c-a8dfeb268d91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b2784dc-0dca-4ab1-ab4e-4d1666d65f42",
        "cursor": {
          "ref": "14c043ed-21b4-4c33-b36a-59f71f186e2f",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "116ccd5c-73bd-427f-b966-1786b4a23805"
        },
        "item": {
          "id": "8b2784dc-0dca-4ab1-ab4e-4d1666d65f42",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "f0e63169-17c4-449d-9d60-d721a7f495fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f53645a1-9d82-4f99-a47f-adc736d067d1",
        "cursor": {
          "ref": "b4f17c5d-f0b9-4214-a895-019d91fecd46",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "d59cda84-5f47-4559-af6e-08be767a4cb1"
        },
        "item": {
          "id": "f53645a1-9d82-4f99-a47f-adc736d067d1",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "c1bbe7fe-ffad-42e9-9cc2-264f31f6203b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b8105e7-cb82-4dcf-878c-62a81f0f8a75",
        "cursor": {
          "ref": "25a03fc3-7de6-4e68-af88-ae6d88101915",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "9791fc06-850b-492b-aeaf-1100643dd654"
        },
        "item": {
          "id": "2b8105e7-cb82-4dcf-878c-62a81f0f8a75",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "353b919b-69db-4469-8269-8c74c0433070",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68109678-0554-4572-b0f4-c75954c16a93",
        "cursor": {
          "ref": "39404e3c-3409-44df-acf2-50c8e450cff9",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "fcbc6249-b960-4610-9318-b11acbb1a095"
        },
        "item": {
          "id": "68109678-0554-4572-b0f4-c75954c16a93",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "185e2e95-f04c-4e5a-a28a-4517ba7bc9f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13bbfef8-6145-4c86-bc19-a571d9612328",
        "cursor": {
          "ref": "9d82a53c-ffb4-4fa4-8278-a7615b804e44",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "a9f04b7d-71a4-42ff-ba67-637346e885c0"
        },
        "item": {
          "id": "13bbfef8-6145-4c86-bc19-a571d9612328",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "cf233ef6-4939-41a4-96b0-88f10847ad5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2a3f22d-f916-4dba-bf92-b6a11f8744da",
        "cursor": {
          "ref": "9d59eb87-d948-4f8c-9de1-a18ebf3c2dc2",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "9e07cd07-60e0-49ab-8c6d-fd95da8aaea1"
        },
        "item": {
          "id": "d2a3f22d-f916-4dba-bf92-b6a11f8744da",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "dc952774-ac23-4f49-a425-75f745257e21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfbdfc6a-9d93-4ddc-ba4b-95a5d88ba1eb",
        "cursor": {
          "ref": "05ba4594-0134-4637-8e85-7bdcd095dd66",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "0fc815a4-54a9-49df-9668-0e0fc5fe7c21"
        },
        "item": {
          "id": "bfbdfc6a-9d93-4ddc-ba4b-95a5d88ba1eb",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "a5c66e37-90a8-4ca2-94bc-b7c14282b660",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69e0f5aa-ece9-4393-847d-838eaadae9cd",
        "cursor": {
          "ref": "78bf3383-1d0f-4e4c-aef6-d5b61ff11022",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "29078751-d3cf-479a-b310-714f99bb3818"
        },
        "item": {
          "id": "69e0f5aa-ece9-4393-847d-838eaadae9cd",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "60761d77-3c96-455a-91cf-fbb7630a2042",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8adc6b10-a12f-4d6d-9348-efa55fc72dd3",
        "cursor": {
          "ref": "696c7f06-0380-4693-b71c-5535acd65c1e",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "ea5354bc-d082-4029-a2ac-9b6a6b34792b"
        },
        "item": {
          "id": "8adc6b10-a12f-4d6d-9348-efa55fc72dd3",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "c3e10459-0813-46eb-b350-d00ee67a7312",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 157,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee8c88f4-19bf-4044-b25b-c6cc44a362d1",
        "cursor": {
          "ref": "3e84b94d-6198-408a-aa42-7ed7cf36fe5b",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "e96d4dcc-7705-4117-a07f-ad9612656372"
        },
        "item": {
          "id": "ee8c88f4-19bf-4044-b25b-c6cc44a362d1",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "9d5c3435-4b6f-4ea9-b71f-e5d1ece37382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0604f341-a928-4a26-b07c-03c237d9baa0",
        "cursor": {
          "ref": "7b7e818e-a4c9-4661-af56-dd84bdce383f",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "0c240d56-8983-45a5-8076-d4bf202a5690"
        },
        "item": {
          "id": "0604f341-a928-4a26-b07c-03c237d9baa0",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "836c2c14-04fb-45d3-925f-f4920f40f674",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e0d27ae-48cf-458a-95b4-c84ec13e9c24",
        "cursor": {
          "ref": "5306bfbf-0b73-4b99-8b8d-47de78dc546f",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "9a324e82-e482-4396-8313-e4ccc2730708"
        },
        "item": {
          "id": "2e0d27ae-48cf-458a-95b4-c84ec13e9c24",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "846e545f-101b-4d91-a700-cdfbdc39dbf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "896fba1f-b8ed-4d27-b0de-8bdb6716e0f3",
        "cursor": {
          "ref": "a065c81e-f7b0-476e-aaa8-302b1a729bcc",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "15355661-d6fb-4bca-a65c-35c3ea64ec82"
        },
        "item": {
          "id": "896fba1f-b8ed-4d27-b0de-8bdb6716e0f3",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "b8940b71-9d31-4af5-b890-11422183ce7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "641bcdd6-3546-4f9c-9540-56729bde8a20",
        "cursor": {
          "ref": "8a841e58-7c14-4bb2-bf73-121fc01b658f",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "1aa4babb-07bf-4662-8e36-a98078a43027"
        },
        "item": {
          "id": "641bcdd6-3546-4f9c-9540-56729bde8a20",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "b949fcad-09ed-4794-aa5e-fcdf6ebd2832",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba878a73-7da3-4cd0-aa22-4be6edf17d1d",
        "cursor": {
          "ref": "7b96ba4d-ecd2-4a8a-a3a1-c6f256fb1d13",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "f5c669bf-1380-42db-8472-f1c99b16de2e"
        },
        "item": {
          "id": "ba878a73-7da3-4cd0-aa22-4be6edf17d1d",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "a67a444e-6903-4349-8c49-f08be175321c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f51d2696-a327-4076-b671-ab0fb947a0df",
        "cursor": {
          "ref": "c55b3a84-9a39-48de-8ac7-ed20a76cb714",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "ca0ed94e-c82d-42b6-ac1d-2d33463f99cd"
        },
        "item": {
          "id": "f51d2696-a327-4076-b671-ab0fb947a0df",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "d3896293-6414-4090-9245-03c52ead3cde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "842100d9-1732-4764-94c8-fbcebd207fe7",
        "cursor": {
          "ref": "3d8dbb20-c16b-4b82-b474-7bd9d0617c6f",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "735ee96b-0a69-4482-af67-38a9bca96bad"
        },
        "item": {
          "id": "842100d9-1732-4764-94c8-fbcebd207fe7",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "1bde5d0e-f7c3-46d8-8755-79d26d041f3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41c92c2c-ea7b-4b15-b87e-c3483fae1382",
        "cursor": {
          "ref": "243e8f7c-8f63-4865-9dc0-b272f853b2bb",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "3bb7be63-8781-4612-8798-f0a4b59db654"
        },
        "item": {
          "id": "41c92c2c-ea7b-4b15-b87e-c3483fae1382",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "7ffb0fc3-967d-4055-9064-551d9f28dcb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22602408-991f-469a-ab7b-8ec70dd76226",
        "cursor": {
          "ref": "907de525-7521-4e68-8225-4e49d3faecbe",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "cc2450db-f5ed-430a-b244-7e2e13797f9b"
        },
        "item": {
          "id": "22602408-991f-469a-ab7b-8ec70dd76226",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "67ec95a5-e295-4002-840a-f34d8c358bc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "536b5488-3b7e-47a3-b83b-a4c5d58094ef",
        "cursor": {
          "ref": "9acec057-7f5c-4f49-984f-0c51312fdd15",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "9a320270-c5b7-4313-b23c-38b4bda36f84"
        },
        "item": {
          "id": "536b5488-3b7e-47a3-b83b-a4c5d58094ef",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "72b9e263-0400-406e-90e1-2a60583b9b68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61d8cb44-eb85-44e9-8b11-d94a81b0b3d7",
        "cursor": {
          "ref": "e1e79fdd-4a6d-45f7-bc0c-8a26120246a9",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "88199072-b48c-41ca-a17f-ab1adb8fc6b5"
        },
        "item": {
          "id": "61d8cb44-eb85-44e9-8b11-d94a81b0b3d7",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "443fbedd-d747-4502-8dd7-b5740562387e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bac4bfc6-9851-41c5-bbc2-a46dde5b4be7",
        "cursor": {
          "ref": "2b4feaba-43b7-45b6-883e-b9b80d937bbe",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "e7f8c979-2ae3-4461-af56-9f4790edbbd3"
        },
        "item": {
          "id": "bac4bfc6-9851-41c5-bbc2-a46dde5b4be7",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "f611ca84-5774-4101-ab86-5979b48828c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a84ac0bb-67e5-4227-a3f2-ee2eec6f610c",
        "cursor": {
          "ref": "654f341e-4700-4c7f-97b1-b89ac069a022",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "cc101619-a669-430c-9844-2ae6c45f0630"
        },
        "item": {
          "id": "a84ac0bb-67e5-4227-a3f2-ee2eec6f610c",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "049c239d-cc5d-4590-a5fc-bb8a2c6da238",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a098dfd-c8af-4350-bf35-8bbf82d1a0e1",
        "cursor": {
          "ref": "3f17694e-de89-4e36-ab7a-c8a3ea85845c",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "0ab771f2-098c-40df-be58-71d386d85d89"
        },
        "item": {
          "id": "6a098dfd-c8af-4350-bf35-8bbf82d1a0e1",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "6c8a93ce-5392-4a71-81a7-1a2cf4ed7be5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "82b90de4-6b19-43b8-8e90-2d9f599754a2",
        "cursor": {
          "ref": "c94de4a3-9fb1-42c4-a4c0-608285814040",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "d623357b-3ca4-415e-be0a-d1a4317bc09f"
        },
        "item": {
          "id": "82b90de4-6b19-43b8-8e90-2d9f599754a2",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "6f1d7846-f91d-4614-b97b-93893aa917bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "72434910-0d2d-46a6-af16-b0073e97e1f7",
        "cursor": {
          "ref": "54dcb33d-220a-4d9c-8476-6822051f26a3",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "f42a5a9f-beea-4ad5-901c-0fe1e0be0b3c"
        },
        "item": {
          "id": "72434910-0d2d-46a6-af16-b0073e97e1f7",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "601ccf7b-4687-4e9a-b581-0f32f66ee54c",
          "status": "OK",
          "code": 200,
          "responseTime": 103,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7aec5d0-8385-447a-80d9-6dfd5e7b92fb",
        "cursor": {
          "ref": "c8803012-2fae-4435-8486-d0ab8a8929b2",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "bfade9d2-bdbd-4bfb-b99f-9d20fef8f540"
        },
        "item": {
          "id": "a7aec5d0-8385-447a-80d9-6dfd5e7b92fb",
          "name": "credentials_verify"
        },
        "response": {
          "id": "49d770fd-ffc6-479a-9a6f-d93e128d6a09",
          "status": "OK",
          "code": 200,
          "responseTime": 2253,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0579637-5c0d-4da1-a90f-e3fcf5057ae5",
        "cursor": {
          "ref": "d9565ed1-d77e-4c2f-8bf6-05f1b7f34b44",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "44865867-eba8-45c6-a8e5-8729e3ddf300"
        },
        "item": {
          "id": "f0579637-5c0d-4da1-a90f-e3fcf5057ae5",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "7beeaa54-7f90-4b97-a80d-19ff84e2bd5e",
          "status": "OK",
          "code": 200,
          "responseTime": 2255,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "0be6ad9f-448b-4731-9288-c8d287cdf9f1",
        "cursor": {
          "ref": "c8bbaeec-18d6-4b3c-af7c-f6191a8f696e",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "8049b0c2-01c8-4a99-ad11-8437934f7880"
        },
        "item": {
          "id": "0be6ad9f-448b-4731-9288-c8d287cdf9f1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8b9be066-fd2d-467a-a344-25246acc1572",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "0be6ad9f-448b-4731-9288-c8d287cdf9f1",
        "cursor": {
          "ref": "c8bbaeec-18d6-4b3c-af7c-f6191a8f696e",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "8049b0c2-01c8-4a99-ad11-8437934f7880"
        },
        "item": {
          "id": "0be6ad9f-448b-4731-9288-c8d287cdf9f1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8b9be066-fd2d-467a-a344-25246acc1572",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "0be6ad9f-448b-4731-9288-c8d287cdf9f1",
        "cursor": {
          "ref": "c8bbaeec-18d6-4b3c-af7c-f6191a8f696e",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "8049b0c2-01c8-4a99-ad11-8437934f7880"
        },
        "item": {
          "id": "0be6ad9f-448b-4731-9288-c8d287cdf9f1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8b9be066-fd2d-467a-a344-25246acc1572",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "c8fab05d-de45-4fe9-a7cc-af940d6c2c38",
        "cursor": {
          "ref": "bffa64a5-be01-4912-a3a1-b1bb825f489c",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "e4f28d19-7ef2-49da-a7de-580982812bf6"
        },
        "item": {
          "id": "c8fab05d-de45-4fe9-a7cc-af940d6c2c38",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "ad5833d5-4929-4520-affd-e031b0d6bc99",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "88338ffc-9772-4460-9d6b-a16a411bbfaf",
        "cursor": {
          "ref": "55c06441-adbe-43dc-8838-4ea4da2288c3",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "c9d8097f-65f2-481d-8540-f9303d7ac258"
        },
        "item": {
          "id": "88338ffc-9772-4460-9d6b-a16a411bbfaf",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f164c7b3-ab6a-4d16-87d8-37c811764e04",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "88338ffc-9772-4460-9d6b-a16a411bbfaf",
        "cursor": {
          "ref": "55c06441-adbe-43dc-8838-4ea4da2288c3",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "c9d8097f-65f2-481d-8540-f9303d7ac258"
        },
        "item": {
          "id": "88338ffc-9772-4460-9d6b-a16a411bbfaf",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f164c7b3-ab6a-4d16-87d8-37c811764e04",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "fadea2ae-54ac-4765-a183-4f22adf487ef",
        "cursor": {
          "ref": "ff6540bc-284c-4514-9bf3-0fc87548edfa",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "ba3974bb-e29e-42cf-9566-8e0ca5cb21cd"
        },
        "item": {
          "id": "fadea2ae-54ac-4765-a183-4f22adf487ef",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "d63bedf3-a612-485d-b3f9-16edb421b284",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 132,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "8eb45cdd-20a0-4560-97cc-9278e0fce1fb",
        "cursor": {
          "ref": "025f44e5-a91c-4f52-a3ff-fb37b8173673",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "05aee437-0446-4670-9573-37aafacd1158"
        },
        "item": {
          "id": "8eb45cdd-20a0-4560-97cc-9278e0fce1fb",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "196f4477-6ddf-4a1c-9aac-f9e2dacba4d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "8eb45cdd-20a0-4560-97cc-9278e0fce1fb",
        "cursor": {
          "ref": "025f44e5-a91c-4f52-a3ff-fb37b8173673",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "05aee437-0446-4670-9573-37aafacd1158"
        },
        "item": {
          "id": "8eb45cdd-20a0-4560-97cc-9278e0fce1fb",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "196f4477-6ddf-4a1c-9aac-f9e2dacba4d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "46fb77d6-d55b-444f-8e5d-a6ab25a630fa",
        "cursor": {
          "ref": "355bd897-37ca-4afd-9f48-c2e6383895fd",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "c68031f8-b25d-4979-bda7-01e06b30d2f7"
        },
        "item": {
          "id": "46fb77d6-d55b-444f-8e5d-a6ab25a630fa",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "af9ca87b-9eab-46c6-8fb5-b65e2fc0ff3e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}