{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "3a0d24f0-97fb-4729-bc41-776e48709c8a",
        "name": "Clear Cache",
        "item": [
          {
            "id": "2fe2977a-2799-4801-aa37-ac168213045e",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "195ee903-9f74-4650-9b28-1ca008596201",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "71aba7f9-8e28-444f-ba50-86c0a314749e"
                }
              }
            ]
          },
          {
            "id": "89fc29eb-9623-4e55-bfa7-22b98ad5b678",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "64230178-1b56-4f1d-b310-6b1801fdf0f7",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c828ceb2-cdb9-44f2-bf56-250028e84531"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "3d9ada50-77c1-4124-a9a7-647a1c2912d5",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "a3ac67b8-1879-4367-b031-46ab95245470",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0856f68c-ec94-4935-828f-a6dc96fd687c",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "86033f83-1fa3-4cf7-a9dd-b7cf4ecdb4f5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5a328731-a820-4833-a150-367f55ad6bfb"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4b261509-4144-470d-aba3-ad58fa2f1785",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2dcb8346-524f-4295-81d3-dab4520f0f70"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "402f7644-e17b-464b-b6ed-f836c67eecad",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "71029c2b-baa5-46f6-b892-2a7aa42fb629"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "634df039-1e6a-4992-9c4c-607d45c99639",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "03e6e3fb-8129-4aba-85ee-3b22b238f39b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a4066311-d19d-45c9-992b-cac6c74f46b9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8d1d0aac-9ccd-4023-a8e2-64abdf3b9dc7"
            }
          }
        ]
      },
      {
        "id": "5bc3bcfe-fc5a-46d0-af5e-9b45f77a808e",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "088f86e0-9eb7-42dc-90f6-1fae9ecaed62",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6da71550-cfaa-48e4-8721-816a69193a44",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "84c1074d-7d66-4bb1-8d27-0656d4a62f58",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ef56a64-e873-43a0-b2b1-c5f1b9575562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ecbda239-eb3f-4304-81ca-370cf9c3fb75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8327a46c-7cb5-4f75-9176-d01dc2811708",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95341451-24eb-4aa6-9765-13d08322ba0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9118e164-2486-4e5e-9653-d219bd5922ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99acd35e-8794-43c3-8440-19ed2db95e54",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cf979c2-3ed2-4836-8b50-d0471800db45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "be33abda-a449-4b1f-a06e-15553f696397"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5b67b45f-5b3f-4745-b7da-bcd778a0fa9b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1cbe7035-e3dc-401f-91c6-9de5fbd9c53c",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9a7ad9f-e5de-4055-9c94-72122cade7f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f7445d9d-46de-485f-86e6-7bbf342e1886"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "619b281a-4687-4082-a5ea-05ef6ae4b0f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f828696-6d14-4648-ba63-5b39c1294c79"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "7543109f-ce5c-4e43-b255-fc2f2ede2802",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5aec5bbb-f1ee-4b89-b648-5848ac76daa5",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f029aa45-a3e2-425b-aada-26bd759cda81",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "5b72d655-c7b4-42c0-97ac-ddef1807316a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ba8dfee6-0ae1-4d1a-b396-0ced30d27e77",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "8b698327-002f-428e-9183-f304d41bf85e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1cd800ef-4636-46f7-8a6d-53357c2ebb3f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "258fad56-da35-44e5-84cb-c274dd1df752"
            }
          }
        ]
      },
      {
        "id": "7fb5548b-e0fd-4039-9ff6-b295613f46f6",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "0daa9cd5-6b52-4bce-bf6d-0d53be64d1d6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dfaa1e68-324f-481a-a78c-c98a85749c14",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "9f48a01a-4555-4677-bdde-eea22a5e339f",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c674d28e-ac0f-476e-bf88-380ce83977ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebc6cd95-bf35-47bb-90d5-e404a890709d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa2d67e0-9616-4124-8f8e-d0df62b9d2fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "48a61ff1-c27a-4811-ac79-efe655549677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c41fbcd4-e44c-48af-a0a3-d4219c91d5f2",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16452c1e-3bed-4175-86fb-a774ef02e51f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65ce558c-d6c9-41e2-8e01-844678a93143"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d998978-9110-4891-8b7e-72c78fdf523d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "14adb01e-4c71-42dd-8b7d-3315899af8a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "715b9df5-74f4-41c7-a051-880fe3e3e9d6",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cb2493d-f21c-4b4e-92fb-ac4edcaf705f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0a75aa5-0b96-4d76-b600-074fe9d34bea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96b7fa3c-328a-4a1d-887d-eaf98efc6201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "48b6ed1c-39a7-4b3c-aa16-2ed9833e2adc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cda25bf-9b18-4fb8-8ff9-510456925e91",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7ee9278-44b8-4424-9279-4d2dc7e3a6a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a4b9eb9-bba3-45f5-b1ab-b08691a1244c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d707660-0eec-434c-b3e6-a8c836ad1993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a78cb3f8-c59d-486c-92b6-45e0a46b4121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6acd606c-9aac-455f-8ecd-a8a2b76908e2",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98985b1c-dac1-4324-9215-9868b49ad246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19ae2780-4b17-4a17-ba8e-dbe75c727ca3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5d15080-a60c-46b1-94d8-70dec748f1ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b4adc705-fb11-4e10-a5b7-df268a51b232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d2ee0e9-0e20-4ac9-839e-0e7cdd073adf",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24dc935d-2c28-485b-b8e0-3fd1fe1af240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b928767-bd10-4dd8-8f5b-3cd8f69506e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d6b1c2f-e37f-4996-b2e8-7261cbd21ca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0e7a18a3-8a10-4cb9-9739-b720e0b34ef0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bfba4a7-eec9-4ced-97b3-b9a95323f8a1",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "081bced0-8ee5-4610-937a-3e7184b4040e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4d2769c-b7bb-47dc-93b6-2626efef6fcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a691637-d3af-4399-9b81-ae0abde53f12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3252b937-f573-4d76-abd5-bbd9cd241166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d2aa712-485e-4e51-97cb-553b1c36a470",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e5c3385-8fe9-489d-8aca-136825348b94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbaab9b7-7169-4969-baa0-facd8416410d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f10479a-41a0-46fc-82ea-1b0d7c5b7869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1d29a7ed-7328-427e-8c20-922275845750"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de167358-5245-4f1f-8dd7-99543f1b91b9",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "007eaf68-0578-4f3c-a53e-a437212fabcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ed37ce7-e9b5-4249-97c8-65222b047603"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ae28c8d-97d5-4c0e-bf3c-ade623ef5d97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f948bf5e-7dd3-40d6-8d19-5db4bf6a44ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9205da3-a9e1-4fbc-92da-4d8b58126414",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d83651ba-84fd-43b1-a521-4f506657e593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76ef5da7-739b-4116-bf94-f8e74792e569"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5c96a19-74fa-4d5e-b832-a6b569b0ed43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6420696a-d32c-4554-a725-5e6a3dbb944d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2553f8d-5558-4b25-b3b2-d26d800b0ad1",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a258f06d-401f-4f07-8fb2-49714c7d1f03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6dec86e-8980-4813-8b6d-b3a7707cca24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c19a490c-12ba-4594-b97d-4ec619aa4c51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "433b7e3c-e3c5-482f-a6ad-f7216f07135b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7106988d-cd5f-45f7-9318-c910040fc44a",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b45c1659-4d25-41c1-a5f7-8ffb2de031e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8c393e7-dadf-4f0a-a1ee-1b241471265a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc45cbbf-0c49-4741-b32d-25a9312676ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b3e768be-a873-49b2-834c-57cf2df0e466"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df3bb6c7-8504-4b60-ba9d-354f603fb787",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd784478-51a2-4881-9846-75b340073ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7707048c-92f3-4e2c-a766-f1766c152002"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bf5bd30-e7c0-4fbc-b2b6-0cf4fa9af558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d3702022-2b28-41cf-8871-a31f3b2d42d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be97a29a-bba1-4749-968a-4b5ab154c5c7",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acdb9275-9063-47df-b565-725745843477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c60ae90-f206-4e66-b58e-4da3ac1ca062"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60017c16-2cf8-472c-bde9-037ea2ab3a91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b9fccc46-a992-4312-874d-8c17898cebb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4f8aefa-89f6-4c26-98b2-1e0541783191",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcafec00-45de-49c4-bfda-0875a255c5f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac8899cd-676c-4526-976d-b4524a860578"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f31bd946-a574-4f56-99b9-65b5436299ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3cf41f44-c983-44c3-8b71-b2a3ae4add01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a518017-1afb-4891-b3d9-76434676741a",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "251f86db-9569-41d1-9e38-b3ec4eb3de0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70b3f2aa-3a6e-4f93-9f4f-1600ee1544c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fdc4182-2785-48f1-a867-b3a08bfc3ac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "52e9c38d-4da1-4930-899d-d2ae7474f6bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c6161d3-7429-4cab-8e61-aa61b0c11921",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4edfc22c-3413-466f-ac93-1b7048c87516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41df5d25-9cd2-4e3c-b40a-8c4283baa02b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ddcc01a-3d2a-498a-b2d2-5b1c518ffa2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "847f15bb-907a-46c6-bc51-4f22c9bd18bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d513733-9d41-4395-9ce6-17cd0435ba35",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6205dd41-a789-4202-9a9f-8665e0541404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca6290c6-d684-4356-83bd-c3f900079333"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82d7634d-b271-4f1b-8378-4dcc2d0bad7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "47ef1860-4639-414a-b2fc-749e69562e8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b7a32e5-f4d4-4d04-b965-1300cd0859da",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "304e0d35-c183-45a9-a2e6-93df02f2bcb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7554f380-1b1b-4ee9-9686-332942b1cd2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "460b7159-e921-4e46-9582-17268836b43c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b088c3e3-535b-4e16-8702-d7cb33048ff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e918357-b348-4d8e-a786-105347e4b367",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd872b48-a8ba-4aa4-8c14-c3567672b935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a471f738-c578-4dd2-875a-2d5755199ce6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eae5a80a-a492-4258-b206-3fbdd11b2cd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "369f82b8-8905-42bc-9dcd-e32c01ef00f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3924662d-0fc9-4a00-8ae8-a26d7b2bae90",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "688aa5d8-ff53-4d04-95d7-c015326a73ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd5b74b5-5173-4be9-a78f-796804ac9877"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29456997-42be-45bd-a340-a8b5ef8df6ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f4b7540-3d28-40b8-9816-5e571393328b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46e05f26-7d01-471e-8c4f-4abf19dcd8d9",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79aca135-466a-40ae-b454-cc2cd7d3801c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e02d87fb-de81-4426-bc5f-c04919eb76c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfee9d7d-7a9e-421a-8063-195bdc91b4d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "75da2470-5daf-46c1-a8ad-48a6bc0cd561"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15688282-4b02-4220-bd13-d50c57087a8e",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "767f01c4-aa7a-4967-96f0-466f90fb6bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09e0c707-c9fc-4aa0-9780-70866497362c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0f18316-3810-4fa2-ba94-83455023ba1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5c7ee133-3327-41c1-beb0-80daa53c935d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a9a9892-a69d-4f04-bea8-2fb156dbe4e2",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f28dd10e-9e3f-4a91-9a74-36c3dee88683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a22a0a38-3299-47cd-9028-ee3ed0868bca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37f7bfb8-03e8-4ac7-8b8c-44cfd1ef0d35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd6b9f92-18ad-4700-9598-6f9b6e0b1588"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eca22445-7e06-46d9-ba74-e1dbe87596da",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c999806-b76e-43a6-bbf9-213a0d7526d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1382d057-94e5-4c4c-8681-73956bfc6e94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "751b4a7c-4756-49e2-ba7c-683cb9f60bb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "db647388-ac74-4e9c-9439-92f33a3bbfea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b786ccc-0eee-4552-b33c-ffa1c0a297a1",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54c84a56-77ea-43de-850b-59d9122aebf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4650f372-1521-41ff-bf64-35b03e48667e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "867d0b3e-4655-46b2-9239-cbdfb2cbdf5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a9c3cc3-9fdf-4a48-b8d5-23594c4ebba1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7cd2767-7d26-40a5-876a-ba8941d4d947",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbe1df23-9a71-4bd8-8407-f0e79db01c34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa5aa9cf-7d64-4067-a974-c7252b924ed0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab5f9c25-80ac-4b83-9986-90e00c27f933",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "948ff707-ead6-493a-a827-dec864c66aa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8567c2b-6cc0-4bff-b4ab-5e99598a53bb",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eeecd07-97be-4628-bc0e-d2c393289ef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4b1495c-b087-45b9-a738-fbfebfbb765a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7361c1f-ec17-443b-ae74-55634ae51f29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "69b2d22c-74c7-4729-a8ad-ea4577f8a313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa76a511-d20e-4995-b56d-822050036bad",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d1fcc88-c0e7-4c0b-802d-973256897709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbf107a9-aa23-4c1c-bb07-00341a599e75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd242f12-03ad-431d-9e44-af6684964c12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1e26714-f46c-4e4e-ab43-2845fa31dff1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57bf0600-85c6-4fa4-8cc8-e523de590b3f",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e18c4b5-30ed-4dd1-96d7-8d32a8b5c701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42f128df-dcd1-420d-9e23-44b5e196e56c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8929fd40-c84d-444e-a751-675abe6b56c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "74e3bd80-f688-4c14-83a1-4ca205267f88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25be85d3-2a2e-44c4-beb7-90e95c55b2e3",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5550d44e-8efe-4f0d-962c-0b9a9c748062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "885c0afc-6733-4e12-a6ae-8d10333528ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b596b7c-9c9b-4dde-9ba1-f8a2b55df83b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "56efe27d-2b7d-46dd-be7f-d80a0ffb8602"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1db99880-5fd0-4fa3-b500-81f04e09969e",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32df4d40-64b5-4296-a15a-912bdbf089fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bee13259-b5d3-421c-bbce-a74517a589d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceaf593f-64c9-422b-b28e-59ad69e61540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a0c71e0-976c-4981-8daa-1f7f4ef7b78d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4fac43b-6ce0-48ac-9768-791064bf471e",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d19c983-22c3-4147-9f9d-e3bd4c60e25c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb2eb566-600a-4ebb-956f-c89e8c938c4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aa4b086-e62f-414f-adcb-a1230df808f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cff67ea0-e2a4-4871-bcdc-8481a2351b39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bd68c86-e8bd-4364-b262-89429a7ea9c4",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61d3769b-4ffb-447a-83d5-009349dd13b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbaf0ba4-7c06-4ac7-be05-6212c8aa6839"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dec7067a-3393-4e49-ae51-917635baee95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ece65230-f27f-4c04-b97b-e5cb58e61dc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccce3024-1bb3-4908-be1e-d3ae1406d2b0",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d38617e3-c011-4368-bd18-c545480d508f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dd3306b-4f28-4539-a05c-84dd0305bd1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7eafebd-6408-4617-ae20-ba42a43623d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "fa86312b-5e5a-4018-8780-e27fd330ccfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71a2b453-7e7c-4fa2-aec2-8f0cd92f3c25",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8915e5d6-cbf8-4e24-8ccc-5c79d665a4d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0ef736d2-e724-4eb6-8f14-026388a1905e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e19192eb-c059-4cb5-b47d-5d4669ef6c4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0705ad54-8392-42aa-a905-aa8dd4c4b800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84271fa8-ffed-44ac-9c02-03dc7ed8d224",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a283e3f-e421-4c8f-b6ad-cacb733c2df3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22c09c61-c40c-4534-b48d-a026484fe18d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a0ba57e-e903-44ba-8ec5-7eed5683fc12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a85e8cfe-5642-4060-acc5-e9fe144c2079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfbad092-e76b-4576-9ff9-ee819386012e",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16110bed-17f7-4840-acd6-70e5e20c9ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c028d56-ef2a-4fca-b2fa-acd727302799"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6781630c-9971-4513-849e-bf82756f1fb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "516feadb-4a82-49d0-9fde-bf92c530658b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "615cf369-fd0d-4541-b269-c482457a2be4",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6daa744f-ca57-4338-b05c-6a40f8066d14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14a2a6a0-02c1-4b1e-bf5d-79206ee941e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a65184c-4882-4991-93f8-20ab28d1d042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3f6e25f6-b36b-4ac4-86aa-beaf3bcf502f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7691dd22-0224-4d1f-832e-f88a14e7380f",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b5ea6cd-515b-4f7b-8965-7decbc3c0582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "227151c6-d999-4167-9435-f4fdb1b3bbb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e88c847e-117c-49d0-930e-26d797fe0a9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "fd442d37-9504-4a75-872f-6e8a5ac400f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d071046-a356-4edc-9133-bec01971607d",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d919bdd6-eb88-4ae7-9675-a790836f9233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29f5b64c-d27a-4cf7-b9f5-18c43803df19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fca331c6-109c-4f65-a1a2-16fdfad80897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4bf725d1-09a0-4fab-b978-bc2a00338a16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57837776-1086-43a3-b2d4-b36bcc5fc80b",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60568da2-5c72-4dee-b944-370e39156de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03e4360f-075e-4700-ae8c-ddfabbf6ada3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47859c44-2c36-4469-a5b1-5e1698989a7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "7bcef226-d682-4461-8ddf-650ab59e547d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b49f040-cbc6-42bc-a143-fa4fe58f0ba6",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a1dc193-5432-42bc-9def-139c353456c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94babff3-2146-4bf7-a0c9-14c02669cb9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2bf2cca-2dcb-4a43-b9b3-3138ee7c3fb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "cf490142-3a42-432a-bceb-3164da506e72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e47eb7c-57a8-405b-8562-45e26cdc76ae",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcf730df-3f85-4859-9a1c-89c8e77a7bed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67f8ee79-9576-4940-bc9a-549d93f1e696"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f97de628-3b57-473d-ac59-da5ef7c80b1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "b768ed17-2ec8-4794-99f6-92b28dc08069"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05f1ef64-34bc-430d-ba24-5d76f1196ac8",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0b5b877-49a0-413a-a9d7-112da7c82d76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebb24f85-665d-45af-ba83-4df655a2a539"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b32bdfd-f2ad-4efc-b98d-37673f8dc43a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f46cdb6d-8b3e-4d59-addc-14e4ee2b4b27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6192ef6-e2f9-4a6d-b056-bbc61658f407",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f17322ce-97c0-416a-a2d3-0f887652700c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d495a0d6-d414-4758-a1ec-a9ace886407e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7de47186-bc8d-4015-aa04-9c8111e76a57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd88f285-300b-425b-b2ac-daaaeb7c8f4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d157c34-8664-4e54-9961-1007501e7ffa",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed66872a-b7c9-4a4d-8a86-2b3571e3d940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91d33eca-d78b-4d02-8d7c-5274eee15117"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8154be7-0252-449f-8a2d-bd09621dd125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a54d5ff-4fb9-4825-9a0f-9767e187bdcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a0c72ef-e685-4b04-942a-6ac6c4a37b47",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27b785e0-eaf8-4535-998d-6bb93dfa4a36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b078c36-22bb-40d5-8bcb-d2998e86b653"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1d0c3ab-ab9d-482e-8875-67aaac2c5353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "02ad964d-025e-457c-8ead-9addfdde2550"
                        }
                      }
                    ]
                  },
                  {
                    "id": "151b9c59-0fa2-4cc8-b685-502357699145",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5020d0a-f0c5-42c1-8676-f0434aabee59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5f28400-24b4-4ab9-8f92-c5c5c01e249e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3089f485-cdff-4714-ba51-962bccc7bde2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a6a0480-6265-44e1-aa49-eb04d7da03cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bb9f540-2b3f-41e2-bd39-8660ebc0eb2b",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c69c31fc-d314-425b-b86f-3827b3c8a651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec88307a-ba4c-4064-916b-471ab1caa821"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40f6a762-543e-4189-871c-919489128629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "169f88cf-0d9b-4609-af39-6d7a07852813"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49e8198b-e074-4376-90eb-c38866d3d694",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8172cb9-6f0e-4182-a995-5cb5b013f37e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4ed8d01-b7d7-4be9-a609-40241b6391ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9930b0ff-4d77-41ed-9033-ffd7e6af8dad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "616448ed-9149-4917-bb27-372faee0b3ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26f4cf58-660a-41b6-9964-4a525589d18e",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "246ec884-e964-4969-9d22-ff1880896b1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a952d695-b480-4281-ae9a-58d81330a0ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6854833a-6f21-44f6-bfab-eb32d3c27992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e1a51ee-9c6a-4221-bd4a-56d05afdcd2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d412e465-1aed-4876-b7f3-22a4eabb0080",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a681aaf-8233-4f51-8fc5-873fad278d4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "975017c5-99db-4cbc-b834-6508e32f28c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b82f196-ccec-4e5e-a6de-7c83af38eaf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b01e7419-9602-4e28-b4db-1a5aaf639847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65af2953-ae0b-457f-84ad-626491c26498",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f4aa257-405d-4874-94bf-d73455eef116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9285eab-a438-41e6-a376-5c20a0188be0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be981d58-5b2c-456c-81fe-83868d88febc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ebac0c8d-9720-4c61-9aa5-f74d56142ec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea5e6dd4-e46b-4947-885f-72c5beccec55",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80cfabae-5b5a-49f0-80e6-0e6b96b8687c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88059f7e-6269-4cea-9cfd-efe46f5d62f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3132fb8c-7f97-4b21-915c-3133e8bb1215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b4e5884-bc54-4b52-8f5f-d72c453fa342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9da7bf24-5af8-4712-af07-b43f2b5e1c14",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a1bbb4a-60f9-4e61-b401-11b70aa07181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd3b3537-a7ec-48c9-9584-a03039517cf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "465d50f2-0b91-4e10-9956-894fcb02578d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "d7942262-f11b-4308-bda6-9b5b8d24bf25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f47d1d8-2a47-43b6-95cb-6db7105b9062",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90992969-00e7-42d7-9b59-3b93b5227180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88b09173-da8e-4140-baab-c2f928d9453b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c0d2d79-3d9e-45b3-8057-3dee44e32db8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ef11af6-2d8b-45ec-9506-a9ca0e8803f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5497036-e41b-4258-b2b4-6b290a995596",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4fbd074-f010-41fd-8b37-dd081bba4a00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "030d9275-59de-4ce1-a978-19d31cc05a6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f5417a5-7568-4057-af23-cfa48cd46b94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a105c1b9-68be-4294-b23f-44de91a4ec2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ba440fe-87e9-434d-83ea-e2c201382fce",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4885e8d3-d1b8-4f88-95e2-cef9ff87eda9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c2b3610-f39f-4991-bb2e-ad11c1b55cb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcf45409-f62c-44f6-ae2b-2fbea479fa3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b2be09a5-af75-4043-8295-6878b246aaf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12a08563-64b7-4b90-9dfa-23d29955e206",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c0c6de2-acab-4ed9-afc3-4d15c48b6b6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa049da5-7cdb-4273-836e-ac317e7b9528"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "403e6f01-8770-41b6-8b4d-f1afeac7b3c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a5e52481-3935-4da5-bb5b-b47219a9e1ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8fe7f6a-10a5-4790-9cae-c3f03ac242b1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0a720f4-7ff4-4350-9506-efcb47f75b87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93031e3f-d79a-4d8d-845e-f44c201d574e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e97a8f73-2db3-4442-a654-098a42add693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a83041b1-6ce3-428c-bd5f-88d14536815b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "093df835-7116-4681-ad25-acc7453e4ef3",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d90cebe6-7a86-40ff-8c80-63caf277eafb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c75d15fd-8213-4add-921c-fc2bac8a9457"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "857e1c8b-5b5e-46b7-9397-69bd67f8660c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc4c5d10-b327-4321-a642-67812d40e261"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcb959e0-80a0-4baa-b542-2f8bf21c818e",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3faf8122-b6d0-4132-a391-16a19008e75b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7493834f-5eca-470f-baa6-fa240fec7188"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ba71b84-1ca1-402f-90dd-70eb21361d01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f782caf8-9bfc-467b-82c0-b85e5c7a9eb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0babed29-1ab9-4bb2-af1a-2a9180d1afda",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56fbee82-9ac2-4835-b444-f89fbccd6be7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6134531-7352-4401-a0eb-1791ccaf6345"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0055b913-4864-4c6b-bf23-717f52ec45e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1cba5b5d-e495-4f5f-862f-6060abc7c378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba1e2266-4a38-4578-9683-7184054a2710",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc441846-ada9-411c-8cec-22e30809a37b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67915395-d33f-4f85-9455-6301352177ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba452ce0-4da4-4628-8730-ccfad9206d3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "60533756-972d-495a-b5ca-6903e3361aa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95a63134-c2ca-4f06-b24d-81d43a0ce5d8",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90347bbc-799e-4dd1-bc10-858e59c90d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c18b3dea-0839-4077-ae94-1bdcf0d94baa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d76d84a8-89d0-4bec-a1a0-187632113248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa2f972d-7738-496f-945a-e8403072f13b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceb1a3ac-eb9b-4f09-864a-488b8cb018ee",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90b6d5b7-713b-4e61-a6a2-852b0b4ccbfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be4819e4-8c99-4d9b-bca6-c5c7d88d596e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3560105e-9d55-4803-a5f4-b74696a1bcba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c40efe95-4f4a-478a-9bda-1e2dc56fb75c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "158964c6-1036-4340-aefe-24b9c24c8801",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0089b7e6-be64-4910-ae3d-d84c5ae0031a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14d78120-a040-4a71-abce-2663811a5215"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc6839fa-efc1-4a2a-83a3-6f477ef457b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "9810c7e9-4b1e-47b2-b450-169a39edd4b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6f34ead-51f4-4e3d-869c-1af1c80e1e2d",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb701299-cc04-4b07-b53e-430b29aeb3d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72d03ac7-d0c3-42ec-a84f-4a469a91b782"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c83f4d57-5361-4bd5-ac66-7a4df545d1f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "453a037e-9834-4c74-abf2-8ee92d44d9b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df6f6c38-101a-4bf7-adb1-fe8f7fbb5699",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b646994c-4ec8-4a99-85ca-f8af3e94ee0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87cccb81-e811-4a39-a318-e24d5afc50ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d39e031-5db6-4b30-8f38-2c870961d1e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "96958d0a-b2c2-4317-970e-548e964345d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "615105f0-3884-450b-82e0-842067e4dbb1",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57c934a8-9dfd-412e-bc39-8c7c5199913e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87e0c079-325b-4ded-9379-55b52e89bc36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "174adc6d-5880-4031-a305-294cea0f395f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca31e36f-300c-4763-a965-504f22204824"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd3b52bb-2edd-4b02-9ad4-75f366a6164f",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2f364e9-dc44-466e-a79b-f2f3abdcd1ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9c5326b-988d-40e6-b65f-83c1b32024a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45f9570e-aedc-4bbe-b3b5-f4fc0a0a9e9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "57e49db0-ba8f-47f4-bcf5-9f14732e301d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c59f28e9-e0ea-42bb-9497-b8990448bea9",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48342ac6-9b1e-4e70-a67b-59955b1c2037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "784f603d-53c4-43f4-bf98-602fd4926ba9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "103eda79-5158-406f-ab2a-b4edb08979a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ad60c911-69d7-4e68-be7b-82f547ad9b77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c80e8d9a-bacb-4823-9ea0-b2f611fe356b",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a8da42d-b016-4062-b8bf-252732a61c30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3560187-ace2-4377-aee2-143b219c0145"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6babff58-70e3-425f-a930-4f35a05f6499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8fd6cc34-c3d3-4fef-8907-6be108d02e22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e71b59c-3050-45fb-b99e-b70d8a8e649e",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a820b5ab-64a6-4227-9e75-20d9e0c2ba1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2683e94b-8a23-4787-a899-62a5552fe675"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59f0c0ce-671d-4364-96db-fbdf00afaa2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d09e29a2-321b-4401-a09e-0d682bca8c12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08f7a7dd-d1d5-45ac-bc71-6224078ef7c7",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c8bee8c-7e34-4eb0-be7a-374f26b45f94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbe28400-56eb-4425-938f-d39211734f3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09ae1627-0216-45ff-9216-a2f4d8bf3824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "372d6680-9438-4739-8500-79fa8a1f58c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e180927-9183-49af-89cf-d54575cd734a",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "313db0f7-2c48-44e9-8424-27c71ca17238",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db264997-cf2b-4f33-8271-0a1204d4d137"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03a9a808-5294-438c-b781-e20aa0435faf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "56567ac4-4588-4e9f-9635-693b44b16dd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7455c17-c437-4b49-8ca1-ee5c255e0c15",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26eedf88-a059-4949-8fb6-40933cdae5c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8572ea2-8cac-4653-88ee-800d6a424a12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b394d400-a48e-4dd8-b680-c018fc9ab4ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "541e7eb7-69fb-47e2-be87-d5d9c296be7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38cc2462-522e-439e-b1f8-b8d3e966e50c",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a200f01d-a0ac-4e77-bea4-2be3aff7ada2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9b7e6cf-0c4b-4307-8342-8a35589e8f11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb787daf-804f-48bf-b6ac-d71d75cf7e4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f6d9dade-ef9b-40a6-b8ed-6031d975b3df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ea0fe94-b097-4cb2-98fb-c003cc38ab16",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e488009-9190-4fd8-b07a-dcc6e5dbb255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49637927-068d-433f-8454-4d71419bc603"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb88f0b8-21cd-4391-a181-cfc1677af36b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "17049e57-05cc-49aa-8dc4-9838c1af254f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20e45c4e-e250-4152-9253-85d68b97d8c5",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a83e49f-5cc1-470d-8a9f-26c4cae2f6b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c80d9db-4947-49b7-9492-f11589f3e824"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1cecdcb-67db-4b91-af8a-c92adfbdd96a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "42334572-e649-4544-a528-fbc71829e494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84da6580-96ea-4f88-8ef7-f66d24113707",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d521031-af65-46fc-afc4-b028db329fdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0a9151d-191c-4140-946f-2a2066d5f2b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19c1ba17-6eb8-496e-80cb-4bf7325d77b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c8b93d0-2bce-4448-ab41-4f66b141eeaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32964757-b499-46a5-af39-b012be51ae82",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3243c798-60da-4510-b5d4-b958b6d1c78d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3d3549c-f4e1-498e-a05d-e537da6affd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc554a23-19b4-4263-926b-a13ca2b0ae9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d870eb7-848e-4e4a-ae0f-fb8e279b452b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b85c8a23-3d10-4912-b6de-e0e528dc169c",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faa9e486-ec0d-46f4-ac09-a401467fe597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5c7689f-cf5f-4a15-9712-85be518751e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02d15bfb-f07d-4c56-9b22-ac1f18a00cdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "18da465f-a826-4c8a-b221-1e066f0ec619"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69ba7b1d-4655-4c97-91a9-1b3683c9156f",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fcf5f94-ce0a-4974-96e5-827e52f13397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8554f3b5-a22f-448b-8608-9cfc4a6541ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bef467a-75a9-4755-8762-727c0fe0852b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d3557025-f9b0-47d7-8bf1-ca03f4043f98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b60cd00b-ad4c-47a3-a528-95d63121ea89",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51ebdfd8-091c-408e-a1af-aa0134b2fa35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84b46ea4-3c37-4c9a-8be5-3cd6097ce73d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d276bbda-9504-462e-80fa-0c5d8237944f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef81f10b-fd5b-4710-af9e-5db82b1f186d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d512186c-08ac-457b-b6c4-3b0882f133ad",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77c04d11-1b2e-45fe-8cfe-92233cb95304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a546cbe2-4bf5-432c-943d-1d44d2872215"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fc75397-508e-430e-be83-5a7a56cab473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "86aadca9-8119-40e6-a261-7f228bb3995e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca62bf6e-0f3c-4a9c-a515-4c518c059145",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f825b684-81a5-4b58-b55c-34b459a8c167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e8cafd4-26bd-421e-945a-9248ea8f9390"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "014b6dfd-fd8f-4ff5-b631-f745d9f8702c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1113ee9f-db32-4bab-8c3d-1f865aea26c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaef9841-e5c0-4bff-947f-df39b815f052",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fcb697d-3910-4716-9dd7-65e8af265f11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f412b551-ab8f-4456-ae70-7feb43159d78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d78f010-fe1c-4a8a-b00e-e9ff7c23e5e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7b26070-5450-4a63-b35d-8efe5a045579"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a4b121e-c26b-42a0-a0a4-21aaab9d12eb",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d52048d4-ba71-456a-8b09-3b5c5e030dd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e55388fd-51d8-4d78-8fe4-17239891c179"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79fcca5e-4ad6-43e6-8f0e-f836003cbe6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1bd88eb3-1016-4ca8-b101-149c6b5396d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "016e0201-4a1d-48e3-a500-e4f671c26595",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3838860c-ea5a-4402-99d3-8470fec5dc69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ac6bd66-5639-4d6f-b4b4-b25bf7b78489"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71b6f09a-d768-4dd9-9267-e478e148bd06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "43f56154-a545-4ccf-bc18-676128d71b1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f98a411-cef1-4b4f-bf7e-a1789cc24c87",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7221d70-ffeb-4888-aee9-a7731e268186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "36d8e26b-d016-44b8-8574-7f574c01a751"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e9dc0c3-fd8f-4ceb-9b2c-95c4422d9622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "db65c80e-62b8-407d-bf6b-09ce61984f18"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b8af626c-a1fd-46a1-b138-d1ac17c8c409",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "56aab046-58ae-4952-8ac0-4bde5a10ba2e",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4fe5662-b421-402d-aa88-4a1ddf8f7338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2dc37a77-a843-43a3-a501-358d4af04c7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c27181c-3a55-4d83-aa15-13bd9f02306c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "105af7cd-f7a9-4720-bbff-c09028904f3b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "61c837d0-558a-4d2c-b8b3-c38a860a0cc0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "67f37c49-342c-431f-9d8e-3ddb1c63e416"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dfde4526-1d53-4b46-9ebf-a862a3905e49",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b969f24-d427-4348-acb9-41d55f088416"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "dcf5de07-be54-4931-83ae-25e82e21b71f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "692b2bff-19d7-4099-90d9-9c5b63a026de"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8fb1dc81-88c0-4181-af0c-08076fc580ee",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5c7f7a2f-1435-403d-9976-02aab7477bf4"
                }
              }
            ]
          },
          {
            "id": "20323687-d8b3-4611-ae61-759d72fc0908",
            "name": "Positive Testing",
            "item": [
              {
                "id": "42eb835c-6c39-47ef-a265-6e7fc2f5d1a2",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "35d8bb6f-eb5b-4d0d-a389-cfb186a0cd26",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17b8687d-436e-467f-9678-072fc22d34a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "8e8d55a8-5fd8-4870-97f3-ba4216c6fd37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e4345ae-e8e6-4c5a-9d88-6868b9b88cd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "959dd441-f75f-4ac6-8605-f0f3744d06fd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a2d84a6b-c1de-4427-bbb9-2e15ee08380b",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e95cc39a-8bb0-4baf-8b7a-35bd92572bc8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "05844f62-acf6-4841-92bf-101c1ec76b38"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "42ab7265-12bc-4759-b5f2-53700a2a739b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7f856b80-db70-4a47-934f-225a42939436"
                    }
                  }
                ]
              },
              {
                "id": "0e5885cf-cfda-449b-91da-bf71ef176160",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ec40691-1d77-464a-8d64-fa7e74b7957b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e188f249-8af9-4c72-afd0-ada8f29514ef"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f36d46f8-d752-400f-b8cd-8141391fd6b8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e1f99929-eedc-4ed4-ad36-c4b4bb3813b2"
                    }
                  }
                ]
              },
              {
                "id": "7e436dd0-473c-4487-9380-b277c1e3fee6",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2dd8b2c8-b3cb-43dc-8d33-bc7eee67cbed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0ebcd3fe-9889-4004-baae-fe2d6f3fad11"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "21e4de3d-4c1c-4fa7-b215-0e11b12b712b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "02b57665-c072-4412-8c7b-cfac41116e41"
                    }
                  }
                ]
              },
              {
                "id": "f4c64edd-f54a-4226-88b4-336a2aceb08a",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3c5e7772-1bc5-40f6-afec-929fb0e6fcbe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2298cbec-6254-40cc-b40d-f07913cc844c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1577a28e-fee6-4205-9e16-cfaa55aabf10",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "1d57591c-23f2-4dd8-91d7-0057a969a2e0"
                    }
                  }
                ]
              },
              {
                "id": "ab0ee6f0-7302-4cf3-9c26-7ecf1b3ed7b1",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3a51838b-61db-4224-b156-1866dab2e5f8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "855bff51-8cec-4c93-a1f8-4196a340fdc3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "325cf016-17aa-484f-99f0-93f44b0c6073",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "ce5d3839-0378-4fda-81f3-9659aac93c39"
                    }
                  }
                ]
              },
              {
                "id": "25c01848-5a64-42dd-9830-bbcfa549c3e7",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "18ebcaec-ab15-49be-b21f-34630ec125b3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a6ff52d9-8a08-438d-ab1f-e0d22478e5d1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3c5c49ed-3d8c-40b6-84dc-fad94fa486db",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "90dda8d1-f826-4af3-888d-e792f3723348"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "eb2c3197-97b2-4e78-9a3c-b0c0b7b8d5e8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a29ed1ec-cf78-45bd-9f67-06d8e0eb8b27"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ebc1b215-c7c4-4511-af2e-44d80475d718",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "41fdce5e-023e-447e-9a30-46f0c775495e"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0f28faaf-1e1f-47d2-b86a-ef9711a1cabd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "d190b127-5c4e-407b-b687-cfe09a179d43"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1f1a59cf-33c1-494b-9d34-4525dc27269c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "62c8aeba-883f-49f6-9fde-70624856b6f0"
            }
          }
        ]
      },
      {
        "id": "07a385f0-4485-4570-8f35-f096f48345e8",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "1ab27fb6-6ea8-4e87-9757-36240de4ad6d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1fc0c547-75dc-41e9-8835-ab53becb8f2e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d6607b0e-b0c2-48b5-ab65-a05d978083e6",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b1fdab1-25a0-4744-9f79-fa5953c0b45b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bd67587-b0a7-4dff-a45e-54b79ca9b1a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f47c894e-a6f8-4a49-bd3c-e3b77933bef1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "590404fb-65c7-4cc1-9b75-98243491dbf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de01b32b-5f77-411a-bcf2-674fe154911d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9aca126-2d95-4890-b2e9-ad7743e4428b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "710dabb9-68b0-4b8c-af84-027184bada81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "372c2787-9c12-4fa1-b91e-c56f9ea512f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6000c36a-1309-4c81-8c0f-f2bcd9510542"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4883d105-2406-4e30-b2f9-02a735f9e3a9",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3b5d2f5-e05f-4d88-b21d-53117ad533e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "870c404b-86bb-4115-98c4-9b4920e7909c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfcbc2cf-ba64-4745-9a1b-38a24b2de215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e3a8291-e56f-485e-9499-fd88e012a564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9338594-6a2c-4e47-af3e-ae739d580271",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b126445-8aae-427b-9873-183df9fa7270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30c8d541-8b42-4ba0-a559-c1478901c2cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4a0f772-e47d-4a24-a0a1-716924042d25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "435a4923-1444-4ccf-a3dc-3ba5e3726eb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "770e4740-71bd-4c17-9b57-f3d8243cc7b0",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd92652f-fb99-4715-bc0f-4fe3e99be24c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "302722ee-cabb-466e-9714-637db4ae8a08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b2cc9a8-1164-4120-8b1b-ba44673a64c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "662abf85-0ea3-476c-a937-0843d14614d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aac13421-ca49-406c-b526-1dcd56dd0dbf",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17c5d878-41b3-45e0-9cae-2707eb51d31d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11d4c58d-3886-4a1d-b87b-a8d82d61afb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffbb8256-e4dd-41d5-8383-6f1b71542f5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1a425dda-5fd5-4029-baaa-d89bb00727d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aac31cb-f545-4939-894b-905c7db05284",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "652f8f4a-2670-42ef-9e4e-09d95173ecd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "816b9427-7ca7-474e-a540-7bd8f253fe54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "694d7678-e7f4-4d58-8e4d-5083675f8941",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f51558d-434c-4d33-af38-26843f15b11e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a92b417-b8b3-474e-968b-87a9e21248f3",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1070e175-a1e0-4bf2-982a-3183412369c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1cccad4-622d-45f7-a3ad-aa7b0b2557b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2c10483-1525-4629-9373-17fb2a139dda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "82822d8d-0a6b-4851-bd76-152ce08341c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffb0ed58-d33b-4cfc-94f7-c1330ffaf082",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "453662f2-dba2-454e-924f-4721a20087af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c87fac5-16c0-4242-b20a-02b6430b1f0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43d1c97b-5ae9-434b-8723-869204db0248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e9e239e-0913-4454-913d-f49ddc28a779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "762563e7-c4eb-43b0-93b0-b2a77f20bbf0",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a072992c-1ce8-41e8-a031-c351d9940b32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60e0b97c-508a-4a17-8454-812c8577d26f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d314173-9e23-4e75-9fc6-b55a48385b88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "affbbca8-0016-46d5-a94e-962335dd0b11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd5e8fff-e0ee-41dc-be1c-dd7b249b9dcd",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abe7e993-6d50-4ebf-8d54-7bc3aab73774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90ec50d4-74f4-4a6c-8255-50dac09f267b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86cf018d-d097-4a17-9f9f-c1e369c50d19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "59e62f20-c03a-495c-bb3b-ac5759144cda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1f6b6fd-cbd8-4abc-a7aa-a1cde3df94f4",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39b55e40-8d02-4df2-8cb4-1d3efa9808b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13475637-f211-4ec4-97d7-a70fb5100370"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "062472a7-3274-477e-aaf5-52d7bff760b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "467f542d-f45a-4c7c-9caf-7765a09ce91a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2098877f-581d-4e51-b4fe-7a066b5877f3",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f1852f9-f938-471d-9e6f-fde38e99b746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43effbc7-f20d-408a-bf7e-0878ca76bd72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b251b1f-f665-47c8-9720-a2c0e609bb13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "401d889b-17f1-439a-a835-9090f74c8f50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4f7fcd6-45c6-4d24-9a07-389989c299ff",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ab14bae-5321-4138-abd8-5238903a531d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcb9130a-ae2b-423e-9eff-1a2ead028541"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed2cf175-020d-400f-890d-2c82dcff21af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "92b83b51-a739-43f4-b5f3-1b61fb0ee4fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "710627bb-ebda-4dea-816f-2727df3caa88",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39e8d91e-83fe-4c05-b914-eea700eb9f15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "408b7a09-b2a6-44d7-a81a-d399f18a1919"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10499a85-f0c5-4faa-974a-96adf55bd609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "7fd63982-29f2-4fbf-9b72-7bb5dd03294b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a87e851e-3c78-4e37-9107-1f7e9eab9e58",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebda502a-30ab-42c9-8b13-2795c7dbc23c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6fccca5-009e-402e-85dc-5a494a24b5d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b64ff91c-ad39-4b51-ad7e-e4a6db849811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "98149045-b71d-48a4-b742-a78760c2cc12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "929354ab-d1b1-4193-98c0-6ad8cde61ffe",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a90c10fe-f1ba-49c6-a776-37757ab7b3a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d6b4bd4-ac59-4fab-a085-846e2d1fc0ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5009ed8c-0bf9-457a-a9cf-92b337cb9508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7459a40-0369-4e2c-9366-1baf9f8721b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15362b14-55fb-414b-9ae1-1a7b9e235c32",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac079455-143b-42ae-9d78-2fd28a973c15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ef80b5d-556d-4e18-8851-44a9090a1f17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9097e8f0-a7e4-4df0-b12e-b550ddc9c358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e0889f0-3f2f-498c-9fdb-9dea4d3849e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4926afad-744f-49e7-af36-64d34ff4a31b",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "019ff12c-84f8-48d2-ba3a-b86719062a82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "830913ac-c6bc-4ba8-a403-32bc87a114f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e4818a3-f5b0-4c35-a246-eb6d868ebc7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f46f6a4-ebe1-431f-b94f-27886c61a23f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41a7dbaf-b4f0-4738-b1f4-1f35671660cc",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94b889b9-f3bd-4638-b7dd-dc753c9ba8fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1dd2ce2-987f-410e-8b59-cea37f5f9455"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "219939fc-d5b0-4d59-b5df-edbca01921f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eba394b5-1e0c-4dd4-9406-17bf429d7a20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17e1b9bb-9199-49e2-8e63-5b440e414555",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9647d5c-47d5-4af0-9645-e1c152f282a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b92ad31-106b-43bd-8d33-6d94411a89be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "081ac543-7fc7-4d03-8582-1a576af64a4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ce86327-6677-401d-8bcd-efc0731e752b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bef6803-da86-4519-8256-11d3cb664096",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "834a0364-5cde-4739-93a5-044ae177f4fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c56a7c6e-7186-481f-b2e6-7760a370c30c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f487e12-f326-4567-9002-7d39d3f09c12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e979124-55f8-40d3-a37d-71fdefc7077d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "281361ae-ee61-49c8-b6b1-bde8ec48698e",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8341051-0c2c-4461-be36-b711ca2ca976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a406d85c-6428-4d06-8247-4668a3c77001"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58f2c2d4-4b06-4cd7-8873-8c79c02fcc96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b53947b-9153-4c94-880f-97bbc4e26e18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b359aaa4-f459-4382-898c-9771c66cf0e0",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6bd403b-df2f-48fe-80bf-1dfca0370b94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e6062be-219e-4fb6-835c-7f5ae1379dd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "256f4356-1c0c-40f7-8a00-6dc1bda69896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a683d369-ca8f-41f0-952d-56b83f2726be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc1b061e-e3a0-4bd2-b579-075fa6edd503",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d861f81a-fcb1-40fc-a7a1-371353a9e594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20f8fa71-3f14-4648-8ec9-1658dc01e39c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89019f4e-caf8-4c1a-aaf2-860ef8a9bec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "32d45f59-c3fe-4115-ae6f-f2c0f032aa27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4adbed48-97fb-4076-924b-fad6edc9eedf",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e993e166-dd5e-4e67-8b75-960bed137bb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e865af84-3ebe-4178-a800-540a85eecd9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da6fdf29-bdf5-4f81-82bb-031da0bb84f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "82c8e7a6-c62f-46bd-8652-78aa7e675f44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e488d8fe-d5e9-44cc-bb08-e9d6f17621cf",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d8fc977-9190-4485-bfec-4dc2ae4fedf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a1979fa-4a3e-45e6-b9cb-5e9abad2a193"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ecad9c0-b98a-4e9d-99d7-008ba02802b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6f9584f-cb5c-4896-a689-6dff3dfbd89a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c22bc6b4-7f16-4072-a669-886d2fdb0ce4",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be3f9b37-46ee-4db4-8561-05fb6efe0204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6789a7fa-bdae-4e67-9506-8288dc85c625"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30c4435a-4f63-4e75-ad0f-9b5c950854bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e69afd27-97c7-47ad-b866-e194eae1cc08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3353d3a4-26b9-4561-9839-8d55d86a5b19",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb742b76-a2d3-4dd8-b828-e21c9654d336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d836a47e-699d-49fb-8cb3-44f4fb60ca46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0e867f1-7f26-4872-b34e-52a11884abcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "213537ea-4c34-4d1a-83a0-9ebfee74a132"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c651eb04-cd05-4332-89e3-ff22246d9022",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d518531f-edfb-4877-bf95-3f55212fdc9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b10b8583-7e66-4491-a712-c9d45f0165bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3629ae97-3e85-481a-b13c-e733dc70c8b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d697c096-0c5a-4684-8182-460e7286a745"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97b1b55b-7305-4ed3-9f44-f253ba37e292",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a548ebf1-ce98-40d6-8264-fb352d84e274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7582ff1-7cfc-4fc5-9b98-eccd20adbce0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "040a6fd2-f055-4dda-b6a2-0800f34dac4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "28154723-62a4-4afc-ac5f-260841c83a41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3e50711-6736-46b3-a775-134e09d5a57b",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eadebbf-f6e7-42ec-8848-4bde1e03a9b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "593cf9f2-a74b-4225-bd9d-0d81aa2bfbc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42ae9929-e6ad-4160-9deb-44ba68aa0d4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ef06225-e3bd-4e38-91e6-06bf22a472a3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ae8979b1-78b2-48fc-9aae-924d90ee8842",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "33e1ba99-c21b-4afc-aad5-ad04d45712d8",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a2911e3-0bc8-4b08-861f-08e59775c9f0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d0fd7ae6-da56-4d4c-af16-f4ee65a6b0dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4cdab3e-cb77-48b8-b534-08392874c994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "31b1820b-26c3-4769-8804-231de389346d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bb1da1cf-9b4e-4a4c-a52e-d1dfadd9606e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e6dff9e8-64e4-48c2-b4b7-817d96470fe9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "10f3c80e-e13b-4c2c-8aa5-b1ae434b527c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0304f5f5-8a7e-449f-9bc5-b88411a57324"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "50a17223-6c41-48ea-af24-3a5fc6740aea",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ac5b2a3c-3b0e-447a-8b00-ed52155bb528"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f660936a-6975-4286-a2da-7ae90db4b5e4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9f8c530a-7bd3-4975-83ca-fe954cec5492"
            }
          }
        ]
      },
      {
        "id": "410e3c4c-6c06-4c01-a1c4-8da5908ac2ee",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "f9cf318a-b2a9-46c6-afe1-8c41df92b225",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dc4da7f7-7427-4693-9ef7-70d1fbecd78e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "24f466d7-5c59-4dc7-9be3-7171afc49964",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad3ec377-7f6a-4783-8923-9c6528a4e71c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74e3de44-3374-4b58-a31f-e2db9543ed1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "154b55b3-53f6-46e5-ad52-12ef6c9b9e10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b271955-e390-4713-a77a-2a0cee462387"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82bedea8-38b2-4089-8f84-a11e615b97b9",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e1415e5-1b8e-4aaf-9121-13f12e0e4c8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c63ae92-f17f-4b9f-962f-9f1e80aa970e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bd6aec0-2ad1-44c1-ae97-535f1b56d2bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "090ca0c2-1c03-4de5-a8d9-4d70249f89bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f74faa7a-3e35-4e56-9561-715062f534cf",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2359c67b-00cc-4af9-a70a-191417f0ba6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97d63840-fb47-4d1f-ae4c-e41856beb562"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db700376-9175-4435-b670-d8402baaf67b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "24bec3f1-0ee8-4ce7-9bb8-747676ec3712"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c6a6c0e-0c13-4210-ba80-b796aad36c85",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "209bd848-9922-4622-8b04-920129b9e3cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "915d7f5f-3c06-410a-8fc6-cd773708d1e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ed181d2-065e-474f-9bac-84cdeb11e81a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "95d48a79-c9e7-465d-b987-1a8af4007580"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2948c12a-7b76-40ca-8287-795eddb76fbd",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "853f9357-b16c-4269-9626-b47bbe82300e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d9edd4c-a7b2-406b-9538-342d7b37c449"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2918fc77-fc7b-4b6a-a6e3-9d81e2ea05e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "89ff7abf-3d36-41ec-bdec-e76f63ff64fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "896c399d-c1b8-45d3-b3dc-9290a7a416da",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29894344-fec1-4e42-848f-0483c1661c30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57f5b694-a8fe-4551-b26b-6fb6051c445d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07712d3b-d811-46d9-99d9-a663010c6e28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea43f3aa-1def-4abb-9e0d-24d8f6096463"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee2accb5-155d-43ef-a8d8-bc81663257a6",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d4b86c0-e2af-4b79-8c5e-2cb726a337b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c50d14e-10a9-47ab-ab4a-dd8c48028920"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea8af363-f6fa-41ff-b692-bb7c6f0a6453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "341cfcf1-e346-4fd3-8b20-22a4776d6ce5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71e87ce1-fd00-458b-8f38-1e10f1269342",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5cebd58-aa36-425a-a16d-7623f39c1bf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89de72d0-0f07-420c-b5a9-8d98fbfd8bca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5df42861-0826-494a-97dd-2285dad99bce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6170652a-365e-4f07-8b3e-9ff8807826eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61c473fc-ef42-491c-b2fd-1f89917676ae",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb2a9632-7461-433a-8b22-74c4fd14a779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c8f1f2b-5704-4334-b3d0-14eebabaa658"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0175f90-cfa7-4e6f-91b4-c6814c38a0c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e90f374b-e1f9-4252-9d8d-0da68958b139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5497f44a-2509-4484-acf7-4b01f22c51d6",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fabcde9-aace-4ab6-971c-8767b75811e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "547876f1-5f8d-4d8d-9e20-8629a4c93369"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c75cabb-c770-49d4-b320-3bf5660dfaf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "99d6e5ac-367e-4580-8fce-24b4f160f236"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c5784f1-02cd-4b39-a331-6a0446d57ed2",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e8a95fe-b332-44f9-a8bb-307b718666fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "073a826a-730c-475b-933a-e65e654be8a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe7c9571-5ca6-4301-a670-76d550e6d9e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "084d1869-abb0-45af-8be3-cf5e0e93e632"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efe86995-a166-43b4-9934-59307485f45e",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2196b4e2-947d-408f-b92a-7162bdc4893d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a44c67dc-2354-4059-9cc7-4a4db28c4f47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab619b88-68c2-4c49-98b2-7ca3cd85ed56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6990b285-1971-4512-ae23-94879adf2652"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5996dd8-5afc-44d7-9433-6bd73c3116a5",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "508a1809-8bb6-4116-ae10-c25461f8cd4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77340981-f717-4459-950b-3f6edaecb611"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d5e4aa6-7c20-4d17-8e93-90ce3f77ef98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ba13147-2001-4ffa-8c3b-a11b82e9cde5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f187105e-c017-4eec-a556-b652609a99b8",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "177eadcd-daaa-4ccd-8b01-fc64e2171e32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f4940ae-585e-4acb-afec-a2c6ac9a700b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24e514ee-f8f0-4d04-a217-5abbe26efba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e7f3257-7e0e-4d2e-9c39-cdcde0688396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a94661f-a2e6-403d-8109-baed3e3d6114",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6da2f03-260c-4ed5-b602-e4f4fbf51724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e5b4b2b-e786-472e-90ec-1e18b0ae7167"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80f9f584-bd00-4436-810d-7cf7432015a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba4653c1-99f7-4871-bcec-8d5b6dc9e143"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b98c384-5024-4c7b-994f-d7bb3a31d7ff",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc4b64fb-8400-4ee8-b6c5-b13fbfa58efc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b44730b-51da-4cab-8f69-1422751ba11f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2ae23e0-e6c3-481c-81e0-ce3f8f77ee1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "81a525d2-fa86-4d03-97eb-24f513a271c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99dd7629-8f69-41d0-b0dc-2a430073aa1e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07c35de0-049f-4122-bb60-1d414fdeff15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65589877-c1b2-43a3-b38d-a08b97948f96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4724f4df-727e-4950-af68-dd6288b6e91a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "3de11fc9-f848-4a7f-9b87-7ad6b9c3ba17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cce14c82-e983-4196-9300-227d40157180",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebca335d-3618-404b-a2d9-357de32a29b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b59900b9-b4d6-4489-9de1-92dd8e6d6079"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5419e6fa-4389-4817-8e83-9b3d80550d0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "863847b7-4f2b-415a-9c6d-7b6b8711382a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3ede786-d1c1-499c-a248-02461dc40f9b",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86dafb20-c01e-42ee-81dc-70152426280f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ede83f0-5dfb-4bcb-9c6f-d0a343316d52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef3eb663-5609-450b-8261-a697a8a8980a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a29b32a5-6b36-4994-92d2-0e605596a06f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1659121-150c-4f1a-aff1-afa4595e8f46",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e777aba-538a-43d5-ab78-9fa4ea979b2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d065f978-a553-46d3-933e-5ad22dbbee6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fac0563-fc07-4ea8-982d-5e1a1cfc9f3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40e9fa72-3684-4b88-9304-a4201ec896e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98fbee33-cd24-4d7d-90b5-7def77102638",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4586c3a8-ae8c-4120-97e5-4190d8c86127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f0af6c0-4650-4c87-b71c-ea4108620535"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beee7e98-aaef-4d24-96a0-5da2d639f2fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "42ad1e2e-1854-4c4d-b3ac-7da7a2b35ba5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa5f76b-fbfa-4e3e-b673-9cd1642e49a6",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7107b73b-9e03-4167-a4e6-d45a777ae064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78db24f8-dfe5-4148-9a9e-c7034f91189a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bbc6e82-1ea9-4530-b228-b8feaf8d238e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b38535f0-ce60-4ab1-a376-2151bca06c22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3baa94da-b148-4118-b847-7f11aaa14397",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b77622b7-a7f6-439b-a5cb-34085460bd1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47f7e068-0dad-4ebd-a886-0222891e4a02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2646e69b-abdf-4d4a-abad-09b65dd28c0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0858c88b-a946-405f-a8c8-837f07ea0d31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f22da50-4290-45fd-aac0-77a24884bae3",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d83f616-e238-4a8b-bd6b-fe95f03bf352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c26fc0cf-8398-40c5-a6d1-f733b2df62a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7369c44a-318a-40c0-8f20-5bcf9fe77343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "effbdc3b-bbf7-4eb3-b0f2-9cad903db1cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36a10412-1643-4cd8-8a28-4385bd5b0b06",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4379aa21-d97a-4c72-a68b-84e4055d151c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "519b8250-6622-421f-a03a-ed5256334765"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ed611e4-9d33-46a8-999f-9bd330c0ab30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ad54d28-d48e-48c9-8719-99b480251e89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a14c9299-f55f-4045-b3d7-be057e43b821",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d619fc30-1de5-47a4-81e5-4a32bd67c344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2ea3361-4392-4c4a-832c-0e18a08ac336"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11fe3821-37aa-41af-878d-79635030a26f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "08eef09a-a4f5-4bee-bc76-eeb904ae5449"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ceab4bd-3973-435d-96ca-e36384462d54",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe98921f-0b96-475c-9fe8-c3c7feee9b41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8f6e56d-d8f1-4dbf-9443-68e039255581"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcf31bf1-0f08-4a13-b87b-5d3a4516dce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "794c79ec-c64f-4d14-83c9-ec071642711d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f0e9485-bcc1-4113-a1ec-a8c8b83d07ac",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1153b72-7993-434a-9dd0-95dc67655c6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e32b3e9-3abd-43af-a806-229055f331dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f66a8a4c-e003-4986-ab68-be08ee7bd4f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3fe82a1d-7178-4004-a619-8bf827e028c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ff6dacd-eeb0-4226-a83d-37fe7f3d7d38",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaf4ced6-0b4f-4888-80b4-bcc0dbe0fd2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7f1704e-40e0-4990-99b1-d72592f60345"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5fd7aa6-73a1-41ef-aaae-58dac4d3b16d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd722cc8-50da-4730-a0af-b28dd3417b38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31038526-86d4-4eac-9532-36a7af748d19",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fabed072-865b-4dd1-9b30-54302971eda2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baf6dc75-17dc-4018-a315-b91b7c9a8766"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4a28dc8-c9fc-460c-bab5-504d0a6fcfb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7763f9f9-1b3c-44c7-911a-71d86517e9f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43ebee57-574b-4535-a9f4-c4130149c276",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f07032ca-b32c-4905-9521-367750002b84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef0c25e5-9460-4efe-b372-918ab1e11f2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9833f271-cc3d-4b21-9520-aa183c6832a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "948cf040-acf6-4d26-95d2-992cf9a14af1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11bbfb19-02bf-490d-956a-a54832e14928",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f876ea2c-b717-4c0d-869d-90959c13b0e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96d1ab68-6d36-4a08-ae23-00a7b15504e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aedcddde-eaa1-4f58-a9ed-a7b8ad12874d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e4f6c5a-b603-47e9-8397-93643950dd1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efd99020-4489-45a7-8a26-4529b65bd24b",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e71384a6-b331-48bd-bf39-51fe0d50f6f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64e14c35-396f-4c12-bd37-fe39c5c1b666"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58f6b67a-a789-4972-b02b-95c75a2f69e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c6ebb5c-4934-4b18-9948-d1bb684a2ba9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7332e70c-b21d-4107-9c54-34c6eb4aaa53",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd707462-aca6-49c3-b9f4-21c282e63a6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "011b8630-b1ed-4f07-9036-18dc070e5f74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbb3132f-a29b-4e64-bbbf-2ac880cb4d17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1502fc68-6500-4398-b050-e7a8624961eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "310e49d6-7098-4453-b259-02ad8632db8b",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fb236b6-69b3-444f-be16-ac45cff93b54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84a6da52-d7d3-40ee-903d-14b35dcf3f1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "121e394a-49c2-4bde-be1c-7fc07b9491fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a091dd6-53d9-4cba-a495-e124d1b34d17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26ea1888-2997-4a41-bec9-16bc70c104e2",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a20c096-dd84-4108-a23f-98a2f21b1539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3852c15f-62ba-426c-92f8-9cec896a8f7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11341835-aca4-4ca4-8da9-8b28ce57b9c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "49a72da1-742b-4194-b3e9-6be731758ba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb945ad5-2086-4348-916f-b73466a3897f",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6879226d-5e6f-4d20-85cd-200127f1dc53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3059ba72-1070-4ce1-bae5-10f3f36cbccb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70698b8e-6bf1-403a-b951-bdae54e097e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5d61f3e-fb0c-4b0a-b0b1-0ffe6fc24eb7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8a965a51-30eb-42cc-9db4-5ea2548af209",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3be30cb7-187d-4dd5-b102-6173ecf6f5c1",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07b4d51e-4d7a-40ec-b42c-6a3a0301583e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ffa2cd77-1453-4a7c-931a-fcac0467346e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74c0f82f-99be-42ad-9bf9-1ffae2812685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9eb6e2ab-a921-4cf1-9b20-ccd420ca09eb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f423f554-1ec4-4fbe-8f12-3eac483f554a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5922228c-9f25-4d1a-8d59-3175064ea950"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "206d8753-77a8-4973-a849-4dc03b0c9212",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "763040bc-5e87-40c5-89c1-a2d8a1bb3594"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "485115c6-8636-4368-b926-1941b7b67c51",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ca43ca18-80e3-4743-9a4b-6e5ea56e263c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8482a136-a39c-4823-bfbc-5a9eb66d86a2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7333017d-8ee8-4888-acde-922af5260028"
            }
          }
        ]
      },
      {
        "id": "6fd78abc-4deb-481a-acf2-b998faaca99b",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "1731d784-581f-4a07-9a4c-749611e7ae67",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e6b364e9-0f26-438a-9a63-ef7c54c9cde2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "225f3e0a-b0ac-414e-8717-00b1e8696757",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0070e47d-439c-4d7a-a5a8-3e6e85d5a6f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "562bf918-b261-4385-aefa-eacd0ca33a6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9fc567f-ae6e-4081-88f8-c366a0f3041b",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79c71d28-6f45-4d85-8c08-7796da0b43ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "755b241d-aeb0-4ce4-b126-cdc5640da3ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9123f900-9404-4e45-b158-b17ed3005fc6",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0756e1b9-8bde-400d-98c1-6b7dfae87bec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53742f74-6973-4023-8cd7-fe6c46347e58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65d2c8a5-3b69-4683-a6e7-f8d6aedad436",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76bd7c7b-212d-4aec-8f10-a5087fccec8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e482c3c-7e4f-4a9c-9cbc-5cb64718e44c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1108b80a-0b60-477b-bf7c-fe14375e29e9",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9384bae3-316c-4f7e-ae48-d6e1c2028394",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "000212a1-abe2-4ea2-a83e-9b605306ada9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0890eb4-3fd9-48cc-a40b-6eadab54c6a6",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62218046-c6a4-4af8-bc90-17075b8cd132",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "442ee42b-f268-485d-a496-8d6afd9f1a81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5db854e5-4f32-4fc6-ba40-355f29247688",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed1547cb-f090-42c3-86ab-90b572ad2c6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59032f40-b57a-4a2a-8207-128603061ccf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75b6aab1-115f-4d79-9876-0af0ef6098da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ad2e9dc-4ad3-4ebe-9330-676e34934a4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "807b757c-e375-4f4c-b219-f119670821eb",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be84b821-0598-4637-aa64-6547d472444b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eac6a589-fb28-46f4-83d0-2bf113caa274"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "877f16c2-e690-42de-b0f9-5958e56078e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21720561-3fc5-4a95-9d5c-8b8d73ee8013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "184cff66-136d-4d46-9770-82ddf5fa3175",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39fdb7f0-1e97-4ea1-bbd3-25e6b8defd39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42669aa3-35b2-4ad1-84f7-8d8c60f257dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "878d608e-1554-497c-b109-cc670397f44f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fd65ece-1fe6-4991-8e6c-3e3bdee52698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8491438-6097-4dcb-b534-bfdb492725e8",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bef94723-89fe-4020-b3df-3009a5b4588f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23136f57-5ca7-48b5-ad55-d056fd6d66e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2821aed6-b6de-452b-ad94-853e2b086e8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dfb9bd6-56e7-45db-a8b0-f9c01c91bbc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7be9b840-a3c8-4c8c-9145-690806f40744",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32483360-31f2-403f-ac06-035fa2567f3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85380215-0fa2-48db-9d92-3d27d2408bb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9227ece-c14f-4aeb-b1d6-cc3d88bde19f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b4cd113-24f9-4e1a-88e9-dda911410594"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa520658-2664-4d7a-ba34-a926dc6bc454",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44e4024b-054f-44c5-82bf-b3457f8f7108",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6caed6b8-2a07-45d3-8418-426eb35d4966"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0775f87e-8d0a-44d5-b76f-f79332db5802",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a57d0c5-5f47-46f2-baf5-d3c688576ac5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20ea1e0b-f1a1-42d0-8aa8-2cddc4529d04",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26e104be-8b4a-4e37-892f-702a067faedf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8de27c21-7a9b-4c55-b457-d377a191e098"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "148bd58e-05b4-4649-8f19-1a5c61ed4712",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f9f354d-7606-46e5-85ab-cc28f6121a9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "252c8336-fe79-4508-8b09-2c524206121d",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f81d0e38-8282-42ff-b3c2-77c7fa62c443",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afff8db4-1905-4515-93b9-6a386c2ea895"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3b9ef7b-7ec5-4ef8-968f-83fd5b7d0559",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ca65fa5-0a67-4076-bdd7-85b26d355f51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab2e77c6-a368-45d7-9859-9924be0a79b5",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00f3dbd4-a6ad-4005-92b5-ec0508f880c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af2718dd-44b6-45ce-8171-2c1dd584e36a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72fe23d6-0afa-46df-82b3-e07e50b84caa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cb76690-d9b0-4815-939c-bfdc7d5f72ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97199a98-872a-4353-9959-2bdadad76ae0",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "807c2d6a-6915-45b6-878b-c46e4c1cbd35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6531cb25-80f4-45a9-a253-5d2dc092e235"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59403a77-81dc-43fa-bb3e-dd6bc3b14040",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c399450b-7c5d-4d4d-9ae4-946cf6cbb9d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "679bc77b-398a-4987-be41-3b5df4cf5155",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a51c75b5-4674-402f-9a72-9087d70b892f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88c8a0ca-d7eb-49a3-9697-3e507a9793e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "933bc6fb-c40f-4cf1-8c90-773f3544e833",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31b05fc7-0ea0-422d-baac-67d9d64afa41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43de30ef-f032-429d-a5b7-280366a9a6c6",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7020283-530b-40e6-b317-74e7335ea4e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77b5e37f-55fa-45c5-aa2f-3d0490ce2aca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adfa1ddc-0940-4b9d-85d3-31e5f498fc96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdef3361-8e92-464e-ad11-bd0ea6ebf04c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ffbac70-ab5a-452e-9017-aa86261e4c57",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a30201e-0619-4048-8052-2c6371132166",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d07edf63-9a76-4f08-affb-3e7e00f05f9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0b5b130-6ca6-4aec-82a6-694f25da3fd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4af4cf54-5e01-4df4-b39a-574e02083d25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07661776-b0ee-42dd-ac47-5e708645879a",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86611db9-d485-462a-ae63-26324efd730d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1fbe8b4-e9fb-4a9d-9c4c-78dab348a3b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53b33207-d071-413f-b05a-60e5d003cf1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "078b8008-6716-471c-8354-7ddb60b0cada"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f006901f-2881-48a1-9336-b61db4455689",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7889e89-4bb3-4543-8810-f64667be5411",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98292ef7-f919-4890-b1e5-44b0598ed708"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e20be4db-7ffc-4a01-9f24-b42821ba813c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a898d03-2f91-4d23-a4a0-3c7dd4392ff8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f7baa64-c6bb-46bb-ae47-d37ee21135f3",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0effa51b-930f-491a-bb37-a51cdeaf381e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "865d2d98-fcf7-40a1-8d54-a573e016e977"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d939505f-8c98-4dda-83e0-55389e1f626d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef74731a-5631-4633-bfa8-44b9b7ec8181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed746701-2528-4f05-b59b-eb60ba29adfa",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96b3a609-308e-49ee-8724-45b56048dfd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10429797-ce65-4176-95c0-ace84fa3e1be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e29c1101-8a75-4139-a809-2d7efb240c5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b55f3b22-4638-4ccf-a593-99963a58ceae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed55a2ba-d744-4acc-9c04-28c60b1bc701",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "570e8575-c101-4aba-a350-259b2af2cc64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "500287a8-d3d3-4b4c-b2d1-1f37e4eb5c79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff3916ab-d00f-4f90-8c95-ccb49ee38125",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65500691-2de5-4e5f-ae0a-5377270fb13c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b610f471-b5da-4605-bb4d-d16d472aa50e",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a4f8001-b00f-4b45-a85e-3caf89c18049",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "caea5588-dbad-483d-8a1d-1a7a6dd9d69b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9453591-bbcb-4802-b2b4-ee52c9550937",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0e2694e-7cc9-4e79-9b6b-74628e85dbf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24cfa06b-ff65-4cae-bd95-6abe5f03878f",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67008931-6040-4a38-affe-c1e97e3d396c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4be9d22-e5e4-4600-ba75-f89f3a1d1ce5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bda50ac8-cc24-40b0-8e36-7f875c5af67e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07d5779e-e63e-4f36-b8ba-4cf984e51f25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19a8cd99-c63a-4973-ac2a-2b7ea87de2c5",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89c53beb-cdb6-4247-90cd-d4993481945a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29d157cd-7b62-48b2-9957-3989c675cb56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a49c052-e627-4789-b7b9-53e31e242373",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f35348a8-648f-47d5-b8ac-532832fe3620"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c00a312e-1264-4fe9-bd85-96ffd0b8f582",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c4ef0fd-e329-4b3c-afbc-8d1f4c699ca9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a2f65c5-53a7-4f00-80ce-84ea91398c28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96abcc5a-b707-46d4-baca-def1cdda3642",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6123849-81e2-4fb7-9be8-00ed7576473d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40f26802-44d6-438a-8ca5-da524fc90c82",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fec27051-cc99-49ab-9387-f815a6aaef82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e788cd74-efa7-4918-ba7b-39e489bf0ef7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc26e07b-0337-4a94-b539-1a2c147d4a20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bbef47f-fde9-427e-9b96-46528304439f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5246873-8314-4153-be2b-75363dd3fa84",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1210327c-efd6-41b1-8e17-f88aa5ecddeb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a62a6524-150d-4989-88b0-28b46ce8ca52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d58f7f6-1eba-415b-aad7-469f2d8fe538",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f72b6f9-fa14-4914-920c-43433bf21110"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b8d7bbe-595c-483c-98d6-3afd1e2dd4a5",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d15587ec-77a4-46d9-b5cb-ab0dc61be01b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "950240a4-4bd0-4a2c-96ab-dd44f03cacbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2f205d1-76c8-493e-85bc-5ada3070a5d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f97bcaa-304a-4b80-bb0d-41ecb8cd457d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b8636db-283d-4a95-bbb9-21c4d1a54fca",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56fbebb9-e956-4738-b877-fe4d66195d4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe84ec8d-8429-4ca9-bbeb-73cd66328d13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6452c11-884e-4fcb-b8fe-4d58d0b0f391",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6078c415-fc57-491b-ac31-48e384133bea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff4d1a13-a42b-4dfc-b477-2fe6ee623a6b",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "121b4001-c04c-44d3-a060-0636560b5718",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4286556b-c28c-48b2-9652-3cd1d6c6970a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb3b49d7-b188-469f-a4fa-555513343482",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93b877b9-5a1f-4e94-9881-0e4307160a46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26d9ad23-8e09-4b94-b7fe-9b2173be5bff",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2f3094c-a48c-48e8-ab08-9729147077fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8346a9f-aabc-4f1e-8320-2b89d8687743"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ec5b1bf-d93c-442f-aec6-34778bf47b60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "534ffc92-2732-4198-b0e6-6f106a2d7834"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb2ff446-db8a-4511-873b-31695e51382b",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4701af8-025a-436e-98ea-ef0f07d723ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0f641bb-ab66-435d-902c-43133088ba64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5b587e3-d0a4-40f5-9f2a-dbc69a9e6dc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1929ad90-bd15-45b9-83b0-f81f7d379f33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d346943d-a943-49a4-bd17-a1e0ba8acb49",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1614364b-b1ea-49e3-8164-d02927eb61c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef65e559-ce44-4da0-8ad9-0216d80ccd22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "111e0b9d-2af3-4fee-9d5e-4ec7f4402136",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd62c74e-3611-40fa-ad0f-774a04659bd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad55ac38-27f2-4d49-b987-c83a93b41880",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48899dd2-374a-4c3b-b190-ef7a2f4651d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "627edea6-d282-4e88-8ff5-60b29ece6281"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4089d841-8da9-43ce-91aa-e42c79c9eb8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ca558b5-c48e-47be-b228-8a0c475bbc3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbe80ef3-5772-4428-8e98-022aaa8514b6",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bbec8b7-518e-42f8-9b45-75d3d5e3e353",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d1fd94f-c5d5-4dea-8680-7973b6b77715"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cae125e5-5057-4a97-84b3-99aa752e13b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19e720e5-fa80-4288-b091-8940027f0fdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1bdb161-2dd8-4c81-b48c-18fff910f572",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "486d33cc-abdb-4708-8f8b-bb82186ff321",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "650353c0-6a70-4a23-a878-e7c99e7bd6ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9090365c-2273-4238-80d5-8489b949702a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7d72b9e-38ca-4cae-bbb9-e2ceb8920796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02278d57-7a45-4d28-9025-3a5104db892f",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc5939a1-4d6a-4987-9802-abd6cc8b2654",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "738e93a0-6500-4e06-b9d6-9b991dd802c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80bbcad7-c51a-492a-9278-819a25339e79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc69fb09-3f81-48af-8296-2ef6a6321e0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43828911-15f6-4441-b1f0-5b372639f6c7",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da5057e-b40f-4197-95b7-3d20d5ad8158",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "081aa94a-8f53-4110-9bdf-be45070f6c50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f665fe7-6d1c-4bc7-8ab7-f022772b617a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "314d96ba-5fdc-4fde-afb3-29475af089ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f280c5f-e80a-4d1d-bc58-d4962442e596",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b14d5c9f-a1dd-4b7d-8530-dc0106b000d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "772072c0-307c-484b-a5a8-db0ad97cb48b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c43dd7ca-bcb0-4422-92a4-008a317f66ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "994d22e3-6577-462a-9bba-4de750e75c7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e15f52f5-eb85-41dd-85c6-caa13c2861a7",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0439082-6e7a-4ebd-9d96-f0774287efce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b23560dd-e955-46bd-860c-f1ba943e4e07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b768b1b-fd1f-44df-82ce-f74c1250a74f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e08cf4cf-05b3-489d-857e-e2dce2bbc5b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb43ebda-fec6-48ab-8407-9cda5c72df63",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16016d21-1ebc-4fa1-ad1c-6b6bfc79577a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9423d81-fb66-42d9-80db-b54280d8ef8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56f49e47-6831-4589-8fb4-592d6ef79f87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebbca2d1-1e09-457a-ac21-ac201f6ae614"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4885e176-cccc-4a28-aa01-a2d9e00e40f2",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08080a91-0b77-4070-9bd6-b30efa87cb36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d1e9757-1d36-4ec7-89b8-5125dd035eca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a488f202-e6f0-4525-bb13-137e7ac2e1c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d02ffe59-0312-4ac4-acb3-0d5ee58e54d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "282dd7cd-6ebc-46fb-bab8-fcc4a427fe68",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80e79e42-dea3-46b5-b921-773fc2e08bb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "285f7ab2-7598-47d7-acfc-29cacb948b28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf6b1a4c-678c-4628-9e13-f2e2e5653fa3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41bdfcb7-3a22-410d-a0dc-a260d7aa2aef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cb5f9ef-21ef-4f46-abc6-2cdc913978d5",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5207f7ce-7bdd-4ccf-b789-facf4ab4b09e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ff2ce27-0433-4094-b4d2-af7811d4509c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1289ddb-82b7-4d9d-a6e7-656258fb99ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c98a66af-49f4-4b16-baba-efd101f1d40d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cca2453d-aa7c-4dd7-8d71-110efa4feaf9",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e469cf8-ed07-4724-b027-86f03d15e967",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7278b567-b340-4fc6-94f2-233ea3ae32af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba8926ae-abaf-4774-84d9-4656de7ed71c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f18b4190-324d-4d28-87f0-494969562c28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33a81594-456b-4c6b-84ba-3a5272c333be",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0186424-663a-49f4-b89e-ca47b8c0183a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0de8c95f-f365-4f83-b027-1a5989ea7ec4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de53ae29-a65c-4dbc-92cd-349e473cba28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "893ed329-8c4b-4c3d-979b-1c99de286519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17dcbe66-6174-483d-b094-fd590804b0c5",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc833794-7a79-4616-8901-bcb4a80d1fea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "712f815d-ac73-46aa-b568-269b2d3c0944"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d05dec11-ae86-47cf-9859-433a24b578fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0337f27-e527-43d1-a9c9-5401c93a1a93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06b55a40-cbe4-4d66-b83e-1f407969e030",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59d78b65-768b-4cc0-a51b-4ab014bf8650",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b449556-1272-420d-97d5-c3ec9c64c30d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bc6aa9d-d13a-4150-8d3a-1c8b7fca6a35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9a8aa79-4e85-4ebe-a936-8aa7c1e7440c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64307667-4dd1-4b8d-9e65-e6761a0a77fd",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e35ecfb-6b29-4523-8763-113141488387",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87bf43a5-cca4-4e66-8fdd-c0244cae2c75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "402509d6-4406-4617-9eb7-6b515e925b6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef6ce56a-c00a-4240-b667-9128bc554496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac45bc81-5b4f-4778-95fb-7d7fd4e8fe83",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ae0d040-7fee-4ef5-a4d0-af3fe6cf61f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe4f6eb6-2660-4e40-bc21-6a2c25b2b1bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbf91131-bf7d-48f3-9e83-576c5955961e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4b6b38a-bb49-4153-b248-f9e6102a6187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cde009eb-ca50-499a-a479-0b2049432c93",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59f3491c-ebb7-436d-b266-f0400ddc6c02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "801fc1fc-f56d-4e3a-bce7-afb22710866f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27a7c627-4fd4-45e1-802d-274a621efd01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba996692-3aeb-4c89-9602-2c8fa7c4d9c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96ab81e8-bd9c-43ef-96fe-42bd74d6bf8b",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46b9a124-65ea-4783-ac06-9d09fd587adf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcdab173-dd2f-4080-a44b-789145249667"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de1aba36-ad91-48bd-81f8-b00a095bba56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edcbd57d-f6f9-4a3f-b201-8388124f41a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e53cf78-9bbf-42a5-99bf-d1ee0f5ae34c",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8a78b2c-13d1-4339-accf-ba0e7d80354a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03234f34-433f-4e87-92cc-16d635cc27bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b188c5c7-5d99-4b42-a22c-30174d85a272",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7200239-1cdf-4dcd-9ebf-68e4a8491bad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f90f5d66-b96a-4f6f-8e63-accd425883b7",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da4b4f7a-b1ce-485e-9624-adbe45d8d8f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7f14811-2b15-4301-b0c5-7681a0d01dcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99eb34e6-8ee9-4dd8-9c38-18fc0bf95854",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3adea84b-fc3e-494c-8d0f-53e1ea2dcc36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f5504dd-1319-4e0e-a74c-78e2caefd1cb",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08b1ba4b-713a-4b4f-adca-e30b0b650cb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42ed23dc-903e-496b-bc3e-361ace3560f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8768494-5222-4ca3-a45d-2b9b31e583f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ddbb782-02c2-4f9f-b307-3a1107491395"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6741017d-76bf-4c1e-962b-d52cb5fe9dd6",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d962a56-6d89-4e80-833a-add3b2d8aa8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd34843c-c4be-4ad7-b93f-057a9e070a62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2393705-ec38-4dad-83a0-40449b96ed7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91f83ab7-c3dd-484b-bd96-749f9fd2cb55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2ed7a73-b0fc-4214-92e5-30da863c2686",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca361740-36a5-4adf-9628-e0b26aae6029",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb49ce93-7b10-438a-897b-1ab830172dd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24ad8b65-c575-4a73-9226-ed5c8a70664c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4aa5246f-3ffe-4289-82a1-705d7426b9bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d547b9c-44a5-4ce2-ae0f-03a9c59bd190",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87de074a-468f-4fdf-8f8a-27ef412f4a76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42cc8dc2-1aa9-444d-8de9-e6eb4c4904ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d3f4e26-5aed-4912-9c01-89cacc3b9121",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ec7e433-565b-49d5-adaa-311c03963f12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "111af699-f930-40d2-bfe4-42ee8a1b2a9d",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb19f769-5141-4109-b5de-ba7cb9968b90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1092525-ae09-4ae4-86f7-cfc9e830b505"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e05a6a40-ccdc-4ef0-8391-2644d0b58720",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b08fa08-c21e-42d8-9d9d-31e6e73743d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58dd3787-0fab-4410-8ad0-28db116d9bad",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9593eb72-d470-4f1f-8947-3d6342723741",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4e85064-d548-419c-bcba-e75bb481155b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "084c2316-40ce-48bc-9e26-0544e8d1644b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8af766c-f2d4-4332-99e9-5a4eb51aa12e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3482de30-df69-4c95-b2ac-06689041e154",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eb0b53d-25af-4fa0-9839-cc7ee4d58600",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0788dab-134d-4bcf-b7f3-f4c5beb3ea63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8067e380-c8d1-4023-a8af-e0095a930176",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80588ecd-1529-4623-993b-2bc0f2927552"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7079e8d7-7b60-4a57-aa81-4354fed8ab72",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "723bbfea-f5e1-4fb4-a0f8-0b1e4295a9e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7dd49545-ecfb-4694-a9c8-938cbf44509f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75a561e0-52bc-4b3c-bd99-8c393b7f42b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af5b2408-5b17-42ae-9976-891480567d95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fefc74b-7354-40f1-8f9e-7baa6fc4d9ce",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2da420bc-3ea5-48b2-bf0d-73717a68dd5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "becc1fd8-b499-4ad3-bac8-cf15e58a0542"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c12a76a-981b-412a-8042-136d7bad8d4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76f425e6-917a-471e-9d80-bbd4b5e73343"
                        }
                      }
                    ]
                  },
                  {
                    "id": "692d65d9-beab-4880-a89c-31bff07eb3ba",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8ae699e-d538-4649-856a-a6a66d3cd879",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61f2078c-7370-49df-a7fd-f19cc2c084ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "315649e0-2916-437b-a353-dc082a5d32ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1abf5e17-ddf7-43af-8548-6258b65a3c41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4291676e-64de-4f66-bc8e-6b25737502a4",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43e8a71e-ce0c-4665-aa6d-3cfd5db2e8a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66adb4e6-37aa-4624-bd0f-a84edd13e4dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afa95895-fc05-4393-b968-7232c08a432c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "000b39c7-c2c3-443b-a577-94ddd53ae4a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "578016ca-994e-46bb-a646-da3169fa14c7",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f723ad5e-b442-499a-95b6-ed78aff48c73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe7bca63-c530-4fe8-b1fd-e03187f69ed1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72170d70-2501-4ade-bc6d-24beb8efbddb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9202548-0300-4d40-a747-714085f88340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39707641-fee3-479e-bfd7-01229a758827",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c488a7a-c059-4f75-9274-6b3e90dc398b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2ec69f6-b1a2-46c6-b804-53c6f814f9f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb2af673-098f-4d69-b83a-e68f447e7463",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d477c1c-6990-44c8-af38-d0401dedf0ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2f23512-59ee-40ee-8b6c-e3a4b2327cad",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82446b7f-a2a5-46c9-88f8-86503832baa1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dffd7e3a-ffce-4e87-bfeb-7a4af51f86bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78ee9e6a-ca5d-485c-8a45-5f1555fc3cfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38678c49-069e-4179-830f-e1501b3121ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dbcb368-fca1-4d1b-9416-f6d4e91953ea",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dff4c4ac-26d7-410e-8ff7-79edfffa3f05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d2b9e6e-3dc4-4b21-b2c6-67ab016118b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93994e46-7eea-43c5-91c8-dfd10354968a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a102db3c-20ad-4fdc-99e1-b11edc78711c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e7358bf-5f4f-40ef-b177-76bac2940135",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4b75c6f-96a4-4f35-904b-a39ecf21b0ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09e00c2e-6c61-4345-8cec-70f28b172490"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e419c083-dd01-4114-a2e3-6e0a5a4ef829",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3d19561-d0fc-4e51-8c64-2da300da3b0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6a9c967-f0b2-477f-9966-77b9b7ee5592",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6f845ac-8b46-468c-bdb6-57f6d66f1ca5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eedb3173-49d2-4c1a-9b21-54ee78132a04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be6b5165-0d01-4e5b-8bb3-ac45747fe914",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "170ce3e7-7139-4ca8-997c-719c341a7d6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2be0b993-9d36-4023-8c1f-7ca23cb39ad5",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2bb4630-ca41-41a7-a4d3-5743a0dec7d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b03031e1-c221-471f-bd72-3031982b0ac6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d64fda5-1ef0-47b9-9d2b-d3339fd635a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "461fa7cd-e61d-4664-8711-6d704b15b6f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cccf2fb-6abf-4703-9ec0-74cd1946d56d",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76c964bb-4dd5-49b8-b442-2f1484699557",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e180db5-1a77-4b28-a843-9a0525742f4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61c3fb75-929a-4b0d-b2fc-d9fcf8d30826",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3732230f-6cbc-4578-93bf-b772bbdda794"
                        }
                      }
                    ]
                  },
                  {
                    "id": "061c37d3-48c7-4a59-a537-45a13dfe36a7",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afd938ad-de30-4b76-9ebc-e153bfc256f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ddb9b5d-e81b-45da-8ea8-dc676777ffff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5baa591b-015d-4e28-a1eb-f307524b77db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb44e4df-63d7-4f24-a0f5-a2c8fbc48f48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73f0235a-d973-4fa3-a953-dfe745df2b4d",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af8e9418-2429-4bc4-8263-e9c168c81318",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0de22e89-b143-4d1a-b3a8-22cf4091dcf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d96eec37-d22c-43f9-ab22-ccda693dab0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21f5731b-4030-4614-a2d0-99ad766a8d1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0850b928-0a50-4d1a-939c-c80e4c7606d7",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8348c3ad-411d-4e49-abb1-dd951645f2ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e315cf96-4973-44dc-bb5d-d2f5554cc9de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b32ba55-bd42-4d0e-956d-06122d833fe1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e838f3cb-11fb-4fff-a1e8-55d6ab9da376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10a03bf4-273b-4a58-8ad4-81546018f13d",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5182236d-cbf0-4ac3-8374-03a632afacdd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "beccad64-b184-4961-ba9d-2ee5ef3847f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b0446ce-d67f-4234-96c1-8feee1d65d1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97676e0d-8c42-4a89-9f1e-3ae67c9e4bd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1947576-82f8-4b64-ba09-90aefb604c1c",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3a777c8-5d65-4e7f-bfe4-c818d3f0444f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5478068-2952-4f70-bf1d-960c7554c88a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ae8c289-6b96-49d4-848f-12e7bf7a6267",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "897b76ac-d952-4937-8e49-b38cc0e94c49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f2fddb7-6adc-4eff-956e-c535cbb7e273",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27e21be1-f09b-4952-9e21-d69f253dda90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13d3af1e-b6ff-41ae-8fca-72de87c89582"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "450d5781-3a5a-4ad7-a486-8198af7e37e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a84c2013-c658-4df0-8a39-6ee12ecb48ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d33606fc-46e4-44db-bdaf-954a270519d2",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa5cc3d9-82bd-493a-9826-6accf8c80efd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cade976a-b67c-42f4-aa99-e57142fb64bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9edb629-f43c-40be-923f-4dec3e177e23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b249dc18-4832-4246-85dd-698cee31a25e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e9e089f-0c9b-4dad-99d2-cb524d6f8c29",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82343ffb-9f7c-4559-bc8e-4c9a7b97c2de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "760904a3-8f8f-4ef0-a13b-8f42829e837d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27c8ec53-6cf6-43cb-a819-418280a766ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81e39831-ef0e-4557-ad37-86e20e4e4a34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c0f29bc-a7f8-4a75-9b27-11d43415cd5d",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff0344df-5591-4634-ab45-e279ac1a934e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cfa5d01-19aa-4a94-af5e-2a5ac2f93659"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd675608-768a-4dc9-9551-f7ed69d155c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b4510dd-3a2f-46d4-a74b-c8084a4a3f87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6ffefe6-80ea-45d7-b850-d2762469228e",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9badb9cc-5d40-443b-ac79-ffab4a6e956e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5021d9d2-28f3-4566-9131-00848e29860b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98069601-fe4f-4bbe-8c1f-077d07e7b757",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2232b41-6936-401b-ad59-053f2946d4fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "123b1479-ed7e-41c6-a4ca-e9971e3837dc",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4ef7bd5-3b1c-4ff0-b500-708e5295215c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "022f952e-88cb-4818-bd01-51c159c9d536"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26d858a3-048f-456e-a710-9acb297f4380",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8da0bb8a-5f6b-446a-9472-791d46d16eb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dd9a062-a7ae-4196-94de-74f75f3dbe2f",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92d0909f-9115-4392-95b1-fd1bac11c16b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "567a4b0c-3668-47f1-a0a3-143ffb4fdc9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99fde447-d554-45b4-a995-55760726ac7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9618e86e-db2f-4333-8bc4-8f350d1af884"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2928707-58e0-4125-9469-f49387b2712d",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c3755a6-0d11-4576-810c-965411df36d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5839d298-26e5-4f8b-9386-d1b8b7d6e27b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7515bcb3-64a0-41df-9f3d-06bf04204b00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aab697f6-9e68-4a9e-8d8d-2e3a93dd58e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaf1f5a3-b946-41fc-ba13-cc281dc70702",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9d84355-60eb-4bd1-8856-e8830c69fd74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c3c0f2a-d848-4b1f-93d1-602143b7c2a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa613d80-3bfd-405f-b697-b1b7497a0712",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e6e37f1-0725-42be-a56f-732edde7ce39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d9e09a5-bcb8-4be8-841b-4db4ece86ac5",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dc2f507-a411-4e2b-a64b-661bf12442b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "582e045a-8ab9-4acf-977a-2073d0c7a263"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12e3e260-75ce-4a85-b6fa-3ba32131ac9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "464a0900-0587-4f84-98d2-9a9bada3ec39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "022a6c95-348b-41ab-bcf0-8ab676dd3b9b",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "292f5535-0a18-4b9b-b642-9466fbac533d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1a2b804-23d9-43a1-9338-4ca3e558b3f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1e18cdc-1eb8-480e-9855-04671804541d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "543d8964-df47-4208-956e-013d94fab505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9f87201-7258-448a-b1f7-dc6dada5c33f",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca265274-b108-479b-9d48-774133df9e4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77541824-c695-4b87-a3f5-c52404e3ab63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d172ea70-c7a1-4b91-8aac-3457ef845093",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0ca9242-bff2-4889-82aa-55aa4124952e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "644be32b-f459-44bf-b069-414116636345",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfd71407-6cf6-4ff5-9c91-5a1043b6acab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98009ad7-09ab-480f-9436-f5a1c201ddda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d02c890a-a9f4-4b32-b703-b33857cceaf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a23e7ef-4e53-41be-b982-b8ced7f31d4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab158b93-d3b5-4d72-8e2c-500bb7bc1c11",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3102e556-b3e4-4d95-985f-bc74d9cb0e3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c27f443-2260-455c-8b48-8ba4dc7dd56b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7ac013f-7eab-49d6-af1c-5b94f0aafc0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90ed8b00-e58d-4c44-adf5-db2ab66623c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "703c3d40-c6e2-494f-9311-1631f7deff9f",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35e83b1c-8149-4da6-9c36-7c65b6dbcfa4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77af9011-a026-4e9b-b244-d47e463d57df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a53e180-9a1a-4ac2-9bd4-7c36a0b1f7be",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ec6d67f-a988-4d96-80b4-95dad24279b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47cad08c-3e0d-4c2a-b09e-91d3eb60885e",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d1e5848-016f-4ce5-99e4-c2311c27d9b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ae17c03-0b64-4e52-b012-238811d422f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0174315b-1283-4c65-aee3-f2b228e4e49f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04dfa79d-a362-4e5b-8fd8-7870b6820dce"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "37a46dd0-0303-4495-a4d0-6e78f4190715",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "98fee08a-9109-4477-993f-429b44f3d16b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9781b787-66d4-406d-be4f-c53fc058644e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8859d179-e6e3-4c41-b6ce-8e76f3ca56ea"
                    }
                  }
                ]
              },
              {
                "id": "049d27b3-f496-4f2b-8ee7-05fae9f75f28",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dab73b31-46b1-4cb1-9408-ce6e97a28212",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "437ab1bc-52c4-4442-b64d-00ca97545e30",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b6956337-d55f-4864-a9b3-57b9b51d21c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b88a3c5-a3e9-4bfb-bf69-545b467d65ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3d54985d-19ba-4a15-8cae-69f2637caa6d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d4fa0ba9-29de-434b-8087-40cc5ad20a19",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9194ea22-d916-4727-b1d9-246d5695d25f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2da70191-eebe-4cfa-b5ed-de5832f4d715",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7f00f256-cf63-4714-bf69-b2192619419f"
                    }
                  }
                ]
              },
              {
                "id": "b2547b0d-c947-4d7d-9988-72bf5b45d902",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "9089bd6d-6e79-45f3-9a79-708c01ab1191",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef3d100d-9c1b-4b21-bcfc-9ee59a5ceeca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "41d09844-bc63-4fea-b808-5177ba5208e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d25e456d-49ac-4081-82f2-96d007c990ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "100b2b46-8ef6-4570-930f-ca3cd2954de0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b37f4a47-79f4-4566-bfbc-b424804e1c35",
            "name": "Positive Testing",
            "item": [
              {
                "id": "306c60e6-8125-4955-93ec-4215c98f9e71",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ef79b12a-e0de-4675-93ef-9a484b721857",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "eeca4e0e-604c-4772-bd28-a861febe5dcc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ee2e5bff-530c-4c15-b454-70905a40940a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a6174e76-b65b-4253-802c-0ec45ed0d6b8"
                    }
                  }
                ]
              },
              {
                "id": "96f17a41-2b91-4c62-b08b-0a744d09efe3",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b21e1746-af6e-4a3c-8e03-3bbf74f7e266",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d3741155-13c0-48fb-9dd4-21b22732333d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a2621b57-834b-415c-b0c8-1a7e320d6646",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "09e88ee7-ed82-46b7-9b59-39f67c6be445"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1a0e629c-d35a-4ead-aba1-50c08385f1f3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "7c53893b-daa8-4ff1-97d8-548a4aeeccdb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "76f2fbd8-06d7-48a8-b5f2-4d5b1f0d9a8d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "88fb6d4b-3a29-4d9a-98c8-3f5807d7ea9b"
            }
          }
        ]
      },
      {
        "id": "73dfba3b-aeb0-43a4-8658-c410d2d32d98",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "66f32e1d-1eca-4002-828e-8bcd8747f51f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "53c98109-af21-4efc-a9d4-e601c051b7ed",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1aaa60be-0d79-4ad3-b02d-46065d72b2e0",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "395f6d23-99fd-4cec-b62e-cde18ffcb3ea",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9f4bc597-6906-45d8-ba02-2c23ca251d21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5ca5d34-7d4f-464f-aca7-5b9db47f9d77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ca8b206b-7862-4336-b667-fa1fc81d1423"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1f262ca8-4847-445c-bc98-4c68ee42162b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "77a33c05-2c96-4543-9e96-a80d14c292b3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bd1b831a-f112-4fa5-8739-a53a87262366",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6850fd18-4147-4f4f-a713-aeff73feb041"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9bc418f3-53c4-48f7-8957-0ce1b961fba6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "ef89e4ee-e058-457f-a7df-f5d0ecada07d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b78aacc2-9b8f-46e4-b23e-5b649c79e2eb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "06d07037-8bc3-43fa-8ada-435433279248"
            }
          }
        ]
      },
      {
        "id": "07b471d3-289f-4153-9c0c-b5488f9ceaef",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "04141f8a-6530-4e1c-9660-b103fd6ca79c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d86be30f-9190-4202-a23b-bb291db96cf5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c915de08-5532-4576-bb3f-bef9cf5b129d",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c87847f7-0f57-4337-a5e1-7677e969a040",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3440e172-b5b7-43ea-9e87-b2fbc765b756"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b98de4aa-f957-4009-b3e6-2edb9e591d75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e6b2b102-189b-4f70-8740-1bb933d5ea89"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ec9c34f2-60c7-4461-82ee-a02a88a4550b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "74a5aa54-e9e7-44a7-8c0d-4262f8094979"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "80aa2948-7e46-491c-8641-8108fe81b0cf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1f82afb8-41f0-4a47-9f74-ecb5a173de4c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "060f6046-b49f-44e6-9869-33bef302b156",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "aedaf806-34f0-4d20-9c03-60f378518639"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a81c30fd-5422-40cd-a767-0aa00014af28",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ab595406-eb12-4229-b89c-b0d5760f006a"
            }
          }
        ]
      },
      {
        "id": "b4d090b5-f11c-40ab-a74b-b3caa9d2addb",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "35e77ca8-820e-4ae1-be56-ef76e82cb3c7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "33c02d25-585b-451f-8b5a-74a96de10d78",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0dce7417-e866-4084-b5e5-57b8576ba684",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9b5f986-6c75-4d8b-953a-b4c291480553",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e7e0f44b-d55b-4274-9389-12c02a2521c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1570de68-1b53-40dc-8a12-fd2f2340f1c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6ed10acf-1291-4194-8d5d-e710201d65d8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9e871b7c-e2e9-4d49-8e78-e991f386ba16",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2f95bb73-3c34-451c-aa66-5049e7addb8d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5f3d456c-8c9e-487c-98eb-12e0eae450df",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "05a709de-58a9-46e7-935c-1d37a946fe33"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b1d0dd9b-7a30-4bf3-beb2-b1819a559989",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "76572ddb-85bb-4a22-ad64-a615ea928c17"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5a1ccf15-8d0c-4629-b93b-e3cb6b96fc18",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5bb5288e-2239-4594-b179-a71c34785742"
            }
          }
        ]
      },
      {
        "id": "1e0b12d2-76a6-4478-9d4c-df665c34563b",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "59a7ed39-4fcb-40fd-ae51-a76e342d8b7b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8a96a245-4402-49d4-824f-769cd013f6a1",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "254fd69b-d037-4f7f-ba25-643cf8d22eeb",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "125ab8f0-61b7-4a46-8a41-71e449a2a713",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "61998e85-2fae-4eee-9b37-e4f23478e16b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 85.26666666666661,
      "responseMin": 5,
      "responseMax": 756,
      "responseSd": 79.74942629356066,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1710462850073,
      "completed": 1710462883645
    },
    "executions": [
      {
        "id": "2fe2977a-2799-4801-aa37-ac168213045e",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f895ed55-56f2-4791-9244-5424bc0c73cd",
          "httpRequestId": "36cab32d-9d3d-4430-99a6-25da508529fb"
        },
        "item": {
          "id": "2fe2977a-2799-4801-aa37-ac168213045e",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "1cd972a1-953c-4f5b-921e-4fc087722d59",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 0
        }
      },
      {
        "id": "89fc29eb-9623-4e55-bfa7-22b98ad5b678",
        "cursor": {
          "ref": "f18f3967-da03-49d2-aa50-c0f189335a31",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0dca778e-0b51-4eb2-889b-257dcea1b913"
        },
        "item": {
          "id": "89fc29eb-9623-4e55-bfa7-22b98ad5b678",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "8f6c9efb-925a-4e08-87c0-0dc9cb4353a8",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "0856f68c-ec94-4935-828f-a6dc96fd687c",
        "cursor": {
          "ref": "d2e2497b-357b-46fc-8319-a25ed2365140",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f1dd097c-5cd8-42c4-9cdf-226760a2fd3f"
        },
        "item": {
          "id": "0856f68c-ec94-4935-828f-a6dc96fd687c",
          "name": "did_json"
        },
        "response": {
          "id": "cc7e9e66-9ef9-48a0-9ce8-1aa816b60dc3",
          "status": "OK",
          "code": 200,
          "responseTime": 390,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84c1074d-7d66-4bb1-8d27-0656d4a62f58",
        "cursor": {
          "ref": "badc63da-988d-4c0b-bea9-5c42b9521e5a",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a0281f44-af19-4f23-baca-93a0ab62db5b"
        },
        "item": {
          "id": "84c1074d-7d66-4bb1-8d27-0656d4a62f58",
          "name": "did:invalid"
        },
        "response": {
          "id": "a94cc7ac-6f04-4b13-bb0f-1b397c75c72b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84c1074d-7d66-4bb1-8d27-0656d4a62f58",
        "cursor": {
          "ref": "badc63da-988d-4c0b-bea9-5c42b9521e5a",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a0281f44-af19-4f23-baca-93a0ab62db5b"
        },
        "item": {
          "id": "84c1074d-7d66-4bb1-8d27-0656d4a62f58",
          "name": "did:invalid"
        },
        "response": {
          "id": "a94cc7ac-6f04-4b13-bb0f-1b397c75c72b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8327a46c-7cb5-4f75-9176-d01dc2811708",
        "cursor": {
          "ref": "8b571222-4b97-4588-8b90-ffeb76dcdab6",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ae29c411-5df7-40f7-8998-4202f6f7e017"
        },
        "item": {
          "id": "8327a46c-7cb5-4f75-9176-d01dc2811708",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "173f5815-9d73-436d-9ebe-f40395f63c98",
          "status": "Not Found",
          "code": 404,
          "responseTime": 111,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99acd35e-8794-43c3-8440-19ed2db95e54",
        "cursor": {
          "ref": "dcaf570b-b045-49ba-a032-a303357e73cc",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a7a73376-43e4-459b-836b-68b3ec6896b0"
        },
        "item": {
          "id": "99acd35e-8794-43c3-8440-19ed2db95e54",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "94329e1b-c567-43fd-b01c-c4d4ccf7cca6",
          "status": "Not Found",
          "code": 404,
          "responseTime": 61,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cbe7035-e3dc-401f-91c6-9de5fbd9c53c",
        "cursor": {
          "ref": "5eb6f2b9-0506-4c4d-80ba-cba2941bb33a",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "11b66dbe-83bf-4fe7-b7f7-7f66d98c259c"
        },
        "item": {
          "id": "1cbe7035-e3dc-401f-91c6-9de5fbd9c53c",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "0aec99c9-72c8-486b-a208-c50a17daad2d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aec5bbb-f1ee-4b89-b648-5848ac76daa5",
        "cursor": {
          "ref": "5fa7d4b1-f379-4f96-aebf-1fd55baaa2ed",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "64f4a897-a5a5-490c-b40f-16cad0301008"
        },
        "item": {
          "id": "5aec5bbb-f1ee-4b89-b648-5848ac76daa5",
          "name": "identifiers"
        },
        "response": {
          "id": "fdc014e7-486d-429f-90b3-9aa69c2364df",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f48a01a-4555-4677-bdde-eea22a5e339f",
        "cursor": {
          "ref": "d236830b-51f9-4770-8671-db1b460be341",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f97837b0-6d26-40e1-b1ad-4b241dee5034"
        },
        "item": {
          "id": "9f48a01a-4555-4677-bdde-eea22a5e339f",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "8b9154c4-b606-40f2-a526-a3fa100fa91f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c41fbcd4-e44c-48af-a0a3-d4219c91d5f2",
        "cursor": {
          "ref": "7f5d06b1-2b5e-438b-bba9-2cfd382ddfff",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "1462b09b-7d51-4a21-8a89-6408e607b859"
        },
        "item": {
          "id": "c41fbcd4-e44c-48af-a0a3-d4219c91d5f2",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "cd6f5b2d-cd2f-42a7-b53f-3cefe079ff62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "715b9df5-74f4-41c7-a051-880fe3e3e9d6",
        "cursor": {
          "ref": "42856a61-a6b9-46d5-961d-e51c1ed04912",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "e88e86e4-b77c-4795-aec6-e1d6ac1961e6"
        },
        "item": {
          "id": "715b9df5-74f4-41c7-a051-880fe3e3e9d6",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "55b8bca6-0d6d-4fda-8471-a148a22c4235",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cda25bf-9b18-4fb8-8ff9-510456925e91",
        "cursor": {
          "ref": "d4d62c86-4ca4-4a31-b875-b2c44db40676",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "d7de3840-ee8c-4ce9-8cbb-ab43c774c61e"
        },
        "item": {
          "id": "5cda25bf-9b18-4fb8-8ff9-510456925e91",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "b22612e1-318d-44c2-9252-5222d3a772a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6acd606c-9aac-455f-8ecd-a8a2b76908e2",
        "cursor": {
          "ref": "af5e11d4-4284-4a27-934c-cd21bb99db73",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "f8003803-7991-4d7b-94db-5fdc4a2f6cfd"
        },
        "item": {
          "id": "6acd606c-9aac-455f-8ecd-a8a2b76908e2",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "cfc69b41-9dcf-4c2b-a7cc-9acaec71f8bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d2ee0e9-0e20-4ac9-839e-0e7cdd073adf",
        "cursor": {
          "ref": "b5dd455e-6cb1-488d-bdb2-5f693fe3a12a",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "f99ba6a0-c426-492b-b8f0-98edf3e6df3d"
        },
        "item": {
          "id": "3d2ee0e9-0e20-4ac9-839e-0e7cdd073adf",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "2f5700d5-49e7-4fb9-a8ff-267b5c005011",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bfba4a7-eec9-4ced-97b3-b9a95323f8a1",
        "cursor": {
          "ref": "9f4c4d41-7c11-4256-b278-cb63093a875f",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "83738b0a-3d5a-414a-a38f-63122e559926"
        },
        "item": {
          "id": "8bfba4a7-eec9-4ced-97b3-b9a95323f8a1",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "4421b9e4-3703-4dc5-b8be-0cd9f8eac7c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d2aa712-485e-4e51-97cb-553b1c36a470",
        "cursor": {
          "ref": "57b5b4ed-dacb-45d1-92f1-5c2af9baad49",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "eb50b75e-2413-43d8-9e40-ccb9d7782f90"
        },
        "item": {
          "id": "5d2aa712-485e-4e51-97cb-553b1c36a470",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "78ddb738-a9f5-4713-963a-867ead6222bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de167358-5245-4f1f-8dd7-99543f1b91b9",
        "cursor": {
          "ref": "d65ae650-024b-4bc8-8e80-ac56d726d12c",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "ab41bf28-d52f-4718-b81b-9e65866ada8a"
        },
        "item": {
          "id": "de167358-5245-4f1f-8dd7-99543f1b91b9",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "da3c7c1e-75a4-4e30-ac20-d425d5a11bd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9205da3-a9e1-4fbc-92da-4d8b58126414",
        "cursor": {
          "ref": "d15b1726-6356-46e7-b9c4-fd62d83667b9",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "eb939fc5-8f99-4e3e-999f-61a406e0421e"
        },
        "item": {
          "id": "b9205da3-a9e1-4fbc-92da-4d8b58126414",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "cd6a790e-8596-4abc-acd5-afbffd471f49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2553f8d-5558-4b25-b3b2-d26d800b0ad1",
        "cursor": {
          "ref": "0b6f4c76-a3be-477b-a3f7-15cc5e411b8d",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "db585eb0-c9e1-4fa2-a019-9aa8c298fbea"
        },
        "item": {
          "id": "b2553f8d-5558-4b25-b3b2-d26d800b0ad1",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "a57db1d1-0f01-49b5-afd4-ff563454a0d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7106988d-cd5f-45f7-9318-c910040fc44a",
        "cursor": {
          "ref": "2cc05c83-84b2-429f-97d0-94dda555ce48",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "499e92ab-9433-48f3-9dd0-e7b3ed82e59b"
        },
        "item": {
          "id": "7106988d-cd5f-45f7-9318-c910040fc44a",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "99860d0c-04ed-482a-a503-3070cb52cbe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df3bb6c7-8504-4b60-ba9d-354f603fb787",
        "cursor": {
          "ref": "544b5712-8e62-424c-9187-e1e3544e6546",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "c77a2a33-4824-43d9-a2f8-98fb7b3ec638"
        },
        "item": {
          "id": "df3bb6c7-8504-4b60-ba9d-354f603fb787",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "e38e32c1-2fd8-4fc6-aa6e-ad68ddcb2f8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be97a29a-bba1-4749-968a-4b5ab154c5c7",
        "cursor": {
          "ref": "697548c6-713c-481b-8626-42f050441ae5",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "9578dbb3-d3ff-438f-92e6-d96c440ec74c"
        },
        "item": {
          "id": "be97a29a-bba1-4749-968a-4b5ab154c5c7",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "b81d8621-8477-4e1b-8ac9-320d37d9bc41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4f8aefa-89f6-4c26-98b2-1e0541783191",
        "cursor": {
          "ref": "4885cccc-6c58-4707-81bf-e1249c0efd01",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "55086e4e-d5ae-4de0-837a-cdeb2e50a65d"
        },
        "item": {
          "id": "f4f8aefa-89f6-4c26-98b2-1e0541783191",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "750f08d4-2a91-4978-93a4-97dea35cedb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a518017-1afb-4891-b3d9-76434676741a",
        "cursor": {
          "ref": "2d3a24c7-c8df-4f71-a54c-53defae4e50c",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "59079a49-bc10-4b0b-b5cd-6e47892a45d7"
        },
        "item": {
          "id": "4a518017-1afb-4891-b3d9-76434676741a",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "4aad0bb9-5a3d-45f2-a8b4-0714658aaeb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c6161d3-7429-4cab-8e61-aa61b0c11921",
        "cursor": {
          "ref": "177896d0-c536-4dc3-a044-37353ae90837",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "12a07d0e-ce1d-4158-9b38-68d8af43c06e"
        },
        "item": {
          "id": "5c6161d3-7429-4cab-8e61-aa61b0c11921",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "e00c60cc-3f3f-4914-8ecb-46eb6a8c8ebe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d513733-9d41-4395-9ce6-17cd0435ba35",
        "cursor": {
          "ref": "d437faab-be7c-45ee-b119-628716076063",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "c6d327c7-65bd-476d-9c37-66a0fd72851f"
        },
        "item": {
          "id": "6d513733-9d41-4395-9ce6-17cd0435ba35",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "39f10dae-e299-4844-a592-782d847e104f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b7a32e5-f4d4-4d04-b965-1300cd0859da",
        "cursor": {
          "ref": "7f96a4a1-b1db-4548-96d8-1979ddf266c5",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "cd170fbb-5b2b-49ef-8c45-401bfce82fb3"
        },
        "item": {
          "id": "7b7a32e5-f4d4-4d04-b965-1300cd0859da",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "b489dda4-971e-4ff4-b7dd-12de07c90de8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e918357-b348-4d8e-a786-105347e4b367",
        "cursor": {
          "ref": "e446deed-58ef-4a1c-b40d-b3ad4dcae3c2",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "b4daaa73-efd2-4759-8956-83073d882a74"
        },
        "item": {
          "id": "1e918357-b348-4d8e-a786-105347e4b367",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "11952f90-fe92-4957-b07d-36975478b541",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3924662d-0fc9-4a00-8ae8-a26d7b2bae90",
        "cursor": {
          "ref": "b73bb8e5-9e2a-44aa-b37d-a37a913a50a8",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "62735c3a-2d7c-4c8a-b573-1380ded7a95e"
        },
        "item": {
          "id": "3924662d-0fc9-4a00-8ae8-a26d7b2bae90",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "bf4fc8a0-f723-497e-9204-7ebea6a8dbae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46e05f26-7d01-471e-8c4f-4abf19dcd8d9",
        "cursor": {
          "ref": "30f73c6a-e4fb-405a-a555-5257e1afeeb7",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "a40750c8-e886-471d-ad07-5e468274d7ab"
        },
        "item": {
          "id": "46e05f26-7d01-471e-8c4f-4abf19dcd8d9",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "20cd58b1-6db3-4701-9cec-d4068c6255a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15688282-4b02-4220-bd13-d50c57087a8e",
        "cursor": {
          "ref": "91317e8e-750d-4cec-96d2-3e222403e1dd",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a32d2901-16c0-494c-beba-62f669b4046d"
        },
        "item": {
          "id": "15688282-4b02-4220-bd13-d50c57087a8e",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "36402446-f268-49fe-9e47-e91abb88e04d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a9a9892-a69d-4f04-bea8-2fb156dbe4e2",
        "cursor": {
          "ref": "6391e6cc-8509-430a-874e-cb180a1504e7",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "01e77710-f8ab-4ad7-bf45-b9e266852b3c"
        },
        "item": {
          "id": "6a9a9892-a69d-4f04-bea8-2fb156dbe4e2",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "abffc176-5eae-49c6-b7c4-d3d8be51cd2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eca22445-7e06-46d9-ba74-e1dbe87596da",
        "cursor": {
          "ref": "16c5cb68-1599-4a8e-9b1b-e04e8843798f",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "34889072-fdcb-4aec-9fe1-9d350670b6cc"
        },
        "item": {
          "id": "eca22445-7e06-46d9-ba74-e1dbe87596da",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "64bc4eab-a7a4-4e98-a802-7d4d35d6e26d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b786ccc-0eee-4552-b33c-ffa1c0a297a1",
        "cursor": {
          "ref": "256be4fc-3660-4f6d-8f65-70b6b4a2e7ff",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "4e96afc7-a495-4de3-a66a-44f3f215fc04"
        },
        "item": {
          "id": "8b786ccc-0eee-4552-b33c-ffa1c0a297a1",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "5b2ff99b-1bd5-4e85-a138-6e75a59060cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7cd2767-7d26-40a5-876a-ba8941d4d947",
        "cursor": {
          "ref": "1fc8349e-3cff-4696-9bf4-351425315794",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "56c4f22d-542b-4493-ad5a-d3a5a0addf16"
        },
        "item": {
          "id": "e7cd2767-7d26-40a5-876a-ba8941d4d947",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "9224d5d1-5a4d-431a-84f7-a65afd7cc1db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8567c2b-6cc0-4bff-b4ab-5e99598a53bb",
        "cursor": {
          "ref": "54c4c016-3d50-4197-bc74-d7cb257b3c48",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "f0a11615-26dc-4ed0-982a-ad497c4f739a"
        },
        "item": {
          "id": "f8567c2b-6cc0-4bff-b4ab-5e99598a53bb",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "c9c6c66f-1cae-4be0-bca7-8598063ecbb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa76a511-d20e-4995-b56d-822050036bad",
        "cursor": {
          "ref": "a6741f22-f664-4b6e-b558-015c6225c33c",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "9cac89dc-c11a-4007-87f5-e4a981e86ff8"
        },
        "item": {
          "id": "fa76a511-d20e-4995-b56d-822050036bad",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "d46ae39e-dee2-4e16-8612-e329d1f83a51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57bf0600-85c6-4fa4-8cc8-e523de590b3f",
        "cursor": {
          "ref": "025a392d-b0d9-4966-abe1-f5a718379bcb",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "970377ed-7f16-4ac3-8753-a15cdda03ca6"
        },
        "item": {
          "id": "57bf0600-85c6-4fa4-8cc8-e523de590b3f",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "1d6c1f35-39ae-4d0d-8328-bf912766609d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25be85d3-2a2e-44c4-beb7-90e95c55b2e3",
        "cursor": {
          "ref": "1637f3db-2c22-45c7-98ac-a88b78e255d3",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "21430397-0632-4e5d-8562-ed56641ae2c9"
        },
        "item": {
          "id": "25be85d3-2a2e-44c4-beb7-90e95c55b2e3",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "fdff1eae-2b93-4919-906d-5d9f4dceb6d7",
          "status": "Created",
          "code": 201,
          "responseTime": 756,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "1db99880-5fd0-4fa3-b500-81f04e09969e",
        "cursor": {
          "ref": "9571005f-d973-498a-a9df-61fc7c86ddc6",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "5cff0dd9-4072-4b1a-b29c-d6a296c581ea"
        },
        "item": {
          "id": "1db99880-5fd0-4fa3-b500-81f04e09969e",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "c3b5be46-40ba-400b-be11-944f168c928c",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "e4fac43b-6ce0-48ac-9768-791064bf471e",
        "cursor": {
          "ref": "798bb494-cbb4-4289-9ced-1da0ab04456a",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "5b20adcf-e072-4896-a646-36bd69227d50"
        },
        "item": {
          "id": "e4fac43b-6ce0-48ac-9768-791064bf471e",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "e6f7be04-0edf-4ecc-b95c-cf48d0c026e3",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "5bd68c86-e8bd-4364-b262-89429a7ea9c4",
        "cursor": {
          "ref": "5358bb97-e784-42c2-9e21-bb55eb39298f",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "ae096acb-58c6-436b-bae2-07ad57e03bbb"
        },
        "item": {
          "id": "5bd68c86-e8bd-4364-b262-89429a7ea9c4",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "60ec0f69-e40d-4a43-8c94-b34473563499",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccce3024-1bb3-4908-be1e-d3ae1406d2b0",
        "cursor": {
          "ref": "aa25be3d-53d9-4ea3-a336-0dfdb53d0be6",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "70f280d3-21cc-444b-b830-dd8d7e5f44f3"
        },
        "item": {
          "id": "ccce3024-1bb3-4908-be1e-d3ae1406d2b0",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "ecfc7757-5cb6-4c72-b930-55badd39c47c",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "71a2b453-7e7c-4fa2-aec2-8f0cd92f3c25",
        "cursor": {
          "ref": "439d0ef2-eeae-4be8-8712-db6068818c26",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "c24d665f-eda7-4b71-a85e-efe560452952"
        },
        "item": {
          "id": "71a2b453-7e7c-4fa2-aec2-8f0cd92f3c25",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "b2bb3d5b-3e53-4f13-9002-a7e22904b89a",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "84271fa8-ffed-44ac-9c02-03dc7ed8d224",
        "cursor": {
          "ref": "3dcf3175-7318-4b94-a926-d9bfca608399",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f2439e0b-787e-496b-bff7-211ce6a7c784"
        },
        "item": {
          "id": "84271fa8-ffed-44ac-9c02-03dc7ed8d224",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "98101406-cf88-42e0-8142-92bb4510f8f5",
          "status": "Created",
          "code": 201,
          "responseTime": 317,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "dfbad092-e76b-4576-9ff9-ee819386012e",
        "cursor": {
          "ref": "29ec007b-e86c-4fd7-b09b-4bb6b06b04f6",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "d5327ff4-715f-41b1-9922-c16cc1b9a4e4"
        },
        "item": {
          "id": "dfbad092-e76b-4576-9ff9-ee819386012e",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "2367c1d1-ac5d-4aa8-bf7e-15b9d935f0b5",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "615cf369-fd0d-4541-b269-c482457a2be4",
        "cursor": {
          "ref": "77022dc3-55a0-4327-afd8-b3b162f6c24a",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "99093c37-5029-48e2-a6bb-c4f87857cd37"
        },
        "item": {
          "id": "615cf369-fd0d-4541-b269-c482457a2be4",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "40cc43c5-242a-49a1-8284-38de6ee90979",
          "status": "Created",
          "code": 201,
          "responseTime": 304,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "7691dd22-0224-4d1f-832e-f88a14e7380f",
        "cursor": {
          "ref": "88181f5a-eb46-40be-8a65-ad4477e416a1",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "f16f5ea0-9619-459d-aed1-d8fc97ec88be"
        },
        "item": {
          "id": "7691dd22-0224-4d1f-832e-f88a14e7380f",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "7448c4c3-2577-44c7-ab1c-471e6b4339fa",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "5d071046-a356-4edc-9133-bec01971607d",
        "cursor": {
          "ref": "2d47164d-54f6-4567-b5f4-e4a8d3d94ee6",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "27977474-9297-49cc-9c56-3a02b3dd229f"
        },
        "item": {
          "id": "5d071046-a356-4edc-9133-bec01971607d",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "738d453f-c89b-4f9e-9669-6d5a485c46d2",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "57837776-1086-43a3-b2d4-b36bcc5fc80b",
        "cursor": {
          "ref": "8610b5b1-a02c-4791-9c66-5b9f7b9c0748",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "b261a025-10df-42b7-a045-07a7d8905727"
        },
        "item": {
          "id": "57837776-1086-43a3-b2d4-b36bcc5fc80b",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "234c2eeb-1ba6-4484-b4cd-b0e4d7738fe2",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "2b49f040-cbc6-42bc-a143-fa4fe58f0ba6",
        "cursor": {
          "ref": "ce814845-3346-49f7-b975-3a158f09a746",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "6c017b33-cf24-4b86-819d-f5293dd85703"
        },
        "item": {
          "id": "2b49f040-cbc6-42bc-a143-fa4fe58f0ba6",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "6ee9db3b-cd23-475a-9642-5966475fa23b",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "0e47eb7c-57a8-405b-8562-45e26cdc76ae",
        "cursor": {
          "ref": "1c5e8f95-9ce5-427a-88a0-45d641e62b29",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "9b69316e-0619-40c5-a2c2-38eee2bfb964"
        },
        "item": {
          "id": "0e47eb7c-57a8-405b-8562-45e26cdc76ae",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "8413942c-6507-40a3-8054-0b1f7bb17302",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05f1ef64-34bc-430d-ba24-5d76f1196ac8",
        "cursor": {
          "ref": "4c9b7be0-c07c-4a95-8104-de042bf7eeb8",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "0e691ab3-aca9-4707-a19b-ff9974fd8552"
        },
        "item": {
          "id": "05f1ef64-34bc-430d-ba24-5d76f1196ac8",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "eb10741f-310e-464a-acb6-a09605b26702",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6192ef6-e2f9-4a6d-b056-bbc61658f407",
        "cursor": {
          "ref": "1384d979-dc31-4feb-85be-4d52ecc4d3c1",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "15db8191-fb59-44c5-be7e-9d54868c94e7"
        },
        "item": {
          "id": "b6192ef6-e2f9-4a6d-b056-bbc61658f407",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "303c9b18-a959-496a-bae9-e830638a9acd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d157c34-8664-4e54-9961-1007501e7ffa",
        "cursor": {
          "ref": "d00fdee6-355e-49fb-81b0-48132b72c5a6",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "302c55e8-7984-4c90-a31d-c758f371ad67"
        },
        "item": {
          "id": "4d157c34-8664-4e54-9961-1007501e7ffa",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "2c168497-6856-4254-a0df-087a48ce5ba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a0c72ef-e685-4b04-942a-6ac6c4a37b47",
        "cursor": {
          "ref": "7683a388-58da-4387-b0e9-cef0f781bc02",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "d1b7911e-7ccc-4784-9342-e43e6c4b2437"
        },
        "item": {
          "id": "6a0c72ef-e685-4b04-942a-6ac6c4a37b47",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "a124c628-b82e-43dd-b455-4865ea8af1ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "151b9c59-0fa2-4cc8-b685-502357699145",
        "cursor": {
          "ref": "b56459c6-515d-4ac3-9a1b-25c31cb344c3",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "03a62c91-99b5-42bd-bad7-8cc959574e60"
        },
        "item": {
          "id": "151b9c59-0fa2-4cc8-b685-502357699145",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "1698f95e-507c-4ba7-92c6-400d931cfa95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bb9f540-2b3f-41e2-bd39-8660ebc0eb2b",
        "cursor": {
          "ref": "37822ec1-738a-44b9-9ec7-68009f816ec0",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "9b6f659e-81d2-49e9-908b-92870672cd85"
        },
        "item": {
          "id": "3bb9f540-2b3f-41e2-bd39-8660ebc0eb2b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "fc500ef7-8267-4d5e-8cb9-4f2154c4868d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49e8198b-e074-4376-90eb-c38866d3d694",
        "cursor": {
          "ref": "ed2763ac-90fe-4845-9293-59a4f435046b",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "a81af5ff-9481-413d-a1e7-04ec89a237a0"
        },
        "item": {
          "id": "49e8198b-e074-4376-90eb-c38866d3d694",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "a46b2dc7-5ef1-4c93-96f5-9a952a5c8f97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26f4cf58-660a-41b6-9964-4a525589d18e",
        "cursor": {
          "ref": "111f4291-bb45-4c79-a190-14b392aea1cc",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "52b81bdb-10a8-49f7-a913-dbdb91c64ba7"
        },
        "item": {
          "id": "26f4cf58-660a-41b6-9964-4a525589d18e",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "bf2e2973-12b3-4cea-b6ed-fc8750dec851",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d412e465-1aed-4876-b7f3-22a4eabb0080",
        "cursor": {
          "ref": "8b4b8303-79e9-4c0b-bfaf-5a15f83a7296",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "26907bca-fefc-41f0-8436-c2a6d9123655"
        },
        "item": {
          "id": "d412e465-1aed-4876-b7f3-22a4eabb0080",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "9e52bd4d-b07f-4eb4-894c-733bab06cae7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65af2953-ae0b-457f-84ad-626491c26498",
        "cursor": {
          "ref": "ac445ee1-b90e-488e-988a-27ef696def48",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "3d2661a6-1d4c-415e-bc38-7940ddced362"
        },
        "item": {
          "id": "65af2953-ae0b-457f-84ad-626491c26498",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "c1d6c01b-bd98-46fd-bafd-0d37f1124326",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea5e6dd4-e46b-4947-885f-72c5beccec55",
        "cursor": {
          "ref": "96da36bc-c859-42b9-a4a5-46642fc3b3d3",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "6207cc9c-b4be-47cd-ad0d-e328ffbdac70"
        },
        "item": {
          "id": "ea5e6dd4-e46b-4947-885f-72c5beccec55",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "c43e45d6-177d-498f-b5fd-450bc41739c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9da7bf24-5af8-4712-af07-b43f2b5e1c14",
        "cursor": {
          "ref": "f44a9afb-2607-4450-b3c2-26453e6e7206",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "c61251c5-0889-44b7-99bb-ca3651da7abc"
        },
        "item": {
          "id": "9da7bf24-5af8-4712-af07-b43f2b5e1c14",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "daf49413-a196-43a6-81f1-a05f74df5d09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f47d1d8-2a47-43b6-95cb-6db7105b9062",
        "cursor": {
          "ref": "e9660da6-0559-4943-bed2-b7c9436d3b72",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "4be50c38-c7d1-4b2c-bfa0-5978a10ca4a4"
        },
        "item": {
          "id": "5f47d1d8-2a47-43b6-95cb-6db7105b9062",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "9632f242-a41f-4908-a912-7589c75d41a8",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "d5497036-e41b-4258-b2b4-6b290a995596",
        "cursor": {
          "ref": "a47c643f-ccca-455d-930b-19fe17bd887a",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "770346e2-551e-4098-9320-b720f83622d9"
        },
        "item": {
          "id": "d5497036-e41b-4258-b2b4-6b290a995596",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "3f6cbe0d-1f32-4b1a-9ed3-c2c499ebc61d",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "2ba440fe-87e9-434d-83ea-e2c201382fce",
        "cursor": {
          "ref": "72e62f0d-4709-4f01-bdf2-189c9a0e010b",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "6ab61bad-c9d3-4883-9233-4886720be541"
        },
        "item": {
          "id": "2ba440fe-87e9-434d-83ea-e2c201382fce",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "4e45275d-41ee-453c-81f1-ffcfbcb6b968",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "12a08563-64b7-4b90-9dfa-23d29955e206",
        "cursor": {
          "ref": "65d55de2-9c24-43af-9770-9e9b5b1c5bb7",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "7563a15f-53ba-4296-a46a-e48d0b6ed8aa"
        },
        "item": {
          "id": "12a08563-64b7-4b90-9dfa-23d29955e206",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "c0f10282-5095-4964-8799-2231c09ad084",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "e8fe7f6a-10a5-4790-9cae-c3f03ac242b1",
        "cursor": {
          "ref": "ea6b556e-54e4-4a3a-a4bd-21ac7b1f1b7a",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "2dc4db97-7690-4dc7-bbe9-3b491cba5d65"
        },
        "item": {
          "id": "e8fe7f6a-10a5-4790-9cae-c3f03ac242b1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "f2212579-37a6-43f0-89f4-5fa6d41e2ee7",
          "status": "Created",
          "code": 201,
          "responseTime": 304,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "093df835-7116-4681-ad25-acc7453e4ef3",
        "cursor": {
          "ref": "de7e2610-d242-4adb-b6b6-48118213e8e7",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "52702640-3b6f-4b51-a5e3-2c97cecd0deb"
        },
        "item": {
          "id": "093df835-7116-4681-ad25-acc7453e4ef3",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "6f659a83-7b9d-423a-98d1-4a0988d16b49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcb959e0-80a0-4baa-b542-2f8bf21c818e",
        "cursor": {
          "ref": "7eb36061-023b-4a8f-b5fd-4adf0c9b9bc8",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "f8294b5a-0916-4eaa-9b7b-f13327c8f533"
        },
        "item": {
          "id": "fcb959e0-80a0-4baa-b542-2f8bf21c818e",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "25d599f4-32cd-4d06-8922-af26a06bcae7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0babed29-1ab9-4bb2-af1a-2a9180d1afda",
        "cursor": {
          "ref": "f6764791-b921-4f88-a7fc-7aaadb59fbd6",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "3642c3d8-08b6-437d-bf15-2cfe7e411888"
        },
        "item": {
          "id": "0babed29-1ab9-4bb2-af1a-2a9180d1afda",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "4b7eeaf1-b915-4384-a553-a9fc51d0fc03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba1e2266-4a38-4578-9683-7184054a2710",
        "cursor": {
          "ref": "fc497611-c66e-4c3b-adf4-d128051d28d6",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "2d663fbe-6629-427f-8316-f0316d9ce7b9"
        },
        "item": {
          "id": "ba1e2266-4a38-4578-9683-7184054a2710",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "51ad0c85-2bb2-4b32-9cfb-e09b9232de8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95a63134-c2ca-4f06-b24d-81d43a0ce5d8",
        "cursor": {
          "ref": "4d656a83-f6e4-48e6-b7b8-bb3640fc809f",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "96efd214-491f-44f0-977d-b440b6c285af"
        },
        "item": {
          "id": "95a63134-c2ca-4f06-b24d-81d43a0ce5d8",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "e5d0d34d-d52b-43b3-aeea-c82a024090ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceb1a3ac-eb9b-4f09-864a-488b8cb018ee",
        "cursor": {
          "ref": "35ada197-d552-4f02-a4b4-7a2500045b85",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "5bf1c8c0-9724-43f7-8511-63c9d7ee3d7c"
        },
        "item": {
          "id": "ceb1a3ac-eb9b-4f09-864a-488b8cb018ee",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "01fb0cbc-a21e-4ee0-86b0-dce9b31b2520",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "158964c6-1036-4340-aefe-24b9c24c8801",
        "cursor": {
          "ref": "64d04ede-9501-472f-b269-f8fa577756f2",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "de862f54-57ba-4365-ac34-4ceb852492df"
        },
        "item": {
          "id": "158964c6-1036-4340-aefe-24b9c24c8801",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "9dbd0314-3af6-4fb0-9d12-0dad88a7a159",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6f34ead-51f4-4e3d-869c-1af1c80e1e2d",
        "cursor": {
          "ref": "e7c9085d-5b33-4d60-8ece-4f9d62944a27",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "89135128-b8de-4356-8d73-ea22e90f537e"
        },
        "item": {
          "id": "b6f34ead-51f4-4e3d-869c-1af1c80e1e2d",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "13187116-c3ba-4f30-9310-645e0d353b68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df6f6c38-101a-4bf7-adb1-fe8f7fbb5699",
        "cursor": {
          "ref": "6c258eb4-8f6f-482c-b706-68ce6b9ba33b",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "5c89d64e-4d91-4ac6-8357-e99e7086a4c7"
        },
        "item": {
          "id": "df6f6c38-101a-4bf7-adb1-fe8f7fbb5699",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "566358b9-59db-4b2a-83a1-693256b2294f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "615105f0-3884-450b-82e0-842067e4dbb1",
        "cursor": {
          "ref": "2cd7a916-789c-4d9a-92b6-a76d5b69f871",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "51eb1025-5a1c-481a-9660-289fac25caee"
        },
        "item": {
          "id": "615105f0-3884-450b-82e0-842067e4dbb1",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "b8135493-d3b0-4f1e-b680-dc171c458dec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd3b52bb-2edd-4b02-9ad4-75f366a6164f",
        "cursor": {
          "ref": "dd739e8e-b74e-4766-bb72-4cd1f5d6bf3a",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "1b2c8648-f8a1-4479-890d-c15bf5696552"
        },
        "item": {
          "id": "cd3b52bb-2edd-4b02-9ad4-75f366a6164f",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "036ac0c2-bfa5-4b2e-98f5-3da14b3cd5ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c59f28e9-e0ea-42bb-9497-b8990448bea9",
        "cursor": {
          "ref": "8f63c938-af9a-4ec3-ad5f-a71ee095c624",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "de859f12-7e7a-474f-b19a-70fc754050e5"
        },
        "item": {
          "id": "c59f28e9-e0ea-42bb-9497-b8990448bea9",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "b97dfdaf-417a-4f28-8c76-cd2fb495c803",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c80e8d9a-bacb-4823-9ea0-b2f611fe356b",
        "cursor": {
          "ref": "4e80b541-1d3a-400d-a443-2db59e84af3a",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "0433b440-e1b1-4c00-b991-48edc5434d04"
        },
        "item": {
          "id": "c80e8d9a-bacb-4823-9ea0-b2f611fe356b",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "2787c6d3-da66-44f9-8c18-7cb6189cdb4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e71b59c-3050-45fb-b99e-b70d8a8e649e",
        "cursor": {
          "ref": "f5675cb5-0fc0-45ae-959e-b182bda9542a",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "9e983c7f-392e-40d1-b8eb-93644b894342"
        },
        "item": {
          "id": "3e71b59c-3050-45fb-b99e-b70d8a8e649e",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "1b976fe5-70bc-4e5e-8057-2cd8fc5bf9d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08f7a7dd-d1d5-45ac-bc71-6224078ef7c7",
        "cursor": {
          "ref": "e342c2bb-5e9a-4515-8ba0-e3733e09270e",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "a1592759-1bb6-40f6-ad0a-3ed39de9b58a"
        },
        "item": {
          "id": "08f7a7dd-d1d5-45ac-bc71-6224078ef7c7",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "0a7f3aeb-c683-4ab4-9ac9-7db7ad125802",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e180927-9183-49af-89cf-d54575cd734a",
        "cursor": {
          "ref": "ad82d5b8-ccd7-4d51-977f-a3be887bf776",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "bbe1fe1e-60d8-4ae1-986a-7b26b4b9c247"
        },
        "item": {
          "id": "6e180927-9183-49af-89cf-d54575cd734a",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "55dfce4d-6180-4d2f-abad-c717e348b40a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7455c17-c437-4b49-8ca1-ee5c255e0c15",
        "cursor": {
          "ref": "f4d53bbb-7e55-495d-8ceb-a53017bf5ba8",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "8d94efae-3c19-487b-9333-a7dd69281c9a"
        },
        "item": {
          "id": "c7455c17-c437-4b49-8ca1-ee5c255e0c15",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "f19feea9-1701-4df6-a714-b972f03ad185",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38cc2462-522e-439e-b1f8-b8d3e966e50c",
        "cursor": {
          "ref": "6ae17543-c830-447b-a10c-be2f72e193d9",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "5b816e03-94a5-4933-8c38-a4d4e37d1963"
        },
        "item": {
          "id": "38cc2462-522e-439e-b1f8-b8d3e966e50c",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "0124b3fb-fe1b-4759-bdf2-a1c13c5c9c81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ea0fe94-b097-4cb2-98fb-c003cc38ab16",
        "cursor": {
          "ref": "d17a43d4-4761-4062-a79d-5488c16780fe",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "fec2066c-cb62-4783-9a6d-9a24ca33bf24"
        },
        "item": {
          "id": "2ea0fe94-b097-4cb2-98fb-c003cc38ab16",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "701c4ad3-e4ec-4d86-b956-c150b1b1ce0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20e45c4e-e250-4152-9253-85d68b97d8c5",
        "cursor": {
          "ref": "1aaf488d-f8bb-4f2b-b0ac-ce68e2354642",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "74d5c69a-51c9-4891-8e1d-7edd8b7d1358"
        },
        "item": {
          "id": "20e45c4e-e250-4152-9253-85d68b97d8c5",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "1c685f12-d3d3-461d-a9a2-faa57156aa87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84da6580-96ea-4f88-8ef7-f66d24113707",
        "cursor": {
          "ref": "f90bd1dd-037b-4291-99e2-3ea618dada4c",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "cfe06d8f-b4f7-40a9-ae75-02e36b73310b"
        },
        "item": {
          "id": "84da6580-96ea-4f88-8ef7-f66d24113707",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "b00b9dc7-b539-49e1-a886-42b800b29e44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32964757-b499-46a5-af39-b012be51ae82",
        "cursor": {
          "ref": "4a6f75cb-37bc-4ea3-a8a2-09f55a512bab",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "846e0ff8-18e1-4457-8989-80eb44f0bb7c"
        },
        "item": {
          "id": "32964757-b499-46a5-af39-b012be51ae82",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "a1ad4c95-fd38-4925-954f-d1f2d53253e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b85c8a23-3d10-4912-b6de-e0e528dc169c",
        "cursor": {
          "ref": "a1905985-83a9-4305-904b-b79ce834731e",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "94b2a765-1132-44fa-aebe-92d053c33ba9"
        },
        "item": {
          "id": "b85c8a23-3d10-4912-b6de-e0e528dc169c",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "71ad1aff-700b-4dfa-bebf-dc493d32ec7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69ba7b1d-4655-4c97-91a9-1b3683c9156f",
        "cursor": {
          "ref": "1ec373de-33a8-42bc-aca3-3ba14e7b72bb",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "ca7a3756-2ee6-4547-b950-e1b55d149472"
        },
        "item": {
          "id": "69ba7b1d-4655-4c97-91a9-1b3683c9156f",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "66ca3e6d-a69e-4d11-b6d9-1f40932fdaad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b60cd00b-ad4c-47a3-a528-95d63121ea89",
        "cursor": {
          "ref": "6e319adf-622c-4fb0-854f-8e84b667dcae",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "c3129cf8-b03e-41be-8804-2cde0f6b9657"
        },
        "item": {
          "id": "b60cd00b-ad4c-47a3-a528-95d63121ea89",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "ea6bdd5d-9a59-464e-bab4-34ced0fc8bca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d512186c-08ac-457b-b6c4-3b0882f133ad",
        "cursor": {
          "ref": "56e25395-9c92-497b-a98f-a7ed3b0feade",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "09d38d5c-bf9a-4346-b325-9fd24d8f119a"
        },
        "item": {
          "id": "d512186c-08ac-457b-b6c4-3b0882f133ad",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "6cba369c-b51a-4cdb-be26-b9fa49c3b780",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca62bf6e-0f3c-4a9c-a515-4c518c059145",
        "cursor": {
          "ref": "aaf72e18-9f00-49d2-9c20-0ed8824c79c6",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "3d4167a9-7b17-41ff-95f3-dc002e802d1f"
        },
        "item": {
          "id": "ca62bf6e-0f3c-4a9c-a515-4c518c059145",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "996c5a9b-c1d0-4a6d-a7a8-a1957cd86bbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaef9841-e5c0-4bff-947f-df39b815f052",
        "cursor": {
          "ref": "37e87cbf-12f1-4679-afad-7857a9207e28",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "dc7d1000-547d-468a-8ec9-e0f92113ba31"
        },
        "item": {
          "id": "eaef9841-e5c0-4bff-947f-df39b815f052",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "5ec7bc4f-48f0-44b0-91e1-f65cba5c4395",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a4b121e-c26b-42a0-a0a4-21aaab9d12eb",
        "cursor": {
          "ref": "a2236fea-e168-4187-8775-1933fc05b6ad",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "8991bd64-8072-47be-b327-2c40d31ac15d"
        },
        "item": {
          "id": "8a4b121e-c26b-42a0-a0a4-21aaab9d12eb",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "f79f6c77-5d3f-48d1-ab83-50f3d76ce203",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "016e0201-4a1d-48e3-a500-e4f671c26595",
        "cursor": {
          "ref": "82c85acf-22c3-44ea-9b9a-5c7b2533a8f8",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "e2ed7e15-e865-43f8-b2f8-6722092c2df1"
        },
        "item": {
          "id": "016e0201-4a1d-48e3-a500-e4f671c26595",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "b50fc6d0-ff7a-4a5d-9dc5-4de4382c9f26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f98a411-cef1-4b4f-bf7e-a1789cc24c87",
        "cursor": {
          "ref": "885151e7-865c-409f-9c6c-3e8fd8de7ddd",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "7f58fb8a-9e04-4cf5-a3d4-ed2f43b3b26e"
        },
        "item": {
          "id": "3f98a411-cef1-4b4f-bf7e-a1789cc24c87",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "bfd34967-9e2c-4c3f-8de8-d0606c155c98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56aab046-58ae-4952-8ac0-4bde5a10ba2e",
        "cursor": {
          "ref": "49513bfb-524a-45f2-894e-78ca1e743364",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "98427aed-6b5d-44b0-9489-350f6a589a53"
        },
        "item": {
          "id": "56aab046-58ae-4952-8ac0-4bde5a10ba2e",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "8636f543-cf77-4ef4-ae0e-6d0e935c3f23",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 40,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35d8bb6f-eb5b-4d0d-a389-cfb186a0cd26",
        "cursor": {
          "ref": "2a4c00cf-3408-4b0b-8807-3ed55cae78a4",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "79255727-2cab-439e-9975-55a99143944d"
        },
        "item": {
          "id": "35d8bb6f-eb5b-4d0d-a389-cfb186a0cd26",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "4507e013-3693-4fb9-9cf9-16f438b5e107",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "a2d84a6b-c1de-4427-bbb9-2e15ee08380b",
        "cursor": {
          "ref": "be7f48ea-7453-4e35-adb6-7a0974b33a79",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "ea178228-0fa0-4cb4-8e6e-20f68a2c515b"
        },
        "item": {
          "id": "a2d84a6b-c1de-4427-bbb9-2e15ee08380b",
          "name": "credentials_issue"
        },
        "response": {
          "id": "66e225b6-2c60-444d-a22c-46b38cd96a74",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e5885cf-cfda-449b-91da-bf71ef176160",
        "cursor": {
          "ref": "bb213794-7c6c-4c1c-828d-e54e6a3bdea6",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "2be310f7-432d-4e85-b84f-f98a7a1db25b"
        },
        "item": {
          "id": "0e5885cf-cfda-449b-91da-bf71ef176160",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "f5ab477e-a050-41e6-b074-178e31d2434d",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e436dd0-473c-4487-9380-b277c1e3fee6",
        "cursor": {
          "ref": "43d56cff-8b20-436c-a52f-2562c4361205",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "99b74afb-c8e2-4af9-a0f0-6cbed77ea052"
        },
        "item": {
          "id": "7e436dd0-473c-4487-9380-b277c1e3fee6",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "1ae5858a-4af6-40f8-84c5-d854368b25e5",
          "status": "Created",
          "code": 201,
          "responseTime": 303,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4c64edd-f54a-4226-88b4-336a2aceb08a",
        "cursor": {
          "ref": "e7a97b5e-6165-4727-96c9-0351ec06152a",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "244d30ff-33ae-429f-8d9d-4e551d4d3406"
        },
        "item": {
          "id": "f4c64edd-f54a-4226-88b4-336a2aceb08a",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "52b57471-bcf5-4383-bcb7-49adf0007f12",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab0ee6f0-7302-4cf3-9c26-7ecf1b3ed7b1",
        "cursor": {
          "ref": "8de5e897-134b-4381-b4fb-db2695c434d2",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "2b45ac93-d69c-4d60-9cf3-4e7127b8cd8d"
        },
        "item": {
          "id": "ab0ee6f0-7302-4cf3-9c26-7ecf1b3ed7b1",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "671492f7-b016-40d8-a9e7-2dd896e8609c",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-03-15T00:34:26.156Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-03-15T00:34:26.156Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "25c01848-5a64-42dd-9830-bbcfa549c3e7",
        "cursor": {
          "ref": "562973f0-191a-4a38-a8aa-8e604f981e74",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "152cfb7f-a73f-4002-bf87-6a14279aaa39"
        },
        "item": {
          "id": "25c01848-5a64-42dd-9830-bbcfa549c3e7",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "e5bc9bcb-4802-4051-98c5-24575cd1fb2b",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6607b0e-b0c2-48b5-ab65-a05d978083e6",
        "cursor": {
          "ref": "7153ef27-1ff5-4e27-8b7a-3ce046081d8d",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "785a0dbd-2ba7-477b-8747-fa557592ab18"
        },
        "item": {
          "id": "d6607b0e-b0c2-48b5-ab65-a05d978083e6",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4bc212ef-edcf-48c6-b083-c480160a5f39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de01b32b-5f77-411a-bcf2-674fe154911d",
        "cursor": {
          "ref": "cce77f6a-697d-4cff-af61-07538b4228dd",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "09199b16-eee4-4e40-9f33-4ce54b07e00f"
        },
        "item": {
          "id": "de01b32b-5f77-411a-bcf2-674fe154911d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "213d9f13-e28f-4bee-a434-f992b9d72710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4883d105-2406-4e30-b2f9-02a735f9e3a9",
        "cursor": {
          "ref": "8c89156b-f614-4a04-91a8-810f0cbe5c91",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "a171fe7c-a924-411f-9184-c3efeda4b991"
        },
        "item": {
          "id": "4883d105-2406-4e30-b2f9-02a735f9e3a9",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "36ff62e8-8c6f-44c0-8625-f695b00f575b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9338594-6a2c-4e47-af3e-ae739d580271",
        "cursor": {
          "ref": "c6dda6b8-9972-4697-8050-7d1cafda80a0",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "aec3e92a-2441-44f1-8022-e243a969b8ca"
        },
        "item": {
          "id": "a9338594-6a2c-4e47-af3e-ae739d580271",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "8effa0aa-6e82-4804-9566-a22b06dfcec5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "770e4740-71bd-4c17-9b57-f3d8243cc7b0",
        "cursor": {
          "ref": "8cdb6c69-a026-4d7c-9eb9-7de9eb7b5c3a",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "f3497a87-ab05-446c-8950-b7ba90a5b56f"
        },
        "item": {
          "id": "770e4740-71bd-4c17-9b57-f3d8243cc7b0",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "972b567b-6c5f-4930-91c1-94673a98ec5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aac13421-ca49-406c-b526-1dcd56dd0dbf",
        "cursor": {
          "ref": "2284d058-3f05-44e8-9aaf-bd2b358e3c6d",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "9ebd8146-9a17-4b7f-9fd7-d83fefede656"
        },
        "item": {
          "id": "aac13421-ca49-406c-b526-1dcd56dd0dbf",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "3435bfb1-6fb3-4006-8dbe-19154d39780a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aac31cb-f545-4939-894b-905c7db05284",
        "cursor": {
          "ref": "e389bd01-2d4f-46ca-9297-2a0d8b0ab376",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "b3bf3399-bf62-4fd2-811d-5f157125719a"
        },
        "item": {
          "id": "3aac31cb-f545-4939-894b-905c7db05284",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "a946134a-8f34-4982-8e87-cb84eb96bd0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a92b417-b8b3-474e-968b-87a9e21248f3",
        "cursor": {
          "ref": "a1008166-e2a4-4ab7-8c91-a36c8fe6fade",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "118693d4-88d9-4c14-96cf-b7bb1d8ed8f0"
        },
        "item": {
          "id": "8a92b417-b8b3-474e-968b-87a9e21248f3",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "5909b7a9-5975-4852-8005-eabf8a0ecf14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffb0ed58-d33b-4cfc-94f7-c1330ffaf082",
        "cursor": {
          "ref": "05db8310-db48-4e72-af8d-3b99d0f06fd3",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "66c65b76-3cb1-418a-a9cc-dc5010d94a2b"
        },
        "item": {
          "id": "ffb0ed58-d33b-4cfc-94f7-c1330ffaf082",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d6b2bb99-3ddf-4993-ad15-4c210ff08226",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "762563e7-c4eb-43b0-93b0-b2a77f20bbf0",
        "cursor": {
          "ref": "2f5ac09c-946c-4029-9161-ce92414ee005",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "77f51eec-4e75-400e-bf04-da9c9519be12"
        },
        "item": {
          "id": "762563e7-c4eb-43b0-93b0-b2a77f20bbf0",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "2d6ff3f1-8b53-4de9-b5db-1ea8b0296dad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd5e8fff-e0ee-41dc-be1c-dd7b249b9dcd",
        "cursor": {
          "ref": "2384dc93-3b9d-4914-b767-c353b40547ea",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "a6b81534-f4d8-48d2-bd6f-1d86bfebf8e0"
        },
        "item": {
          "id": "cd5e8fff-e0ee-41dc-be1c-dd7b249b9dcd",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "783ef217-f851-4062-9d91-1ce838aef74b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1f6b6fd-cbd8-4abc-a7aa-a1cde3df94f4",
        "cursor": {
          "ref": "a134e616-90bd-4b78-a583-451b7ee059c9",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "8b2bd9e2-ec87-45fc-b498-73a4e8e4e817"
        },
        "item": {
          "id": "e1f6b6fd-cbd8-4abc-a7aa-a1cde3df94f4",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "ae8c2de7-cc22-41e1-8504-9fb8f0ac7710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2098877f-581d-4e51-b4fe-7a066b5877f3",
        "cursor": {
          "ref": "c932a569-6c9a-4be0-8a30-29b0a66c9e92",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "f0be1def-b56e-40f3-b923-9585ccff5daf"
        },
        "item": {
          "id": "2098877f-581d-4e51-b4fe-7a066b5877f3",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "47e45ecf-e948-429a-8c96-80d9da2f4feb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 113,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "f4f7fcd6-45c6-4d24-9a07-389989c299ff",
        "cursor": {
          "ref": "3b9b0b5c-c487-4e97-96d9-cf151ae206fd",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "2080b376-4d5b-4b5c-b52b-943aa9bdb643"
        },
        "item": {
          "id": "f4f7fcd6-45c6-4d24-9a07-389989c299ff",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "e12eadf1-85a1-4d1e-94fb-3bddcc22febe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 103,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "710627bb-ebda-4dea-816f-2727df3caa88",
        "cursor": {
          "ref": "ac9eca2e-c456-4f6c-b51f-fee3b5b2cba7",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "b5c9c7b7-2e99-4a96-83aa-9677c9f3486e"
        },
        "item": {
          "id": "710627bb-ebda-4dea-816f-2727df3caa88",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "0f1c46be-3d37-4c6b-bcb4-be7625958633",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a87e851e-3c78-4e37-9107-1f7e9eab9e58",
        "cursor": {
          "ref": "f00e86e6-0e62-4add-b661-2a9e94fc457e",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "083caec7-8667-4038-8835-3f5ae67a20cd"
        },
        "item": {
          "id": "a87e851e-3c78-4e37-9107-1f7e9eab9e58",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "af8ef752-bf2f-40c3-bc28-920100166a9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "929354ab-d1b1-4193-98c0-6ad8cde61ffe",
        "cursor": {
          "ref": "2f017e3e-6549-45dd-b237-bc982cd6b678",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "2b36a064-9abe-4aee-a385-b0f695882bc9"
        },
        "item": {
          "id": "929354ab-d1b1-4193-98c0-6ad8cde61ffe",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "cd113676-a356-4159-8faf-9e15e3127c72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15362b14-55fb-414b-9ae1-1a7b9e235c32",
        "cursor": {
          "ref": "e2ee5158-21c4-4e06-85d3-7f20430c89ef",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "e5dc1ed2-5d77-4220-88d4-04bcfb356a69"
        },
        "item": {
          "id": "15362b14-55fb-414b-9ae1-1a7b9e235c32",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "2b703aa5-7fb6-487a-8203-eb6dec227907",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4926afad-744f-49e7-af36-64d34ff4a31b",
        "cursor": {
          "ref": "5520452a-461c-49cd-833b-743a36fb6330",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "3cfc3fe4-778c-45a6-a4d5-d0a735d44210"
        },
        "item": {
          "id": "4926afad-744f-49e7-af36-64d34ff4a31b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "618c7935-9623-4784-9d97-97a59e77d140",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41a7dbaf-b4f0-4738-b1f4-1f35671660cc",
        "cursor": {
          "ref": "7b0017b4-2ef4-433c-b5d5-41047fe3ad9b",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "d5911c56-98be-4e59-999e-73a825fd5db2"
        },
        "item": {
          "id": "41a7dbaf-b4f0-4738-b1f4-1f35671660cc",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "540152a0-78a2-40f6-badc-557aaaaf25ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17e1b9bb-9199-49e2-8e63-5b440e414555",
        "cursor": {
          "ref": "2149da93-21c4-4952-bcac-060f9ffebca3",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "1da8f288-59de-4aea-a3e0-89cb87569d24"
        },
        "item": {
          "id": "17e1b9bb-9199-49e2-8e63-5b440e414555",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d9738c3e-0720-47d6-aab3-df46949e88ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bef6803-da86-4519-8256-11d3cb664096",
        "cursor": {
          "ref": "9324bf2c-3d26-48e5-9979-3bcbca84792b",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "f815e361-bde1-427c-8831-e491251bcf12"
        },
        "item": {
          "id": "3bef6803-da86-4519-8256-11d3cb664096",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "4450914f-777d-4582-a78a-6203c58472ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "281361ae-ee61-49c8-b6b1-bde8ec48698e",
        "cursor": {
          "ref": "730eb558-2e2a-48e5-add9-eb905d017502",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "4f67e622-ce4f-410b-be75-49903d0af0b2"
        },
        "item": {
          "id": "281361ae-ee61-49c8-b6b1-bde8ec48698e",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "78eeeba2-202d-46f6-811b-84133a127c72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b359aaa4-f459-4382-898c-9771c66cf0e0",
        "cursor": {
          "ref": "ebced9c5-d0ed-4ced-b2fb-306b4f6a4f23",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "443512a7-85fa-4aa2-af1f-2c2590eb9b8e"
        },
        "item": {
          "id": "b359aaa4-f459-4382-898c-9771c66cf0e0",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "be1c3aaa-a1f7-4dc7-8b14-6ba5ff15bcd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc1b061e-e3a0-4bd2-b579-075fa6edd503",
        "cursor": {
          "ref": "cb579157-aefc-4fd4-98c1-02b320ea3604",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "f88d5cd0-123d-43d9-be90-221c4065728e"
        },
        "item": {
          "id": "fc1b061e-e3a0-4bd2-b579-075fa6edd503",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "675b0c73-5409-42f6-acab-ea3ee0187106",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4adbed48-97fb-4076-924b-fad6edc9eedf",
        "cursor": {
          "ref": "732ab618-833c-4128-9a34-e4c6d5970bc8",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "3df158fe-03d9-49cc-bf0c-ec5e3393506a"
        },
        "item": {
          "id": "4adbed48-97fb-4076-924b-fad6edc9eedf",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "97430318-a67d-43d3-a531-c5c5136f709b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e488d8fe-d5e9-44cc-bb08-e9d6f17621cf",
        "cursor": {
          "ref": "8c67d6f2-6a38-4037-90e1-16cc6ab6624a",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "64348be1-d1e2-4483-9fc3-708339025160"
        },
        "item": {
          "id": "e488d8fe-d5e9-44cc-bb08-e9d6f17621cf",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "4e693282-f2f3-4949-b2c2-dab9519a533c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c22bc6b4-7f16-4072-a669-886d2fdb0ce4",
        "cursor": {
          "ref": "dcc02c6e-8da9-4b5a-a59c-c85ab57ce0cb",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "9b6e7ea1-eebc-4b80-a100-fb387d09b011"
        },
        "item": {
          "id": "c22bc6b4-7f16-4072-a669-886d2fdb0ce4",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3b5cf37b-2462-4850-894a-5adccd0c6026",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3353d3a4-26b9-4561-9839-8d55d86a5b19",
        "cursor": {
          "ref": "146af60a-66f7-4d90-bedc-93f9b51bf43c",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "2cddd632-ddfe-4be2-b66d-47db381a8202"
        },
        "item": {
          "id": "3353d3a4-26b9-4561-9839-8d55d86a5b19",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e62502f3-c195-4afa-8e7c-21e8251cd23b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c651eb04-cd05-4332-89e3-ff22246d9022",
        "cursor": {
          "ref": "6f43469c-39ab-46e6-8a05-deb7c39a2cfa",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "6a398f7a-3548-4a82-9a62-47006b35b4cd"
        },
        "item": {
          "id": "c651eb04-cd05-4332-89e3-ff22246d9022",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "99232480-0ab7-4fa1-8ee6-a6af0b424509",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97b1b55b-7305-4ed3-9f44-f253ba37e292",
        "cursor": {
          "ref": "71f7416f-6f6d-48d4-b406-c51b6ccb9dfc",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "94f6d45b-8036-436d-a302-6e599e96853a"
        },
        "item": {
          "id": "97b1b55b-7305-4ed3-9f44-f253ba37e292",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "6b2cacfd-bf92-4c89-8aae-d90041d0ef38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3e50711-6736-46b3-a775-134e09d5a57b",
        "cursor": {
          "ref": "adef40b7-b0c3-4308-bfb4-1223f628ae91",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "823acb5b-151e-47bf-8f03-411bf6872975"
        },
        "item": {
          "id": "e3e50711-6736-46b3-a775-134e09d5a57b",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "98a9bbe3-8bdb-4ced-b3b0-ec35af250de9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 108,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "33e1ba99-c21b-4afc-aad5-ad04d45712d8",
        "cursor": {
          "ref": "e8b491bb-1adf-422b-8143-ec2965ed37af",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "8b68c664-c6c4-49fd-98a3-5494a968992f"
        },
        "item": {
          "id": "33e1ba99-c21b-4afc-aad5-ad04d45712d8",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "41147f84-3475-461b-be04-7eeb6c6273d6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 40,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24f466d7-5c59-4dc7-9be3-7171afc49964",
        "cursor": {
          "ref": "787b36d4-9b3c-4309-a299-2821d470074d",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "01ec0553-0c43-4b8f-8e32-2e473f882b39"
        },
        "item": {
          "id": "24f466d7-5c59-4dc7-9be3-7171afc49964",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "b6a7d3e0-2750-4931-b972-f749bdd67144",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82bedea8-38b2-4089-8f84-a11e615b97b9",
        "cursor": {
          "ref": "e34fed93-adb6-45ae-9bda-9de1bbcadd63",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "3e9cf176-b796-443e-98ea-d04e3ee300fd"
        },
        "item": {
          "id": "82bedea8-38b2-4089-8f84-a11e615b97b9",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "4482acb0-2a29-42fc-84f1-3fdecde7d3fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f74faa7a-3e35-4e56-9561-715062f534cf",
        "cursor": {
          "ref": "e60518fb-0340-48c9-a267-62a11e2fca6e",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "1b366daa-be54-477a-a76c-ad2eb4a02c36"
        },
        "item": {
          "id": "f74faa7a-3e35-4e56-9561-715062f534cf",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "4461bbf0-d72e-4830-bf1b-b21b4c44abce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c6a6c0e-0c13-4210-ba80-b796aad36c85",
        "cursor": {
          "ref": "81a7a5d8-2e9b-41b8-a4c4-33e869dd38c3",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "f9499436-58b3-4997-b4d6-620e7afcc538"
        },
        "item": {
          "id": "1c6a6c0e-0c13-4210-ba80-b796aad36c85",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "3e98e354-05d5-4e2e-94f3-7162a8638095",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2948c12a-7b76-40ca-8287-795eddb76fbd",
        "cursor": {
          "ref": "71e92c46-0732-42df-9220-9b98455d926e",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "a7fcef4f-19eb-4369-87ea-089d6f65cac7"
        },
        "item": {
          "id": "2948c12a-7b76-40ca-8287-795eddb76fbd",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "4b83f7ef-b449-426b-98a8-5385d182ec07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "896c399d-c1b8-45d3-b3dc-9290a7a416da",
        "cursor": {
          "ref": "7ad316ad-cb93-45b6-8ae5-c9a5c248e15e",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "a94708a9-6a6a-486b-b8c8-0ed681aaa941"
        },
        "item": {
          "id": "896c399d-c1b8-45d3-b3dc-9290a7a416da",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d0299b9a-f3e6-4a8a-bac5-db1378e22ae2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee2accb5-155d-43ef-a8d8-bc81663257a6",
        "cursor": {
          "ref": "da833c2d-da05-4321-9d3d-2faae1cd4124",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "bd4ff249-dbc8-44f9-a53b-5c252f5c8431"
        },
        "item": {
          "id": "ee2accb5-155d-43ef-a8d8-bc81663257a6",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "adece6a1-21ba-4aba-80c9-27787684834d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71e87ce1-fd00-458b-8f38-1e10f1269342",
        "cursor": {
          "ref": "e4ec6b0f-8a77-43ac-9dda-6b8ab5d3e3d2",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "ec3088a8-72e2-4e62-a651-7bbe882342f2"
        },
        "item": {
          "id": "71e87ce1-fd00-458b-8f38-1e10f1269342",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "c07892e1-8c5c-4a2e-a878-e3223361d0da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61c473fc-ef42-491c-b2fd-1f89917676ae",
        "cursor": {
          "ref": "bdb0c690-c9a7-4641-943f-b1229a1c9725",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "11ca6594-6543-4daf-a0eb-557d3203b70c"
        },
        "item": {
          "id": "61c473fc-ef42-491c-b2fd-1f89917676ae",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "513e32ed-1930-4c14-a120-2078e047dc6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5497f44a-2509-4484-acf7-4b01f22c51d6",
        "cursor": {
          "ref": "00f6d00e-1efd-4a3c-bfd3-d14b3715491a",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "bb28fb0e-cf19-4cb5-b0e6-d6ef1618fb56"
        },
        "item": {
          "id": "5497f44a-2509-4484-acf7-4b01f22c51d6",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c4c5f9e5-be84-4df8-9e71-e5961cbca19d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c5784f1-02cd-4b39-a331-6a0446d57ed2",
        "cursor": {
          "ref": "c9188fb4-2af5-44f0-9f81-aa56aec71766",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "5ca29665-cbe6-48dd-b925-460c0eacf028"
        },
        "item": {
          "id": "3c5784f1-02cd-4b39-a331-6a0446d57ed2",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "d822d6f7-ebd2-442d-8399-231b2b588836",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efe86995-a166-43b4-9934-59307485f45e",
        "cursor": {
          "ref": "8b4c2367-1038-4c4a-a202-9d752dc5b7bc",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "745c3a6b-7882-45a0-815e-833063241914"
        },
        "item": {
          "id": "efe86995-a166-43b4-9934-59307485f45e",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "a1a1b4a2-cfab-4a9e-a180-c8b9788b3ffd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5996dd8-5afc-44d7-9433-6bd73c3116a5",
        "cursor": {
          "ref": "5fdc508e-b92a-4d7c-9be7-20747d4c1ddf",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "2fecc989-c6d9-46ac-b4bc-55095167dec2"
        },
        "item": {
          "id": "a5996dd8-5afc-44d7-9433-6bd73c3116a5",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "d3a1b382-f64c-41ff-a9af-88224691795f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f187105e-c017-4eec-a556-b652609a99b8",
        "cursor": {
          "ref": "409f42d9-df81-418f-97fd-7e3108c0c6ba",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "a22832db-b99f-461e-8e80-ae30caed2089"
        },
        "item": {
          "id": "f187105e-c017-4eec-a556-b652609a99b8",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "b02315da-abce-4a9e-8092-1b6ebeee15ee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 115,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "0a94661f-a2e6-403d-8109-baed3e3d6114",
        "cursor": {
          "ref": "93465a85-9cca-48da-af4b-a26d0d6825ec",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "8fc57ca8-ed91-460b-a890-accd6d666672"
        },
        "item": {
          "id": "0a94661f-a2e6-403d-8109-baed3e3d6114",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "178db847-db2f-4b07-b494-2d9db9cd9236",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b98c384-5024-4c7b-994f-d7bb3a31d7ff",
        "cursor": {
          "ref": "9319d296-5a2b-4adb-b6d8-de269ff3bb5a",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "f3d45411-0b85-470f-b64a-0df9b1294011"
        },
        "item": {
          "id": "3b98c384-5024-4c7b-994f-d7bb3a31d7ff",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "d7c10cdc-fa6d-4269-b558-0519846048af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99dd7629-8f69-41d0-b0dc-2a430073aa1e",
        "cursor": {
          "ref": "b7d7f596-e6df-4d20-933e-792e923562a0",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "8103d0bb-9ee0-442c-a70b-5f6197cc896f"
        },
        "item": {
          "id": "99dd7629-8f69-41d0-b0dc-2a430073aa1e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "474b037b-5060-44a3-b59a-d4b8c8cde281",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cce14c82-e983-4196-9300-227d40157180",
        "cursor": {
          "ref": "b00d785a-cfb2-4f1c-8de3-b3647064121b",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "b9eeb5ad-7ecf-4b7e-98c2-5cb426f4cad8"
        },
        "item": {
          "id": "cce14c82-e983-4196-9300-227d40157180",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "74f068cb-7bec-480d-a90f-c16f301e7abc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3ede786-d1c1-499c-a248-02461dc40f9b",
        "cursor": {
          "ref": "1a4fa803-5806-4677-98c8-e3cf39a64d91",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "ef3276f9-f01e-4774-873f-49d1b7329fba"
        },
        "item": {
          "id": "f3ede786-d1c1-499c-a248-02461dc40f9b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "cc26afe0-0c76-4f35-a7fa-1c79563c9ea0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1659121-150c-4f1a-aff1-afa4595e8f46",
        "cursor": {
          "ref": "f8647a05-e711-4017-b6c5-cc8f64b72e6c",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "12f035f6-cd68-4c5e-8107-599ca09cf85c"
        },
        "item": {
          "id": "e1659121-150c-4f1a-aff1-afa4595e8f46",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "a74857ff-17cd-46e8-a673-482b6a54120c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98fbee33-cd24-4d7d-90b5-7def77102638",
        "cursor": {
          "ref": "b01a739d-b8bd-438e-831c-c67bd5410125",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "cfb6e841-de16-4669-8d84-75801dcf5fa7"
        },
        "item": {
          "id": "98fbee33-cd24-4d7d-90b5-7def77102638",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "4acbf543-1a83-4040-be5f-3f91ecb49b66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fa5f76b-fbfa-4e3e-b673-9cd1642e49a6",
        "cursor": {
          "ref": "c3ac3b73-df65-41f1-bc05-f65259c592fc",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "f98dc4fd-a483-4d2d-93c2-4aefdbd6c519"
        },
        "item": {
          "id": "6fa5f76b-fbfa-4e3e-b673-9cd1642e49a6",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "0d418ede-4854-479d-8ac3-df33d6e71576",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3baa94da-b148-4118-b847-7f11aaa14397",
        "cursor": {
          "ref": "aab60410-bdfa-410f-ad50-64a048bb3dc7",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "cdd0af61-6e22-4dad-9e12-8df04f9feed9"
        },
        "item": {
          "id": "3baa94da-b148-4118-b847-7f11aaa14397",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "5c3a96e9-3769-456b-92e1-1292517dc11a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f22da50-4290-45fd-aac0-77a24884bae3",
        "cursor": {
          "ref": "f534fbf6-a9f6-4e34-93ef-ac8d75e05c32",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "a792a88d-3053-4914-a87b-488a4b8be405"
        },
        "item": {
          "id": "1f22da50-4290-45fd-aac0-77a24884bae3",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "a5f1e821-a6a8-4979-acef-7d26bab46bdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36a10412-1643-4cd8-8a28-4385bd5b0b06",
        "cursor": {
          "ref": "772b99ed-f23a-45fb-ab33-994be9edeb3b",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "77d218e4-bbfc-44a3-ba5a-b003b04106fd"
        },
        "item": {
          "id": "36a10412-1643-4cd8-8a28-4385bd5b0b06",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "5e3c7b13-5756-45e9-913f-8638caebd9f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a14c9299-f55f-4045-b3d7-be057e43b821",
        "cursor": {
          "ref": "5e43456f-f0c2-477a-a121-6d4feaae38b8",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "53971041-ebac-4900-ab3a-230228b93d8b"
        },
        "item": {
          "id": "a14c9299-f55f-4045-b3d7-be057e43b821",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "28962731-39e3-4b18-80b3-749e09a3d076",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ceab4bd-3973-435d-96ca-e36384462d54",
        "cursor": {
          "ref": "5bc65154-d535-4c37-ba89-e92a230e223a",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "ed8810fd-4bf6-467c-87b1-40aa266f0796"
        },
        "item": {
          "id": "6ceab4bd-3973-435d-96ca-e36384462d54",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "7f0825ed-c122-49d0-a57c-425e4ff664bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f0e9485-bcc1-4113-a1ec-a8c8b83d07ac",
        "cursor": {
          "ref": "2bc749e3-00cb-4cf3-9df4-23ff09a862ba",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "11acde26-aea5-4c18-a151-a259c6ad7c5e"
        },
        "item": {
          "id": "7f0e9485-bcc1-4113-a1ec-a8c8b83d07ac",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "fb6e2aa4-104d-4a46-8ff6-343f8a2484ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ff6dacd-eeb0-4226-a83d-37fe7f3d7d38",
        "cursor": {
          "ref": "20d8c850-6652-44d9-afba-3f4de0097ce4",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "b81f75ce-ec80-40ad-9588-f187d2eb11ce"
        },
        "item": {
          "id": "2ff6dacd-eeb0-4226-a83d-37fe7f3d7d38",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "1793b8f7-b9da-46dd-a705-05c46067cc9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31038526-86d4-4eac-9532-36a7af748d19",
        "cursor": {
          "ref": "5ebc73ca-f4e7-4fab-b5ce-657d21e29c52",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "da2fdcfc-6f7b-4ecd-b29f-f3586322901d"
        },
        "item": {
          "id": "31038526-86d4-4eac-9532-36a7af748d19",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "57093c4d-fac9-4d77-95ad-ccf9d24bab95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43ebee57-574b-4535-a9f4-c4130149c276",
        "cursor": {
          "ref": "9471ec5f-aed8-40ff-986e-6018d39cf374",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "b5679ab6-de07-44d2-ad7a-09de7a87cda4"
        },
        "item": {
          "id": "43ebee57-574b-4535-a9f4-c4130149c276",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "1acc41ac-8ab0-4889-98a2-a52b65b91808",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11bbfb19-02bf-490d-956a-a54832e14928",
        "cursor": {
          "ref": "968ffdb9-0b85-42e1-87e0-54942b6b82ee",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "a4e2bf8a-8d44-4d34-a96b-b751fd34b4de"
        },
        "item": {
          "id": "11bbfb19-02bf-490d-956a-a54832e14928",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "39a32a12-7586-476f-8bd3-6c4aa21fb947",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efd99020-4489-45a7-8a26-4529b65bd24b",
        "cursor": {
          "ref": "76dc834a-c17c-402c-b942-41eddca1cfdb",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "442b810e-677a-4a4c-9998-ef701635f482"
        },
        "item": {
          "id": "efd99020-4489-45a7-8a26-4529b65bd24b",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "c4fea2b8-f086-4cd8-a574-c48d737e55ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7332e70c-b21d-4107-9c54-34c6eb4aaa53",
        "cursor": {
          "ref": "677c4563-afe9-481c-bffe-4df16aed9591",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "125b9258-5b13-4b61-814a-25c0b18abd7b"
        },
        "item": {
          "id": "7332e70c-b21d-4107-9c54-34c6eb4aaa53",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "d14867dc-20d0-425e-ad8d-d283e17bff10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "310e49d6-7098-4453-b259-02ad8632db8b",
        "cursor": {
          "ref": "d7f82094-c8b6-4ae1-bf2c-d804e15ad370",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "69378b4b-35b0-40ea-b0b9-bc9950ca5ccd"
        },
        "item": {
          "id": "310e49d6-7098-4453-b259-02ad8632db8b",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "4ae9fa6d-7cf6-4f31-8981-a2741dc30297",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26ea1888-2997-4a41-bec9-16bc70c104e2",
        "cursor": {
          "ref": "0072654f-9210-4f38-9d54-5b892b293b24",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "8d687060-97cb-4794-8074-341937901d61"
        },
        "item": {
          "id": "26ea1888-2997-4a41-bec9-16bc70c104e2",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "da1db822-c680-422c-b4bb-223ca8c80494",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb945ad5-2086-4348-916f-b73466a3897f",
        "cursor": {
          "ref": "8cd16234-1ee6-4b4c-8937-ab0520f4ab41",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "dd1527dd-8c6f-4fba-9dad-65d309b08115"
        },
        "item": {
          "id": "bb945ad5-2086-4348-916f-b73466a3897f",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "e99efd39-1732-4eff-999c-f2e16e71882a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3be30cb7-187d-4dd5-b102-6173ecf6f5c1",
        "cursor": {
          "ref": "0d9cf8ca-b4c3-460c-ab2d-5e023becf1d4",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "eaf135b2-a129-45eb-9220-e46d64d11e40"
        },
        "item": {
          "id": "3be30cb7-187d-4dd5-b102-6173ecf6f5c1",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "bfd58478-03b9-4b46-922b-4f10a493c0c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "225f3e0a-b0ac-414e-8717-00b1e8696757",
        "cursor": {
          "ref": "95fbd37d-15af-4406-9c14-060256c9992c",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "f53fe638-7d3e-41d3-8212-52d5153e58ae"
        },
        "item": {
          "id": "225f3e0a-b0ac-414e-8717-00b1e8696757",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "906f6d1f-cad8-4b11-b76f-920254c99e15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9fc567f-ae6e-4081-88f8-c366a0f3041b",
        "cursor": {
          "ref": "d28d95ec-b295-4e4c-8511-a6bcd6909602",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "b454c030-0bd8-4be8-9a50-5a50c642564f"
        },
        "item": {
          "id": "e9fc567f-ae6e-4081-88f8-c366a0f3041b",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "e5d48b8d-781b-4889-a9bd-473b4b092feb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9123f900-9404-4e45-b158-b17ed3005fc6",
        "cursor": {
          "ref": "4339907b-22e6-4fa9-95bd-bb50d96065e5",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "434ccece-673a-41e0-b6a5-74732cdf5f6a"
        },
        "item": {
          "id": "9123f900-9404-4e45-b158-b17ed3005fc6",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "b1d4b38d-7172-47d0-913a-498356cbbcc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65d2c8a5-3b69-4683-a6e7-f8d6aedad436",
        "cursor": {
          "ref": "6232ca52-5246-4b02-bf25-99c5df6637df",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "8b307140-7984-42a1-b17b-67135b3e9266"
        },
        "item": {
          "id": "65d2c8a5-3b69-4683-a6e7-f8d6aedad436",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "18c3bb78-5ed4-474a-a145-c1de27443f1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1108b80a-0b60-477b-bf7c-fe14375e29e9",
        "cursor": {
          "ref": "80c63fe7-2304-49dd-8df1-7ae9f1fa829b",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "2a7c17eb-53ea-4869-973c-1144b34395d6"
        },
        "item": {
          "id": "1108b80a-0b60-477b-bf7c-fe14375e29e9",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "96f08991-244a-43e7-844d-f5a6c3c293d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0890eb4-3fd9-48cc-a40b-6eadab54c6a6",
        "cursor": {
          "ref": "aa9f6236-45c9-434e-be0f-bd293cec7b78",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "e2603472-97aa-4a83-a11b-9632564ae0cc"
        },
        "item": {
          "id": "a0890eb4-3fd9-48cc-a40b-6eadab54c6a6",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "100e0899-37ff-4f93-86d7-f3c8187bf2c6",
          "status": "OK",
          "code": 200,
          "responseTime": 152,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "5db854e5-4f32-4fc6-ba40-355f29247688",
        "cursor": {
          "ref": "751f0f7d-1232-4e3b-b66e-ac29ff3fe63e",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "82293766-d05d-42ed-aebc-e3bf98663c33"
        },
        "item": {
          "id": "5db854e5-4f32-4fc6-ba40-355f29247688",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "4889f0eb-5082-4505-84b2-e56beccd74e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "807b757c-e375-4f4c-b219-f119670821eb",
        "cursor": {
          "ref": "59f5883b-9fed-4939-bdcc-4524f0cb5ebf",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "d2e7b188-8c33-4956-beb6-0c1d57180e47"
        },
        "item": {
          "id": "807b757c-e375-4f4c-b219-f119670821eb",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "375bf2db-bcd1-44e3-996a-ad053dbd1af1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "184cff66-136d-4d46-9770-82ddf5fa3175",
        "cursor": {
          "ref": "1303091d-c59f-4e31-80c0-5c7048f792f2",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "00f39577-6256-414e-ab1e-d5e6918f376c"
        },
        "item": {
          "id": "184cff66-136d-4d46-9770-82ddf5fa3175",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "b2d9b196-ac51-4c84-818b-78265aabf8b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8491438-6097-4dcb-b534-bfdb492725e8",
        "cursor": {
          "ref": "532da81d-d7ff-4560-97f9-2defd0e5ba93",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "daa8353d-6b41-4cb1-a1c9-2854e88c2b09"
        },
        "item": {
          "id": "b8491438-6097-4dcb-b534-bfdb492725e8",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "9e884e42-7478-4f5d-aa89-8e815c88438a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7be9b840-a3c8-4c8c-9145-690806f40744",
        "cursor": {
          "ref": "942bc09c-cdd2-4632-9db8-fe6ab8076f23",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "1b0922fa-0032-4059-9c9c-348cdff6f659"
        },
        "item": {
          "id": "7be9b840-a3c8-4c8c-9145-690806f40744",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "d7c8c352-9e02-4482-9ade-334743cc0130",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa520658-2664-4d7a-ba34-a926dc6bc454",
        "cursor": {
          "ref": "823290c1-0f22-4d7d-8633-baf6890cca0a",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "b95ae9ed-44f6-4780-96ee-c87e7df2843d"
        },
        "item": {
          "id": "fa520658-2664-4d7a-ba34-a926dc6bc454",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "2f01989d-f8fa-4097-8fdc-8ed5490314e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20ea1e0b-f1a1-42d0-8aa8-2cddc4529d04",
        "cursor": {
          "ref": "c4ae63db-aa91-4b6b-94b4-b8ae7e94a14c",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "837b522d-3138-4b1d-8cdd-92962ae4fa5f"
        },
        "item": {
          "id": "20ea1e0b-f1a1-42d0-8aa8-2cddc4529d04",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "581c5dbd-65da-40ac-b45c-bcaf30e2115b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "252c8336-fe79-4508-8b09-2c524206121d",
        "cursor": {
          "ref": "c0d16db1-fef5-421b-b847-c21c88fb69cb",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "09bfdb6f-309d-401d-858f-8708b5bdf6e8"
        },
        "item": {
          "id": "252c8336-fe79-4508-8b09-2c524206121d",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "7bda0642-9ed8-4af8-9368-0489af84e25d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab2e77c6-a368-45d7-9859-9924be0a79b5",
        "cursor": {
          "ref": "f9efc693-8a1b-4dc4-b657-0aff7cffe5d1",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "b6605722-5e4a-444a-8abd-a5dc7f8951b5"
        },
        "item": {
          "id": "ab2e77c6-a368-45d7-9859-9924be0a79b5",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "49d59e0f-b9cb-4cf4-a4b8-dd3c19a83a48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97199a98-872a-4353-9959-2bdadad76ae0",
        "cursor": {
          "ref": "013f1cba-ce29-4304-b69d-07b06300ad0e",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "6ff55fa3-118b-4f7c-be1e-6b1e109caa37"
        },
        "item": {
          "id": "97199a98-872a-4353-9959-2bdadad76ae0",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "bdb5b986-d49e-4f1e-912f-8c4aab63a8a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "679bc77b-398a-4987-be41-3b5df4cf5155",
        "cursor": {
          "ref": "9e0b8bef-4f5b-4e06-8484-30fec9411b7e",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "02f306cd-e168-43d0-bffc-0f1f542739f0"
        },
        "item": {
          "id": "679bc77b-398a-4987-be41-3b5df4cf5155",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "5ab0e9a4-d5ef-4435-b617-c8e9dd313ce0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43de30ef-f032-429d-a5b7-280366a9a6c6",
        "cursor": {
          "ref": "2b45b718-d4a2-4f75-b9dc-e785e8b86204",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "27f3450c-2c39-4bb6-a793-2b19ebc2e218"
        },
        "item": {
          "id": "43de30ef-f032-429d-a5b7-280366a9a6c6",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "d5936a53-f249-4ccb-98df-809658174090",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ffbac70-ab5a-452e-9017-aa86261e4c57",
        "cursor": {
          "ref": "956aba95-4205-4556-84fa-a7a6aa8e3f79",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "1f3e9761-0733-455c-a1b3-a09c1e8a4216"
        },
        "item": {
          "id": "2ffbac70-ab5a-452e-9017-aa86261e4c57",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "f10f55ec-347d-4959-a1a4-a7f99d6c78aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07661776-b0ee-42dd-ac47-5e708645879a",
        "cursor": {
          "ref": "7418bf2b-8aac-40db-945f-bb24c939248a",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "da3e4f44-37c6-478f-8414-45b725976e8e"
        },
        "item": {
          "id": "07661776-b0ee-42dd-ac47-5e708645879a",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "efd41081-d5f5-4ab5-8039-62a460e24293",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f006901f-2881-48a1-9336-b61db4455689",
        "cursor": {
          "ref": "41662b35-d277-4b0a-a276-93643166c1f0",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "14399af1-bac1-4210-b13f-10de23ed4227"
        },
        "item": {
          "id": "f006901f-2881-48a1-9336-b61db4455689",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "dfdb7030-df52-4345-afe7-9b21aa340292",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f7baa64-c6bb-46bb-ae47-d37ee21135f3",
        "cursor": {
          "ref": "91931aa3-f562-42cf-b6ea-6ea0b49fd21f",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "90b3c411-2abf-4b00-bd81-95831ddf077d"
        },
        "item": {
          "id": "0f7baa64-c6bb-46bb-ae47-d37ee21135f3",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "2ba4d1dc-2553-4938-89b1-de854a7a4e5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed746701-2528-4f05-b59b-eb60ba29adfa",
        "cursor": {
          "ref": "d512d6c4-4b99-45c7-99ad-84ced9ee823e",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "c728cce6-eac0-4ba5-9231-e399a756db54"
        },
        "item": {
          "id": "ed746701-2528-4f05-b59b-eb60ba29adfa",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "b12913a3-4277-4833-9621-0866e3715cd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed55a2ba-d744-4acc-9c04-28c60b1bc701",
        "cursor": {
          "ref": "8cdec46d-c89e-4227-9878-1602df8e9d56",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "f84ac7d4-138b-42cd-a2d6-a556baeff10c"
        },
        "item": {
          "id": "ed55a2ba-d744-4acc-9c04-28c60b1bc701",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "9843ee2c-ae1f-4adf-ba09-975afbf222d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b610f471-b5da-4605-bb4d-d16d472aa50e",
        "cursor": {
          "ref": "a442e7d4-e516-4969-8f56-204bbb04fc60",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "e69e8d7a-37d9-4d52-aba1-9e61cd20d90e"
        },
        "item": {
          "id": "b610f471-b5da-4605-bb4d-d16d472aa50e",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "87ab8268-6e69-4f1b-9a5a-5ffb05444c8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24cfa06b-ff65-4cae-bd95-6abe5f03878f",
        "cursor": {
          "ref": "3cf96e56-7ae1-4e54-8487-42908c513610",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "d2d3c3dc-59da-4142-a5ed-d70418a52f1c"
        },
        "item": {
          "id": "24cfa06b-ff65-4cae-bd95-6abe5f03878f",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "b77ab47b-f269-4362-b0c7-5f577d1b7278",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19a8cd99-c63a-4973-ac2a-2b7ea87de2c5",
        "cursor": {
          "ref": "81d7ff06-660a-4d82-b432-221ad554cd9b",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "548f051f-826f-418e-a3dd-499a4032762a"
        },
        "item": {
          "id": "19a8cd99-c63a-4973-ac2a-2b7ea87de2c5",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "3c407b1a-95a7-41e1-98c8-9446ce09b5ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c00a312e-1264-4fe9-bd85-96ffd0b8f582",
        "cursor": {
          "ref": "4185d1b3-f71f-4adb-9b2f-71ae2147d641",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "b4507f41-2fb4-4ab4-8ab2-363bcc51c405"
        },
        "item": {
          "id": "c00a312e-1264-4fe9-bd85-96ffd0b8f582",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "1c7072fd-f007-4530-9493-f93c798b6422",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40f26802-44d6-438a-8ca5-da524fc90c82",
        "cursor": {
          "ref": "4e9678df-4c3d-43f4-ac89-9388db51edb3",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "1d77a1d2-29b8-4257-874d-a1e1125a9a8b"
        },
        "item": {
          "id": "40f26802-44d6-438a-8ca5-da524fc90c82",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "d6d48e40-f786-41cb-94c2-d3d3b09db591",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5246873-8314-4153-be2b-75363dd3fa84",
        "cursor": {
          "ref": "401269d4-309a-493d-955a-8e15cf248fde",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "f8c4494b-f1be-41f9-bfe9-73993d4ef68f"
        },
        "item": {
          "id": "f5246873-8314-4153-be2b-75363dd3fa84",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "58416f0e-c37c-4ee5-92e8-3d4e89086f32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b8d7bbe-595c-483c-98d6-3afd1e2dd4a5",
        "cursor": {
          "ref": "93dbed3c-8fad-4b1f-aadc-6534805642c0",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "1beeda17-4a02-44d1-a038-506c5f0f6287"
        },
        "item": {
          "id": "0b8d7bbe-595c-483c-98d6-3afd1e2dd4a5",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "507fb01a-f80d-47a3-8f30-38f7efe3a7ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b8636db-283d-4a95-bbb9-21c4d1a54fca",
        "cursor": {
          "ref": "91c53404-31e3-4004-9739-6630af697470",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "d04f804c-19a3-4c22-9561-7b0ee47fd6dd"
        },
        "item": {
          "id": "2b8636db-283d-4a95-bbb9-21c4d1a54fca",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "794ae7ec-fb34-4e75-8582-5cb7d1b1dc2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff4d1a13-a42b-4dfc-b477-2fe6ee623a6b",
        "cursor": {
          "ref": "76909f9c-370f-435b-a382-bf591d2d4f57",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "7fbb47ed-144a-4c9c-9933-885182cfa85b"
        },
        "item": {
          "id": "ff4d1a13-a42b-4dfc-b477-2fe6ee623a6b",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "b8c5f538-b164-434d-b8e2-708d69622929",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26d9ad23-8e09-4b94-b7fe-9b2173be5bff",
        "cursor": {
          "ref": "1213d695-61d1-4b3b-b7d3-630f69ef988d",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "668fabb4-86fe-4314-b2a1-dc87987563c5"
        },
        "item": {
          "id": "26d9ad23-8e09-4b94-b7fe-9b2173be5bff",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "153f6755-2775-4ac3-860b-653fb30ce754",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb2ff446-db8a-4511-873b-31695e51382b",
        "cursor": {
          "ref": "f3882b85-fdf2-4135-8a30-64b747327f6f",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "5bc3acd1-95cd-4cad-bc5e-1f6439e4783f"
        },
        "item": {
          "id": "bb2ff446-db8a-4511-873b-31695e51382b",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "dcd34b53-b697-4838-96f1-0a0989352246",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d346943d-a943-49a4-bd17-a1e0ba8acb49",
        "cursor": {
          "ref": "83c86bde-6523-4554-8f93-dca76748ea08",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "c5777632-73f3-4d08-bc8d-4d022cd93835"
        },
        "item": {
          "id": "d346943d-a943-49a4-bd17-a1e0ba8acb49",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "6d69a3c7-1bbd-4d5c-a21b-ca1a998c26f8",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "ad55ac38-27f2-4d49-b987-c83a93b41880",
        "cursor": {
          "ref": "7d6c2d30-0c7b-47ec-80c9-de0e39d1ae08",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "94e928b2-f8d4-41d8-bb39-cd8ad5cdc027"
        },
        "item": {
          "id": "ad55ac38-27f2-4d49-b987-c83a93b41880",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "aa81e422-4ec9-435b-9252-51c845353f61",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "cbe80ef3-5772-4428-8e98-022aaa8514b6",
        "cursor": {
          "ref": "a9e33092-8f6f-4691-ba96-f7ad1bcaa4a0",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "713aa40b-ced9-44f5-ba75-3feff82dc467"
        },
        "item": {
          "id": "cbe80ef3-5772-4428-8e98-022aaa8514b6",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "841275c9-0d9a-44fa-aaff-851e9e61a384",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "d1bdb161-2dd8-4c81-b48c-18fff910f572",
        "cursor": {
          "ref": "3cd20794-0407-452e-84db-572216a99bf1",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "6f6bc5c1-6e20-42b5-a71a-4c40c2525b85"
        },
        "item": {
          "id": "d1bdb161-2dd8-4c81-b48c-18fff910f572",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "f83a25de-de9b-4cf2-9293-3ee59da1a093",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02278d57-7a45-4d28-9025-3a5104db892f",
        "cursor": {
          "ref": "e7b72762-6cb2-4275-9922-7153b03032cb",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "7f3c2748-a516-401a-8434-3f743e143278"
        },
        "item": {
          "id": "02278d57-7a45-4d28-9025-3a5104db892f",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "9e78e428-6114-42db-83ad-40fe2bd18ec1",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "43828911-15f6-4441-b1f0-5b372639f6c7",
        "cursor": {
          "ref": "2b333bb9-d125-4bfa-aece-549cd73c16d3",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "6e031de1-5a4b-4852-a202-157b8152aae9"
        },
        "item": {
          "id": "43828911-15f6-4441-b1f0-5b372639f6c7",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "171bb941-2374-4090-a8e7-837019320c31",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "9f280c5f-e80a-4d1d-bc58-d4962442e596",
        "cursor": {
          "ref": "93c19a8b-d8d0-4cba-a2e4-95ec49396537",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "26a9aa78-1263-46c2-a913-d6712c03e1cb"
        },
        "item": {
          "id": "9f280c5f-e80a-4d1d-bc58-d4962442e596",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "cb9d0d91-36ef-4901-8780-8a41a9bc3d6c",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "e15f52f5-eb85-41dd-85c6-caa13c2861a7",
        "cursor": {
          "ref": "b249fc37-2a97-4ddb-9808-7bce86af3fb0",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "fc33bc1c-b27e-43a2-be77-dfb2494008ed"
        },
        "item": {
          "id": "e15f52f5-eb85-41dd-85c6-caa13c2861a7",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "f1b6208d-c123-4052-aae6-64a5d2e5d543",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "cb43ebda-fec6-48ab-8407-9cda5c72df63",
        "cursor": {
          "ref": "c94a5d6f-f51b-477d-91bd-42b316cf52ab",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "9e574f41-34bd-467a-945a-cf522b8609b6"
        },
        "item": {
          "id": "cb43ebda-fec6-48ab-8407-9cda5c72df63",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "3e92e110-b827-4fb2-9231-1e468b03d81e",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "4885e176-cccc-4a28-aa01-a2d9e00e40f2",
        "cursor": {
          "ref": "ec0082f1-13ae-4610-bb34-05e2094710fb",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "2dfbc194-9507-4039-a02f-2b876d002ac4"
        },
        "item": {
          "id": "4885e176-cccc-4a28-aa01-a2d9e00e40f2",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "8cc949a6-8363-4f5d-9835-618cf23c8a3d",
          "status": "OK",
          "code": 200,
          "responseTime": 147,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "282dd7cd-6ebc-46fb-bab8-fcc4a427fe68",
        "cursor": {
          "ref": "8a8eefa5-20b4-4e9c-b356-691eb181f2de",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "2b97a370-8507-49e1-b80d-a4b3fe1c249f"
        },
        "item": {
          "id": "282dd7cd-6ebc-46fb-bab8-fcc4a427fe68",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "7fde3890-29e3-4fe0-8b9f-4374c6e84076",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cb5f9ef-21ef-4f46-abc6-2cdc913978d5",
        "cursor": {
          "ref": "069119a6-a153-4967-83e9-da33c0b870fe",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "64b945ba-e01d-47f5-a1cb-ec8f3687619f"
        },
        "item": {
          "id": "5cb5f9ef-21ef-4f46-abc6-2cdc913978d5",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "f5460d31-b2cd-43ba-914a-0b964850abf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cca2453d-aa7c-4dd7-8d71-110efa4feaf9",
        "cursor": {
          "ref": "18270643-7634-4326-886e-968886a57c08",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "24c85de4-204b-4fca-992d-4252d1713683"
        },
        "item": {
          "id": "cca2453d-aa7c-4dd7-8d71-110efa4feaf9",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "8b2b77d0-fe12-48d0-8e36-860954291e39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33a81594-456b-4c6b-84ba-3a5272c333be",
        "cursor": {
          "ref": "cd03ff60-3e38-4d1e-b8a9-a3f94b1f05de",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "9e9ca135-8e28-4589-a6d2-7ab1d6a6d2da"
        },
        "item": {
          "id": "33a81594-456b-4c6b-84ba-3a5272c333be",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "f6f37fee-72e4-48cf-a0c5-63c6f2994195",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17dcbe66-6174-483d-b094-fd590804b0c5",
        "cursor": {
          "ref": "f58e7cd0-13e8-494d-a85d-95350ebaced0",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "6bdfef0a-0897-43bc-b67e-2bdb37fc941e"
        },
        "item": {
          "id": "17dcbe66-6174-483d-b094-fd590804b0c5",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "91b8f9eb-19ff-4c3b-acda-a5474bf672ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06b55a40-cbe4-4d66-b83e-1f407969e030",
        "cursor": {
          "ref": "500cb24f-3822-4d07-b49a-d820e3a7ea92",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "6aad501a-0458-4bcf-8be2-fac2144efd6c"
        },
        "item": {
          "id": "06b55a40-cbe4-4d66-b83e-1f407969e030",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "5bd4714c-4576-4679-bee7-8761e9d36b48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64307667-4dd1-4b8d-9e65-e6761a0a77fd",
        "cursor": {
          "ref": "814b9c96-960a-4d36-83c1-886d76bc566e",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "1a336baa-ae3f-4497-9948-f6a872041712"
        },
        "item": {
          "id": "64307667-4dd1-4b8d-9e65-e6761a0a77fd",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "a86c8303-7a92-433d-a0c6-1eee04567ac9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac45bc81-5b4f-4778-95fb-7d7fd4e8fe83",
        "cursor": {
          "ref": "2de3d508-e554-4806-b276-ad548900ebcb",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "0864ca78-9e8e-4fd4-ad17-33bd8849e0ea"
        },
        "item": {
          "id": "ac45bc81-5b4f-4778-95fb-7d7fd4e8fe83",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "66c5201e-692c-431b-84c2-1f068a194ba5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cde009eb-ca50-499a-a479-0b2049432c93",
        "cursor": {
          "ref": "f4d2831b-e758-48b8-b535-d0c230c3f37a",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "38c22bce-c7e5-4e22-9c38-9b48be109763"
        },
        "item": {
          "id": "cde009eb-ca50-499a-a479-0b2049432c93",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "7f3c08e1-4bbc-468a-b42f-a3c218befc1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96ab81e8-bd9c-43ef-96fe-42bd74d6bf8b",
        "cursor": {
          "ref": "f4b3be7c-d72b-41eb-a27c-f325faa050fc",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "c68cde03-c3ac-4e2b-87c5-5b0b96b22859"
        },
        "item": {
          "id": "96ab81e8-bd9c-43ef-96fe-42bd74d6bf8b",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "2f726a0c-3dad-4eb3-a017-dc8348b0db9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e53cf78-9bbf-42a5-99bf-d1ee0f5ae34c",
        "cursor": {
          "ref": "9536f9ec-3b3f-459e-a758-f96c0d7f23aa",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "ddc26b23-22c9-40b5-b63d-07586b8f9a58"
        },
        "item": {
          "id": "6e53cf78-9bbf-42a5-99bf-d1ee0f5ae34c",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "366c105a-3ceb-4326-9650-76a95a84e4b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f90f5d66-b96a-4f6f-8e63-accd425883b7",
        "cursor": {
          "ref": "bdee8181-060f-4efc-87ce-69c90e0b2f81",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "994d32b1-836a-4523-acee-8b585c50343f"
        },
        "item": {
          "id": "f90f5d66-b96a-4f6f-8e63-accd425883b7",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "883c59a7-a474-4ded-9b83-a233559d7e54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f5504dd-1319-4e0e-a74c-78e2caefd1cb",
        "cursor": {
          "ref": "c5eb415e-cd45-437d-94a1-41c3569e27bc",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "85de3765-a40e-4fbe-8892-7602997338b4"
        },
        "item": {
          "id": "2f5504dd-1319-4e0e-a74c-78e2caefd1cb",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "19ccc4e7-8488-4362-b5b6-0b00142416cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6741017d-76bf-4c1e-962b-d52cb5fe9dd6",
        "cursor": {
          "ref": "7453bf97-cb7c-49c7-ae10-b7ebb7502341",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "cbd82b20-e031-45a3-9dd7-c33ec340fe5f"
        },
        "item": {
          "id": "6741017d-76bf-4c1e-962b-d52cb5fe9dd6",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "857e2eb0-b45b-4c49-b5ff-0266724e7276",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "c2ed7a73-b0fc-4214-92e5-30da863c2686",
        "cursor": {
          "ref": "31c7844b-fd75-47c2-b050-45883093a9a7",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "236a9bbc-6e61-4a2f-abbe-884a78d68c53"
        },
        "item": {
          "id": "c2ed7a73-b0fc-4214-92e5-30da863c2686",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "bd86c50c-b45d-4d64-a079-3ff5b5da17a0",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "2d547b9c-44a5-4ce2-ae0f-03a9c59bd190",
        "cursor": {
          "ref": "11d829a8-436b-45a0-90a7-275c4a007261",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "cc7e96c4-2fe1-4d74-b9c8-50b21c36ce83"
        },
        "item": {
          "id": "2d547b9c-44a5-4ce2-ae0f-03a9c59bd190",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "005a7fb5-cb9b-4b5b-ac8f-c5ac6bd95fb9",
          "status": "OK",
          "code": 200,
          "responseTime": 155,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "111af699-f930-40d2-bfe4-42ee8a1b2a9d",
        "cursor": {
          "ref": "de8b0957-1614-4184-9ab8-2fcf649cbcfb",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "00a68236-3691-443b-ab4d-ed610c86ee5d"
        },
        "item": {
          "id": "111af699-f930-40d2-bfe4-42ee8a1b2a9d",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "55db82af-7d7f-4c4a-80f9-4e76fcaffbda",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "58dd3787-0fab-4410-8ad0-28db116d9bad",
        "cursor": {
          "ref": "be1b93da-54a0-4e2f-aefb-114e7dab2564",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "cfe7a019-1fb5-42a1-89b4-88b34362846b"
        },
        "item": {
          "id": "58dd3787-0fab-4410-8ad0-28db116d9bad",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "5dba903c-8518-4857-a618-74b47437b767",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "3482de30-df69-4c95-b2ac-06689041e154",
        "cursor": {
          "ref": "c97b1a0b-f259-469b-b0c6-08411a6dce7a",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "9a88b804-1308-465d-8198-11cc6c5a33ce"
        },
        "item": {
          "id": "3482de30-df69-4c95-b2ac-06689041e154",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "dd6c1a6f-bc9f-4e0e-bf80-89aff8fb4f8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7079e8d7-7b60-4a57-aa81-4354fed8ab72",
        "cursor": {
          "ref": "cf4ea348-eb29-4ac9-9dc0-7e92d54b6378",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "6ebfb9b1-78cc-4722-a07e-3580c8c8db3a"
        },
        "item": {
          "id": "7079e8d7-7b60-4a57-aa81-4354fed8ab72",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "666259a4-9d6c-4601-ac45-11592dbaa559",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fefc74b-7354-40f1-8f9e-7baa6fc4d9ce",
        "cursor": {
          "ref": "d4ec36df-1368-454b-a664-01d8c653ade9",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "0c3a96c5-3c24-412c-a188-e422b7e44ac9"
        },
        "item": {
          "id": "2fefc74b-7354-40f1-8f9e-7baa6fc4d9ce",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "85216434-438b-474a-822c-3a1fd7d8849e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "692d65d9-beab-4880-a89c-31bff07eb3ba",
        "cursor": {
          "ref": "034a7253-087e-4f73-9e75-885ce811f2a7",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "74dce660-52e7-43a4-a9dc-1e164e980ff6"
        },
        "item": {
          "id": "692d65d9-beab-4880-a89c-31bff07eb3ba",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "07ef4f65-3696-46de-9bca-c85892f6908a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4291676e-64de-4f66-bc8e-6b25737502a4",
        "cursor": {
          "ref": "8618447e-66a8-481b-a702-02775b6d1eff",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "c2cd686a-b4e8-4ecb-8178-e2161af8f844"
        },
        "item": {
          "id": "4291676e-64de-4f66-bc8e-6b25737502a4",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "5d47a80b-5d66-4067-97e8-d693c4304044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "578016ca-994e-46bb-a646-da3169fa14c7",
        "cursor": {
          "ref": "500f03d7-2bdc-40d9-9b8d-6c33888c831a",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "c23520a8-4296-42ff-8cb1-830c26f3e261"
        },
        "item": {
          "id": "578016ca-994e-46bb-a646-da3169fa14c7",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "22ed200e-1b20-49e9-bdb5-29c29a4d43ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39707641-fee3-479e-bfd7-01229a758827",
        "cursor": {
          "ref": "7b9b740a-169c-4112-a365-8f6245188530",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "aa7f366c-262a-4b33-90a2-179eca8f78d3"
        },
        "item": {
          "id": "39707641-fee3-479e-bfd7-01229a758827",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "6afa789f-9cc7-447f-87b9-403b832c2e31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2f23512-59ee-40ee-8b6c-e3a4b2327cad",
        "cursor": {
          "ref": "cd7f3a86-f9ef-432a-81f7-3f9b8440e465",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "90067129-e2b9-4573-8282-8a45c4633618"
        },
        "item": {
          "id": "d2f23512-59ee-40ee-8b6c-e3a4b2327cad",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "0da7db42-686c-4616-94e1-ea5bb879d63c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dbcb368-fca1-4d1b-9416-f6d4e91953ea",
        "cursor": {
          "ref": "11961093-b1a6-43ef-86b5-8dcc491e4849",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "8af6900d-691f-401b-8d5a-f15989c9be7d"
        },
        "item": {
          "id": "7dbcb368-fca1-4d1b-9416-f6d4e91953ea",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "d6b06325-a68a-42f2-9442-db065d520f79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e7358bf-5f4f-40ef-b177-76bac2940135",
        "cursor": {
          "ref": "09edc121-c298-4c15-b6e4-a19cf1df4e53",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "21277f55-ff85-4577-95a5-0380a1e02b95"
        },
        "item": {
          "id": "4e7358bf-5f4f-40ef-b177-76bac2940135",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "aed4304e-61a0-41eb-a186-c026e0c89844",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6a9c967-f0b2-477f-9966-77b9b7ee5592",
        "cursor": {
          "ref": "40cba66d-e47a-4900-8736-b01f72b75eb3",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "80ef9701-53c4-4cec-a4da-f3cfad4172ad"
        },
        "item": {
          "id": "a6a9c967-f0b2-477f-9966-77b9b7ee5592",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "78851970-a579-42e9-a590-aa9dffef3c41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2be0b993-9d36-4023-8c1f-7ca23cb39ad5",
        "cursor": {
          "ref": "b1adb389-b47a-4a60-9ee6-38bd42f7c8cb",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "8f45a47a-bc97-41c9-86e1-ba1758adcf51"
        },
        "item": {
          "id": "2be0b993-9d36-4023-8c1f-7ca23cb39ad5",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "55cc1726-a9d0-4659-aa9c-f8f9a8e1c6a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cccf2fb-6abf-4703-9ec0-74cd1946d56d",
        "cursor": {
          "ref": "6c1026d2-9129-440d-80ae-5f794aaa543d",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "d6a87c91-735a-4d40-904f-7281f1335545"
        },
        "item": {
          "id": "8cccf2fb-6abf-4703-9ec0-74cd1946d56d",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "9e780492-26f6-4263-95af-445694489b8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "061c37d3-48c7-4a59-a537-45a13dfe36a7",
        "cursor": {
          "ref": "2bf4dcf0-6a43-4c3b-bc4a-fe64c8e6ffb0",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "9b7ba452-890a-4080-9d72-63ae9f5f9512"
        },
        "item": {
          "id": "061c37d3-48c7-4a59-a537-45a13dfe36a7",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "a7c90823-9f30-43b2-b506-8baad5bec179",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73f0235a-d973-4fa3-a953-dfe745df2b4d",
        "cursor": {
          "ref": "28be26e5-6dc8-4a16-8977-4eda87c56c73",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "15aa0c43-ae03-4f9c-bebb-07fc5e666645"
        },
        "item": {
          "id": "73f0235a-d973-4fa3-a953-dfe745df2b4d",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "316d0728-834d-499a-b300-ae7abca425bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0850b928-0a50-4d1a-939c-c80e4c7606d7",
        "cursor": {
          "ref": "13447b5e-e6ec-43d4-99c3-52a8fc5bb946",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "b20f2828-47fd-4388-b7be-a126e0f93573"
        },
        "item": {
          "id": "0850b928-0a50-4d1a-939c-c80e4c7606d7",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "e6f17411-70e6-4b44-b693-b956d20b0a87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10a03bf4-273b-4a58-8ad4-81546018f13d",
        "cursor": {
          "ref": "a38f6363-2b7e-4c46-a51d-4e05692ef287",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "2d54b805-899f-4ac5-88d9-024dda00d39c"
        },
        "item": {
          "id": "10a03bf4-273b-4a58-8ad4-81546018f13d",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "fdb96e02-e316-47ce-ac9a-89406dc8995f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1947576-82f8-4b64-ba09-90aefb604c1c",
        "cursor": {
          "ref": "1cbd3e59-ecc2-42ff-ace4-b38fc7c51f69",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "b8d061a4-0af2-488a-b671-5519e14ed50d"
        },
        "item": {
          "id": "f1947576-82f8-4b64-ba09-90aefb604c1c",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "df7dd7f8-4215-4766-b1c6-10ce6550b2c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f2fddb7-6adc-4eff-956e-c535cbb7e273",
        "cursor": {
          "ref": "0976c261-c85d-4135-96ec-43ad0496d3ef",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "55a6c21b-2a05-4b57-88e8-c438cdcbd7a2"
        },
        "item": {
          "id": "5f2fddb7-6adc-4eff-956e-c535cbb7e273",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "946a6744-7753-4eb0-b020-d77d0e3ec7dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d33606fc-46e4-44db-bdaf-954a270519d2",
        "cursor": {
          "ref": "5c7ec279-d103-48dc-947a-408a6a238dcd",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "4a190899-0429-4630-9150-66006ef0f168"
        },
        "item": {
          "id": "d33606fc-46e4-44db-bdaf-954a270519d2",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "54850897-6c74-4364-88fd-aeb455ef0646",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e9e089f-0c9b-4dad-99d2-cb524d6f8c29",
        "cursor": {
          "ref": "9826ab51-a18f-4eca-8a26-b289d4385594",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "dfe762a6-6b12-43b8-846c-29a606cefafa"
        },
        "item": {
          "id": "5e9e089f-0c9b-4dad-99d2-cb524d6f8c29",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "9789c4e3-13e1-428f-9080-ee2b3cf07603",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c0f29bc-a7f8-4a75-9b27-11d43415cd5d",
        "cursor": {
          "ref": "f7eaf932-5fd7-4a96-9bb3-676ca617b82e",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "b537acd2-a6ad-4ebc-9332-9d8b711210e4"
        },
        "item": {
          "id": "7c0f29bc-a7f8-4a75-9b27-11d43415cd5d",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "3d299bad-8222-46f4-9337-729cf0e66d64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6ffefe6-80ea-45d7-b850-d2762469228e",
        "cursor": {
          "ref": "627ee5a0-317e-476d-992f-2ee95f132f13",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "83786556-24cf-484d-a320-c869a3bc8ecc"
        },
        "item": {
          "id": "e6ffefe6-80ea-45d7-b850-d2762469228e",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "5ca4d945-a687-4d3e-bbcc-f241acd5b382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "123b1479-ed7e-41c6-a4ca-e9971e3837dc",
        "cursor": {
          "ref": "138c79dd-514c-4344-b462-3e809e2a09bf",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "6c360588-d6c0-4d4b-82dc-bedddc3daa5d"
        },
        "item": {
          "id": "123b1479-ed7e-41c6-a4ca-e9971e3837dc",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "8023a25e-dc22-4191-8f54-9c72359032ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dd9a062-a7ae-4196-94de-74f75f3dbe2f",
        "cursor": {
          "ref": "0a7747e8-fa48-4c18-8a25-46d8e47457e5",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "67179975-1a72-4074-9a85-ab46b5afcba2"
        },
        "item": {
          "id": "1dd9a062-a7ae-4196-94de-74f75f3dbe2f",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "be7a0e9f-e28e-4a0d-9ff6-90030f4e3285",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2928707-58e0-4125-9469-f49387b2712d",
        "cursor": {
          "ref": "811d6514-9046-4893-8224-d9e303ba9ed0",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "a8fea52f-63f7-42ce-b896-35a2da59198c"
        },
        "item": {
          "id": "d2928707-58e0-4125-9469-f49387b2712d",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "bf39e6e9-7b29-47df-8139-638a2f871581",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaf1f5a3-b946-41fc-ba13-cc281dc70702",
        "cursor": {
          "ref": "c565306a-71dd-4220-a24b-bd2a695990fe",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "c79f8548-f0a8-4d14-8872-0c93395cd3e6"
        },
        "item": {
          "id": "aaf1f5a3-b946-41fc-ba13-cc281dc70702",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "10e66d6b-ae04-4685-be9a-b4751974e318",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d9e09a5-bcb8-4be8-841b-4db4ece86ac5",
        "cursor": {
          "ref": "fe26d694-c9af-4209-82e7-d1e4dcf4385a",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "d65f3027-ddf9-45d3-b0ac-fbc2e4199d9c"
        },
        "item": {
          "id": "1d9e09a5-bcb8-4be8-841b-4db4ece86ac5",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "7d666103-10b5-4d65-877a-2b45680a34f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "022a6c95-348b-41ab-bcf0-8ab676dd3b9b",
        "cursor": {
          "ref": "8d9d37af-53d0-4c7f-a218-abf021324ec5",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "cce640f3-a8d6-4648-83b6-e1142970c826"
        },
        "item": {
          "id": "022a6c95-348b-41ab-bcf0-8ab676dd3b9b",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "4330431e-96a3-48d4-82fc-2d122a4558e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9f87201-7258-448a-b1f7-dc6dada5c33f",
        "cursor": {
          "ref": "bb426d60-1bd0-4293-b2ef-f00f9849ca61",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "c40ac63b-18cd-4b1b-8940-b5d3cae59291"
        },
        "item": {
          "id": "b9f87201-7258-448a-b1f7-dc6dada5c33f",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "bfb15f71-3bb4-4f27-a9b4-d0dbd294c405",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "644be32b-f459-44bf-b069-414116636345",
        "cursor": {
          "ref": "1fa4fa6f-b03b-482d-860a-a66454ed6d98",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "48794e8e-ab0c-4128-bee4-7b7e06566530"
        },
        "item": {
          "id": "644be32b-f459-44bf-b069-414116636345",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "9f75841f-67df-47a6-81fa-0c5520520ca8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab158b93-d3b5-4d72-8e2c-500bb7bc1c11",
        "cursor": {
          "ref": "e640dc01-6d06-4140-bea6-6ade694ea501",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "bb6cf20c-26d1-46ea-ac31-7c563c781fc4"
        },
        "item": {
          "id": "ab158b93-d3b5-4d72-8e2c-500bb7bc1c11",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "f2806935-7619-4eab-8d1f-0df528c31bdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "703c3d40-c6e2-494f-9311-1631f7deff9f",
        "cursor": {
          "ref": "addcd3d3-682f-42d4-9797-59d5c7957c15",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "ff40380c-a8a8-466e-be74-9414c43e9208"
        },
        "item": {
          "id": "703c3d40-c6e2-494f-9311-1631f7deff9f",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "5193b23e-ff4e-48a6-83ee-8694bdc067c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47cad08c-3e0d-4c2a-b09e-91d3eb60885e",
        "cursor": {
          "ref": "dcc806aa-34bb-409b-90de-bd7f2a280d1b",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "b47facce-4bed-4ccd-a19d-e36033452381"
        },
        "item": {
          "id": "47cad08c-3e0d-4c2a-b09e-91d3eb60885e",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "81f8b83d-7b97-4da7-8455-57cd28415ec9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dab73b31-46b1-4cb1-9408-ce6e97a28212",
        "cursor": {
          "ref": "3a5808cf-3ab3-45fb-b7cf-2a160dfca07f",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "917b7b7f-d47a-4113-ac95-02f8020768c6"
        },
        "item": {
          "id": "dab73b31-46b1-4cb1-9408-ce6e97a28212",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "5ee7e775-623c-4ca4-8e40-e8fef088f899",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 40,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9089bd6d-6e79-45f3-9a79-708c01ab1191",
        "cursor": {
          "ref": "1908a25d-ba85-4930-9dd9-6132d90666e5",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "fbd9c83d-012e-4f23-bbbb-b0908fa146ca"
        },
        "item": {
          "id": "9089bd6d-6e79-45f3-9a79-708c01ab1191",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "eb5c417b-fb7d-4ce3-8235-8d5512fadf20",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "306c60e6-8125-4955-93ec-4215c98f9e71",
        "cursor": {
          "ref": "959870ea-0279-4dfc-bd52-5d9d1884b1f0",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "a2753bbe-f5d1-4ac5-b851-1354c2f0119f"
        },
        "item": {
          "id": "306c60e6-8125-4955-93ec-4215c98f9e71",
          "name": "credentials_verify"
        },
        "response": {
          "id": "55df95ad-135c-4517-b86c-31e4cbffc7b4",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "96f17a41-2b91-4c62-b08b-0a744d09efe3",
        "cursor": {
          "ref": "669cf299-da7b-42da-b0b7-93ae309ff9f1",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "3c8c0a8f-5f66-4430-8ab5-3bc006336f66"
        },
        "item": {
          "id": "96f17a41-2b91-4c62-b08b-0a744d09efe3",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "1831e688-26c9-4768-956b-6aae937e288f",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aaa60be-0d79-4ad3-b02d-46065d72b2e0",
        "cursor": {
          "ref": "adf71155-02a1-4595-8e10-376bf6a4ba40",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "fa345c75-8712-464a-9f4d-3989bac135d5"
        },
        "item": {
          "id": "1aaa60be-0d79-4ad3-b02d-46065d72b2e0",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d6a23d17-604b-4852-bc0f-6bba50853446",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 40,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aaa60be-0d79-4ad3-b02d-46065d72b2e0",
        "cursor": {
          "ref": "adf71155-02a1-4595-8e10-376bf6a4ba40",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "fa345c75-8712-464a-9f4d-3989bac135d5"
        },
        "item": {
          "id": "1aaa60be-0d79-4ad3-b02d-46065d72b2e0",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d6a23d17-604b-4852-bc0f-6bba50853446",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 40,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c915de08-5532-4576-bb3f-bef9cf5b129d",
        "cursor": {
          "ref": "8535448c-54c9-4fb4-a097-b062aa01f850",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "6f6f33fa-e19c-4d43-a691-08f37cc41203"
        },
        "item": {
          "id": "c915de08-5532-4576-bb3f-bef9cf5b129d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "87addd83-53e0-480c-bab5-9618b6fa2958",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 40,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dce7417-e866-4084-b5e5-57b8576ba684",
        "cursor": {
          "ref": "5e78f830-d959-4fe5-a4a7-d9d4e96a6216",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "d162aceb-15b4-402b-b26a-112cb4e978c9"
        },
        "item": {
          "id": "0dce7417-e866-4084-b5e5-57b8576ba684",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "10282f79-b933-4185-b1b0-03c24794ca58",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 40,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}