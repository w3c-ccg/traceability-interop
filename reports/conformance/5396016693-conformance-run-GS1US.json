{
  "collection": {
    "info": {
      "_postman_id": "4bd78d4a-8f35-432a-a4e9-9e5a47c7c93c",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "4b9fa057-2a90-4051-aefd-b19d11100335",
        "name": "Clear Cache",
        "item": [
          {
            "id": "5e5589e9-8f9d-4ddd-8e9a-109144804b47",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fbd4c635-ca1c-4a92-a790-7e11d589dbb2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2cb2201e-0777-4a3a-8f66-5f5c4bf688e3"
                }
              }
            ]
          },
          {
            "id": "00e5475e-df5b-4667-83fd-5e771417f14e",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "578b8928-e776-43ed-bd5e-60f8f3731f18",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ade452e4-11a6-46bc-b845-45521cdee9be"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "088433fa-4cfc-486c-be2b-2cf9077d79cc",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "30634874-a9ab-4b2c-b2e0-6f93e0bd70e0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "99a9d320-033c-4dc6-8e5a-62c6e11dc88b",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8155596b-b785-4626-bde5-4b060f4d3a23",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6931dc64-d122-4cf6-b331-c162d374e552"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3405c24c-d4cf-4d34-8f8c-fa8316042e6c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fbd6a551-08fa-41e5-ba98-9fdc10195b83"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1d34e247-9c96-4b3d-9f61-41077ecd7b75",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dfa7d533-5058-4bfd-80a7-3cfaaafae4c4"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e553ee2a-cf31-4b3b-a192-64b6d42c20f1",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "3bdb7117-54d2-46c5-9743-7e6405fab809"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ff05a683-c7de-4ef7-8063-04af74689445",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "345acafd-e34c-4393-a2df-1adc4659097b"
            }
          }
        ]
      },
      {
        "id": "a15dbb15-c364-4ec4-b3b0-fc4e12e41a94",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "b96de0a1-0e4e-4b8b-8ff2-8c2a571e1f4a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d0004d67-83eb-4531-890d-47be9c367f66",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5e42751a-d14b-4145-85d0-13192df2636e",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e33eada2-b0c5-4f65-bb36-aed70eee3df4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c9df5c7b-e31b-44d9-b92e-ab9828594ab3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e038809-d488-4a22-a5e1-37da317a946f",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "662075f6-9d02-41b3-a29d-750164062548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b464dda5-9ab1-47d5-bad3-9c21669f8b00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58ccec00-ba71-4c75-8aa9-610ae89b0cf5",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5823c143-c037-4b2b-b272-ef308727d6a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4fdcbc20-212c-4a00-b8a4-1f8d7e14b10c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d4e65c7b-f39c-4441-a5d5-8b627f54aa89",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ec557d07-8073-46d1-9ed2-c11d3ff9f1ea",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "500d243f-c11f-4a13-8d7d-152ef87c58ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6df8325c-21d3-4831-93d8-94cc6088f8a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "012d5ff9-e924-4f09-958d-51f7f6637b42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84034ca0-676c-4945-8848-84fc8f623691"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "bd06c4ed-6137-4262-8be5-6d1349e9c6ee",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8fbfaeb8-7b32-485e-95a7-d4c433a232af",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bbc9799e-8bac-4085-ad4b-7ae876e0630b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "325be3f4-6d94-4119-82ae-5cd6d16623ed"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d00840b3-a08d-48de-8651-c68aed08762f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "1d6bbb74-b2fe-4a16-9461-76c5769866dc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cc37a94b-9636-4409-909d-0612710c188b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "632743ce-f36c-4a1a-9a37-caf1c09d1df0"
            }
          }
        ]
      },
      {
        "id": "777319fb-d176-4a79-88e8-82b97c4a2f8e",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "2590dfe4-57e4-4b34-bb16-f6f09439824a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "10f8afd2-d7e3-49ec-adea-ace7e520d163",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "2d895408-232a-4057-b62a-a37a66189588",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a198ff6b-74e5-4dc9-9729-33eedf152901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "906c9c20-f343-4d07-9a82-ba7a3f83c30d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56e14904-b9ea-4d1e-b283-379a767b3791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d88df805-d373-4797-972c-a9c7e95a54b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a02f7cf-9cac-48e0-be9e-feed76de67ab",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e84b627c-853e-4a68-941e-c23b57395920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0708fb41-c81b-4cc4-9399-3108de1b6f58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97e4b200-599e-44f6-b062-e1c4125e8281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2f11d4db-b745-4138-ad5c-8f8183685340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40bfb319-5e52-43c7-89a6-bd44e5d8571a",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce357c4e-76b6-4021-8952-e4cd6ba86ec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "733f5355-aad7-48b2-bf9c-98ce379a2bcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0560fdf-f8fe-4eff-8fc7-5277ddf30b13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bd3a6859-802c-48ae-9a9d-20c4166f6471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac48eca2-b82b-406b-85a3-95884ff987b2",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e909da91-0e9d-4ca4-9938-d066488f62ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ab584b7-2968-4116-8d52-04639ac299ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70b5119c-7239-4d37-82a4-d753e031ad69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b9ebb814-d7ac-4adb-b4db-6ac5c697e8c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4edfd70f-a6cc-497b-bf52-28d0ced68731",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a3c00e7-cd0b-4b94-9416-cd809b7a16a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee6bec51-956b-4caa-9c49-032887335efb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e55ca98b-05a9-4d38-b542-edc595d2e741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4c86853f-4412-459e-8e3f-e7d91c488868"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcc4289c-d459-4e41-8d8d-575e687b28d6",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "977f0591-c857-4ee0-8e7c-33910e79bbf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88000e67-68ea-4092-bdcc-1c574d9a0677"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aa22672-a3f1-4398-a41e-2f4793fa7c6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "07c6f925-3358-4831-8793-f7c395edc82c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e2ad955-72da-49ab-8bdd-0aa875a1844f",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2ef1e9c-fb6d-4312-8159-5235651f1b8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "138ac228-e735-4156-8605-cd1b0aedf3d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd53b967-fe1e-483e-890f-69b0e2759e6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0b2411bc-9342-4dbd-9e8d-cfe9574acefb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6a7a18d-2112-41f0-93df-2653a7376d69",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "684445fe-adc4-4cf7-b520-41be210adaf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f78c07d3-44b8-4394-bf15-103992b3f187"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6da0dae0-8e98-4e59-a1e7-fa11d654454e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5abdfe71-7c8d-4f19-8825-be0a5974d62e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "336dce24-f267-49d4-bea6-1130edfd057b",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77bb1f1b-969b-40d9-af8b-44a3a2d84002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c34eef8c-3a94-48eb-a025-90e33603b02e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0da9518e-cc8c-440d-97d4-56cf8917af7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e6c6ca1a-a1bd-4536-b6e0-fba71ed1939f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "453120fe-db9f-4da9-8c4d-54fa7c67dcea",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6dd46c7-74f0-4da6-b427-d1d21aeb8e72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6181f981-3ecd-4eee-8626-8de809b2b460"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7427bc58-fe1a-4342-b5a1-b50628ec899e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "930e7a07-41b1-4b3a-8f4f-380892549c8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f8ff6ee-582f-4428-8a5f-087d75db64a5",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dfc17e5-d0d0-466b-a1e2-6315dbbc1eeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e1edbc1-b1ed-42b8-bc43-3046303609a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49821a38-32d0-4305-9e1b-f0f57db906c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e2b7f075-e236-4528-bade-5683805d7a0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d08f6b4-53a1-4e9b-ab8f-57847587319f",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b90ebb33-ac4e-454f-8cac-3f03c3539a4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b7f61c2-6f45-4344-b6af-fd2b7f5e126a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "232af042-7ac4-457b-93b9-4f9f303bfce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b34e5bf8-aca8-49dc-9546-cb5f411bd60e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ef4136d-d951-40f2-951b-ec51c930c93b",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d5889eb-e08d-4f8e-bd12-407b6fadba39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d4af4ed-4efd-4fbf-a0e7-ca238213ee3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4305a71f-e60d-4fec-9ede-5fc25829ae3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "64b5c2de-6d85-4f7d-95ee-94acefc4f377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2244b8a0-395c-49e8-9fc7-117b3182223a",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06120a89-802f-4344-87f5-7d64fee67c09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3daa4156-597b-4c5c-b37f-ca4c02a86abd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f5d0d79-d46a-44c2-ad6c-cbb4ef1ce669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f412f666-f5c7-412e-86b4-3f581d07a257"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19278057-2e5b-42fe-9184-b5b669e54b9d",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "920c2676-8e32-4b6d-9dd4-4cbcb6734595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45c6ddfe-951d-4cd2-93bc-63b9d5a2ffee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ee894db-d27b-45d2-8f37-222ad9d8377e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5963f865-211c-4457-a46c-d28cbb4f0d01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a289a7c-5f87-42c2-8f79-e14e73cc0614",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "028c8ede-d6f3-43dd-99cc-4b50456d9646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "013dab7b-56b8-439f-8010-f3a0df09c355"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61da184a-f34e-4f86-856d-147216b0b4ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aa9f53d9-2b70-459c-8e20-179123d679dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef27f446-d116-4b8c-86c0-44ed32c28b34",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75ba9c68-e5ec-4579-a2bb-e577cab40b4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0045e512-9c09-4ebb-94aa-fe4d7cf53276"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15248de0-75c8-48e9-9956-012113e9826f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "637c1166-aba9-49ed-8dc7-e625b29f3cfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a28ee9a8-ac5f-40b5-a93f-040b39c9a408",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1a82310-a62d-416f-bdb6-527b2252bf35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44ec13c3-13f6-4bfe-9a56-280e17e3b076"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5060f0e-46f7-4c5b-9118-ee6ca186a478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0136fc3a-58cc-4d04-a281-9efda864df9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1273cc17-017c-43b2-abe4-e6bc6e5da3cb",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7337e46-c529-454c-8c81-1238e937ab5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "418a7c15-5224-4a32-b0cb-4ad48706f6db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97e7914d-1dfa-4d6c-a346-b5f2e287d17d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "63209044-a7dc-4066-b1a5-d59a8a505efa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c388fe2-a211-4225-9bff-e59b8eac9669",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb791313-d06e-43a0-b73f-f284ac760127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef711718-2fde-45a8-b146-3fb47d87efdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0dff5bd-b36e-4711-a2ad-e805fed60c39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3eb47402-295e-4c34-91b7-0fb3909c68ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32eb245e-7204-4f1a-af7f-0613d0a446eb",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "befc80fa-d0a0-4e50-893c-f8930c9bc010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf49f5eb-33d6-4109-b96c-34742d71fff9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98affea0-e40c-48aa-b3bb-718ab0184f18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "485951c6-637b-4164-bc87-77ddc2a4a15e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f683be16-eafc-4598-a965-773f2605d769",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7c44a05-280d-4512-86fe-fd7dc185da9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31f3b783-232b-467f-a3af-0b545474410b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5d3641c-f921-4efe-bb68-53c091926d1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f033b6d6-d4c1-4d9f-b8b8-cbad8be29e3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3edf914b-3045-4b20-a373-bc099c19eac7",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d3029a0-a586-4fc1-83f4-2d7d201536a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3eda595-241a-4569-a1ca-a4525a5707f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23d7065e-b0af-4140-9038-594471ce7db5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "abd92204-d4b0-43b1-b88f-d829bcf81377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78f68cf3-0396-4db8-8c3e-a35933484d1a",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d615ddc-a649-40e0-9ec9-9e31cb4c2256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bab48a20-d7f7-48d7-8d2d-ee702e13e000"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f62f312e-e68d-41ea-be21-e9a49430fc99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d6ebb63-271d-416e-94d2-a24f3206bac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dfda84a-2e48-425f-8dfa-ff7c19166d70",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e048899b-c90b-459c-9bec-dfdaf06e56c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72cc8044-bdd7-40b0-bf0b-f8cda4044df3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd2542cc-abf6-41f0-80f5-c03d2c0d1beb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "77b58ad5-01a8-44d8-8688-3ddc5879779b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "327e4ee2-37aa-4c90-a3ca-af6bfe449662",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97d1c7c7-1bee-4174-b696-ccb0bb0ededd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "994a6beb-0852-443c-ac3a-dc8ee10d34cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e8e2b0c-f1e5-425d-b997-02a268e4ec5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5bb28d53-e0d7-4a11-b0a4-efa3b7d4d343"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e801d462-e0de-4899-ad34-cd995fc679c2",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdbdec30-1808-47e3-8241-867df1ea6f68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e8072e5-892b-41d4-83ea-ac59058e5c9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2f753b8-186a-464f-a542-ef8715fe4cbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b79b373-c61f-4a78-87ff-a29180ae15e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f325d6f-8561-4e15-85c9-78e09444e14c",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7f31011-b8ef-4585-b2b4-1d3bf28584be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9148c15f-c6a5-4ee0-86ff-a590c2369905"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4df311f1-a2aa-4405-9d4f-eb61dc6309eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "682232d9-ef0e-4007-8684-eb70a9ff9e76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd946535-e5a9-483c-bffc-ce97c4dc5bb8",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c46b1656-6fd6-4c6b-ade6-14ff0f2d78ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bb42499-5cf8-45bf-9240-31a2fe4c52f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ec4c4a1-c043-4a37-8769-f3139265cf7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f97490e-8f5f-488b-80ad-3ab02939f2d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d38279d0-0b8a-4ea5-94ba-138221589c57",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebdc1223-c6f7-4892-9a5a-346208e90ec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c800d05-9163-4fe4-b252-10d78624094d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6c592d0-5929-468c-a87c-96928507ba1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b9f71ff-0ff2-4e97-9282-9c841b212eb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15734b33-87a8-4783-ad54-0c54d3037064",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d397155d-dea4-4c05-b49d-21aa992b713a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb1416d1-7486-4329-96fa-d368098a25c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa8c1150-e409-4215-a1b4-7eac0d34e3a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6081703f-41af-469d-ae2b-2c94aa78f931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "501e923b-cb7f-4763-90ab-bd11880b69e6",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c520b5a4-e4b9-4cc5-8f62-4175af4c8cb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56b3ee4c-60cf-4c8a-ac83-2a320384eb2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69e8500d-9594-45e4-9b60-4a2f9725007f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c49f6c68-7cd5-4912-a708-cecda0b88439"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5559aacd-472d-4da2-b265-283e64214888",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c634228a-7f2e-4ea9-934d-01b944629e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e30e9f3-437d-4b51-864c-19451d4f8d29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7940d9a-41d1-4c51-ae4f-8476f79d3174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "371a4981-9304-455a-bca9-f71fce403f29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7371c373-1ada-4b14-8f88-5b5316e0972e",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a749e699-1c81-4541-ae10-fdff32375b9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f62753b-4159-4af0-91d4-d74b9d43da35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2df510c4-f892-4fdf-813f-e032b43be616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2945a04-bb8b-48af-b177-6017c4736454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26129f7b-7df9-460e-976c-77530126e731",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49e3ac73-f182-49e9-ae43-bfca98ec0e38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2483712-de15-466e-a521-fcfdf6833496"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73db4077-3bec-4b51-bab3-0231a3515fc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "a6632dce-a0c9-4466-92d3-e464085427ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82db743b-caf2-4a62-9922-ead50637a9b6",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a791a15-892a-4db8-9cb8-94a221785816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9aab080a-0405-4154-84ab-bf73f144768b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e325d86f-4603-476d-a88d-bb28f6cbf51f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a9eff8cc-3c02-4bbe-94ba-391295f77848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c11a439-eedd-4666-b4a5-a643d8441f85",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "683ef3e3-dc6d-4801-b81a-8b0b2bc0a675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fa2dccb-68be-47d9-ac3a-0217144ef7b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e40f795-ce6f-4f7d-bc1e-ffc7fc144851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a22d75e0-1095-4ad0-b288-12dae2b9ba0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a44e6440-68f4-4838-9e2b-859821436ecc",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a86f2642-3493-49ac-8da2-bc9a1c13b079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b3e4eca-bb17-4ce9-bcb2-103f572a5f2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a27e057-45af-4c7d-8b1e-58e4f2b152b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "32a61a34-cdb3-4eb7-b5ca-0679099cfbda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1beb68c-fa1c-403b-a1cf-45cb699942f1",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f2f67a4-9d79-4342-9546-c378cf0aa96d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6bef13a-c5e7-42ec-aae7-af13c70ad527"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a7cac8a-fec8-4ebe-94a6-d358abf115a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "63b6ff76-d63d-429d-b214-44d81427f2b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "206d1ddf-1bda-47f3-adb5-30828c95183d",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b0de19b-1ca7-4baf-a638-d6707c2e3678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0065987d-e6ef-4f24-bc75-69be83511517"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d76a25e4-e845-4310-bdb3-d0a505e41543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a51ee504-de23-4de5-8c74-da9b4245b465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fef1b210-fe72-41dd-8287-fec8bcada5a8",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa3b6952-eef1-4b07-ac7f-4662001fbe76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dadfc30-767e-4649-904a-4dc1c7a6fde2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf36b345-1e37-4343-b5d3-07020e6bd5f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a84f321-b301-4234-a51c-1eb78d1149b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7041321-d677-480e-9189-c87c55ca63e6",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81b51c8f-0bad-4cc3-b6e9-2854b29d19a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1580d303-82a2-4f1c-ba6d-19ddea15418f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c3e673c-0c86-49cf-b9a1-7dc60d17e921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "c32126a0-2ee3-4b15-a389-6d91dfdeb2f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62bbea7d-38c2-4d2f-b219-4f3e5d940e5c",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c89b9570-f9cf-409c-a994-fbe625cea05d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86985d06-e8a2-43fb-a2f1-169ee8bf4b8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2c65f5a-948d-4c20-97a8-5e23413250bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "87b1c75b-2212-4662-bdd0-153ed34f842c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f62c9bd0-3735-48f9-b616-39ba4775d989",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5946ef7a-0f5c-48fa-859b-72033aecca1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf6ee61c-e62e-43c7-b233-b649ef35e76b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07f9bdd0-39fc-4d89-9fa8-9b322c6a1d3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d186b0b-0b74-4430-828b-b8f97786d17f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f94c46a-308a-47b1-9ef1-12bd18e0fefa",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcaa38b8-21d0-4f4f-9770-5fa5ea2cf267",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "505f4848-8f47-4bf4-b0a0-e38a760f9d9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dfe381e-1e85-4849-bf37-dea55f073d83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae119580-8518-467b-a132-23fafd6d961d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e91b1953-c735-4d6d-bffb-923c7a1f2637",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab2a712e-5535-4e42-958c-6a8e444fc591",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aee63deb-fb05-47fe-9105-6778624d35b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdad1c89-e998-44f6-8f63-19990dc405b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d972be5-8e37-4901-97a9-f98c1635f563"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46962451-ed04-43e3-89ab-20dddf5ea139",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98a33c4e-25e9-46dc-8d53-ae109743056c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62799890-07cb-48f2-977f-79f786c91e84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d586166-676f-40df-a2f4-8d0532423065",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2866c31c-e81f-4458-ad0f-c0b1bdf7bf1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "002bd05d-a061-4191-b9e5-6467f7ef9780",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfda2b85-36f1-4218-a49c-af6d38d6aa82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6edd7480-6436-4410-a2ba-33aeb2b2bc73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd41abf9-8159-4d6b-95dc-b1f7460a6338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "90135f77-2d74-43ff-86ac-5a187560a1ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d376d6a1-c0a3-463b-8531-74c82253de1a",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f7189dd-9c72-4c9c-bcc5-877780f0ecc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dca7016-9efb-4ebe-8101-8e9e5bc043d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "782d2f1a-30f2-4530-81aa-8ab4351cd49e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "960a9be3-34f3-46d6-a460-69325c723420"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35bb464e-9c6b-4d2a-9951-cb0aa84a2cf5",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7b79fd8-4fcd-4a66-b180-ef787c86149d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1d253ba-1fce-4846-9f49-81273e5b2b90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41f2f703-f837-44fe-bace-26570cb51eec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8dc23e2e-aa1f-4ec0-a3aa-603d7a718b0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97d5678f-297d-4555-a3b7-ea25bfe73e86",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30db5f75-1c53-4337-8f31-e99bb7f73587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "364c4a75-5494-4d2a-ad1e-d3af526b3be8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd838a2e-848c-4533-bc81-271e64057a5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9b1a6fa-770a-47be-8328-73310d7ece6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e057448-cbac-4c78-9b3f-66e104e25a34",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b12f097-02c7-4fee-9284-7292a1ad8032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d22e304-5b74-4da1-98a4-411e851b438d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eee51cd-6b5b-45e7-9461-197463c31ac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7793fc3b-1828-479d-b772-7522471bc6bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "418b7324-5c4a-4965-94fb-6a0a8e7d4dba",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dcac051-5040-4441-85d6-8513d87500e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85e4e1d9-22ca-454f-8f42-eb3623a7f354"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad6566cc-9b59-4cd8-b0fb-8ea6ac04fc3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c491be7-d9db-458c-8f94-2db6357bc7a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67cee382-b0d4-4e3a-9998-59bf4a932f85",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0a6895e-882f-405d-baec-993ff2c058f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a22135a-0a97-41c1-b580-ed24a92cc4fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "419398cb-fd44-487e-be86-5433c9ea0cc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "807d735a-2762-41ef-b285-4769de02065e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4a22dd2-3cbf-46df-80cf-d8590ae1f447",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5be97f0-d10d-4f5f-9e3b-38a2cf5f180f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65292b56-1b79-47ac-8e21-9a7cf5dd6c6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cf57ea3-c236-41dd-9450-602dfe7d32c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "beabbffd-141c-4765-b7a1-62f25ffc05f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bf6d99c-4fb6-43c7-a76c-d204462c8a8f",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b4e1381-7bb1-4d2d-99d5-c0be74cd1bab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68c34c78-ab00-4e23-8efb-0d3ad9cfc3db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d32d5855-5f25-48ea-bedc-82781a021a39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "5d8b45f5-57f1-4ce5-862f-b00b34000bb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94c8e408-b496-4d2c-a8b4-760830d673de",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43150dcf-9c7b-4bbe-bada-8ecde036bfff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9147d211-c608-429b-a679-60a6366526c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af843ff5-aa0d-483f-80ac-d3511cedc8e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ab2bdf6-9b88-42aa-ac72-dea204a25d47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18fe349c-0e1e-46c4-b2c8-991f6302667d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dc4d4ee-d2f2-4679-85eb-62fb29e33833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbfd6045-2fdd-4cb9-9780-6bb165eae139"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bef1102-7d15-47e3-ad34-dde1ab28bbd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "053a3200-ad97-4991-a133-b532ded938c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a7e38b3-30b9-4111-ba50-1f46908f2c4d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af0bd743-73f7-456e-bd6e-484d66db5464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c286879-9732-44c0-9e9d-8097304195c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5310057-8b39-42e0-a2c2-a724a6bd980c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "dda8ca3e-0b08-444d-b216-8260b1791d2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6167c747-3a75-487f-9193-111d8be1f4b6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c97e6d02-4911-4da2-b5b3-4616865b51e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec06f375-d408-4b79-b928-f567793912c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf5d830a-b39e-45f5-aa70-7e51919d4ecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "be1b48bb-b2fa-4ccd-b052-8008e8d2cbdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74446668-b83e-4e92-988e-c33783374eb6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f72716c8-bd3e-4f97-b6f3-671058e95959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4d34765-4580-4e22-938b-4d9ec7242b23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7ae0ae0-c8f0-4479-8288-3636db660355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "98005e0e-28b4-46f4-bcbe-f5672d90b235"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e6732c1-c6f4-4ac0-bc8f-10d37cdbbbec",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "454c1435-4be6-46e0-9c7c-d9a33379bc97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b976ac15-2311-4c35-ae9f-1a7815e8a9ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "645b510f-c847-4dc8-8d1d-23442a95b598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "952d28c3-27d5-49a4-a1fa-e25cf5499010"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d94e9d6e-9910-4951-83c6-846df29a6ca9",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a48b542-116a-47fc-b8ba-62c992d552fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ccb8a4b-8429-418b-b0c1-19332f2b4fa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d144c1b-5f60-4fb8-be72-63f04fe23882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a85d32d7-fbcd-4361-9d11-15ecc4dac233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11f14ad4-1d02-43bf-af20-1f74e3e24085",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c972d8a0-ee2e-42e7-97fe-3926505ae9b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b200afed-137c-4894-96be-0c02ac2f1264"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab305259-c4e6-40fa-a377-d8ccbafeb227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2926292-cdc9-4ddb-8d5e-edd8afdc42ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5397d831-33ba-47c2-9188-d27c10ca6776",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0c55735-e6e7-467c-a04c-1c8c77e98289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1fdf9a4-4fd8-47d8-a4f0-70a8574b4a3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff8dcb4c-e5e9-42cc-86af-b32b8d18acb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ae4e0a3-7d36-4902-a2ff-53b556c375db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b98d9321-3ac4-4804-a578-267d614f8746",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2d894c0-acb9-4313-b9a5-ddc9e1f20c17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0f7d202-8697-472e-a858-dbd322bd2380"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e97c94e9-2422-4653-84a5-48ca367507d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ccdd407e-cbd0-4e7d-896e-fb65d13542d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9e42ee2-892b-4b20-8792-144e7d34c367",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62c83db6-b7bf-48d8-89ef-0c5662e94bb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b726267-dfd5-48c4-b1a9-5140afcde0b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec7f3809-19f5-4020-8b37-a7a946695127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d79522f0-18eb-4ef3-8bbc-eab17ec1a7cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abaf18c6-d965-44cf-af37-39ed9834b4f2",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9161abd7-a152-4669-8f21-7688d6526825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a638f23-7a62-4aa5-a2af-ffc1f23684a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb85b6bb-54b0-4126-b547-51f8d8d81ed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "bbdecb39-b399-495e-90be-7708bd8f0079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30028896-0bbc-4dc1-9b78-4bcaff9adc52",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44c12526-60a2-4fcd-b28e-4fbb411b0da1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0b0a933-e53f-4616-a6ff-8d01fb7a7a88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4d32a5f-4268-4b81-9d74-0b5b49d96f41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa78bd38-6dba-4662-8faf-e3c5ae6493cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72dcd514-ad9c-484e-bd3e-cdc2e99db703",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9607bbfd-a70d-4bd4-b721-b8b6cb5f5dc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcafd404-e1b2-4285-ba4b-b6d99bbb3bd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1818b8a8-f670-4311-ac9d-04dcc7656ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "91fd9763-b1ae-4f23-8561-a65058c00413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4961d97e-ec7c-4f36-9792-785fb6eb0e00",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "510e4753-4fb0-4d91-b826-316f8cfdf4c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acb78214-bd95-45f3-a0a5-16e1b4dd22c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f0411e8-7849-4aeb-bb9a-ee2fe6acf5a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "10357711-8c97-4c2b-94f9-b3f6f997da2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b378ca2-7aed-4a40-bee7-96bf8fc7dcaa",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56e61137-9968-4263-ba2f-df26387ceef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9884a7f-9d6c-4256-99c6-f48d3cb05c4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6d98825-8d4b-4460-9deb-3fa2ebe8045b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9d39e51-42bd-4ae2-9819-513aa142343a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0536828-382b-4052-b686-daf97eb36336",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b91e449f-2c45-4d87-8100-d8250a90f0d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b90d787-b3f4-47e1-b396-b06683c2efcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "419df35a-24c5-45bf-9ec9-aff8fca6a60b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac44eccc-b290-4727-9479-5948772ef562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31838f88-028b-46aa-b06c-8c7bcdfec59b",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "691e9789-5cb6-4764-992d-7ee21635cf70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7193ac6-f77a-40ae-a07f-3b5c78247e2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c391d6df-8ec4-4b73-85f0-cd4ac7377d1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "df0685a3-2235-41c0-a802-14c090b2be4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e389f66-9b4f-4f37-b5da-df3e59786fe1",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aa5ca84-0959-4d91-a234-f70d41406272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc9a2652-093d-4e77-a170-16f217b9db1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fa4f86d-58a1-4420-8223-3c7f80238571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f60a8519-36b9-4195-b00e-a6f803c70dae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24620a56-cc60-4beb-832b-28a187de0df5",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54f1b7a9-f384-4a4a-81f7-7b913d56b035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6504077-4b24-4dd4-8c0c-217781df568f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1ff5794-dba1-49b1-8686-2b18bdb13c06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "abbadf56-92f8-4e7c-aeab-08fffebf50f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf199bd0-e130-49f2-8e8a-21125e376a22",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8d8f199-c398-40cf-af0e-cc48f6a2bdff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da219449-9bee-4390-84e4-be21452eb75c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f623e75-4abf-4fcb-abf8-7bf0f6649060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0aa9575-7686-4d8d-a48e-417354fc36e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "276db69c-0aca-416c-b104-9f1730b44db7",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2b38abc-e7c8-44b9-8e4e-6c5c977ed969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4eff9fc9-0444-4972-9324-c508921b2eaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90287c95-1e38-440f-9559-d712b4b3a11d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dcb8c2eb-7cb6-48d5-861c-71b5043679b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d2cfe52-b1bb-41c6-9ad8-3cfa0c8d1fe7",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82d711f0-6e72-4011-8267-d43a5022b586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59b384e0-ec08-4d9a-8119-b01a8ecce320"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "556188b4-f27d-44cb-ab9d-5a17fa1ffe56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c633eaee-a815-46d0-b8d4-f4ddd1b7690d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2081527-29a7-43d2-9006-6d37a1f14afc",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3606de2d-6c7a-466c-9e4d-3d11f482c2e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c18f660-3215-45b2-bada-a195a0e1845f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b364b7a2-4432-425b-944c-95081a840274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3b5619c9-018b-4d1a-9355-187db6ff2536"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8821a35-ba49-4d65-adfb-8bbb5013a459",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a7d9970-b87b-4c37-b930-6fe7c2e39c80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f37b872-4ba9-4f2f-8ad2-697216c06f65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0d51ae1-16bb-47a4-874f-8695187d5069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "950d7c1a-867c-47c6-928f-489ab99e0006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59635851-7655-412e-85f8-d595f86e8e60",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97b4c55f-d480-4957-892b-b704610497d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2a90f2b-4eba-4561-9a3d-67655fab2138"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eab39ed2-f201-4456-8109-414172c3ef63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae538f71-aa56-4493-9e32-72b1e48cd29a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc35017f-28c4-46fd-906c-01832be0aab9",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a07ccbf-d6d8-4d0e-8dd8-068200dd1978",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94a1ebdf-8874-4ae7-91d4-9a2a71f81254"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56c76eeb-4bdc-481e-89f1-f5546264e30c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7ac6628-811c-42ab-afb6-4cb8db3944ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e95f5f4-aecd-46ea-80f8-d93c08de2bdc",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd192732-6d26-4bc6-ba22-1e69c10733e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d35aa9f7-1e60-4355-8aeb-bf39913f2ebd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a1f11a0-87cf-4bd3-97bb-0bc249c4fc46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ae2eec1-578e-4c8d-a1ef-d78f09da8a32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b81513c5-d7ce-4554-be8b-63f58723e6f5",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f073d54-5d48-428d-ac27-d566ee2ba93a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcfce909-4e07-4786-a601-80186c77921e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "514b9162-946e-481d-8545-85243293994a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "20e6da2f-50ec-41a4-9156-b7552329ebbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48e404bc-8f4e-4028-a219-cb3b86c5cb02",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e85fbd1-8750-4bff-8ce9-b1693126e552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b69d90e8-bc91-41fb-90d9-c7778f784d60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9e302a4-d219-4a12-ae12-8b6668e3d1c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a80518b3-cafa-4d09-8f47-dc3f670dee37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bd2baf4-240b-4174-bd0a-b4553bb45cc6",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76037403-379d-4d06-a37b-b8d32f157dcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2da6384b-34a9-47a7-bf70-70f98fbcbc3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac441cfe-a055-4254-b592-e1116f41a35b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4811a6a2-04da-4d1d-931c-1d6136e8850e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2263cdac-1e00-47d1-a2dc-deb72b35b86a",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f882bac-353f-438c-8822-ed2a2e7a6326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02ee3bea-524b-4839-8135-6aa2d2b0ea0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f63e4ea6-421b-4abf-87ff-8d8b8f0ed2e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e2c11f2d-492c-4a8b-99a4-6d0311a64b0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d01fa39a-e594-4f0c-8135-97c791f991ac",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c440e26-05b6-4d8f-a09c-6280ef76abcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04424277-2e90-425e-93d4-7e5002a1eddf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e1efc17-d2bc-4983-b037-fd40c60ae1b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2dfaa003-4778-4efb-ae46-a96e4f018278"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7f7f57a-1053-44b2-87c4-bcc4cf6326f2",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a3fb87d-75ab-4b87-988b-25329ddd1a4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2f46a9a-f554-42fb-aff7-fb9b4f2a37fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7bdbddc-97cf-414d-94b0-a30c3affe8d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f61fe905-1787-436a-a423-21ebe15fb6df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d3f9ba8-c4d4-4efb-be6a-50cba5b59f98",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "042c3276-4659-4a6b-b33b-daa759a25bc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fb9297f-366b-4cc1-9b61-64fcb152f635"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a81d1069-4d48-446e-9775-33b5977c9b6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ffd3ffc-5304-4eed-8784-46e9464fc028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab5bdcd4-b637-493c-8e23-d92618b4c5bd",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7410fc81-759c-419d-b3d5-835542f0ff7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "4d2516e0-49b8-4089-99c1-e5b9dff67ed0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8ec4ff6-ad4d-4618-b72d-3570a9d49b3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "3b6845df-a8e0-4d47-bbd4-05c008c1e633"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6ed9d844-c5f7-4d67-9ee9-2f6a1f7259c0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e1229d89-f261-4bbc-a9ab-14544095d8dd",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f777255-46c5-4868-8038-fd46efe5dc9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1a0006c3-24f5-43c0-9243-ba057a241340"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b828dc2-5ef8-4d23-9ada-3c283b51fcce",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ec9cf410-46e4-4026-a401-ab5f71d86f4b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f4e7086f-e15c-4306-b836-d93ffe1b5acb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e4641664-70b1-4f76-89c5-e0726e132bbc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "00eb3447-e831-480e-a5a4-e4e0e9d49d76",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5ca9ed97-df1c-4e8b-aafb-ac58d4a7d77a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8afa2064-a6ec-4e84-b1e7-d479a1519e1c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f2d26cd7-479d-463d-a171-32f58e4463df"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d759a315-8588-4cb8-9cbc-4fbc02ce451a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fd573b23-60a4-4f5b-a132-11479a747615"
                }
              }
            ]
          },
          {
            "id": "45ee002d-f93a-41d5-a5cb-d8cbc495cf8e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2730f95e-fc0b-46c3-ad5f-8ddf9c8eaa2c",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c0bd507d-55c4-49e5-a7bd-986f36624ad9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b9d8194b-c1e4-4770-abeb-04230870f8f1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4bec4bce-cfd6-406e-9e6e-ac4333bedc69",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5976b714-4e56-44a1-8dbf-a68a0d6b50da"
                    }
                  }
                ]
              },
              {
                "id": "428bb323-3d5a-4238-9dd2-4f44cb395cc1",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ea6d9985-9fe4-4123-8836-f73634c35463",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f732762b-c322-46a7-890f-c12d61e67256"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e4f98891-fc13-457d-bafb-4e8230b37818",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "35c471ae-2a66-437d-8a02-63049ddfa1af"
                    }
                  }
                ]
              },
              {
                "id": "ec164bbc-dca4-4467-9cca-95161f0baa18",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fe36e6d2-2208-4c5e-b7d7-e979a504ad09",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c9f43155-2ab0-48ae-9e0e-76a4da634e44"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ab349f40-2fdb-490d-92e3-a975bef851b1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f7b04071-1917-4ffb-82d5-45f819ebe6ae"
                    }
                  }
                ]
              },
              {
                "id": "2f6a969d-666e-483e-98ef-1c03c26fbc26",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "16bfafd0-a8a4-4323-bce1-8644a021bca6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ccea47cd-f1fd-48fa-9f36-4f8c2d4a0fc2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "434e4c50-910d-4f52-ac57-46235d02bef4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "ea5a156c-cb0c-4cb2-9dfd-27423d6b65f0"
                    }
                  }
                ]
              },
              {
                "id": "4f715618-035c-4bba-bd05-c4d2d5b577d8",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fcf06e93-7192-4356-9a55-1e7ec9f34b76",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e8e1d6a1-316a-4d44-843f-f71e995997b7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6a9dc0e0-0086-4617-8625-82ed65580d53",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "10cc78cc-4a6c-4f3c-bf89-c09b4640acde"
                    }
                  }
                ]
              },
              {
                "id": "2af5b89c-070b-4332-942b-65b7552a4dff",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7ad1f2a1-9400-4ded-a025-056300065a24",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e96787c7-a60d-4892-ae92-59c8817ed08c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "62faf9bc-add6-42b6-9862-37fcac649575",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6c454352-f8fe-44ee-86b3-a584c2b44801"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "84a0a9cc-952f-4ba0-9469-21aad794fe4f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "724adcc7-793f-4708-a8a6-88404eadc1e4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5f49b517-eb5f-4b89-a93c-5b7ab2a4f686",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "59d22891-15dd-4b40-8aa9-5124bd0eaa0f"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d64c2ad9-5315-4e7c-ac35-366895ca1426",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "edb45da1-f054-4028-9140-c3e70e94448e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "06b4087e-8d73-415e-bc65-93b204f2961e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9eaa285b-89a7-4c6f-a7d4-8c693afd562a"
            }
          }
        ]
      },
      {
        "id": "a6a10f58-1434-421c-bedb-bd05abd09a07",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "bc14fe9f-fc4e-4119-81e9-fea0936e5083",
            "name": "Negative Testing",
            "item": [
              {
                "id": "61ad17ad-ca9b-418c-aeb2-04f52f2eabce",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d3c56ee5-b6f6-4fff-8465-6eae08084c7e",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2c7294d-d17c-4380-aa01-b374e1ecdc83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d8f41e1-eb4f-4998-bd8e-756842a9bd7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb672e5f-bfb6-4042-9d93-43f985b7836f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "533fc23f-6e12-47fc-a0d5-4e71a6f097a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7625db2d-2660-4886-a79c-0747509bc564",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67044b41-5cf1-4195-a2d2-07dea9adbea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "feffaad0-3a95-4bc2-9490-85b85840b93c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b4e9144-c1ca-44db-9410-fc1e4c9897dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b048773a-4408-45d2-8759-3cd70d0a1894"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fa96868-0172-4ef0-92a6-97a661fe6c6f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "929e57a6-1472-4c4e-8ee4-cfb8f7dbc6e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef9c9d72-8d4f-4823-8972-4ba534d5bb57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae9a78df-a228-4b73-bf7a-94df7287d11b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c011dd25-89f1-4521-b056-e40c96618344"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c9bca31-5639-4ca7-ac82-5391795088c5",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "110cc5c6-f4bc-425d-96a4-19b7cddd50ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "665d7e6f-11a7-44da-ae1d-33215a0f3306"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb9c1382-962c-4100-8f23-bfbc3aed34fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "92b3d994-b3a8-4496-97fa-09b756504164"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c1ca2e3-7f16-4097-a623-a56fd0fbd056",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39368694-a63a-41e9-909c-9bdc67e52e86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42ce84d2-3f8c-413a-9d5b-b98a36ee2a56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f598479-5336-4802-be7a-5ea3501a48c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3921f831-3c6e-445e-8738-c05d3fbc2810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1421573-8958-4201-99ca-58f602612dc1",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7936c35b-d3af-4da6-97ad-c5592fd82ba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1558edac-5564-4e00-ba5b-25112cedcdd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e4173f4-81bf-44a5-9791-f2aa63c93e2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c2d8ba3-005a-48a6-8940-a14c269d8b62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8894b8f6-931c-4405-98c9-1710bdb9077d",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24cc758c-932b-4a5d-891f-1f4e4410e54c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3221732-75a6-47b2-b431-2becb9d3abd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0453a5d9-0932-46a1-bb1b-4fe1c8e00f41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "8327626f-22ff-415d-99b4-6b4d60cb5894"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d355b3ee-8d8b-4cde-8062-15b365fae586",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c23f934a-8a2a-41ae-8153-681a7d59fd61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbb41c3b-b4f4-4c24-a520-f6b6e2676a0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6678af71-30fe-47d8-be8d-ff18a13c0b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4dae64b-3f1f-43ae-afc4-c12ebd63ebef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e566ebf6-6ede-42be-8415-29a12d68ed42",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e4a6a26-1c83-4297-90b4-7f61592a531b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc704b9f-0db0-465e-9e26-f616be719cd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd9ae93f-db13-4577-b46d-ae44e43bf2d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c8f6204-708a-404a-9c89-4c0cbbc14f5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ab0c352-e6af-4088-ad1c-d1ddac8d8613",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd733dfa-753f-4216-9be9-9ee5aa58292e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8adea28-66ac-4b1a-a401-9ebeea06f1bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1997d9c0-427f-47bc-bf80-94939b84a614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9aac99f-7a16-4b58-9c44-23fa286f0276"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2c0f78f-16a9-4c72-8ebe-d9874927baa2",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9bf3916-d9f6-4120-a430-581a4eb6e1eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3b8b42b-8cba-4925-a293-a00f22fe2f2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faf8ef6b-a262-4c73-9adf-d32806932ab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "9f8e965f-70d6-4c24-8e71-2dcc35c81031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dc89c97-3df4-49c2-ac07-62a1578127a1",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a394339-1c79-4913-8f90-553c1f2f6278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "355fe634-579e-42d7-849e-1e1470c7c908"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6864b530-aa22-46e1-841a-37b3a8b9d342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2ffd839e-6122-4121-9a78-c3f0c96acf51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97d420ab-c88a-4823-81f7-d4d7b4ca6bdc",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33e6b198-8897-459f-9f70-d930047f290b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af0bbb26-774f-449f-97ef-22e5b97a63eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8856857-bedc-44ea-9b0b-7322ddc6e5ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a4b5d19-fdd3-4e66-8437-83467306992a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f01f82d-f94d-4a43-b32e-2028094ffa71",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfd725e3-2e9a-4e43-ba55-f23ff56ca29a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e42fe41-33c6-4589-99c3-ffcf318a1495"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aea925f-3334-406b-b3c1-8961a8d38410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a9f1249-a2d5-4cc6-84e5-4994bb817c59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "937aca2d-6c33-419c-a090-bdc27bb3c999",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ebe25ca-4db5-417d-8765-03dc1bc8e5ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51f68578-aaf7-4d8b-8ecf-64260ae488fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b43f777-284d-4292-bdcf-7a7b470fbf15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "bad9a544-9e09-4d29-9d06-219e18f735e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ec83e4b-d535-4720-88e5-c0558738bb82",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89582638-47c3-4cbc-b559-f68aa1d657e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "912b4908-685a-4da5-aa61-24567d6994ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bfcc891-ea06-40b0-b13e-6158933360e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "2719cd8d-9e19-4287-9e75-0395136196e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "394bb295-94e0-4bae-afbb-e80143c06da6",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f429dfc8-f874-44c0-b2bc-7bdfa40deb59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e007a5cf-264e-495f-a35c-dccd588ba166"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29a8c60c-b07f-48fb-84ea-a692fdb58e4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "0511fbb7-18d0-4f9e-bf2f-c2eb77f6b919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b00652f-4e89-441b-9ae1-8b956ef5f580",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e43b3623-c90f-4ac4-b4d8-2f8af4a51081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13423ed1-ee6a-4423-91eb-7d4ec399d20e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef1c017e-70e1-4b7e-93d5-1645cd3f3cb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c048560-75b2-42c4-97db-38a411384479"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ac0035b-8a67-4857-abec-7fbc0f86a4cb",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21cad836-111c-4cd0-ae34-5605ddc629fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49369ec1-b7da-49cd-8140-65126b12e779"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bc3d0a3-f0a5-49c9-828e-86ca25e61cd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc1d9cb9-fcf9-42ba-ad26-9720895ed5f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66266aaf-a45d-4bd1-9ce3-6402b25deb50",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5eae505-f3fc-4119-95f6-32b906be3710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e45fec29-0a02-4bfc-b493-98f5505770d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe07693d-7212-4b22-add5-63e778a598d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7cbcf43f-bc93-4e70-95da-35ae6f13f8de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9979da70-04f7-46b3-a87a-e5413ab2fd86",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6d0e5d1-6b4e-4950-ae51-f1207ba78719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "904973d7-ff6b-4fb3-ae10-7243352bdbb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f724676b-d7ec-4c50-8c3e-9162e464cb88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4ac165e-e7fa-4aec-b109-a5f001438840"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebb3585f-55b6-46bc-987d-203d8c588acb",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96b9d5fe-ca8d-40cc-83a0-15790f7ae50d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b58cbd1-079e-4dfd-a6a3-77fe0986263c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf3d0c2c-9662-41ae-9ed0-ca11f62f81de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9217a5a-4c27-461b-b477-adc6a78bc680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15cb4a7d-9b0d-4373-9321-f800cb9b68ad",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce989adf-9d5b-461f-9044-4077dde2b86f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65040ed2-e166-436e-b4a3-f57d67e9562c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "897d2528-c256-49ba-945f-fc7ccb398d91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7499abdb-3929-4d54-ba05-2e5879c1f128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65f8fa2f-ecf3-4b0e-beff-d887aa5e4e5a",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f954380-e613-4c3f-a89d-e1bfd28f5103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7fef015-7ae3-4d4a-ac31-d815ebbf9696"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e711d1d2-9da2-4282-b541-0477177fad3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c5a8577-862a-4dae-9b2d-3b9531d9ad8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d8b30b7-ae25-4334-a2e8-3053906edc5a",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e103ebc-2b78-4744-8cc1-0f8fa27e9976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79f32f6e-b5e2-4f81-862c-bb5e963da8d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14e6a32f-1dd7-4fa3-8c11-062d8b3e991a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8d123ac-6200-4026-9042-c7eff8e411d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c00ae02-fe01-429f-b6c5-a90fa6501c53",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bf31b3d-0d0b-41bc-99df-90e9b74ea857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12064817-afdf-40e3-89d7-65f31fae3bb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10de30cf-3b03-4531-ba3e-bd8e1fecba88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3b8ce99-5323-49a4-aae6-f3ea042ed5d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "243a8c8c-4f33-4560-a42f-94f4f79d889f",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd802be5-c35d-4764-acf2-345a5d96a37d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cfac0ac-e42c-4dc1-92e8-7f4e5750c1bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c75f9aa-4aa8-40e8-9f53-7794f2b252d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0fe82f1f-1147-4265-8a07-50b624ae9b99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "679c6d4a-9548-4cb0-be7f-037e6d3a48eb",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2acdea50-49cb-40cb-892b-f51389f7da7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "482bf48e-fc19-48bf-a24c-2355ed8cd56f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e578bed-9e09-468e-b644-2e6a1f2b79d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a90d63a2-27ad-47b6-a014-61c1abe1fe40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95063062-19d3-4c0c-9394-4daaafcb78a4",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea7d4ff8-7914-45c5-9ec7-d85d74acbda4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1231e68b-46d4-4610-b156-03379fa7cd9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c25c24b-41c6-4eba-8ba7-24094d7c8cd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d4e0126-ac1f-4d36-8639-d2961275dc9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a07a5f2b-89b5-4843-88f5-d453bca699ff",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce6e9a24-39c9-41e2-8f64-9ac4d7f84396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1eca97d-77ae-40f9-beb3-be904ea813f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c99dfe46-135d-4d85-87af-598ad5d97cdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6817a02a-a164-4540-873b-540342346b17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab302ab2-4ac5-4ac1-945d-047a20b4d00e",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1209ca25-4ee6-4be3-9bdf-449a6afce3bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "056a293c-b995-4651-9920-fbe7379ac273"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "898ffc31-8ae0-40d9-8424-42ce5b105bf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac223875-dc30-42be-9cf2-2a4a9c01ac20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f206a45-eaeb-4dc1-af01-7123efef21b6",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "958393c1-fbf1-4f65-af88-5cf439b7ae8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6b09c5c-2a4b-4461-bffd-126b15f249d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48fd13f3-b8eb-4c8b-a3ae-627dd3250fcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2ec3c60-8276-4ec0-8d51-99dcf798deea"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ce90d85b-0eca-400c-98a2-a2ba44a27cf4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a347ed7e-8322-4a9c-9b3b-e0e56fda96b5",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b55f7ecb-ea3b-417b-b151-0852872d6e15",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b64d033f-c5ea-4da7-bf83-04aa8fc9f64c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aa9a529-4492-495c-8392-98a077815572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aa803f30-4134-4a3a-a671-a101f30d1993"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "09a319b3-1515-4e0f-b9e8-f26e33e6585e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "134bf543-3369-4f56-a881-1aedf26347fb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c46bad33-13f2-413e-8e4e-0bf39743f164",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "353349ef-e777-4b1f-a50d-73b3d27d58e8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bdb18d1c-3b14-4186-9096-51fd7cce5ee2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3d705ed1-2939-47ad-9b2e-cfdf8bf47665"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a522e2e5-01da-4784-865f-7e618458b092",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "964b9a6b-d876-4ab5-9e24-7dd44086d3be"
            }
          }
        ]
      },
      {
        "id": "685f26ce-e61a-47de-99b9-232e9e113bec",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "fed276b1-edfa-4b68-8a47-f915e3a81e78",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4bdaa546-1ace-4a20-b3ba-d35d77145f41",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9b202184-71ff-4468-bbad-69bce6b85c48",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3769021-e687-4fdd-9125-0cb3e6331733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "794fb8c3-5d1a-4515-b4ea-f110045f8c98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e347d28a-e4a6-4b2b-bf32-b4e813429f34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1ffd16a-3cee-46bd-83be-90c31b066747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e391b14c-c37a-420f-b159-b19b5ff15c3f",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bffc5139-e37e-4033-bae7-315444eb7f9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65807b3c-f602-4eab-b653-091c4b2838db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ea41354-3483-4765-a4e0-6faafc29d2fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2fb198fe-dac1-4f5d-9cc8-48abc6173fb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c03a663-10c4-4590-9b3a-b9d4de1a94bc",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f059379f-71ec-4b08-99c9-8b94619f6b26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "531ff0b5-d0ac-42be-8561-36f77cb978e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d2c5f5e-fc88-405d-873a-308e369e426b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7d22c77-bff8-4e04-b776-ecfcbbcd54c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86c2cbba-6d92-4e2a-a802-b2af04bffe52",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6b49eaa-f747-4107-aa51-65772aabc426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f67b38d1-d216-4c67-9ece-205adaafb884"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2da815b2-b4c0-4341-9e9f-1d406a443cdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "841b6275-9130-430d-8878-b1a2e6ada733"
                        }
                      }
                    ]
                  },
                  {
                    "id": "112a3f95-7f78-4b57-82b5-02ece7e5289b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "118302a6-5c5f-4f7c-abdf-ebca2bf7f247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1d1042d-0ece-40ee-b005-63ae52132579"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18db4a5e-f360-41e3-a367-88d026139417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "717d5dd1-67b4-4c68-9d48-5c33bef23c15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9825db57-a812-43d4-ad29-8adad6338118",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "804e1a35-a8b1-4a14-9d33-31f757bb9400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6351fc06-6de6-4d12-8f5a-67f71dfe5e7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c717270b-7d97-4f9f-b54f-6fc083af02e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "325cc8b7-ed65-42dd-b8f8-a37bccbc805c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd330bc0-272e-42ee-8189-99a2c5ee612c",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ff60893-4440-4eb4-b152-0d0422ac3ab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bc763d0-9127-4f6e-ac7e-902490473aca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7cf1e6b-e305-4351-a8e2-00bded6c04eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "429dd004-7107-4323-9efd-89f70241ac21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "083e0893-78cc-47dc-8598-ca6407a8c828",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71742cd9-b89a-494e-99d2-2933f0bad5cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa64be59-9718-4fee-8221-1528d68fa6d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cc794fc-817f-4291-b513-15cd0448599e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6024538e-8a47-4a61-9600-d3128326f128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb8bf2a3-d965-4fdd-be05-7e8033ffa455",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d569a638-d5b2-49ff-b514-89d15f328081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9eb802b4-edfb-43d4-a3e8-35033c56493f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8d5f4b5-9831-459d-8131-f1c533c2c94d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9f5d933-87fd-4191-a70a-761eaf3b91f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36767267-735d-4d19-a999-aaf00b47f470",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1004b72-68db-42aa-86f9-4326259a2402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adcae662-cfce-4932-b5fe-c54c584387c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04fedfa9-dd82-4326-b07b-2d62589688b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae07c6be-6e83-4717-a1f3-25a7ab9b5471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "597f6113-656b-470e-9455-8d391791b32c",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c6fc91b-fa0b-43aa-a3db-262518c879d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2092aa9-6eb2-4102-8352-7623eafbadd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57d82943-b0f0-4ccc-b798-dba006163ca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "62af5673-1547-42e3-90d4-e284e43e3709"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8b7b871-65f4-4165-906d-ff3e2550fa90",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1382e6a5-046c-4ab8-92a3-61197a026b0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01c84104-89b4-448f-be61-5b9e7f0e449c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01924c5f-7543-439f-ba54-10b69c4fa55b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "099bd7c4-12c8-454d-be4b-c4e2357fa67a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d518229-8a3d-4230-94ff-8bd6e364d487",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e26c0812-ccc0-4378-b73f-134a0622ee57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a70f12ea-56a9-452d-a15e-fce0f58c4ce4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76dab2a3-acf9-41fb-b030-ef3d9b8a0b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d48789e-4e4e-4c1e-bd87-2cbfc4ffc19e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af2a2662-83b4-4176-a0e2-33b93ea0be24",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c327a2d-8c40-4c9b-8bb0-dafc5c15b053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0394ce5-a253-4624-afd2-b51e927ca4eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81cd2d23-c521-42c7-abfb-2571b8152128",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "11b3aa29-94c4-46dd-aef0-11e79763df81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7ef9da7-b3f2-4391-b166-84da813f3f41",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9263ef18-4156-429e-b476-acfa7bfb5970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17385754-286b-490d-9ae8-1aaa581f4be0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7254e8f-1329-490b-a440-cb741ac11b13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "16b67638-3dbb-4856-9824-bd836216c111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e5ca861-9fbb-4d7c-bd09-02f0d87e9e1b",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdb7d75a-101e-49f3-a53e-ed3ffb1a6bd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7778a23-3786-4c1b-8e3b-01934bb4c39f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7c1bf55-2863-4244-a043-d473505afe82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "00a8754d-9500-45e4-a6e7-68c645993105"
                        }
                      }
                    ]
                  },
                  {
                    "id": "175da616-47c1-47d5-a1f6-63de7d736ead",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0003d5b-b1fa-4c20-8b40-3bfcbf6afe33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fc5824e-0292-44d1-aed8-be4d366f6c60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7155c5e5-607a-46cc-aa3b-944a111a3847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8d06ace-7c16-4779-adb2-30bce3c3ee35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb6b2554-fafa-4015-93e2-eff283a44be4",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfe99070-e3d1-4357-851e-2ec7526bb51f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b0ce054-d165-441f-86ba-9ba94799227a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c41f1ac8-3756-4db6-933c-220aa62f695b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "83508636-38e8-46eb-9449-a9be502134e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c859fb3-cdbf-4b39-abe8-77679a58c3ba",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6b61614-eaee-4819-9e62-731c01064b02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c8bad08-f7ec-4750-bbec-d136b658256e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f63f198a-c145-4024-afe2-11cfbdfe063b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e04e8d64-f455-4a32-a789-002c8c898d5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c61df0e-706e-4d8e-acca-097d733c9929",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d9fdb1a-f5c8-48d9-ad5c-dbbfcde58868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cde5584f-02c9-4ddd-886f-e41af46a830a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce777746-f2ec-4db3-ae64-bf4062c50876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "65544348-2c10-49d5-a042-d3b17c0c3f27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff3ad511-9708-4106-a466-8bd9ab4ee100",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b46660e2-e18c-4568-9e00-7cfca646850d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "beecb3b1-d78e-4ba2-b2e9-f7b83e7d446f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ef891b3-d230-4cef-a62a-ad22c24915aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a95efc0a-0d5c-4f12-b324-7c35290d98a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5d7157b-995f-4a39-a5b1-3d8cafa66518",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "717f9316-2ac0-4209-bd93-87a4e02eaf89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6189ab49-c77f-4eb3-b62f-7c7fa05e2396"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64fd8b7a-7027-4178-b2b2-ca226a305965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "20d10390-d84d-4adc-af9f-d26b2663e334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "753ec252-a42f-454f-8e3b-4ede20f25c55",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cfeeba2-bdb4-4711-8e6e-d5b6507db51b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48784583-cdc7-432b-853d-cc36f5a54f15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c93e8a5-19d7-4048-bee2-adc31f026426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2ffab9d-3d54-4728-a323-247d42f87529"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b737439-9f12-4971-9758-1382e8481e8a",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75989be2-2d3d-45b7-bb48-fff290ac452b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "834f386c-a258-4f07-a245-ebd8fce94956"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba229b77-c315-4312-9a20-bba64c856463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d896ed7-8a81-435c-9f3e-041df68d7989"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa3b53d5-3db3-4b96-a26c-1c0bb7b95d06",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "409f3fdc-0996-4fa7-a92c-209caee14951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33c39b4a-d5dd-4a4c-b64c-b6c3091e08fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac5d90f4-6b13-4096-add7-b498f5f444d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c980abb6-579f-4109-bc8a-b11b5f781eda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2aadf8b-bff6-4ebf-a544-01fe87ea750b",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cb46c88-2097-45a6-986c-1c17c8c1e9e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f5387cf-b0cd-4917-b653-d2c98db5d2dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c916be6-eff3-42af-b1f6-3171e39f8c37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c15b89c1-0a7a-474e-8041-8c9803156379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9131362b-dbda-421c-9ef3-296ff1dee36c",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb2751af-3b07-4e47-8633-1353e49cac67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "416ebfde-8aaa-4194-add2-9294cf8eea3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "346a5f2e-e3fc-4220-96b4-1fb010e1f3e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "03753ff9-b424-4be3-9aa6-f50619db4158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b208d40e-ea47-4a41-96bd-2b21478b3d99",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af79f0b7-fa3f-4d32-87c5-95751a366ee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "692bb0b3-6796-4152-a819-d40e0474046a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29031a80-68b7-465e-a5d9-00c37742b255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a496900-482c-4c57-8865-5368367a34e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61a4c2c7-9e47-4070-8b72-89369467fb03",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30da469f-4701-4ab7-a7d1-03d567167393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2744d70c-1e3f-4d81-9b6a-059d4ca247d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "156a5400-d9d5-44dd-b791-0c979faaa7c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d08f6227-04ae-41d1-a648-bb428ca03456"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32e5d6ca-b740-441d-b2c7-1a79934f60a9",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b97bd1e-dcc2-424f-b1a4-e2a849b5ea86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc241b27-16e8-48f4-b80d-86d73ec46de1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b834a6f9-597f-49a6-a9fa-a1367f9fc522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "246fcd06-8553-4cb2-8a96-170c74b4f510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34f81387-95d3-4625-be0a-0aefc9c1db39",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4db42b52-eb6a-4b1e-b380-125f8ff50a0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "071b9a17-9327-410f-8bfb-d5b4807e5906"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3a1bfd4-9828-4821-b4e6-5d31cb2006c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfcfa73a-f3f1-4676-a67b-eac2f5adcebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78ea44d4-0623-4e14-91ef-6ef5860e261f",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4ae5a00-a75f-4cc8-895a-d53526229e01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a7aff85-d195-432e-9933-ff868bdf2502"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d134a73b-bae3-43d7-a739-20803c47c867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c5b5530-6346-4508-8eaa-73d62cbe06b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "366e87e4-2ddd-4791-a6de-79c97e0170bb",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceb3805d-acff-4961-a256-217d5b94b61a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a105254b-9a1a-44b8-98ab-2ffa5823cdf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3a540b4-add2-499e-9d9a-60122a470c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4ac7485-4c8b-473e-85cf-870b1854ad90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21e873c7-4061-465b-8308-26b33c49565d",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e36afa8-a9f8-4c2c-adf2-96e9b4d8e3a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21a7f2db-2674-4e4f-a20d-e2c16d3c7427"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcc27792-caea-42dd-8257-8ad83fa822a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "17ce7fad-085d-4e54-9eeb-7db98b3e20ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a64c023-81a3-4824-981c-50474a486734",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0edabdcd-d763-44f2-96d6-adbe67a61acb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13c7cd99-d91e-4947-9874-877d131faa30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ad21fb7-8f0e-4bda-bb5c-56b630f090e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "594f331a-44b1-43d5-a5d5-c90420e157ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c252f6f-3161-4c8d-9821-34f0e26c6a89",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cc32705-af6d-41a7-b90a-32830fdeeeb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d174728-bc18-4c5c-b85b-cd153dc07b4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2bf34a2-c23b-4d92-b326-1b0841cc5df2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e25017a-9a62-4a2a-b5e6-65464c4f8011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56961055-86cd-4be0-aa53-d62fd0e2dfcb",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52f26a0b-695f-4276-bd7a-d7ffb932958e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b92c2274-2e24-40e7-8183-56f5d9f0047f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63bada44-6e9e-4dfe-add2-4515e700ac79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbeb9b07-7da9-4aa7-8301-25e37cae5b25"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8bb8f24a-1721-4f6f-a216-3f853fabce92",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cdb0b86f-46e5-4aa1-84b1-ed4ed17c8a91",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ef91098-99c1-4000-ad14-f0de18616da7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "0d86b557-2230-4ca0-82e3-5c08c8b2c3d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6dbe056-0de4-49d2-9d27-b5f0c9d63b92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "add3657c-e927-4768-b874-505bb7ce949c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "19c20dc4-3808-4e32-bd93-006cefb84d35",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fe07badd-0c3a-463f-91b4-023aafdc87f3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b08e95fa-aefe-44f5-a5aa-e7074546b07d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "12c1e33f-735d-4e02-b0c8-dbb1de2665ed"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9e8012ea-502f-4d26-842f-97c0712f6144",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c59f6617-af16-4312-84b5-c19ca503540a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "60cc7033-7a49-4428-9e8b-181a67ebeff3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2394e4c7-9b63-4056-8744-17134ec8f8f5"
            }
          }
        ]
      },
      {
        "id": "beb546ff-ea66-4ac6-869b-e0157ffc400e",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "f4b2dd40-e6fe-4721-8d0c-cb9b95572500",
            "name": "Negative Testing",
            "item": [
              {
                "id": "06221073-c0f8-4eb6-b305-f97d1b84feba",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e9150489-1b92-402a-a1d0-8b34a3f517af",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33a0040a-d3aa-466a-b3f5-7c5aa057f4cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c726962-a1f1-4797-bbe0-36e28969de11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58aa5f48-4c7f-48fc-a8a4-2a6bd52cf8a0",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bdd37ab-6fe0-4f99-a4bb-dd44ee1f5ccb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fb78de0-bfce-479c-9654-3df95ff861cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dad86420-90dc-4802-8a05-37fd9fd600f1",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "428fbc45-82c8-4b86-8776-a78b0a9d9771",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23db6c7b-a984-4f36-91ce-9317bf29c97c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a3c4ad6-9e95-4f14-bf11-4ed38c6ac0e6",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4501d603-c874-42ef-899b-60fc1db8332f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1cbddd0-6b61-45bc-9d3f-aa1c80fcb14a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91be053a-b98d-4a4f-b3e2-e389a5ae85dc",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4f105cc-692a-4d30-8514-6c2c7d6bfaa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5dfc5f2-b78c-472b-bc14-00e061b2ab7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "300c22c3-6788-453f-a043-22efec1c4133",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de2ff56d-e740-4791-be60-6256ac95aef7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7a51486-11ff-4d3d-a6d2-d6ba0717d69c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bedcfbe3-011b-4dd3-8b38-d0ade5fa6f3a",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f73f04a-2a54-4d6f-bbb0-a07a753e3205",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e29877de-ada9-4cbd-b710-22c52fafca1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2e20df3-ec18-4ccc-9d6f-a0028f05d755",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f213a06-4d7e-4172-8118-e0f684d7d5e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5fce2eb-50dc-45fe-aa36-dcddef1b154d",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae1f9f53-0021-45e8-8d4a-2912fb9e64eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f78c36a1-373b-4823-ba00-90a1f9b8d496"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "895744aa-19f2-45a0-b365-6b05f1c417bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9281631d-cf4a-4928-9adc-2bc1999a55bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abcf5815-1007-4e8b-9c92-d50dcc5e6fc5",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc74a64f-5cd8-4373-a319-8128a301aa73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c26a6bea-0e37-407c-a2a7-4b656606c624"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30b390a0-fb7f-4a3e-8e07-7128d2f2eb0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1fd8b4a-120f-48ae-88bc-d764f571cf22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "471d32c5-f934-4b25-b435-0618ea123885",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30fd222d-303e-4d5f-8439-b0889e6cd6b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a3d862a-ff78-4c67-a974-149050b0323a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b889142-a3a9-43f4-bfec-8c07fc3ca0fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90b14bac-76e7-4f4d-8f82-e75c0e3f0de4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed144410-da56-46cb-b389-61f780189f51",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcd66c49-5c89-4dc0-982a-53d817774d3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0369410-e473-4f5b-b7d6-fb6a395338b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdee698b-1162-404c-9150-2831c4c1e3c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35838d10-201f-4171-9a96-df99e3748f0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff073355-e067-4cf2-b650-860c02545446",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af989b59-05dd-4139-87b4-e5ee72d045a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5d1855a-51f3-4238-a34e-c1ba1a35c8d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2da2421c-47ca-484a-8d41-a9536d58565a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "195b8e0c-3703-47e8-8bfd-88029e751838"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad7fe00c-5908-42e1-afb7-f5c34bb1b35f",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cfc85a3-d1c3-44d5-8102-f3fc7b66c03b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "794be9d0-601a-4d21-a9b9-829657f19958"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbcf7f6b-f329-4a05-8c1b-631b8c5bfc27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d731e00-4708-4328-80f8-9ce591391dfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73373cd0-f85b-4543-b28f-a94036ded556",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0375f516-f4a8-490e-825c-41e6951476c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "def38cee-05ae-4de4-97c5-3e1edaa1db77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9406b6cb-e21d-4580-b266-3b00c473f3b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27b997ad-dbdc-4e21-b8c0-15eb35b3c8f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e28b8ef1-888c-49d1-bdac-5d1c20afc02e",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48bfef86-e219-4996-ae37-d9cb0a0841cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "425500a7-bc78-483a-8757-655e7fc5ec13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "258dccc1-9a62-427f-a359-267d64c5800b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "417599fd-e94e-4c25-a215-12794694aa70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60c62982-7a69-418a-8415-1b2b64b0c768",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c341a316-d27b-40fb-a17d-604efb01030d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80f8aee4-7df3-4fe3-b6ff-39b81234836d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d88cf7b5-ce54-4fd9-992c-f8a4da9efb9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b564bd03-5917-4fee-b3a3-006c41620ef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "672a2725-5d56-49f8-ab57-b1c05f23c550",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ad0b2ae-a6bf-40af-8347-267263d16a8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88c34e86-d421-489e-9fc0-068a0a7f65ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f056105d-0e96-4441-8c7f-aaec2b17a7f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01d13c78-41f8-48ea-ba15-3c99cfae1e9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eced51b-51f3-4a78-ac31-fc15b9a69df9",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e430d3a7-fc61-4090-971e-ab951ff2871a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6532f7ca-06ea-4142-8cdd-3d53e4d0eea9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a4a1ae8-8925-49fc-99e9-4d36615472fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b61dfde-77cc-48c2-bc44-860e89f4812a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea66b25e-f58e-41f6-bc14-06adef02e919",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddba54bc-689b-494a-879d-22d0988dd72b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c5fc13e-0293-42e2-a99a-24bdfd19fb75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30ffcf76-9d4e-463f-9923-325ed4aef2c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8278e8af-bdfd-4e20-bd5b-64856baa6fef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03eeda9e-4734-4a20-8836-555f339f1856",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d56710e-8582-4c22-9038-676c662996bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1b7db54-483b-4c14-af73-6f6518417d2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b361cc3-77ba-4bab-84e4-9b313b551964",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eecf997-b518-4c42-8afd-9639196cedf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8153136-2c1c-48cf-adc4-38ba5968de32",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "415bd441-5174-4e9e-84b3-7f0af05b326f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eb32e63-f8e9-4ad6-9dab-f4682214bd56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "620e52eb-99dd-48a2-9720-cafbf1c05557",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "465426ec-8f2b-47cf-add8-a5ddebdb1adb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd1f8eb7-8a21-4e52-aa4d-cfd3f08847f9",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dd8c9e1-b393-4ee7-b38a-de8101c4aa36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1454f966-b8fc-4a83-8887-71676df6ac28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d82759ff-074d-402c-90ba-36a49a91c41d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59e3bb51-3cc7-473c-8e56-82f9b9b50f2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4a14d5f-3d84-4554-8f7b-dd279325ef47",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cea2b8ae-fffd-4cad-bd32-6144101e957c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f4717f9-619d-4807-83bd-8177d4041466"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08c37cba-7828-430d-a30b-85c92c58fab2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5464707-57f9-49e2-9dc0-9c1f150e2b33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc4a878b-0e66-4bd7-a92d-01e966e4ae80",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3afd248c-df70-4a47-8746-96642b6a684f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e29d52fc-dbc5-443a-a5fe-2976f61a6c63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9b04c47-dcd7-421d-94f2-f7438e7521f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf64b2f4-c966-48a5-b768-97e7e60f750f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d07e745-160a-4028-a564-40fcb269d2f7",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca68dddd-6238-45bd-b41a-442fffc693ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb23dbf0-b8f2-43d8-8f1d-91230519c57c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53088ed8-2291-4e7b-90cb-8626d1a84f74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bad927d5-48f9-475e-8ffc-07a5a66515ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7772ddab-fb0b-42e9-a16b-b347138fd8dc",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43eab05a-a993-48f9-bcca-06ba247e6fdd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "765e682f-2011-4544-896d-bc60d1fc9f17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af62f8cc-b396-469f-8008-435e9469a58c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afb69f87-20a7-48d2-ac42-3363ea754f20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c845df2-c11b-4279-aaf4-6000b721befe",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "476022eb-7673-448a-ae8d-cabb090badc8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70e07245-6aac-4714-ae92-f21d4def4736"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57451e21-c660-4729-8151-d3093f9d1492",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b0e194e-10d9-45ca-9f3b-d2e46d4624d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8dda23d-e75c-46a8-aced-54fe1402aaac",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "159c643e-544a-443c-b8e9-8a230e2ba2fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b59dcf4c-353c-406e-921e-0ab806445888"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32f88983-3e3f-43b3-a7ae-0c7fb5bad526",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d2abf23-4a3d-4146-8ed3-bf91f635cb24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c071023b-6cb8-42a4-beea-7002f8f6543a",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acd3c2d0-76ed-461f-aeba-2ad50057dedc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2b1f378-a684-4cac-8f36-141a4647d878"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d9f6e36-9944-445e-962a-25d5c2c9dfb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a3e918f-c07b-4ce9-b73d-17f0d7f206e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e55e31a9-0d0f-440f-8781-e0f0891951b0",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc6e41c5-46d4-4ec2-b7fa-8b5ac5094d02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1325d4a-d1cf-4236-b3f0-615a4908fc1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c5c460d-2ace-40da-aadb-f29e47c47377",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc1cc276-e075-4fa5-acd3-d487429ade98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8afd9964-ce5d-4927-a609-28d66deb4abc",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcc651ea-91e3-4103-b3ca-af0b1650865c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04536b18-545b-490a-aa6c-15b888147045"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b7080c7-c90c-48f8-8425-95bed2af43b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bbacd20-36e5-4daf-8771-df43c732ab76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e419964-7987-46e3-bbdb-abe0c792b10d",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92b49678-8fdf-4a86-ad66-2d37dcce008e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "663b1baf-1b70-4505-9222-d07065af215b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "580e3207-d0c9-4d2c-b432-531fb06960a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72947e1c-4c6d-47d9-9c6e-e748117cac25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9553780-9a5f-4818-a991-6296fcf429a3",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ffa07b4-97e5-49de-a6cb-e1e44b372e12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebb3b8fa-598e-4d21-b9d7-8c3161ff57b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1eea957-1d71-4f14-a521-41ca882eb111",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db002734-a1c3-4f36-b2dc-6ac16dbe4b2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "873cd6a4-dd1b-4d21-b30f-973570177f36",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ee06234-e1a1-4f17-98b9-d205ce1b0e48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3535b05-9b45-46a6-b9b3-6892be1b02a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12300856-8c0b-4224-a26b-ef9f4569682d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eceb78b7-2ff6-477c-9741-f8cf18522922"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e0ea59c-9eba-4a5f-97cb-4ac0365036b7",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0f239be-b788-444c-bcd9-610ef541e0c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3192f62b-eb73-46db-9e41-872984fc4645"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbb15a8a-8ba8-468e-8024-09644eecbba4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e13fc27-d72d-45e4-a04d-9351bf124573"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d957dfbd-82db-416e-9d52-feff5fec3bb7",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "848e9b44-6b0f-40ff-bfe3-7a68661b657b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8830044-ed3e-451a-8fcb-175715949947"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3951a33a-05ff-4e41-b560-c5b2efcceda7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26ad95b1-c850-40a5-bff6-cfb11cc11b49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cc87751-66cb-437e-bb9b-384df3b711d9",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3daed6f1-563a-4984-8f47-05ace4b7e79e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "823d9488-c9e5-401b-bb7f-835f2c15a1e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee96ad21-691d-4967-86e7-e3cc44080dfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a51b9c4a-d6bf-4e5d-af9b-e44afbaa1cd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b4034d6-fb6f-44d4-be99-ad2502105cdf",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "007c1b0e-62de-4eeb-aa80-4eb4316bbc12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "530bcee4-7326-4a2d-8f88-ae089ecce0e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0694afce-45ad-4e13-a2ae-eacecb53302f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9afd02a0-e404-4b57-9c80-a793322c0cea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "384b9012-70ad-4d7a-8e8c-98c10edf3047",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f28807d-2640-401f-aaf8-1c5420ae7c17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b1b6c0a-1c5e-484a-87e3-e7f460490fd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35f21aec-4e0c-42fe-9225-7a349ed79164",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "241d6a8f-7aee-4ed2-8baa-65117583cc6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5370c6b7-2b1a-49df-827c-422e252e3520",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f482dcc7-fefd-4dd3-9758-ec1730bd94d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff7d0103-0533-4312-bdc2-3675399f2656"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d403c1f0-fe02-4db4-b4f7-debd9adb583f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c8e03b7-9a16-4a21-a2a3-b98d1cda3879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec51504e-c1c2-4a08-b358-ae135017ccb4",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "692aaa1b-688a-4d1c-b128-4357d8046f60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f3c45c1-e818-4c2a-90a8-9327fa93cf63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d36b0b4d-4a83-4bf2-9b49-6c93559db7e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cad4adb3-0cf7-4ecd-bf92-871ab0da5d60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d1731c3-e1be-463e-becf-7f21e34e2110",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6583855-b27c-4a50-8d7f-b66270d2cc9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "560459d3-de2b-4498-9914-08d0d810ea0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74d330f8-018a-4733-9b63-5451152add64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b64410aa-8d6c-4ea1-a1ac-460812b34e0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "326e643e-e273-455a-ac31-a62b23005cb9",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2bd67b3-04bf-49f7-a269-590182561519",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b32dda53-244d-4e2f-89ca-23cd48ae7969"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e300d3ea-196f-4770-82c3-8ac157ddd459",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11d3924f-fc45-41bf-8bee-f49cb3077a35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d5c4d23-66de-42de-b734-c74a4415f03a",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76c79d09-e10a-48d9-8ca7-8773e1b45b23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bebad41f-15e0-4818-9ac7-b516c2b2e113"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7021c01b-d97b-43a9-a189-50690424eead",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb21abcc-7164-4909-8df3-072d4b478fbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b478c03-dd86-42b0-ba5f-7fefa1115c66",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7511e983-b14a-4338-b1c6-e8add6f3827c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad9ef322-a623-4934-bd34-cfe1208f19e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56e1e74b-3e8c-4dcf-bccf-6e220aa5fed4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a99f3cc1-9acc-46ef-9554-e6abbaef70f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "379ad3e3-e638-4129-9888-889609efec85",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c090bfe-f6f4-4aa7-9937-a6c463bf8563",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "570db5bb-9a9b-4125-96f9-f9fb8989015b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d18fd322-c026-45aa-9aef-2d4e6589bd94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecbe52af-f027-4076-a08e-54c154c5614b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61ac3b60-3ea5-4a25-b4a2-49148f0f0184",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79ad6f76-ce2f-4cb4-a0f5-42337f66bccc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04958d3d-b9b2-4058-8db9-8084a7ac5335"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ab456eb-399a-467d-85c9-c07562be3eed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bc602e6-b00a-4fa6-b934-951a5b14d535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c3ee2f7-1eba-4264-afac-d687a356d156",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8e4ffe2-347b-4939-8d83-5f4bea9347ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42bc6952-65b7-4612-8396-291d8d5cda35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74b39287-ec06-4019-9b3d-c7a2e14fae9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4681a31b-93cb-45ea-8b04-2f70d0e0f76e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce43abce-fe82-4ba5-8d93-a4e67486ff6f",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30b65688-c783-4dee-9960-b2f6c05a1f12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cba4839d-52c6-4e7d-aaf5-e1d2581c680c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c302c9f7-e7fc-4eec-a9a6-ca9c70e717a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b2bcdfb-596d-459d-827e-06232535ffc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9d71e43-7f7d-4f66-880d-5255bd753fae",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72ca123f-0548-43e8-9e98-40217e7a6776",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa381575-6abe-445d-aafa-0ba03561e611"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a93856f6-b67b-4861-a673-6e7de8de562b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b345c03-26d1-4b5e-b860-e5384836fd29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f12cae10-bace-4579-9457-019912174bd8",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1f4c253-32cb-4a87-b313-2d57c6f9e41a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32accac6-eea1-4e98-b234-f2b23714e42a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9808810b-a7b4-45a4-8833-8de80443c4be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06914fc2-05b0-4fe6-beb8-b909dfb68890"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a55f5b85-b6a7-44aa-b50b-cc1d3e06ecac",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a87c65e-870c-43b8-a26d-df4b4d76213c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49416c2b-4294-4f0b-9b6d-4338d28f2964"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5159d5a2-b404-4182-b464-a24c754213cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "116f7389-ed7a-44eb-8450-2615369acb5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a376d94a-14e2-4f6c-97da-372f5ced10e0",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2304a8d6-f015-4789-bdd4-db0a40134ed9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "118cef8c-c913-4445-b606-7ecad29d7647"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fb1b171-877c-45b9-a6ee-0ae94091adfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf37fd1e-7d6f-4dfa-9f9c-5bb3dc6097d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dab7f27-76e9-499e-aef7-1bbb3b0733b8",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34491bc7-b67f-4a39-a82d-84825f5b9309",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d6d9d0e-1abe-4e4c-81f6-6015ac98a533"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ee34d07-4e67-4de7-b444-01d5ff742067",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "133a7505-99ce-4573-b6b4-e91c982b3fa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da3b80f2-81a2-410d-9926-4a1ef50c1f51",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34b16536-ef79-4a29-9b72-68d96261a41c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "752a5bd9-21fc-4155-8eed-b9de5f28579d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fe78116-42ab-4762-a347-415c70ca18fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d660d5d-7e44-4cc3-a06d-4df7329d4895"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0429922b-1c1c-4bd6-a57a-c64e8ba5eb17",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bcd9308-4506-462e-9c95-fe8d70338a01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c030d1b-b569-4ed7-8469-eb03a9498f3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c407595-1dd9-49f2-8c8c-4f753a02b22e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dad95fb-8790-444b-8473-9e9e02bc7dcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66dfe5f2-d9b0-4df9-89fe-acd9c5533ec7",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55da8c43-28e6-440e-82c7-806eceba80b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fbfa0c5-38ba-40e5-b336-7bde51a877f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c55e4bbc-160e-4b3d-b0d2-1f5251aa5b73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4a7257c-bda0-4c61-b087-56861ef8fea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aa5be85-8ac0-4af8-b0a5-84dd0434aac5",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a52c0f8f-4bc4-4cc8-9bec-719d5e49bcc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9da4ea64-fd38-4dae-bac2-b1b2c4933ebb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a34524c-b74b-473f-828d-18ed8c52ef46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e0f6994-e5e7-41af-84a1-75f9b0397885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76c95476-5281-4d74-b76e-aa180916afe3",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9ac1368-2914-4190-b4ae-8fb7bbfd776e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e51f07d5-ee27-4f95-8472-b14f48a7b61b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe3e0c8a-3953-4996-8885-aa890db75184",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "427dc07e-973b-4d81-88d5-44ce37a800a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24eb77a2-d8be-417b-b1b3-88ed17a4356c",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3727b49d-5c76-4796-81bd-d727b17dc1a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "597d60ec-19db-4539-b865-76aafec99d86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5953b0a-f988-4e89-92e2-5cd6871ec5c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9eee538f-06a9-4cbe-b36b-c97d42006ed8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "545c8725-af85-4c3a-8c80-5dfa8a26bcb5",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83e41c12-88d3-4f38-9dec-5297d5e09644",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a7c6cdd-758f-4d17-a153-b002bf2e8c82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6973a2c-4c2f-4835-b46f-b968ebb940bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1adb0f86-1168-4562-b53b-086805ab78b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ca7b369-142e-46f8-b23f-5d3f2606c752",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1a50d55-b444-49c3-bb91-420239a4cc31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25f84e89-b5ca-4f41-85ac-7e62360a5d73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebca9d9c-ed0f-4fc1-ac50-44dbf8f1b269",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cfad1e9-39f4-4055-a331-e4d040bd4111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bb6971c-2d99-49a5-aeae-5c2d0b289685",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01162e1e-6426-49f3-88fa-c39e9d29d6c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20acb6a7-0b08-4b8d-9185-ed9959cd04f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e424b02-7ffd-41ec-98da-aa85c24ae4b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9938b77c-8e29-497d-ab57-acaa034e7b01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3f1a33a-ba3a-430d-b4ba-591bbddc206a",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0279482-8c49-430c-bb30-3dc1e543c37a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6036c3c3-1bfd-4bd6-aae4-4e1eddc62d42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63c8b915-ecd4-49dc-be5a-84ea6d4f0ca0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eced8245-2121-4dd2-8f61-d6ef92cd01bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9ece6b9-2bba-4b12-9254-14c19edf39e9",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4710c04-16a8-4f82-85cf-b4938892fa5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "642f4593-7e9d-43e8-bddc-f989b25d1e11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e7235b8-e28c-4bfd-a11a-94d4819f5bf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c995efa-6c00-43c9-9d0b-65b627bc9027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5dbabe3-2937-462f-8bf1-a22d293d7597",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43f0a1ff-e86b-4834-93eb-7822a9045fa2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5eeb807a-8ebf-4a42-9110-a93b64fda8a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc3fa037-5034-45d2-a09d-123d078231d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e7e94e6-9974-40c8-8850-5da8b010a434"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d48aea05-c772-4659-b046-bea59ac5c5c5",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2609e0e-35d3-41da-985b-99cabf5d02e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d79e87ba-2a7e-4bd4-bbeb-68fb01cb4af9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "768a6a67-f3cf-4ce3-ad5d-cf965cdc5777",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3d1cd14-828a-4333-bb9a-98e7bedb098b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ef7f00e-763e-4651-8ca5-1418e459bd7b",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee2a537a-34c5-4d9d-8721-248ac68f4e0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc9793ba-6a7d-4843-9c78-c2f25d5ac0bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76e4f274-0324-42ae-9671-3656ae836ba3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5716277-104e-4343-b349-8f192ce5124b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "711f4dd1-3c3b-4d4e-9a81-c73091133924",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7065460-9443-46c1-87d8-0f9fd91cb324",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "626d12d8-e2e0-4f5d-a467-7127f7162c77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99f0e74c-3438-4b94-9eb6-e096f8788026",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50a76dcc-5c43-45b0-9f6b-71ce73ab56d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0344f3e6-c7df-43fa-a933-a650d95eac47",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbf8bc45-76ca-46bf-b06f-993e6db2e17d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92ff1bcf-d766-4466-8251-39f5a7cdd25f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98b30e27-15d6-47cf-b8aa-de16a30ad567",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31a56404-4758-4f86-8303-f64cb1c1cbbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b4213c2-43b7-48fe-a18e-f2d2ee909b28",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b55930e5-2dca-4aab-9700-1d15bb67d245",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9405292-8e4e-4e0b-b449-776f96651dd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21e48153-0008-4340-8f43-e91654c52ea8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7252b1c7-b0c7-4e0e-8549-6eaea6a3cecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92be37f8-de24-430c-8014-11a02491812b",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1630dc25-0256-4711-be93-e1966efe1449",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf90db88-2e14-4b0c-8008-a2f90d6aef2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02c55dee-6423-4f0e-bde6-21e3bd450a06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0ca24a1-2ed4-4786-9a89-d903add90492"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd1e9dca-62bd-4348-b41a-d0405d84852a",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cbe0ace-9082-4e2d-8517-be292d5fb112",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c0495b7-70c0-4bc8-b5c7-af19b7b8e858"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7322cdfc-71c5-48d6-bf91-c7557665ef4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "708a0d31-47ae-4a45-915c-5e12c946f71e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f10b3ae-2d56-49d3-bf55-1554235e472b",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "350564ec-a79f-45f4-9c2a-6557d0df2075",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a08eb542-3134-49df-a105-e4644d8520c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97cfb5e9-2eef-4b90-9ce6-cee2ade84aff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a45c7322-f23e-4667-9f32-255514dcdc1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fc85cdd-7e43-4ad9-be57-1de92de27be0",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb97cb30-cd32-4590-a9e5-c5827c6eac42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7795b9f2-9bc8-4922-9aa8-773e7b582105"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f99e1547-6863-4f47-97f7-6b889e266042",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "723f2dea-195a-49ab-9f7c-17641805892f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dd34895-47e6-4b78-815c-eb08663a3df7",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6beb3cd3-adfe-4f8b-88ee-74aaabcd9a6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98ae42aa-10b0-4e67-a286-a004e41ffd40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5cffcdc-e8b6-4378-8ca8-cc7fded3c2e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c97724ce-a4cc-48d1-8da4-ef4fde37702b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2390493f-d2f5-40b4-92a4-cd591a3555d1",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04d1ceff-9b56-4f49-9127-da99dbebe513",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "545b0612-323d-471d-b816-946bdaea7a59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9850116-b2eb-4258-b3e9-99ccd37c5dfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c458735e-1100-4bed-ac4e-4f4fed071612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65846044-2aec-47e2-a40c-76c4ab54e1be",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a89bc375-5a8f-4367-be0e-62251d2aa100",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0e7d4d3-43fd-4976-af2f-5172b67c9b37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f80d678c-de43-4c50-8d95-86b7fd1b53c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bab73ca-8095-4dce-ada8-f54fc76105f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe14f827-274b-4044-97f4-72031683f587",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7c2fa51-7eb0-4d5a-a15a-97b5ebda5aaa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0962acab-04ff-4715-9128-50fbdd31fe2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15b3104d-35ac-4c9b-982f-4a3173ca3ef8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b8e4b47-9e31-46ca-93c4-c882c7bfbb29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85c5fe24-ca98-49ef-bb55-a17b17c425e5",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaed3227-7572-4b5a-9e60-1e28e12c65ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8120382f-b7ab-4084-9fa8-a92f5da969b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52a23c9f-1ff8-4595-bde9-e98d8417e01c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91aaafb6-3d07-41f8-bf1e-1ec79fff46a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73fe5c4b-f46e-49da-a9aa-d7893a04d7f9",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c41ecdc-1db3-45c9-8373-6c59cfd7fd7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4a8da38-46b6-44ae-b765-039d31740510"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40f22eac-0e3c-4809-8cdf-543a357e8d7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60fedb97-b2cf-4f96-a6d7-d891df94ac7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c7d42f6-73dd-4f57-bca4-5dd15239c11e",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbb0d0c5-7bd8-44df-8d9c-40b78575bb70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee9d37fe-de9b-455b-8b8f-afe02301b4ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8171abf0-8245-4d04-8b18-1b46efd3b77a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d8484e7-8e6e-4601-bb5c-d248451812d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec2a8da9-5a8e-42a9-b8a4-27484fe0e7cc",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee7e38c8-b56c-4bee-9313-8ef1ebf92797",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb8a5ad1-e29f-43bb-ae29-bd736c92587d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de578b44-5881-4a2d-8ea7-74a16462abf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09997456-c5b8-42a5-aaa8-b26d091d6eca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52cbabb4-7b8d-469b-89b3-c7af6d24f5a7",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a727214-b703-411a-ad4a-3a42978a2e3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e68059b4-3ce1-49e7-82de-00cc1c4c2e66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f96c104c-6596-43c9-9399-d0d3c1cc0a44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22229a38-ee11-49ee-b425-64ee82e00aae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9be9463-c860-47ac-9b41-e6558097b1dd",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b682ca6-5a7a-47d5-a1cc-ab788b3ad88b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4709881-3a8e-4089-af99-f20de4631343"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a113dd66-f4a8-46ea-92e4-4a409e5d4ae9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99b65c49-322c-4fba-92e9-38e1dd994235"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b40a3ef-fa32-4502-9998-0d13775b8e83",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "287f2273-0806-438f-89dd-7401da8793c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83b680fb-1236-4121-9ad1-d1f89d9d8d27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53d0ec75-3483-4d32-9b7e-0a303c5294a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80adfe10-3541-41b5-947b-bb10f7d3934a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f38373fa-9cea-4216-8e68-fb6f26fddfa9",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6382be38-8ffe-41ea-9c73-066a3938e09e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0f4a5d5-7d7a-4358-b913-eac1eb16a33f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ba5d720-ce18-45c6-a86f-e3d8f5b95892",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63574f3a-e881-480a-8954-7ae6a142dcec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1a65b6d-c41f-4b24-987a-7f91789873d6",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf63060b-52db-46c1-b98a-ebdf6d8bfd90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79447ee3-2656-44e9-a3b6-33f971452528"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba655ea8-c36d-411f-884b-5ea0ff8a65cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f7aedc6-323b-40e5-93d7-ef5ba6191c23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9cfebbb-1f93-4a6f-9b4c-2eebe93b06a6",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9238c7d7-7c4f-489b-a50a-b32f607267f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a59c8f87-bbc5-424b-ba56-80f17635be31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7acd04f-9950-4aae-abe8-ec2dadb3bfc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b21cc71-3ff6-4eb9-96b1-fbf4a49fc2a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f009f2dc-a687-49b0-8850-86946752d039",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2290557-bd3e-40b6-8ffe-7cee90a6c4d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "031c6b21-fdf4-44f0-ac88-ff3c0a5d00fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4cb1a9e-e11c-4b6a-931c-33e85feaa649",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6361922-8690-40ce-b7e6-b4e55854a535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3952bee6-938b-40f9-88d9-2ae08cda39ce",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5cf32da-1692-41e8-90c6-7a04ab388ef6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd34f03d-efe4-42fe-bf96-96a75d0ac974"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8626f4c-ba09-4f8c-b3c2-aaa3e2b7205c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7be6ac1-ee30-46ef-a522-b1d4ab2c2813"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15f4efd2-a4c2-409c-be67-58fb281f1867",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eb0e467-4bb2-404f-87fb-5180ff604175",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "411ba8b4-8685-4c65-9d3c-020dc21671db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9a535f5-4f1c-4232-921d-2810232a984a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37db7ab7-439e-4e19-94b7-a06620405e2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46304777-6845-424e-9598-0ebcdf0be79b",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f1f503e-469e-41b0-b88b-0ea4d0d72020",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "102e011f-7546-4633-ae22-792e011eed91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f04c22c1-3163-4dcd-980c-4324db3c6049",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39b6a9d1-d678-4c67-b03e-1c170ef12f69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e7202b3-a6b6-42ad-a5fa-f421bf3c135b",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc637da0-8cdd-43e8-a3ab-cace6ed38129",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "458ad50f-bdc2-424d-9985-2ae42257dda9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15644e80-65a4-42fb-8305-a973b7b1670c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "286c516f-d237-4931-8ca5-22bea97bceee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df704c04-790e-48ab-855d-102e7c10cb55",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34696224-19d1-49ff-b85e-837df68bd20b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "212a3fec-b22d-44c3-9f9d-890c2aaada2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f9db844-ab35-4258-98a3-ef8281666f63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f5b7efd-1e22-4d85-a534-a6e4c62fbfb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3899dcd0-e90a-40b9-9ac3-fbc28fdf51fe",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daca39ba-1352-4921-801e-629b8c3db48a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea852be2-efb6-4aa2-8ff5-01dbfe61662f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da5cded2-772e-4dbb-ad08-b3229b08ff74",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "226703a2-3c4a-4f46-a0d5-83873e9e9aaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b137d7b-2cb4-4b7b-bc35-8ed6469df3e6",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "169f8f1e-ceee-4e09-8efd-958d880f3b1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "031265f5-f2ee-435d-8e80-35e75489f297"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f76e4d8-7aff-4f2b-a596-bfc5c78e83bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "092b518c-bd0f-447b-a9b5-8dbd3c358db6"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4a05439b-b809-43c0-9081-4296b7e2bd81",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bb35078a-61db-4e7c-9c12-9ae1c3fb6deb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9eb019b3-dfe9-4364-9519-ed7add67fa58",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8d315c2e-0f19-48f5-a37f-e22e5a96137c"
                    }
                  }
                ]
              },
              {
                "id": "90793225-f42d-4f4b-bc3a-eae2f02f7233",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "33252c98-8c91-4923-a887-36f5013494f5",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b710f32-609a-4623-ab4a-2a2ccbe6af65",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "89ec479d-7e6f-44a7-b47b-797ae6c2ff84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8863c497-1fb7-48fa-876f-dccfd74ebb42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3535e474-44be-4fa5-92ad-2944af8788fc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "64e17daa-408a-4fe3-bb09-82eb6d30bd8d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2b16d9dc-2adb-45b9-99c4-bc1883a39613"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e3109cde-dae9-4f56-aa1e-752ee68054f7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c8e29b48-5990-4965-82ea-361f994e6c7c"
                    }
                  }
                ]
              },
              {
                "id": "1fc93957-c9e6-4096-83e9-2d3e6e243f0d",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "7f58ab92-af26-47be-ae9c-d6b9610d6cc7",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "974f02c4-275a-4777-b390-6486b3925c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "76452885-e6e0-4c7a-9218-17f653c277db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10df8119-ec33-4777-9d4a-0565135d2f4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17bceb05-f3e4-47d8-94cf-dba129b6a5c8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "311c8448-dd8d-4ef2-8869-00b7f9129077",
            "name": "Positive Testing",
            "item": [
              {
                "id": "30fa3842-0658-4b1b-b331-3f4c43bd3776",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f8b54119-4d07-48fd-a985-c75015255fe4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2c5247ce-f4d8-4982-b113-8cf6c69af858"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cf3a946f-e96b-4ae1-a219-8eb8077c8e6b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "98e9cebf-2b83-49ee-8e74-96ed2f75b3d5"
                    }
                  }
                ]
              },
              {
                "id": "9d802131-e9de-4027-86c6-2a4d7b50e477",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "458edb9a-819c-4d8c-bbbb-13f9c9424ce1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8bbe0c47-93d9-4340-bf07-3d29ad837bf5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0c0932f7-197f-47b9-a5dd-e836fc1f1f85",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6f7e5792-ccc0-4a5b-854d-a17b84e3fc21"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7e7fe1f0-e90b-4a29-aae4-ff79dd225e40",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "a84e0aae-f522-4dde-894b-c8ac9928d22b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "02045e95-7d8b-470f-a2f9-1440c52cb05c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "adfad760-88d5-498a-b093-6490c2499018"
            }
          }
        ]
      },
      {
        "id": "f0278701-93ea-4237-afad-6e6db715591b",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "a5c13df3-1297-4ef2-8bf7-d585ac8f26d3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "475e4463-794a-417a-baeb-dc4fe2a58741",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0da1a9d5-e326-4eb3-a08d-c35eb00f0692",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2ba5fa0-e7e1-4cbf-a4fd-0db51bc2b900",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9304e440-bc53-49a4-9243-20b7dd922e58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bf72faf-950f-4436-abe1-18f63faa4b37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "19007153-1796-406b-a2d9-de529e96e4dd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2bc496eb-88c8-4868-b915-2acbec2d1ad2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fd227d34-aa4e-4fca-a0c8-5240228d0220"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cb774090-3dce-49f8-af6f-855e14239c86",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "27364ef4-0f67-4158-993d-2ea361c7a758"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4cd74bd7-b774-4171-88dd-7b4fa2866969",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "2840a28e-7294-4199-99d2-9baa81232ea5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2f4a4dc5-9227-4f9e-a853-96ca7c0d8747",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c885bd3b-4e07-449e-a861-11fcc4fa1128"
            }
          }
        ]
      },
      {
        "id": "48c2d7ea-89be-4454-b9bb-e1ef0eda088c",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "256fd8db-bae2-4107-a3eb-67da9593e97a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "207ec1ea-54f9-47a0-86d6-0a3634f5ebbf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f1a20721-c0a0-40e9-b61d-eb4be8d20ce2",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e694295-a0e0-4c4a-b5ea-1408efe3a03e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "073e01fd-4a25-4da7-8dfe-4cdc49413cdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eec69308-a946-4925-8891-b207351698a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "db5cb700-d00d-4b01-82b0-0c4722d6628d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f2788963-b2d1-4171-807a-5b596c1eedd0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a2c4f8d4-024e-455a-b3c1-7b9b58a3cdd9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b805098d-63be-42bd-9099-69bc4912c878",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d0812c65-603d-4443-95e3-14b9bbc16354"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "35035686-81ef-4618-911d-25fa88bad7fd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "191ffdbb-0042-42b7-a300-79a662942f48"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "919295c4-13dc-4f8e-ab74-1d9cea42e600",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "61887ac2-f1ff-4180-9897-9f311334f78b"
            }
          }
        ]
      },
      {
        "id": "66f550b5-c957-4a0c-98e0-a7be75199a37",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "294fce41-eefd-4fef-9485-70bee7ad8eee",
            "name": "Negative Testing",
            "item": [
              {
                "id": "19334ea8-00e2-4362-82ea-22cf63a606aa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "352d1a8a-4436-455e-a258-55fbf0f5ca05",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2a0f0e2-2032-4131-bd00-0252eb7479af",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c3ec1ae1-512e-4bd4-a7a3-84943eb37fb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7340bf2e-bdb5-4637-8c4a-036d8a3ab5aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9fd0c838-2d0b-45ea-8850-deae852f9474"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fbd67784-da23-459c-b86d-85e42ef2561f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e8a2147a-8834-454a-86bc-68b309b706d5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "944d0688-b62d-43db-8e71-1302155aa42f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "515cf256-6e7b-4b9d-9903-7c66aab87c68"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f5977956-2e0b-4422-849c-9148ec617a22",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "21735d0c-a133-4342-95b1-bf849de38e84"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a8c239ee-5dba-4124-bd05-b17ddcee8963",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4a026d09-c3a5-4ba5-9b80-afc6cd3c4cb5"
            }
          }
        ]
      },
      {
        "id": "720e71e4-1897-4740-ab5b-d447aaea7088",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b80a07e1-1db6-4d7f-85e6-0fa2b19b63d0",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b44df16e-7c13-4a31-8713-56e7a29ff037",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "02eccf2d-91e5-4bf4-a14a-3f183b3587b1",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bfcd42a6-dbb2-463d-98a6-0e065b8ca410",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "21c97634-7d55-4406-81d7-67d846c66ff7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 571,
        "pending": 0,
        "failed": 33
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 238.45774647887333,
      "responseMin": 13,
      "responseMax": 5525,
      "responseSd": 712.6547187906926,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1687913322713,
      "completed": 1687913404314
    },
    "executions": [
      {
        "id": "5e5589e9-8f9d-4ddd-8e9a-109144804b47",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "57d742e1-cbf3-4111-8377-ea63a8bb00e6",
          "httpRequestId": "0861f359-677b-4d9e-a472-7aff34454c46"
        },
        "item": {
          "id": "5e5589e9-8f9d-4ddd-8e9a-109144804b47",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "ce57b1c4-b127-45f9-b661-d66045fdda85",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 0
        }
      },
      {
        "id": "00e5475e-df5b-4667-83fd-5e771417f14e",
        "cursor": {
          "ref": "8bfcb9b9-0fd2-4656-a980-5284fc4c8437",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0dfb0c8d-7ad5-44ca-a3ff-15b484761e27"
        },
        "item": {
          "id": "00e5475e-df5b-4667-83fd-5e771417f14e",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "83ad061c-6a7c-40b7-b4c0-cdf7b03107b3",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 0
        }
      },
      {
        "id": "99a9d320-033c-4dc6-8e5a-62c6e11dc88b",
        "cursor": {
          "ref": "a8b034a1-4317-4cb9-8fee-3c8a8984428c",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "b4892049-58b2-4bc8-8f41-00b7a5e3e98b"
        },
        "item": {
          "id": "99a9d320-033c-4dc6-8e5a-62c6e11dc88b",
          "name": "did_json"
        },
        "response": {
          "id": "5101c20f-2ccd-42e7-a206-e3ba8c774cb2",
          "status": "OK",
          "code": 200,
          "responseTime": 656,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e42751a-d14b-4145-85d0-13192df2636e",
        "cursor": {
          "ref": "23ec629b-de63-485f-93ed-ba76ac5d46e2",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "01714131-427d-4554-9ed6-941f87dd943e"
        },
        "item": {
          "id": "5e42751a-d14b-4145-85d0-13192df2636e",
          "name": "did:invalid"
        },
        "response": {
          "id": "50dea800-976d-4a13-9af7-c4193f059ffa",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1415,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "5e42751a-d14b-4145-85d0-13192df2636e",
        "cursor": {
          "ref": "23ec629b-de63-485f-93ed-ba76ac5d46e2",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "01714131-427d-4554-9ed6-941f87dd943e"
        },
        "item": {
          "id": "5e42751a-d14b-4145-85d0-13192df2636e",
          "name": "did:invalid"
        },
        "response": {
          "id": "50dea800-976d-4a13-9af7-c4193f059ffa",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1415,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "2e038809-d488-4a22-a5e1-37da317a946f",
        "cursor": {
          "ref": "ab93681e-bcfb-42c0-9c60-bbf381a9ae46",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "bbcf115b-e76b-410b-a138-4d0a5d5bc56d"
        },
        "item": {
          "id": "2e038809-d488-4a22-a5e1-37da317a946f",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "e21f5422-695d-4559-b288-7ee36480badb",
          "status": "Not Found",
          "code": 404,
          "responseTime": 51,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58ccec00-ba71-4c75-8aa9-610ae89b0cf5",
        "cursor": {
          "ref": "2937a7ff-4740-42e4-a8ea-094cd2275026",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "41757eab-82b7-4808-8d7f-10078420d401"
        },
        "item": {
          "id": "58ccec00-ba71-4c75-8aa9-610ae89b0cf5",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "5dacba8c-176b-422d-9851-a4aab517af5f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 74,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec557d07-8073-46d1-9ed2-c11d3ff9f1ea",
        "cursor": {
          "ref": "6ca588c5-4d68-4efe-bbf1-9a392d53494e",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a6c892c6-26bb-4f44-824a-a4e47fffefd8"
        },
        "item": {
          "id": "ec557d07-8073-46d1-9ed2-c11d3ff9f1ea",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "8fbcd51a-57e9-42f6-b4d7-33dd6f671f27",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "8fbfaeb8-7b32-485e-95a7-d4c433a232af",
        "cursor": {
          "ref": "eee77ec0-7f0e-44f1-96c2-e3eefee155a2",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "05cc675e-b6be-4b92-9d2b-395daa1c7c57"
        },
        "item": {
          "id": "8fbfaeb8-7b32-485e-95a7-d4c433a232af",
          "name": "identifiers"
        },
        "response": {
          "id": "0ca88951-c72e-445b-9399-5fea0fe21028",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d895408-232a-4057-b62a-a37a66189588",
        "cursor": {
          "ref": "d67515a6-e84b-4da5-a535-204a767d1329",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "fb72c4a4-10d7-4777-ae16-70208bb531af"
        },
        "item": {
          "id": "2d895408-232a-4057-b62a-a37a66189588",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "3a7c1f74-cf56-4496-988a-7a75fc45a984",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a02f7cf-9cac-48e0-be9e-feed76de67ab",
        "cursor": {
          "ref": "d06e7021-e35e-403b-8e79-3fff5af85bef",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c108fdd3-dbe6-4eb7-83e3-8c54af046cad"
        },
        "item": {
          "id": "1a02f7cf-9cac-48e0-be9e-feed76de67ab",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "9fd64ab6-47e3-4388-919f-d9ab0057abdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 192,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40bfb319-5e52-43c7-89a6-bd44e5d8571a",
        "cursor": {
          "ref": "3f9cbba3-9aed-4dd6-bb49-19768583668a",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "0070c38c-a53f-44ef-8b70-8a69e54749a8"
        },
        "item": {
          "id": "40bfb319-5e52-43c7-89a6-bd44e5d8571a",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "7b76b654-04d0-497f-855b-c1efba86fcba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac48eca2-b82b-406b-85a3-95884ff987b2",
        "cursor": {
          "ref": "de751f1f-232a-4e1b-98ba-750d49e0074f",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "50b296a3-1b03-429f-b091-875498d93e55"
        },
        "item": {
          "id": "ac48eca2-b82b-406b-85a3-95884ff987b2",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "39ab99b8-79ca-42d9-a152-cc2228d2f3b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4edfd70f-a6cc-497b-bf52-28d0ced68731",
        "cursor": {
          "ref": "d7537ac3-a7d5-4d68-9669-1ead3c1e501f",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "e0c45461-a91f-4778-b1df-ecc958cf4d89"
        },
        "item": {
          "id": "4edfd70f-a6cc-497b-bf52-28d0ced68731",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "00bb580f-6530-4640-9835-62afba6bdce2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcc4289c-d459-4e41-8d8d-575e687b28d6",
        "cursor": {
          "ref": "149322e6-0e99-40d2-89bc-ab53b0b16256",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "08d97bbd-3d28-4cb7-b105-5f306c207354"
        },
        "item": {
          "id": "fcc4289c-d459-4e41-8d8d-575e687b28d6",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "affaaa77-8e7e-4bc6-a42a-1217cf2dac61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e2ad955-72da-49ab-8bdd-0aa875a1844f",
        "cursor": {
          "ref": "e51101bb-418a-4c0e-875b-a26195383a98",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "e62f902a-e51e-47b9-b548-a96373da6138"
        },
        "item": {
          "id": "1e2ad955-72da-49ab-8bdd-0aa875a1844f",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "c18cfcdc-54b5-4304-affd-d9d666d7945e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6a7a18d-2112-41f0-93df-2653a7376d69",
        "cursor": {
          "ref": "9897eca3-ad0c-448c-9891-22df9e66930e",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "99702017-90dc-48a6-8f62-cfdb7d5f9710"
        },
        "item": {
          "id": "f6a7a18d-2112-41f0-93df-2653a7376d69",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "2d204cb0-f81b-4527-aee8-e73a493640c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "336dce24-f267-49d4-bea6-1130edfd057b",
        "cursor": {
          "ref": "6b27d8af-f461-4454-8d36-063f10090510",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "5f0e7fe9-9453-4fbd-9a74-6180dd2ea0bb"
        },
        "item": {
          "id": "336dce24-f267-49d4-bea6-1130edfd057b",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "79e11090-fffb-483d-b580-55d0a1570af9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "453120fe-db9f-4da9-8c4d-54fa7c67dcea",
        "cursor": {
          "ref": "602ccbc5-6ff3-429e-bf42-ae6176785610",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "8ab23960-4544-4484-80e8-a24e9382d94c"
        },
        "item": {
          "id": "453120fe-db9f-4da9-8c4d-54fa7c67dcea",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "2ca155ad-b25b-46f1-9c48-8f99e9c11500",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f8ff6ee-582f-4428-8a5f-087d75db64a5",
        "cursor": {
          "ref": "2e5990e9-3787-47d1-9f4a-d675baf4cee4",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "fe59a451-7688-4b2d-8bd0-e538aef5cc1f"
        },
        "item": {
          "id": "5f8ff6ee-582f-4428-8a5f-087d75db64a5",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "43a50ec8-6ffb-46f8-84f1-fd987887b9a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d08f6b4-53a1-4e9b-ab8f-57847587319f",
        "cursor": {
          "ref": "bf097674-a96a-4a49-8450-0ca084ffac2f",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "bef5fbaa-6d11-447a-b32f-c7cee71cdccf"
        },
        "item": {
          "id": "9d08f6b4-53a1-4e9b-ab8f-57847587319f",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "197284c6-ac29-4a15-b101-3af70d92c3f2",
          "status": "Created",
          "code": 201,
          "responseTime": 1908,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "2ef4136d-d951-40f2-951b-ec51c930c93b",
        "cursor": {
          "ref": "1f95423f-2e46-4461-a18e-ef4fcf6c9488",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "3366150a-313c-44ae-b178-4779517870bf"
        },
        "item": {
          "id": "2ef4136d-d951-40f2-951b-ec51c930c93b",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "3bf27c18-6dc7-4153-bbb2-465967b6e9ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2244b8a0-395c-49e8-9fc7-117b3182223a",
        "cursor": {
          "ref": "0e61abf4-d35b-4527-85c0-5a355c79c474",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ee81f840-bfd4-4aab-894f-bb45c61beb74"
        },
        "item": {
          "id": "2244b8a0-395c-49e8-9fc7-117b3182223a",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "040d688e-dc7d-4c63-bce0-2cfa6a38efc3",
          "status": "Created",
          "code": 201,
          "responseTime": 5525,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "19278057-2e5b-42fe-9184-b5b669e54b9d",
        "cursor": {
          "ref": "c6d0473d-af6a-4be8-803c-d9dc6e53d92a",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "7df32f22-fda6-4993-a209-be7d605d3db4"
        },
        "item": {
          "id": "19278057-2e5b-42fe-9184-b5b669e54b9d",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "3111e0de-2c48-4006-931c-a5b642bada19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a289a7c-5f87-42c2-8f79-e14e73cc0614",
        "cursor": {
          "ref": "ae523611-8029-4502-b90a-c1562cc5f9d7",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a123b33d-a180-4c04-a278-cd61180f9d6f"
        },
        "item": {
          "id": "6a289a7c-5f87-42c2-8f79-e14e73cc0614",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "3272fda8-bf58-45d8-903f-615424d8bbfb",
          "status": "Created",
          "code": 201,
          "responseTime": 4164,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "ef27f446-d116-4b8c-86c0-44ed32c28b34",
        "cursor": {
          "ref": "e0086243-2b3c-49e0-9ec9-1bd2c95c7210",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "e132c74c-4556-4c46-885d-484e83bd4f67"
        },
        "item": {
          "id": "ef27f446-d116-4b8c-86c0-44ed32c28b34",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "e20f22ba-3292-4d53-89cc-1ae10ccd289d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a28ee9a8-ac5f-40b5-a93f-040b39c9a408",
        "cursor": {
          "ref": "60e4f7cb-680a-4840-8f60-b2bf5ecc609b",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "60e99164-09e4-4795-984b-9423944d1cca"
        },
        "item": {
          "id": "a28ee9a8-ac5f-40b5-a93f-040b39c9a408",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "28d365a8-e284-41a9-b549-bd8c07fb4d43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1273cc17-017c-43b2-abe4-e6bc6e5da3cb",
        "cursor": {
          "ref": "e37844b8-b451-4406-9a8f-dc32a3604d57",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "7d90b7ca-e73b-4364-9757-6ec7c415a81b"
        },
        "item": {
          "id": "1273cc17-017c-43b2-abe4-e6bc6e5da3cb",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "29e22f51-e4a5-440f-a66c-91920f3df0f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c388fe2-a211-4225-9bff-e59b8eac9669",
        "cursor": {
          "ref": "e3f6e463-d2b0-4302-b158-6835368c2669",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "e5c62558-4ff0-4e70-8deb-e2cdecaefa68"
        },
        "item": {
          "id": "2c388fe2-a211-4225-9bff-e59b8eac9669",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "25c9148f-cb68-44c9-80fe-5de06484828b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32eb245e-7204-4f1a-af7f-0613d0a446eb",
        "cursor": {
          "ref": "2be09a51-e398-46d1-8b85-a969e0ec9ee6",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "0816e1b3-1931-4ce6-a01a-77f0dcdcc151"
        },
        "item": {
          "id": "32eb245e-7204-4f1a-af7f-0613d0a446eb",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "37ce48e4-c1c6-4da3-a40c-771277663f37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f683be16-eafc-4598-a965-773f2605d769",
        "cursor": {
          "ref": "036f4cc4-6391-4e54-977c-fd15244bacb5",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "dddfac4a-863f-495e-b007-58769c65a35a"
        },
        "item": {
          "id": "f683be16-eafc-4598-a965-773f2605d769",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "b796bfc8-f72f-4e45-bb97-078b5b809b4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3edf914b-3045-4b20-a373-bc099c19eac7",
        "cursor": {
          "ref": "f1865141-f2dc-4c15-951c-7e16523e98b7",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "3310e6a3-fb9a-4cb5-a668-4b2a0e5dd9e5"
        },
        "item": {
          "id": "3edf914b-3045-4b20-a373-bc099c19eac7",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "0003b2be-801f-45e8-a5a4-2e14ca098981",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78f68cf3-0396-4db8-8c3e-a35933484d1a",
        "cursor": {
          "ref": "3638db99-dce1-4204-8fb2-bf3aaebe7222",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "093ed804-fed9-4476-9d60-b691f788a38d"
        },
        "item": {
          "id": "78f68cf3-0396-4db8-8c3e-a35933484d1a",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "f9d206ab-e228-43a6-bc20-e0c2e5029176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dfda84a-2e48-425f-8dfa-ff7c19166d70",
        "cursor": {
          "ref": "1128a2d4-608a-4bd6-a8a4-57318c2e021d",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "57aff4f2-6f54-4023-b0da-b18561370ce3"
        },
        "item": {
          "id": "9dfda84a-2e48-425f-8dfa-ff7c19166d70",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "6cd12301-3aa2-47ca-9eae-023a8dd9178d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "327e4ee2-37aa-4c90-a3ca-af6bfe449662",
        "cursor": {
          "ref": "44a6b800-9dde-4a58-98f9-e1debcc50d3a",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "1629e50d-1117-46ea-a2a0-a6fe1814e945"
        },
        "item": {
          "id": "327e4ee2-37aa-4c90-a3ca-af6bfe449662",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "00f5ac0c-896a-490c-a99a-858f33387d27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e801d462-e0de-4899-ad34-cd995fc679c2",
        "cursor": {
          "ref": "3e1516b4-a1ba-4e64-ba3a-0c78ef90eb38",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "69a7b6e1-d006-46e7-983f-e5d2e59b2381"
        },
        "item": {
          "id": "e801d462-e0de-4899-ad34-cd995fc679c2",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "1132bb08-dfc1-4aca-a41c-b9d699fe51ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f325d6f-8561-4e15-85c9-78e09444e14c",
        "cursor": {
          "ref": "0ebd459a-a1ae-4608-ab1a-ab663a885e77",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "8eb343fe-917d-49fb-8b66-f6936e047162"
        },
        "item": {
          "id": "8f325d6f-8561-4e15-85c9-78e09444e14c",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "68decca7-234f-4265-b7f1-238094ef207e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd946535-e5a9-483c-bffc-ce97c4dc5bb8",
        "cursor": {
          "ref": "893aeb80-c077-4452-b24a-480a3b71a7e9",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c34292db-d6ea-4443-bad4-4a6935049a40"
        },
        "item": {
          "id": "cd946535-e5a9-483c-bffc-ce97c4dc5bb8",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "cc9b62f5-1810-4926-a716-ba0f0b7fb427",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d38279d0-0b8a-4ea5-94ba-138221589c57",
        "cursor": {
          "ref": "411abb08-59fc-4f09-b709-9668c6669ca3",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "e3e2d625-50c6-43cf-a57f-1b7666fc26fe"
        },
        "item": {
          "id": "d38279d0-0b8a-4ea5-94ba-138221589c57",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "1399a438-6947-4f2c-ab16-6fbb1f03fb7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15734b33-87a8-4783-ad54-0c54d3037064",
        "cursor": {
          "ref": "8d175903-bc58-4153-9c6b-406f169e1961",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "97ccbe8e-d72b-4559-b6d5-414aa5c73cbc"
        },
        "item": {
          "id": "15734b33-87a8-4783-ad54-0c54d3037064",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "e60d8a8f-3220-4a21-ae0e-f4fc92abec77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "501e923b-cb7f-4763-90ab-bd11880b69e6",
        "cursor": {
          "ref": "dfedbd32-25e7-428f-94c8-257c07aadcf4",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "551fe69e-0f28-499b-bdf3-356ff7298700"
        },
        "item": {
          "id": "501e923b-cb7f-4763-90ab-bd11880b69e6",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "d881011c-c4f4-43f4-beb3-bdcb43fd60b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5559aacd-472d-4da2-b265-283e64214888",
        "cursor": {
          "ref": "6c93f6e4-ab6f-4e0a-9500-c99ba78d81f6",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "567900f4-9fcb-410a-897f-9d9ec204c48f"
        },
        "item": {
          "id": "5559aacd-472d-4da2-b265-283e64214888",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "2e8e53dc-50ba-4149-9369-738fde969cc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7371c373-1ada-4b14-8f88-5b5316e0972e",
        "cursor": {
          "ref": "00161b71-c9b9-4c25-8c6c-ea8e15bdc2e6",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "dec07377-9adb-428d-98a3-ea3d4f5403c0"
        },
        "item": {
          "id": "7371c373-1ada-4b14-8f88-5b5316e0972e",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "81f1de9b-ed37-4228-9a4a-ec5c017007c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26129f7b-7df9-460e-976c-77530126e731",
        "cursor": {
          "ref": "0747c9cb-2f6d-4a5f-a466-90d9b063e952",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "e9a23e8a-3552-45b0-944d-5550d81bd1e5"
        },
        "item": {
          "id": "26129f7b-7df9-460e-976c-77530126e731",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "266e59fb-578a-4ef2-823d-5c7e9b19ba99",
          "status": "Created",
          "code": 201,
          "responseTime": 2970,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "82db743b-caf2-4a62-9922-ead50637a9b6",
        "cursor": {
          "ref": "32561c75-f76b-4178-8885-36455a245f59",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "8dc0406a-6275-43cb-b120-988fe9f0b647"
        },
        "item": {
          "id": "82db743b-caf2-4a62-9922-ead50637a9b6",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "9113360d-875a-499a-a86d-4ab59f9dd19d",
          "status": "Created",
          "code": 201,
          "responseTime": 4262,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "4c11a439-eedd-4666-b4a5-a643d8441f85",
        "cursor": {
          "ref": "b408daae-31f9-457b-a458-630acf55a74f",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "46ead210-ac81-4871-a9a2-191e4b9a3549"
        },
        "item": {
          "id": "4c11a439-eedd-4666-b4a5-a643d8441f85",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "7a0412fe-9d5e-41f4-9a64-c2ceaea73b9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a44e6440-68f4-4838-9e2b-859821436ecc",
        "cursor": {
          "ref": "c1c61bf3-fd9b-4207-8808-77ba4dc2a47f",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "7b357d66-3663-418c-adc3-0b7b7d9ac99a"
        },
        "item": {
          "id": "a44e6440-68f4-4838-9e2b-859821436ecc",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "210781bc-c22d-4eb6-bb90-e236df81e49f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1beb68c-fa1c-403b-a1cf-45cb699942f1",
        "cursor": {
          "ref": "f8ee7d3e-565f-4012-945b-2be15efe260f",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "3b1d67e1-c884-45d4-9228-a4a0250d3844"
        },
        "item": {
          "id": "a1beb68c-fa1c-403b-a1cf-45cb699942f1",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "0c5cda5a-82e1-431f-82be-8a1467abf68e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "206d1ddf-1bda-47f3-adb5-30828c95183d",
        "cursor": {
          "ref": "d1990e12-3ba0-49e6-8783-46b2ac2b05ae",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "0aee8e6d-3055-41ba-bc67-386436ab10a4"
        },
        "item": {
          "id": "206d1ddf-1bda-47f3-adb5-30828c95183d",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "8dc6ac58-1594-4777-94a9-b9a3c4b16283",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fef1b210-fe72-41dd-8287-fec8bcada5a8",
        "cursor": {
          "ref": "113c090e-3272-4f2b-89fd-c1a8dfc0bdaa",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "33ec5a4f-a44c-4313-9050-82b06d59ae1c"
        },
        "item": {
          "id": "fef1b210-fe72-41dd-8287-fec8bcada5a8",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "64b149c7-c738-4b78-90c2-1d495e80c374",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7041321-d677-480e-9189-c87c55ca63e6",
        "cursor": {
          "ref": "3193679e-aa71-4968-8d11-82346e617579",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "728367c0-be8d-4202-a9bf-05aa774da24f"
        },
        "item": {
          "id": "a7041321-d677-480e-9189-c87c55ca63e6",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "ff231d5d-f021-445e-bf2b-051fe0f118ce",
          "status": "Created",
          "code": 201,
          "responseTime": 3264,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "62bbea7d-38c2-4d2f-b219-4f3e5d940e5c",
        "cursor": {
          "ref": "bd49cdad-b971-408e-8359-e104c7c2902f",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "fa55ddfa-7d84-468c-b962-a3d26389a744"
        },
        "item": {
          "id": "62bbea7d-38c2-4d2f-b219-4f3e5d940e5c",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "e43bc534-356d-41b4-9a0b-d5c17b731b80",
          "status": "Created",
          "code": 201,
          "responseTime": 2820,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "f62c9bd0-3735-48f9-b616-39ba4775d989",
        "cursor": {
          "ref": "02d13e75-d74b-44f4-8c15-852224bc0a8a",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "75d44b11-aabe-4105-a12b-1451bed804e7"
        },
        "item": {
          "id": "f62c9bd0-3735-48f9-b616-39ba4775d989",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "27d2652f-fcae-4b54-afec-a82a372fe864",
          "status": "Created",
          "code": 201,
          "responseTime": 2140,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "7f94c46a-308a-47b1-9ef1-12bd18e0fefa",
        "cursor": {
          "ref": "ee61651d-e336-460a-8168-d3bc28d30690",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "636f3d15-94c5-4337-b5aa-218eaec255e5"
        },
        "item": {
          "id": "7f94c46a-308a-47b1-9ef1-12bd18e0fefa",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "d02afa1a-4690-4ce0-9ede-f57bd99cc26e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e91b1953-c735-4d6d-bffb-923c7a1f2637",
        "cursor": {
          "ref": "98daa20e-999b-4fd4-81d2-df6856ce8fd5",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "a08f5d37-c768-4212-ae0a-cee47e21dcd4"
        },
        "item": {
          "id": "e91b1953-c735-4d6d-bffb-923c7a1f2637",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "24bf2495-f801-4909-907a-298a9c98cee7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46962451-ed04-43e3-89ab-20dddf5ea139",
        "cursor": {
          "ref": "da38857d-ad38-4df5-815a-40a0c4703759",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "94ace755-fa1b-4028-adc5-0e92d209aa7b"
        },
        "item": {
          "id": "46962451-ed04-43e3-89ab-20dddf5ea139",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "d1dfac55-567b-4348-bb89-70eda546399d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "002bd05d-a061-4191-b9e5-6467f7ef9780",
        "cursor": {
          "ref": "43ac2fd9-31a6-4a73-be4e-49068c328b1e",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b08e23ce-0a49-4c06-b910-bda5520f209c"
        },
        "item": {
          "id": "002bd05d-a061-4191-b9e5-6467f7ef9780",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "55ed9485-6508-4c17-8a77-0511374d3c70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d376d6a1-c0a3-463b-8531-74c82253de1a",
        "cursor": {
          "ref": "18502d20-99af-43c3-a976-a31ce3c1bd2a",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "8ed9f082-ada5-46eb-b0cf-bd3513599247"
        },
        "item": {
          "id": "d376d6a1-c0a3-463b-8531-74c82253de1a",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "87d64313-2868-45f0-84c6-7d33ddfab276",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35bb464e-9c6b-4d2a-9951-cb0aa84a2cf5",
        "cursor": {
          "ref": "8488804e-cd3a-4b89-b9cc-911747591a94",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "21aaa570-8b92-4298-a11b-250b4e85ce3c"
        },
        "item": {
          "id": "35bb464e-9c6b-4d2a-9951-cb0aa84a2cf5",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "d095e801-a7db-4d0d-b2bb-5fb615b23d1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97d5678f-297d-4555-a3b7-ea25bfe73e86",
        "cursor": {
          "ref": "2372eeb5-8cc7-42cd-a365-49c68a9c0a51",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "82665b4d-75d9-405e-b478-eae7731c4157"
        },
        "item": {
          "id": "97d5678f-297d-4555-a3b7-ea25bfe73e86",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "7108b0f9-d23c-4b8f-bf55-ec7c9564b8f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e057448-cbac-4c78-9b3f-66e104e25a34",
        "cursor": {
          "ref": "c34eed2d-abf2-43d9-9a64-0d446c05ae7e",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "09b99e34-c7aa-4080-a499-9f8f15423c09"
        },
        "item": {
          "id": "4e057448-cbac-4c78-9b3f-66e104e25a34",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "9a56cddd-daa0-41ba-a8fe-607d50e3b082",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "418b7324-5c4a-4965-94fb-6a0a8e7d4dba",
        "cursor": {
          "ref": "ce20de70-263a-4e0c-b501-9f472f15020f",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "4bde4d8d-2ddb-4c8b-a2ab-694de2675a4d"
        },
        "item": {
          "id": "418b7324-5c4a-4965-94fb-6a0a8e7d4dba",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "e6ab1dfd-7c85-4b59-ac33-12288027d3d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67cee382-b0d4-4e3a-9998-59bf4a932f85",
        "cursor": {
          "ref": "eca21a04-f2a6-4939-b209-04b5c59a1abf",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "b37ea2e4-f4f8-4db5-ba4a-7e03a98c3227"
        },
        "item": {
          "id": "67cee382-b0d4-4e3a-9998-59bf4a932f85",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "6e4d7bfb-4de1-43a6-86cb-f7c8361b5710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4a22dd2-3cbf-46df-80cf-d8590ae1f447",
        "cursor": {
          "ref": "332554cc-a2ec-49d3-aa86-9a084fb85aba",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "fedc20c9-4770-49f0-ae60-2de1f44c8cc5"
        },
        "item": {
          "id": "a4a22dd2-3cbf-46df-80cf-d8590ae1f447",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "3bbfcc28-bef6-46d4-bf8c-2985f29819c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bf6d99c-4fb6-43c7-a76c-d204462c8a8f",
        "cursor": {
          "ref": "d3b4a9d8-07e5-4ad8-9181-2912dc54a314",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "710b1d62-7dfe-4e97-a557-45821148abed"
        },
        "item": {
          "id": "5bf6d99c-4fb6-43c7-a76c-d204462c8a8f",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "92e97cc7-368f-4f80-8e70-3a9aa0dcf45d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94c8e408-b496-4d2c-a8b4-760830d673de",
        "cursor": {
          "ref": "785fb91a-b517-4825-a74e-2e4fb1a46f5a",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "d7529fb5-7bf5-4c94-8d89-5f558e3c5eb0"
        },
        "item": {
          "id": "94c8e408-b496-4d2c-a8b4-760830d673de",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "1bc373cd-6323-4c15-bd6f-9d95e3a05f77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18fe349c-0e1e-46c4-b2c8-991f6302667d",
        "cursor": {
          "ref": "9f2dc3dc-066e-4662-a34b-58a709d4d646",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "6ec2e48c-5308-40ac-86ac-575096f5b54e"
        },
        "item": {
          "id": "18fe349c-0e1e-46c4-b2c8-991f6302667d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "09481955-312b-4188-a700-e2efc27f4e00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a7e38b3-30b9-4111-ba50-1f46908f2c4d",
        "cursor": {
          "ref": "07188b13-e107-4fd2-9ac6-60a17ff9b330",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "aae5eb34-c638-4588-acd7-af212f3e549a"
        },
        "item": {
          "id": "8a7e38b3-30b9-4111-ba50-1f46908f2c4d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "451bfb79-068d-4008-834f-b503c43f35c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6167c747-3a75-487f-9193-111d8be1f4b6",
        "cursor": {
          "ref": "75c21d81-c322-4546-8cce-476a1feecc3f",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "620f7a14-312b-4981-a58a-8ff4123ef7d5"
        },
        "item": {
          "id": "6167c747-3a75-487f-9193-111d8be1f4b6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "64025167-3916-4805-b7e9-4055b4aeb36f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74446668-b83e-4e92-988e-c33783374eb6",
        "cursor": {
          "ref": "1fa8dbfe-037c-426f-a868-f9d01d915ddc",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "61d08f2c-6ad9-4018-824e-6791096fae40"
        },
        "item": {
          "id": "74446668-b83e-4e92-988e-c33783374eb6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "26dac0da-9877-4089-817d-2f4697357f0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e6732c1-c6f4-4ac0-bc8f-10d37cdbbbec",
        "cursor": {
          "ref": "008986ee-d7b3-4561-a6ff-3d38bfbfe9d9",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "04ca8afa-5c28-4528-b492-52db33815008"
        },
        "item": {
          "id": "0e6732c1-c6f4-4ac0-bc8f-10d37cdbbbec",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "180b6c1b-3ee4-43ec-be24-657baeaadf00",
          "status": "Created",
          "code": 201,
          "responseTime": 2193,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "d94e9d6e-9910-4951-83c6-846df29a6ca9",
        "cursor": {
          "ref": "ea1379cb-f74c-49ed-bf25-079e8a24ceec",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "c481c58b-f06e-43c6-b946-27e1d6a93d96"
        },
        "item": {
          "id": "d94e9d6e-9910-4951-83c6-846df29a6ca9",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "51f285f6-a4b4-4441-8433-5f33eb3899d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11f14ad4-1d02-43bf-af20-1f74e3e24085",
        "cursor": {
          "ref": "676d0ab7-b2f7-4587-ae5d-e9830ddb7df9",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "e7a274be-322c-489c-bf70-d7e264d3e737"
        },
        "item": {
          "id": "11f14ad4-1d02-43bf-af20-1f74e3e24085",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "0a40b102-8bf8-4f51-af88-c107d2e09116",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5397d831-33ba-47c2-9188-d27c10ca6776",
        "cursor": {
          "ref": "5c4b0659-439d-4913-b5c3-632ac54c4c03",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "4462507b-1e74-4582-abc8-a305bccb8504"
        },
        "item": {
          "id": "5397d831-33ba-47c2-9188-d27c10ca6776",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "ee31e9af-655f-40f6-b424-5365152c1f30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b98d9321-3ac4-4804-a578-267d614f8746",
        "cursor": {
          "ref": "19602eed-70cb-465c-b89e-c4dbc75975fc",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "e32659f4-e8ec-4ed5-a9e5-be8cdfb4f8cd"
        },
        "item": {
          "id": "b98d9321-3ac4-4804-a578-267d614f8746",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "372aca57-c94e-405a-8ec1-eb0d8ab70dc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 160,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9e42ee2-892b-4b20-8792-144e7d34c367",
        "cursor": {
          "ref": "4c86d634-b937-40bd-8cef-a1bd096522e4",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "dd04c145-42a2-402a-8942-c9869699ff9b"
        },
        "item": {
          "id": "c9e42ee2-892b-4b20-8792-144e7d34c367",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "478e7ca6-a7b9-4f1d-a29b-20a6e967e389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abaf18c6-d965-44cf-af37-39ed9834b4f2",
        "cursor": {
          "ref": "2d063936-6a78-4702-bb34-95f6dbea2d1b",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "47441740-ab5a-4c91-ad69-11e488bb8ffd"
        },
        "item": {
          "id": "abaf18c6-d965-44cf-af37-39ed9834b4f2",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "e357a0d6-d4c0-4bf0-85c7-1e81ee8750f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30028896-0bbc-4dc1-9b78-4bcaff9adc52",
        "cursor": {
          "ref": "5ba3f0b3-f03e-4e70-9724-5cbc9781ea95",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "f3491b62-d111-4c99-b4e1-bd399547c3f3"
        },
        "item": {
          "id": "30028896-0bbc-4dc1-9b78-4bcaff9adc52",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "6efbda1e-7800-44e0-9c05-3e11122ba047",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72dcd514-ad9c-484e-bd3e-cdc2e99db703",
        "cursor": {
          "ref": "a29df43b-ffe5-4008-a447-880c2a7bfa21",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "93e3a2e5-e480-489f-902e-617ccd15cd89"
        },
        "item": {
          "id": "72dcd514-ad9c-484e-bd3e-cdc2e99db703",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "b5f12611-9583-482f-a97f-f25a9fd155cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4961d97e-ec7c-4f36-9792-785fb6eb0e00",
        "cursor": {
          "ref": "e16a4d68-f0a3-400a-9912-5300b82692e3",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "669ff9f4-b389-4cb7-95bf-44ff6cf7446b"
        },
        "item": {
          "id": "4961d97e-ec7c-4f36-9792-785fb6eb0e00",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "467432fe-1fa5-428a-b5d9-93005f476dec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b378ca2-7aed-4a40-bee7-96bf8fc7dcaa",
        "cursor": {
          "ref": "330861f7-ead0-4b79-8b7f-6adf2cab0ea5",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "307de529-530e-46cc-aa22-20bb0b6a79ea"
        },
        "item": {
          "id": "4b378ca2-7aed-4a40-bee7-96bf8fc7dcaa",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "bfc1a1c0-7687-4b80-bf48-a2deca89516c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0536828-382b-4052-b686-daf97eb36336",
        "cursor": {
          "ref": "c3c0516b-1b1f-4f02-9388-139cfdc118c0",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "cd63a159-dc4e-4a3c-b280-4a8e12ca5c9b"
        },
        "item": {
          "id": "e0536828-382b-4052-b686-daf97eb36336",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "c255807a-6c5a-40d7-88aa-45e647ca95ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31838f88-028b-46aa-b06c-8c7bcdfec59b",
        "cursor": {
          "ref": "83d2865c-3da9-4f1b-90de-c24a87bfc992",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "a3afe030-464a-432a-a879-5cb6f4e86fdd"
        },
        "item": {
          "id": "31838f88-028b-46aa-b06c-8c7bcdfec59b",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "be5ccb08-7ab0-43c0-80eb-d9a897a5338a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e389f66-9b4f-4f37-b5da-df3e59786fe1",
        "cursor": {
          "ref": "be778914-81a4-43b1-af9d-22ecbef90bc5",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "b7782dde-bf02-4deb-9297-c927b0d69be2"
        },
        "item": {
          "id": "7e389f66-9b4f-4f37-b5da-df3e59786fe1",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "28f7c80a-6e9c-4d73-967c-27dfad7d180f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24620a56-cc60-4beb-832b-28a187de0df5",
        "cursor": {
          "ref": "6007ece9-6a50-44f7-802d-b7350a81fa00",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "a40ee0a7-63f9-4c3d-995e-2bd51dc4387f"
        },
        "item": {
          "id": "24620a56-cc60-4beb-832b-28a187de0df5",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "8eeb4afa-163c-4a2a-ad67-7e4deb35cf99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf199bd0-e130-49f2-8e8a-21125e376a22",
        "cursor": {
          "ref": "95c8c060-e83a-44fa-aa4f-ef7aedad4563",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "bc194f83-66ba-4e9e-b6a1-b0620cbe76e7"
        },
        "item": {
          "id": "cf199bd0-e130-49f2-8e8a-21125e376a22",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "f1ba467d-3a86-4b72-87ae-a5e41a3c973e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 178,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "276db69c-0aca-416c-b104-9f1730b44db7",
        "cursor": {
          "ref": "96d22e2d-14aa-4a37-9623-9763b2942237",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "b57088f0-f328-458f-93be-59d917813e65"
        },
        "item": {
          "id": "276db69c-0aca-416c-b104-9f1730b44db7",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "0a23a5e6-9ee3-4831-96b5-8d5441975203",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d2cfe52-b1bb-41c6-9ad8-3cfa0c8d1fe7",
        "cursor": {
          "ref": "df93bb8a-7ca5-4443-9c07-f9a1fcce2129",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "bb255dbf-fd45-4eea-a8ee-e9dfc8bd58a4"
        },
        "item": {
          "id": "7d2cfe52-b1bb-41c6-9ad8-3cfa0c8d1fe7",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "65552d62-0342-47b9-9ca8-7ee91b767d9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2081527-29a7-43d2-9006-6d37a1f14afc",
        "cursor": {
          "ref": "fd370117-6e04-499d-b8c0-e426706bd0bd",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "caa1735a-ab5f-4eb3-82db-d2d7b7f79e6f"
        },
        "item": {
          "id": "d2081527-29a7-43d2-9006-6d37a1f14afc",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "d7483a0d-5c40-4b70-b5bc-8bff5fe757fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8821a35-ba49-4d65-adfb-8bbb5013a459",
        "cursor": {
          "ref": "9c26d306-3c38-4157-8e31-8b4453fcfbec",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "06679752-4481-49d8-97db-44a6ae197c8d"
        },
        "item": {
          "id": "f8821a35-ba49-4d65-adfb-8bbb5013a459",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "e13f894b-c313-499e-addc-f0686f08d0b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59635851-7655-412e-85f8-d595f86e8e60",
        "cursor": {
          "ref": "fa64aa94-8686-4c0d-a401-fd2505b68d7f",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "7059b2f2-91ec-4cc4-b507-134d54eebcb1"
        },
        "item": {
          "id": "59635851-7655-412e-85f8-d595f86e8e60",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "6795f1d2-7716-4590-b7a4-66499e8c0b90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc35017f-28c4-46fd-906c-01832be0aab9",
        "cursor": {
          "ref": "5b74f2c7-0346-46af-8b9c-afc065943a8f",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "d21c3cd9-a179-4932-b405-cb52dd8975e7"
        },
        "item": {
          "id": "bc35017f-28c4-46fd-906c-01832be0aab9",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "e07e0931-f98a-42d9-9bd1-795a51290bdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e95f5f4-aecd-46ea-80f8-d93c08de2bdc",
        "cursor": {
          "ref": "847d1567-991b-4ea0-9ca7-9a7074b0ee85",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "891a4c69-d55c-410d-b0d6-4f105e828699"
        },
        "item": {
          "id": "8e95f5f4-aecd-46ea-80f8-d93c08de2bdc",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "9bbbb0cf-0589-4b61-9edb-285ecd385ac7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b81513c5-d7ce-4554-be8b-63f58723e6f5",
        "cursor": {
          "ref": "faeab649-b631-433f-be62-a3ca0e821c12",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "671ecad0-9f6f-40c2-b50b-d5e351459930"
        },
        "item": {
          "id": "b81513c5-d7ce-4554-be8b-63f58723e6f5",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "69044e41-7855-426a-91c4-6b5608db681f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48e404bc-8f4e-4028-a219-cb3b86c5cb02",
        "cursor": {
          "ref": "73e754e4-e255-4075-9c5a-19bad7149828",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "539bb354-d345-4e2e-83e5-45a91b2e8c33"
        },
        "item": {
          "id": "48e404bc-8f4e-4028-a219-cb3b86c5cb02",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "cad0a67f-87f6-49fb-adc1-7a435fae0dd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bd2baf4-240b-4174-bd0a-b4553bb45cc6",
        "cursor": {
          "ref": "bab6597e-15e9-45ab-ad7e-144c65a4d69f",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "23aa8355-c37a-4a7b-bf14-333746fd8800"
        },
        "item": {
          "id": "2bd2baf4-240b-4174-bd0a-b4553bb45cc6",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "716ef9dd-c4f0-4f87-b0ea-9cab0d118b05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2263cdac-1e00-47d1-a2dc-deb72b35b86a",
        "cursor": {
          "ref": "3f0b9a18-c978-42c4-ae23-7abba10654ff",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "2461c98f-7afd-438e-87ad-d2ba9e78bde1"
        },
        "item": {
          "id": "2263cdac-1e00-47d1-a2dc-deb72b35b86a",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "dfef8b02-90c1-415e-8d45-49afe832bf18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d01fa39a-e594-4f0c-8135-97c791f991ac",
        "cursor": {
          "ref": "77f1ba7a-2976-474b-9856-4337ae571d48",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "a06b1af0-01aa-44d6-9ec6-107d11cdfd52"
        },
        "item": {
          "id": "d01fa39a-e594-4f0c-8135-97c791f991ac",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "67bec7c4-bdbb-4710-a653-82486549fa2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7f7f57a-1053-44b2-87c4-bcc4cf6326f2",
        "cursor": {
          "ref": "6fd5a75b-1296-4426-9560-50e418079cee",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "7ba17685-2ee4-416c-99ae-19f5992abcae"
        },
        "item": {
          "id": "d7f7f57a-1053-44b2-87c4-bcc4cf6326f2",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "612da87d-9fd7-473f-a55b-64204a786740",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d3f9ba8-c4d4-4efb-be6a-50cba5b59f98",
        "cursor": {
          "ref": "ded639bf-7f40-4796-a13a-4bd49cbf4fc7",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "d7b56e16-94f4-4797-8e23-97c2c444559d"
        },
        "item": {
          "id": "5d3f9ba8-c4d4-4efb-be6a-50cba5b59f98",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "d26a0022-d278-4369-8363-081a5c032678",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab5bdcd4-b637-493c-8e23-d92618b4c5bd",
        "cursor": {
          "ref": "f1a079db-e969-46e9-95f0-8856e090234a",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "0abaa86b-6ec3-4c2c-beb1-eb54142e1faf"
        },
        "item": {
          "id": "ab5bdcd4-b637-493c-8e23-d92618b4c5bd",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "dabde352-0f1a-4706-ab06-e637a7b8e102",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1229d89-f261-4bbc-a9ab-14544095d8dd",
        "cursor": {
          "ref": "f07b02fa-61f9-46bf-b886-528d5ab2c867",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "93a628f4-51ac-4625-8fd7-f783018f9dcf"
        },
        "item": {
          "id": "e1229d89-f261-4bbc-a9ab-14544095d8dd",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "32164c98-c1b5-4dfc-aa34-b32bcbba8421",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "2730f95e-fc0b-46c3-ad5f-8ddf9c8eaa2c",
        "cursor": {
          "ref": "24b190c9-8d6f-42d7-bc40-7433fa02170f",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "eb8ec365-ee71-4ebc-97e0-d5477e2e2e25"
        },
        "item": {
          "id": "2730f95e-fc0b-46c3-ad5f-8ddf9c8eaa2c",
          "name": "credentials_issue"
        },
        "response": {
          "id": "41c614c0-af09-47f2-8612-971b41d36cde",
          "status": "Created",
          "code": 201,
          "responseTime": 2322,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "428bb323-3d5a-4238-9dd2-4f44cb395cc1",
        "cursor": {
          "ref": "5c181124-f758-4086-bc73-977918d49255",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "067f1f67-4d92-4e69-9333-759521585277"
        },
        "item": {
          "id": "428bb323-3d5a-4238-9dd2-4f44cb395cc1",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "f4f5450b-293b-4218-b21d-c4aba90f3255",
          "status": "Created",
          "code": 201,
          "responseTime": 2296,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec164bbc-dca4-4467-9cca-95161f0baa18",
        "cursor": {
          "ref": "85ac3b52-2fb3-487b-b805-a3a38f609a02",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "171b4bf0-7131-4519-9967-0e04f71bbbdb"
        },
        "item": {
          "id": "ec164bbc-dca4-4467-9cca-95161f0baa18",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "0f5c3e36-9e2d-42a0-bbdb-747cf2322a6d",
          "status": "Created",
          "code": 201,
          "responseTime": 2556,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f6a969d-666e-483e-98ef-1c03c26fbc26",
        "cursor": {
          "ref": "11dead72-f6b5-43c9-bb3a-8abe38a3c06e",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "26316f75-44f8-4f53-9785-12322ee3f08c"
        },
        "item": {
          "id": "2f6a969d-666e-483e-98ef-1c03c26fbc26",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "7501d29f-5e79-42f7-adf8-329a1eb57f8f",
          "status": "Created",
          "code": 201,
          "responseTime": 2460,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f715618-035c-4bba-bd05-c4d2d5b577d8",
        "cursor": {
          "ref": "a83a6ef4-a7d5-42e2-8096-555a536b9b97",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "9e632c79-7c77-40bf-b621-e9a98353e870"
        },
        "item": {
          "id": "4f715618-035c-4bba-bd05-c4d2d5b577d8",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "4c1af2ae-3af6-4b92-997e-47e64c3233e3",
          "status": "Created",
          "code": 201,
          "responseTime": 2489,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-06-28T00:49:37Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-06-28T00:49:37Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "2af5b89c-070b-4332-942b-65b7552a4dff",
        "cursor": {
          "ref": "744b9f81-b566-47a6-b653-04f160484c2c",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "cfb1980d-29ce-4f7a-ba4f-e6f67fc23a71"
        },
        "item": {
          "id": "2af5b89c-070b-4332-942b-65b7552a4dff",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "b17c0007-ca37-46f0-a635-3d5e80d52a88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "d3c56ee5-b6f6-4fff-8465-6eae08084c7e",
        "cursor": {
          "ref": "ae7a99db-c984-4694-97fd-84b9c13fe595",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "93bd8feb-eca3-47cc-85d9-ef70aa9a9547"
        },
        "item": {
          "id": "d3c56ee5-b6f6-4fff-8465-6eae08084c7e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "aba6c997-f63a-4b40-93be-1f2f6767766d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7625db2d-2660-4886-a79c-0747509bc564",
        "cursor": {
          "ref": "afce30dc-0c4f-448d-ac75-0ea9f9af8de0",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "8c1e9889-1989-4a58-b5aa-63f7f7f50401"
        },
        "item": {
          "id": "7625db2d-2660-4886-a79c-0747509bc564",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "fdf27199-17c2-48ff-b2d3-8b272e6c6d21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fa96868-0172-4ef0-92a6-97a661fe6c6f",
        "cursor": {
          "ref": "f880f568-6f7a-4d3f-aa42-73baef743ef6",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "63e510e4-a579-43b5-be03-9e285c3683d9"
        },
        "item": {
          "id": "7fa96868-0172-4ef0-92a6-97a661fe6c6f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "e3e6d556-8f27-4ca8-8952-57594137f7d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c9bca31-5639-4ca7-ac82-5391795088c5",
        "cursor": {
          "ref": "56e419ca-f98d-4c3f-a7f3-50609a75e5a8",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "215b9056-8797-4571-a4e1-264c1f4fe83e"
        },
        "item": {
          "id": "2c9bca31-5639-4ca7-ac82-5391795088c5",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "6658601e-e27e-45e6-be0e-cebbb9869b10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c1ca2e3-7f16-4097-a623-a56fd0fbd056",
        "cursor": {
          "ref": "baffa2d4-868d-4297-8c37-0e3f4e27a032",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "4a8fc833-6a25-4c68-adbf-62c3a6ff22bf"
        },
        "item": {
          "id": "3c1ca2e3-7f16-4097-a623-a56fd0fbd056",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "ba4e769b-d701-491b-b262-16cd100a3ed6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1421573-8958-4201-99ca-58f602612dc1",
        "cursor": {
          "ref": "d00525d6-8761-4623-9f77-82f1ee9b68df",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "6242c6e2-5ad4-49bf-a4bd-a81e05854b7b"
        },
        "item": {
          "id": "d1421573-8958-4201-99ca-58f602612dc1",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "b9cf2f83-5a35-4635-bc2b-c25d1983c169",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8894b8f6-931c-4405-98c9-1710bdb9077d",
        "cursor": {
          "ref": "f12b4f76-f216-4f31-9111-e8fdab2744b0",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "ac3686c1-82ad-4ac4-8af8-f6c651f3e552"
        },
        "item": {
          "id": "8894b8f6-931c-4405-98c9-1710bdb9077d",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f283ece9-2633-4ecf-be62-b4ed19f415d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d355b3ee-8d8b-4cde-8062-15b365fae586",
        "cursor": {
          "ref": "5fc6b6fc-8303-4427-887e-0b7a33f88668",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "02c03001-0742-4c2b-a9bc-d89fd603a55c"
        },
        "item": {
          "id": "d355b3ee-8d8b-4cde-8062-15b365fae586",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "0ab33976-81b0-4794-9b8b-11ce2a440302",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e566ebf6-6ede-42be-8415-29a12d68ed42",
        "cursor": {
          "ref": "6ecce2e5-8b16-441d-b082-a91f22e6346e",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "fbf2f359-5dfb-4b40-b0a9-84491888db26"
        },
        "item": {
          "id": "e566ebf6-6ede-42be-8415-29a12d68ed42",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b9f151d3-2c4d-4acc-af0c-7c5a238fa4e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ab0c352-e6af-4088-ad1c-d1ddac8d8613",
        "cursor": {
          "ref": "e8631254-664c-4b1e-bdad-9f3562298025",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "38a07cea-328a-44ac-adc9-d0dd748c2e10"
        },
        "item": {
          "id": "7ab0c352-e6af-4088-ad1c-d1ddac8d8613",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "aa8e3419-b612-441f-85cc-ae899aa2949d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2c0f78f-16a9-4c72-8ebe-d9874927baa2",
        "cursor": {
          "ref": "4c654e49-2fd0-4515-aebd-b56e2fa13313",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "bd4f90f3-0d08-449d-b776-ec671b5444ee"
        },
        "item": {
          "id": "a2c0f78f-16a9-4c72-8ebe-d9874927baa2",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "dbf0f844-fa1d-46b2-90c0-a41a211cc72e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dc89c97-3df4-49c2-ac07-62a1578127a1",
        "cursor": {
          "ref": "3896d1b1-cf98-41d6-8bff-5887754d4c06",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "a6e98b60-78ef-42fc-a29d-079292142121"
        },
        "item": {
          "id": "5dc89c97-3df4-49c2-ac07-62a1578127a1",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c807eef3-b5ee-44ea-9042-b190bdce8663",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97d420ab-c88a-4823-81f7-d4d7b4ca6bdc",
        "cursor": {
          "ref": "bd8047a7-77bb-4fa5-98c1-095d14f4bb5a",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "6484a74d-f24d-438f-94e3-b09ccda6c8ca"
        },
        "item": {
          "id": "97d420ab-c88a-4823-81f7-d4d7b4ca6bdc",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "186d7814-9420-4aa2-8b0c-2dd63650c1b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f01f82d-f94d-4a43-b32e-2028094ffa71",
        "cursor": {
          "ref": "f0819c90-6f45-4e5d-8967-c03744e25d98",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "95322b04-3c81-4ce0-a982-a7176ddea08a"
        },
        "item": {
          "id": "2f01f82d-f94d-4a43-b32e-2028094ffa71",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a3fe85ff-35f3-427e-afb7-2d9dae93f262",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "937aca2d-6c33-419c-a090-bdc27bb3c999",
        "cursor": {
          "ref": "0d3165b2-02d0-40bc-97f3-0d81212e6605",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "5cc12226-49ed-46cc-aa13-34fd06a824df"
        },
        "item": {
          "id": "937aca2d-6c33-419c-a090-bdc27bb3c999",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "3dcfc729-3906-4427-9159-0d4c3df2d8be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ec83e4b-d535-4720-88e5-c0558738bb82",
        "cursor": {
          "ref": "100c769c-5916-451f-8d1b-f62097cd4f2a",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "fe3efa72-b307-49aa-a655-81f0aa6089c9"
        },
        "item": {
          "id": "0ec83e4b-d535-4720-88e5-c0558738bb82",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b2b5191b-5a03-4905-81d8-d5aff00064c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "394bb295-94e0-4bae-afbb-e80143c06da6",
        "cursor": {
          "ref": "884516fb-fbd6-4e66-815e-b08f9b68a1d8",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "a5445a3a-cbdb-4cf2-99f7-aea088455c46"
        },
        "item": {
          "id": "394bb295-94e0-4bae-afbb-e80143c06da6",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "02ac883b-754f-4f39-bad8-04120a1a4762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b00652f-4e89-441b-9ae1-8b956ef5f580",
        "cursor": {
          "ref": "94c49c26-bbd1-4ca3-aad1-458a43a9619d",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "a5639532-76f0-47c9-afcc-21319005d532"
        },
        "item": {
          "id": "6b00652f-4e89-441b-9ae1-8b956ef5f580",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "fcd40941-73aa-48e4-ae2f-4ed686745b86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ac0035b-8a67-4857-abec-7fbc0f86a4cb",
        "cursor": {
          "ref": "d770b29b-7e60-4fa5-8ad0-ce704c0dfdc0",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "544e217c-86b6-4916-9c08-b2903c3b9535"
        },
        "item": {
          "id": "9ac0035b-8a67-4857-abec-7fbc0f86a4cb",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "e45bdd91-aaf0-46ee-b7b9-f2ec25f35da1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66266aaf-a45d-4bd1-9ce3-6402b25deb50",
        "cursor": {
          "ref": "c1179e05-5390-4390-b93d-7b3c9ed050e6",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "caaf638f-1549-43f7-b278-8f42daffa2fc"
        },
        "item": {
          "id": "66266aaf-a45d-4bd1-9ce3-6402b25deb50",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "ba6390c2-f394-49ee-86cb-e007e763d1ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9979da70-04f7-46b3-a87a-e5413ab2fd86",
        "cursor": {
          "ref": "a58dbf1a-c34b-4051-9ed2-599c7e69f19c",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "3b757159-5873-457c-a226-e83deda07953"
        },
        "item": {
          "id": "9979da70-04f7-46b3-a87a-e5413ab2fd86",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "6aef31a3-4673-484e-a222-34491850f458",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebb3585f-55b6-46bc-987d-203d8c588acb",
        "cursor": {
          "ref": "19f11126-bac6-4e96-8a86-2dce2ef4f3c9",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "974ecc25-7384-488c-be08-012ea6167218"
        },
        "item": {
          "id": "ebb3585f-55b6-46bc-987d-203d8c588acb",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "4a342cdd-0738-4d55-8270-b20a963db19f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15cb4a7d-9b0d-4373-9321-f800cb9b68ad",
        "cursor": {
          "ref": "49483763-5343-4c3c-98b5-ca497e3b1143",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "89ad6314-22e5-4b24-a51c-173e870a03a3"
        },
        "item": {
          "id": "15cb4a7d-9b0d-4373-9321-f800cb9b68ad",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "c4fae138-f20d-4bf9-a461-d413f1ce85f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65f8fa2f-ecf3-4b0e-beff-d887aa5e4e5a",
        "cursor": {
          "ref": "9a61bd58-0789-4515-976f-bcd37245fa9f",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "a4456faf-192b-406b-bf43-8ac0e410e671"
        },
        "item": {
          "id": "65f8fa2f-ecf3-4b0e-beff-d887aa5e4e5a",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "28f7a275-385e-485b-b31f-b6c49f19d8b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d8b30b7-ae25-4334-a2e8-3053906edc5a",
        "cursor": {
          "ref": "651c58a2-31a9-4644-8c39-86c7abe9b339",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "a512c79c-b806-4dbd-8bc4-6b136ea48773"
        },
        "item": {
          "id": "6d8b30b7-ae25-4334-a2e8-3053906edc5a",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "3154da3d-9efa-4b18-886e-661bc0a15a24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c00ae02-fe01-429f-b6c5-a90fa6501c53",
        "cursor": {
          "ref": "7464fc50-0864-41d1-a19a-9a867f18f8c3",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "4c4004a6-dd5d-4d28-ace9-7216ad8b2c64"
        },
        "item": {
          "id": "3c00ae02-fe01-429f-b6c5-a90fa6501c53",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ae849826-9265-49cc-a052-09bc564ac0f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "243a8c8c-4f33-4560-a42f-94f4f79d889f",
        "cursor": {
          "ref": "6b9fec69-b8fe-42ae-bf38-cdab55755b1b",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "bba449c1-4357-4ebb-ab8c-ed0c2f7edab5"
        },
        "item": {
          "id": "243a8c8c-4f33-4560-a42f-94f4f79d889f",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "b29b8c25-65ff-4de4-9934-81f9619f5f24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "679c6d4a-9548-4cb0-be7f-037e6d3a48eb",
        "cursor": {
          "ref": "008ac6b4-23c3-436f-b084-1fad0fcb41fe",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "b7e99e0c-5061-452d-8662-a1bc90598917"
        },
        "item": {
          "id": "679c6d4a-9548-4cb0-be7f-037e6d3a48eb",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "017f72f7-a1a0-41e2-9fe5-4d81b4cf5b9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95063062-19d3-4c0c-9394-4daaafcb78a4",
        "cursor": {
          "ref": "0ddf1b9b-a54e-4d55-ab85-59609d89a956",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "8c6c5d18-258a-4185-8f5d-81b1fa4691c7"
        },
        "item": {
          "id": "95063062-19d3-4c0c-9394-4daaafcb78a4",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "96d488d5-a4a0-40b2-a060-dcde47735c7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a07a5f2b-89b5-4843-88f5-d453bca699ff",
        "cursor": {
          "ref": "6e1198d7-c762-4af8-be94-48e980bc1991",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "c168707d-b74b-4e0d-baef-16409d18fc0a"
        },
        "item": {
          "id": "a07a5f2b-89b5-4843-88f5-d453bca699ff",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "e0b1b962-a52a-4325-b211-f340052e31e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab302ab2-4ac5-4ac1-945d-047a20b4d00e",
        "cursor": {
          "ref": "42ca6e81-da8c-4561-9ae1-efded952e0ea",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "a0132644-ac6d-45ed-b5a1-01812390223a"
        },
        "item": {
          "id": "ab302ab2-4ac5-4ac1-945d-047a20b4d00e",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "b4075c25-a602-4d70-9a6d-68cb38ce4160",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f206a45-eaeb-4dc1-af01-7123efef21b6",
        "cursor": {
          "ref": "de7e6564-e00d-435f-bc16-aa4a1b38c987",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "2c50a3bf-e6af-409f-a197-49b04e605f08"
        },
        "item": {
          "id": "7f206a45-eaeb-4dc1-af01-7123efef21b6",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "6c1ce0c0-27cf-4736-869b-1adac9f45031",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a347ed7e-8322-4a9c-9b3b-e0e56fda96b5",
        "cursor": {
          "ref": "ba86604c-ba05-4d07-a41c-b24fb2b0aea4",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "35a5684b-18f9-4bef-a252-7d6d805284b1"
        },
        "item": {
          "id": "a347ed7e-8322-4a9c-9b3b-e0e56fda96b5",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "4dd43f15-62ab-4f16-8702-cc20e79a11bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "9b202184-71ff-4468-bbad-69bce6b85c48",
        "cursor": {
          "ref": "67de1485-a4c8-4861-8b48-284bc2a81b03",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "a19f97d0-6517-404e-a82f-a2f215be3b27"
        },
        "item": {
          "id": "9b202184-71ff-4468-bbad-69bce6b85c48",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d7508bec-b72d-4cc0-b77d-da4195eaaa72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e391b14c-c37a-420f-b159-b19b5ff15c3f",
        "cursor": {
          "ref": "7b0a50cd-39a3-44c1-b9ac-feb021b04632",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "53abbe9e-7dfb-43ad-89b1-ff782673ad7d"
        },
        "item": {
          "id": "e391b14c-c37a-420f-b159-b19b5ff15c3f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "72fe6916-3ac4-48bf-9ffc-ddfa937a4b04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c03a663-10c4-4590-9b3a-b9d4de1a94bc",
        "cursor": {
          "ref": "253bc8bf-bd03-4b34-bffb-a51c1a8bad96",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "87068c72-f2b8-4fc6-8b31-9f3e4b071ac9"
        },
        "item": {
          "id": "9c03a663-10c4-4590-9b3a-b9d4de1a94bc",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b191c223-849c-402c-aa5b-a2695cec1a57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86c2cbba-6d92-4e2a-a802-b2af04bffe52",
        "cursor": {
          "ref": "725e7685-78cf-4357-ba0e-3ec36e40003f",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "2d4c7c3e-ada4-4062-9881-b06b21a2febc"
        },
        "item": {
          "id": "86c2cbba-6d92-4e2a-a802-b2af04bffe52",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "4f195d50-a072-4fa9-9cf2-59fea775adce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "112a3f95-7f78-4b57-82b5-02ece7e5289b",
        "cursor": {
          "ref": "a03352d9-8750-4c31-b116-b0f1a764bb72",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "5ee7886c-1215-4c1e-a997-c85eb06acf46"
        },
        "item": {
          "id": "112a3f95-7f78-4b57-82b5-02ece7e5289b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "9890c922-8fcd-4097-ad01-6c90318ce7ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9825db57-a812-43d4-ad29-8adad6338118",
        "cursor": {
          "ref": "811416f8-ded3-4f6b-95cc-5f966321a5dd",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "97351a0a-60ba-46d8-a4f6-5af042eb9ba4"
        },
        "item": {
          "id": "9825db57-a812-43d4-ad29-8adad6338118",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "1a3a1845-abba-42af-9b53-7fb804cda145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd330bc0-272e-42ee-8189-99a2c5ee612c",
        "cursor": {
          "ref": "ad175be3-e8ed-4826-98fa-c1904674bd7f",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "c7f30f30-e23d-41cd-a911-7749d98858f5"
        },
        "item": {
          "id": "fd330bc0-272e-42ee-8189-99a2c5ee612c",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "7e5c5f91-dfab-420a-bbd3-67746215552b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "083e0893-78cc-47dc-8598-ca6407a8c828",
        "cursor": {
          "ref": "2bfd3f3c-8a8e-42d0-a1a6-7cda5ec4041a",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "a0e3c220-5846-431c-8d89-fd391bda9a91"
        },
        "item": {
          "id": "083e0893-78cc-47dc-8598-ca6407a8c828",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e38205b2-4c4a-4712-b174-8160e22c2eab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb8bf2a3-d965-4fdd-be05-7e8033ffa455",
        "cursor": {
          "ref": "4139ca5d-2fbb-45e6-a9f1-b2e6354bbaa1",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "2672263b-425c-4d88-832d-d4d8bbf7e031"
        },
        "item": {
          "id": "cb8bf2a3-d965-4fdd-be05-7e8033ffa455",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "2ff76128-babc-4bb6-97c8-1b74bdfe9956",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36767267-735d-4d19-a999-aaf00b47f470",
        "cursor": {
          "ref": "a0c8d4ba-2ffd-42dc-abc6-9c35990a3fe8",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "8822e06e-80f5-4db1-81ad-b7c34f6c0d53"
        },
        "item": {
          "id": "36767267-735d-4d19-a999-aaf00b47f470",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "d147bb7a-1919-46fd-8691-2a49465ccec1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "597f6113-656b-470e-9455-8d391791b32c",
        "cursor": {
          "ref": "ee5a03a4-f808-4b81-abf1-bbb10558972f",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "cf4ad884-168f-4ddd-b4dc-36f320b49b46"
        },
        "item": {
          "id": "597f6113-656b-470e-9455-8d391791b32c",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "95291bdc-32a1-4bcd-b719-2d21979e7662",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8b7b871-65f4-4165-906d-ff3e2550fa90",
        "cursor": {
          "ref": "c0f982dd-9ec8-40da-be26-1c4465f04ef5",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "2c199f9f-d4f2-4cbf-a428-67cdb5e9ecdd"
        },
        "item": {
          "id": "a8b7b871-65f4-4165-906d-ff3e2550fa90",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "92531b63-cd3f-4c64-958a-24d4d5ef4f64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d518229-8a3d-4230-94ff-8bd6e364d487",
        "cursor": {
          "ref": "7e320d12-21f0-46f8-b4de-0cf577330887",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "8f405de7-6ec2-4081-bb15-668d1a34287f"
        },
        "item": {
          "id": "1d518229-8a3d-4230-94ff-8bd6e364d487",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "481412e6-c0b9-4f20-8cc2-784385d03e8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af2a2662-83b4-4176-a0e2-33b93ea0be24",
        "cursor": {
          "ref": "3d00bd13-8f10-4c68-88c8-7d6a983bf3d1",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "3f00c49a-cb49-47b9-bdf8-cc94bb60ccbd"
        },
        "item": {
          "id": "af2a2662-83b4-4176-a0e2-33b93ea0be24",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "300e5dce-536c-48ca-a65a-979e58ce3499",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7ef9da7-b3f2-4391-b166-84da813f3f41",
        "cursor": {
          "ref": "e69707d2-2be1-488a-869b-692451df53ca",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "eeacac6e-125b-475a-8e9e-efc2e9637e02"
        },
        "item": {
          "id": "b7ef9da7-b3f2-4391-b166-84da813f3f41",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "a017ad88-0e85-445a-a7a1-32c9fab0dbca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e5ca861-9fbb-4d7c-bd09-02f0d87e9e1b",
        "cursor": {
          "ref": "89edb909-2d90-42f7-927b-2fb85cc8684b",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "d5f43ab2-f6af-4086-9c20-d0d24562ded6"
        },
        "item": {
          "id": "5e5ca861-9fbb-4d7c-bd09-02f0d87e9e1b",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "f2aa50e5-6bcb-4d37-89f0-ebd9be4d0c7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "175da616-47c1-47d5-a1f6-63de7d736ead",
        "cursor": {
          "ref": "5c85696c-f2f5-4e47-bb70-89bfe66bdaef",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "e68d50a2-bd52-4d36-93f1-adaecf936aad"
        },
        "item": {
          "id": "175da616-47c1-47d5-a1f6-63de7d736ead",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "4f83e9e0-0cb4-4b06-b8a3-9d5b13e59799",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb6b2554-fafa-4015-93e2-eff283a44be4",
        "cursor": {
          "ref": "bd60fe77-f9ee-445d-9f1a-e96b45126465",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "278b116c-d277-46cc-9e2b-94d1dfa5b747"
        },
        "item": {
          "id": "eb6b2554-fafa-4015-93e2-eff283a44be4",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "fe4d4f27-0172-4112-8622-b0c864569a7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c859fb3-cdbf-4b39-abe8-77679a58c3ba",
        "cursor": {
          "ref": "74f66dbf-83bf-404c-b287-a0b47b894980",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "3352d0b6-aa8d-4e0e-883b-7f45ae44428e"
        },
        "item": {
          "id": "5c859fb3-cdbf-4b39-abe8-77679a58c3ba",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "84caccc9-c9a6-4244-9f8a-5f8d873d6d69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c61df0e-706e-4d8e-acca-097d733c9929",
        "cursor": {
          "ref": "8995fc91-8973-479b-ad21-c0c50aa33f95",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "e45a6a71-959a-4b3b-a44d-9da9cfa8e606"
        },
        "item": {
          "id": "0c61df0e-706e-4d8e-acca-097d733c9929",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "5d1488d0-5684-419f-84ef-0c3dcaef5eb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff3ad511-9708-4106-a466-8bd9ab4ee100",
        "cursor": {
          "ref": "be228cc8-bf80-4a33-84ab-7670bf1809ce",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "dfd2c92c-6e09-46fd-b144-50aa91a43761"
        },
        "item": {
          "id": "ff3ad511-9708-4106-a466-8bd9ab4ee100",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "3eec2fa8-446a-49f2-be56-03cefae3ccf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5d7157b-995f-4a39-a5b1-3d8cafa66518",
        "cursor": {
          "ref": "873e99b5-085d-434d-9c51-3caa36140d60",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "4754966e-581b-458a-a1f6-5d269b6f49e3"
        },
        "item": {
          "id": "c5d7157b-995f-4a39-a5b1-3d8cafa66518",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "9a0d0b0b-d0cf-4eb3-a68c-313178dd6ecf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "753ec252-a42f-454f-8e3b-4ede20f25c55",
        "cursor": {
          "ref": "d7a3b69b-9d8f-4635-b7e5-87a579610c66",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "7fd0c45c-9dc6-4834-a824-cca79eaa328d"
        },
        "item": {
          "id": "753ec252-a42f-454f-8e3b-4ede20f25c55",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "f66b7626-f8ae-4b92-a2cc-1fdc14bf8d81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b737439-9f12-4971-9758-1382e8481e8a",
        "cursor": {
          "ref": "d03b6951-14e2-4754-9bf7-3dd6bdcfecc5",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "fe01a69b-ba84-4ad0-a792-65c5d20b800e"
        },
        "item": {
          "id": "2b737439-9f12-4971-9758-1382e8481e8a",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "4d27991c-0671-4b08-b88e-f588c18e1007",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa3b53d5-3db3-4b96-a26c-1c0bb7b95d06",
        "cursor": {
          "ref": "0830a585-a28f-4f1d-b407-12f81e43b0be",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "1d0b695e-07c9-4b13-8e38-4625016c56fc"
        },
        "item": {
          "id": "aa3b53d5-3db3-4b96-a26c-1c0bb7b95d06",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "34cea8d0-1e81-47a2-8d03-930f01cc971c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2aadf8b-bff6-4ebf-a544-01fe87ea750b",
        "cursor": {
          "ref": "854c3608-8f9c-4b3c-acba-13392d58705c",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "b6162751-1f9f-4cff-a11f-3f5fc789ced3"
        },
        "item": {
          "id": "f2aadf8b-bff6-4ebf-a544-01fe87ea750b",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "67613470-4426-4da8-bc09-8d35ad30e614",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9131362b-dbda-421c-9ef3-296ff1dee36c",
        "cursor": {
          "ref": "3514af11-efc7-4aa3-adcb-b51410bba038",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "a0eecddc-042a-4c55-b8cd-38674d19488a"
        },
        "item": {
          "id": "9131362b-dbda-421c-9ef3-296ff1dee36c",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "efccd6e8-fce4-4a6f-a12b-4ff9e8d567ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b208d40e-ea47-4a41-96bd-2b21478b3d99",
        "cursor": {
          "ref": "ad1afc1f-40e7-45d3-9a93-a05b4d9609df",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "284094c1-3bd5-4567-8b02-23db9aff2dc0"
        },
        "item": {
          "id": "b208d40e-ea47-4a41-96bd-2b21478b3d99",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "51eb19c8-708e-4e6e-a432-268792c31b8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61a4c2c7-9e47-4070-8b72-89369467fb03",
        "cursor": {
          "ref": "56c32ece-b5cb-49fe-b768-c39a3d1db48d",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "e5645a0e-ce19-4834-bbe9-032341be908c"
        },
        "item": {
          "id": "61a4c2c7-9e47-4070-8b72-89369467fb03",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "01a0aea2-27a8-4d26-a277-847eebc49855",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32e5d6ca-b740-441d-b2c7-1a79934f60a9",
        "cursor": {
          "ref": "6a5d28ae-0c47-497f-b65f-2226473fade1",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "cbe0bd9c-7e91-470a-88a9-b92e3ecc46e9"
        },
        "item": {
          "id": "32e5d6ca-b740-441d-b2c7-1a79934f60a9",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a6ae10c4-3709-431a-892d-4c9c7e9ecaa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34f81387-95d3-4625-be0a-0aefc9c1db39",
        "cursor": {
          "ref": "c3d4416c-7d38-4301-95ea-633d89853686",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "7a5e0e78-1e2a-4b56-8003-f232551f6e38"
        },
        "item": {
          "id": "34f81387-95d3-4625-be0a-0aefc9c1db39",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a95317c0-62a9-404e-8ad5-6178f6ec2a01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78ea44d4-0623-4e14-91ef-6ef5860e261f",
        "cursor": {
          "ref": "e4a361ec-d7da-4eb7-985b-2d40785b4bc3",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "f7af4a35-7c14-4ebc-a70e-8c1ad9751873"
        },
        "item": {
          "id": "78ea44d4-0623-4e14-91ef-6ef5860e261f",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "53c0c882-898e-4cd4-85a1-cd84a9450922",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "366e87e4-2ddd-4791-a6de-79c97e0170bb",
        "cursor": {
          "ref": "1a809676-7b1f-49d9-b033-0b88c06cd91f",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "dc1dfb38-092b-4717-bcfc-f81f39b4cac2"
        },
        "item": {
          "id": "366e87e4-2ddd-4791-a6de-79c97e0170bb",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "0500517d-e5f3-4d2d-bc33-c44bd56c829a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21e873c7-4061-465b-8308-26b33c49565d",
        "cursor": {
          "ref": "c549fffd-7020-4b5e-b7b8-39a5b4555ebc",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "6204ec48-24b1-496a-b23a-6bc3eb2d5021"
        },
        "item": {
          "id": "21e873c7-4061-465b-8308-26b33c49565d",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "e4197d34-4963-431c-b3fd-ac68bc657560",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a64c023-81a3-4824-981c-50474a486734",
        "cursor": {
          "ref": "fbe1b756-414d-4bdb-a242-250229476e0b",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "8b9a9a56-dbaf-4cda-b368-bacff8f75296"
        },
        "item": {
          "id": "8a64c023-81a3-4824-981c-50474a486734",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "26e7b1a7-2f48-496d-bcb0-160f6c99217b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c252f6f-3161-4c8d-9821-34f0e26c6a89",
        "cursor": {
          "ref": "8f7b21e0-4259-4e16-b64a-18db031ab5d3",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "eb80724b-fbf3-4971-87f8-6ad24ca6beaa"
        },
        "item": {
          "id": "7c252f6f-3161-4c8d-9821-34f0e26c6a89",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "fd1314f0-f703-47dc-890d-1b89809c7b1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56961055-86cd-4be0-aa53-d62fd0e2dfcb",
        "cursor": {
          "ref": "9475a999-0a1a-4f15-a9c1-fbfb602053ca",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "b662d8ec-bda3-4f7b-96d1-f30979d9f245"
        },
        "item": {
          "id": "56961055-86cd-4be0-aa53-d62fd0e2dfcb",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "536015bd-8921-4ea1-929f-48980d1344f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdb0b86f-46e5-4aa1-84b1-ed4ed17c8a91",
        "cursor": {
          "ref": "94a73ac0-1fca-497f-b71f-d75b3fbf4b50",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "b6fdaf87-4730-4605-89be-b22c8435d722"
        },
        "item": {
          "id": "cdb0b86f-46e5-4aa1-84b1-ed4ed17c8a91",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "724200f5-30f7-4140-b9a8-1213d565e352",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "e9150489-1b92-402a-a1d0-8b34a3f517af",
        "cursor": {
          "ref": "a9fdcf39-e4b1-4e5e-8cca-b1ddc99d854a",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "ea887623-afad-4b14-80f8-084d2bb6e8fe"
        },
        "item": {
          "id": "e9150489-1b92-402a-a1d0-8b34a3f517af",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "236205e8-25b9-43d4-904e-85cce0c7aee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58aa5f48-4c7f-48fc-a8a4-2a6bd52cf8a0",
        "cursor": {
          "ref": "7b9c8929-ba83-478a-b102-4ff81ac1815a",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "dfdea3d5-813e-4a74-8915-78ed5862fc75"
        },
        "item": {
          "id": "58aa5f48-4c7f-48fc-a8a4-2a6bd52cf8a0",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "d67ca952-c53f-4528-aae0-eeff6173d0bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dad86420-90dc-4802-8a05-37fd9fd600f1",
        "cursor": {
          "ref": "8127ac41-2373-401d-b6ef-aff5d7e1f3a8",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "e5c81b52-1edc-4293-a74e-038a6dc5a3bc"
        },
        "item": {
          "id": "dad86420-90dc-4802-8a05-37fd9fd600f1",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "2fa58c17-bba0-4de3-9032-2c7b33c6e114",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a3c4ad6-9e95-4f14-bf11-4ed38c6ac0e6",
        "cursor": {
          "ref": "2d080f76-db23-4736-97c6-56f3567650b8",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "c12f23ae-f9f2-475c-8710-1dbd9c4d47e9"
        },
        "item": {
          "id": "2a3c4ad6-9e95-4f14-bf11-4ed38c6ac0e6",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "a0f4b6f1-9fe5-4fc1-85ab-e4b1d4dff516",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91be053a-b98d-4a4f-b3e2-e389a5ae85dc",
        "cursor": {
          "ref": "9dccea45-a7c3-49a1-82b5-d50db70f608f",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "48d7658a-951d-477c-997b-50df18642014"
        },
        "item": {
          "id": "91be053a-b98d-4a4f-b3e2-e389a5ae85dc",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "3b4a5dc3-2571-41bd-a921-672656aa2f22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "300c22c3-6788-453f-a043-22efec1c4133",
        "cursor": {
          "ref": "2563beaf-def0-49d0-85aa-b98483c80252",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "eec817d8-3426-4f19-b60a-30528b5b5ee5"
        },
        "item": {
          "id": "300c22c3-6788-453f-a043-22efec1c4133",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "1dac2a97-2bb5-4b12-ae0a-426c87d265d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bedcfbe3-011b-4dd3-8b38-d0ade5fa6f3a",
        "cursor": {
          "ref": "e08021d3-56c4-4014-b5fd-45c836158f15",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "f01608d1-ec1d-4e5f-a410-e92d7fe66828"
        },
        "item": {
          "id": "bedcfbe3-011b-4dd3-8b38-d0ade5fa6f3a",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "33dd61fa-6aa3-4894-8c9d-beef56e060b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5fce2eb-50dc-45fe-aa36-dcddef1b154d",
        "cursor": {
          "ref": "56f8b2b3-ab87-4752-a582-b5aab83716d0",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "95658cb7-60d5-4295-95af-08b195e0f7ad"
        },
        "item": {
          "id": "c5fce2eb-50dc-45fe-aa36-dcddef1b154d",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "5e550d30-b258-4d35-9b0e-fc307115219c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abcf5815-1007-4e8b-9c92-d50dcc5e6fc5",
        "cursor": {
          "ref": "1f0ddecb-534e-4303-a082-bf1e0c9c4c91",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "74dbd033-ebed-4cf9-9900-c4af4e6e027b"
        },
        "item": {
          "id": "abcf5815-1007-4e8b-9c92-d50dcc5e6fc5",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "201c7682-c1b3-49eb-959a-ce6293e8bb60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "471d32c5-f934-4b25-b435-0618ea123885",
        "cursor": {
          "ref": "18b4989b-74ff-4716-a2c7-f83359753b7a",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "2e24ddf9-4576-4c0d-a944-ca4e766ab19d"
        },
        "item": {
          "id": "471d32c5-f934-4b25-b435-0618ea123885",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "e449e318-8bc4-420d-9b83-be4eb07babe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed144410-da56-46cb-b389-61f780189f51",
        "cursor": {
          "ref": "78dcf2f2-3b57-48a8-a89f-8018b5fa3c16",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "bb6e1b20-b687-4bbd-939a-c792eef2cadd"
        },
        "item": {
          "id": "ed144410-da56-46cb-b389-61f780189f51",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "e759241b-1e2c-4d0d-8438-f9388bf46b14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff073355-e067-4cf2-b650-860c02545446",
        "cursor": {
          "ref": "900a83bd-3cea-4181-9de9-089d244ce3b5",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "e740cacf-6fb5-4c9e-a357-e07ce9f22762"
        },
        "item": {
          "id": "ff073355-e067-4cf2-b650-860c02545446",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "e8199111-7370-456a-982d-258d0c15307b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad7fe00c-5908-42e1-afb7-f5c34bb1b35f",
        "cursor": {
          "ref": "ca5893d8-9f67-447c-a5fe-857701493285",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "5932172e-9877-4551-bf31-75e94e35d735"
        },
        "item": {
          "id": "ad7fe00c-5908-42e1-afb7-f5c34bb1b35f",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "5d3aa898-078e-4990-8134-ef223f7638da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73373cd0-f85b-4543-b28f-a94036ded556",
        "cursor": {
          "ref": "b170c24e-1363-4676-bdda-f768ed2bc7a8",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "cd9b3ee2-32c7-402f-9c2e-501445bcf5a6"
        },
        "item": {
          "id": "73373cd0-f85b-4543-b28f-a94036ded556",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "e392c2fa-140f-4366-8207-e68b21850f56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e28b8ef1-888c-49d1-bdac-5d1c20afc02e",
        "cursor": {
          "ref": "cac09ac9-2332-4795-bd8f-c7a6ed493899",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "c2eaa6a0-ae51-4148-98c3-fb40c0ac283f"
        },
        "item": {
          "id": "e28b8ef1-888c-49d1-bdac-5d1c20afc02e",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "ba5d4058-e438-44cf-bee9-4353b9e4489e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60c62982-7a69-418a-8415-1b2b64b0c768",
        "cursor": {
          "ref": "094d3c91-681a-41e1-a9af-665caf5309d8",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "bd9ae6a0-9548-4c0a-aa00-c3ec2e30acb9"
        },
        "item": {
          "id": "60c62982-7a69-418a-8415-1b2b64b0c768",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "6eecfaf0-3e7f-4907-a367-93e5b61d9cb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "672a2725-5d56-49f8-ab57-b1c05f23c550",
        "cursor": {
          "ref": "aa33eb08-157c-47b6-b1c1-2e942b3c0229",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "eb2ec515-0ec7-4df4-a3ef-4dd2c51e7b61"
        },
        "item": {
          "id": "672a2725-5d56-49f8-ab57-b1c05f23c550",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "807cb29b-95be-4b7c-89ee-c3a6f360dbfb",
          "status": "OK",
          "code": 200,
          "responseTime": 850,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "4eced51b-51f3-4a78-ac31-fc15b9a69df9",
        "cursor": {
          "ref": "d66f1f72-13df-4ce3-ae35-a06342e18d35",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "69e0b409-38f0-420e-afd7-32c7b82d85be"
        },
        "item": {
          "id": "4eced51b-51f3-4a78-ac31-fc15b9a69df9",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "5486e715-b630-4450-909e-0c480b32a967",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea66b25e-f58e-41f6-bc14-06adef02e919",
        "cursor": {
          "ref": "4f9b514c-69e3-4067-a528-fe5316d95097",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "cf852188-f971-4120-b0a5-f186fa3ead40"
        },
        "item": {
          "id": "ea66b25e-f58e-41f6-bc14-06adef02e919",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "bdd3bb02-a7a6-4af1-b9d1-51fea3b02238",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03eeda9e-4734-4a20-8836-555f339f1856",
        "cursor": {
          "ref": "70fa3cb0-c210-4df0-bce0-38c05e9b112f",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "586fc5cd-993a-4274-9095-722f2b61d451"
        },
        "item": {
          "id": "03eeda9e-4734-4a20-8836-555f339f1856",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "ca7c5cf0-4fe7-4e96-b561-af706ae26e17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8153136-2c1c-48cf-adc4-38ba5968de32",
        "cursor": {
          "ref": "8e548fc9-a9e2-4d03-8f93-d04f14f4ccea",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "a036f3bb-a2ff-4cd7-a3d7-a64cee1dbfc1"
        },
        "item": {
          "id": "c8153136-2c1c-48cf-adc4-38ba5968de32",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "e8069c59-c179-48b5-af8e-ca3fd6b1243d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd1f8eb7-8a21-4e52-aa4d-cfd3f08847f9",
        "cursor": {
          "ref": "bb535efd-da2d-46ef-9646-eb927657a889",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "543db754-00e3-46e3-af29-70e7bafed543"
        },
        "item": {
          "id": "fd1f8eb7-8a21-4e52-aa4d-cfd3f08847f9",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "6b73f96a-ef7f-4f2d-8eea-43e519bd20e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4a14d5f-3d84-4554-8f7b-dd279325ef47",
        "cursor": {
          "ref": "082b29a7-5610-4297-9533-dd9fa7386f8c",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "9cfb4e64-6ad4-43da-b841-504ccb1059dd"
        },
        "item": {
          "id": "a4a14d5f-3d84-4554-8f7b-dd279325ef47",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "a2ccd975-57aa-4f03-b9f0-ff57fe700c6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc4a878b-0e66-4bd7-a92d-01e966e4ae80",
        "cursor": {
          "ref": "50db04c3-dd1a-41b7-be32-d4bbabd2081f",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "5b132c69-3da0-49ae-8ce3-72e0ae6036c3"
        },
        "item": {
          "id": "dc4a878b-0e66-4bd7-a92d-01e966e4ae80",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "c4151684-6f7f-4ab9-9d84-848a75d0ff1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d07e745-160a-4028-a564-40fcb269d2f7",
        "cursor": {
          "ref": "77ac11b9-25e6-49dc-811f-4436311dce67",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "20a7047d-6ea0-4c5d-ade0-b4b553bd7dea"
        },
        "item": {
          "id": "6d07e745-160a-4028-a564-40fcb269d2f7",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "89014060-2337-48e8-bb71-b9c5eb97a615",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7772ddab-fb0b-42e9-a16b-b347138fd8dc",
        "cursor": {
          "ref": "afdc859f-f625-4de9-8676-a5805ad7b356",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "cf525d5a-a3e5-4376-b137-1fead2054f67"
        },
        "item": {
          "id": "7772ddab-fb0b-42e9-a16b-b347138fd8dc",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "9d9ce48b-707b-4fd8-b937-578033a27ba7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c845df2-c11b-4279-aaf4-6000b721befe",
        "cursor": {
          "ref": "a3b47d24-e025-4b07-9893-583c3a729179",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "169c8d42-c54d-4dd3-a0d4-b393f3b8da37"
        },
        "item": {
          "id": "7c845df2-c11b-4279-aaf4-6000b721befe",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "d0ada74b-1b0f-4ba4-8b0f-5db68e594306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8dda23d-e75c-46a8-aced-54fe1402aaac",
        "cursor": {
          "ref": "6d0b5eb6-2636-412c-9244-088935b68d76",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "d09e12f3-61fe-4d5f-9147-c765b2f16b6d"
        },
        "item": {
          "id": "d8dda23d-e75c-46a8-aced-54fe1402aaac",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "98a9f359-56af-4d64-b0cb-c3c9e6096649",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c071023b-6cb8-42a4-beea-7002f8f6543a",
        "cursor": {
          "ref": "cd369c24-c3ac-4c47-aed3-7041bd9e85e6",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "3ca69bc7-d8d5-468c-93f0-494e963bf576"
        },
        "item": {
          "id": "c071023b-6cb8-42a4-beea-7002f8f6543a",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "c7c29db7-82d8-4970-a2b9-3eddf19da973",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 404,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e55e31a9-0d0f-440f-8781-e0f0891951b0",
        "cursor": {
          "ref": "c3670d71-a09d-47a7-a370-709cfe06a08b",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "ca491535-f6f5-4b3f-9694-395b69df0415"
        },
        "item": {
          "id": "e55e31a9-0d0f-440f-8781-e0f0891951b0",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "293d8865-c153-4192-b0a1-fcf33b2af58f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8afd9964-ce5d-4927-a609-28d66deb4abc",
        "cursor": {
          "ref": "cf68846b-0622-4501-90d5-fba23dd621f9",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "ca2e1d17-383b-4bd2-8423-8437844e9680"
        },
        "item": {
          "id": "8afd9964-ce5d-4927-a609-28d66deb4abc",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "7529a466-d420-4ef0-8a89-3ef7f10e10b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e419964-7987-46e3-bbdb-abe0c792b10d",
        "cursor": {
          "ref": "63dbeced-cd0e-447d-bc69-0fdde23f7394",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "d37a2884-967a-4682-9b2e-ec45e972bdf8"
        },
        "item": {
          "id": "5e419964-7987-46e3-bbdb-abe0c792b10d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "32c6c041-3af7-4017-8dff-e5142575080b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9553780-9a5f-4818-a991-6296fcf429a3",
        "cursor": {
          "ref": "5df0adf2-e55c-45df-8b87-0a4d74235b36",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "6a94e54e-42d6-4798-8f30-1c74e4be3496"
        },
        "item": {
          "id": "c9553780-9a5f-4818-a991-6296fcf429a3",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "cbe5bc2c-4145-4689-8b5a-69203f049a56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "873cd6a4-dd1b-4d21-b30f-973570177f36",
        "cursor": {
          "ref": "44235b5a-3d12-409f-9c36-3c9e439abda6",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "65f8f500-cf8f-4309-bb7b-d2300f0d2a9f"
        },
        "item": {
          "id": "873cd6a4-dd1b-4d21-b30f-973570177f36",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "465b9def-f690-49db-a051-17cd0daef49f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e0ea59c-9eba-4a5f-97cb-4ac0365036b7",
        "cursor": {
          "ref": "9e39e114-9aed-4014-9f72-84f80afda6a5",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "d3ebc820-33e3-4162-a465-7b4dba905bc1"
        },
        "item": {
          "id": "9e0ea59c-9eba-4a5f-97cb-4ac0365036b7",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "adf4aad1-5fff-4692-a33f-9c5f3a2df380",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d957dfbd-82db-416e-9d52-feff5fec3bb7",
        "cursor": {
          "ref": "98d73e9b-352f-43dd-8fbe-4d24b2773551",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "9f2bd768-8348-4b85-8ff4-1b8564a6f2f8"
        },
        "item": {
          "id": "d957dfbd-82db-416e-9d52-feff5fec3bb7",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "04a7ebe7-3e5f-4423-af92-a72e725d9c60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cc87751-66cb-437e-bb9b-384df3b711d9",
        "cursor": {
          "ref": "06c9c7df-2b78-4cc8-9112-d952eaa6f49d",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "194bb196-e2d1-4654-a53b-a9d1c2480d16"
        },
        "item": {
          "id": "4cc87751-66cb-437e-bb9b-384df3b711d9",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "3807c663-5018-4fb1-ad0c-72c426a2bdf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b4034d6-fb6f-44d4-be99-ad2502105cdf",
        "cursor": {
          "ref": "b2bf60ca-ec4a-4fbd-b4c4-47faa40d42d0",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "56e11cab-a5cd-471b-be1d-4401ebaecbfb"
        },
        "item": {
          "id": "1b4034d6-fb6f-44d4-be99-ad2502105cdf",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "fd47dbf9-6a2d-4f19-b515-4676ecc7bd75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "384b9012-70ad-4d7a-8e8c-98c10edf3047",
        "cursor": {
          "ref": "8ee1b7c1-77e9-4d68-84b7-e1a434de8e59",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "6312ec57-dee5-4873-a31b-0e1459bf5b49"
        },
        "item": {
          "id": "384b9012-70ad-4d7a-8e8c-98c10edf3047",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "073e8dae-7cba-4597-89d5-39de539213f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5370c6b7-2b1a-49df-827c-422e252e3520",
        "cursor": {
          "ref": "d6ddbae5-2cb9-47b0-9672-73ec8fe00fa4",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "45af998c-ce64-41b4-8574-520f69f36083"
        },
        "item": {
          "id": "5370c6b7-2b1a-49df-827c-422e252e3520",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "a2986533-02e9-41b0-ab63-a0886adc376d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec51504e-c1c2-4a08-b358-ae135017ccb4",
        "cursor": {
          "ref": "295b6922-d7bf-45f8-95a5-a5c3967f7f66",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "5555f079-75ad-440c-a250-c525c8a07dc5"
        },
        "item": {
          "id": "ec51504e-c1c2-4a08-b358-ae135017ccb4",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "11b592f5-ca41-4ada-b8e9-e51410e6c905",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d1731c3-e1be-463e-becf-7f21e34e2110",
        "cursor": {
          "ref": "ad2cb3ea-d901-4ae6-a51d-5a09f5514316",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "25031fdf-b435-4717-919a-942d3049a034"
        },
        "item": {
          "id": "1d1731c3-e1be-463e-becf-7f21e34e2110",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "74f47bb6-a7f0-45cb-a22c-4deb8b6b3af7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "326e643e-e273-455a-ac31-a62b23005cb9",
        "cursor": {
          "ref": "aaaad111-55c3-4484-887c-71c8acced955",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "3ce46e7e-af89-476c-b77f-80137e53cdcc"
        },
        "item": {
          "id": "326e643e-e273-455a-ac31-a62b23005cb9",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "308213a7-46bc-4fc9-9bc9-78dff26efba9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d5c4d23-66de-42de-b734-c74a4415f03a",
        "cursor": {
          "ref": "3fb8d943-d9d5-47ef-b201-a3f18deecd0a",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "d39dc4a0-3329-4e62-85f7-1ade947a984e"
        },
        "item": {
          "id": "0d5c4d23-66de-42de-b734-c74a4415f03a",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "6bf809df-d041-44c5-9b9a-51a54f1b0cd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b478c03-dd86-42b0-ba5f-7fefa1115c66",
        "cursor": {
          "ref": "35487565-ff83-47f5-8117-28c1dc9832d1",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "1ad4f3e3-ac9a-4928-8b62-26671abdcd45"
        },
        "item": {
          "id": "0b478c03-dd86-42b0-ba5f-7fefa1115c66",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "53a600d1-3e37-42b6-85f2-88c5bf20c599",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "379ad3e3-e638-4129-9888-889609efec85",
        "cursor": {
          "ref": "228a5acf-b6d0-4a30-9da1-c14ef72b56ce",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "56463278-ef26-46c6-a96f-adce809994bd"
        },
        "item": {
          "id": "379ad3e3-e638-4129-9888-889609efec85",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "344d513f-a20a-4155-b66e-f464fca626b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61ac3b60-3ea5-4a25-b4a2-49148f0f0184",
        "cursor": {
          "ref": "45f611fe-fb4b-4cd2-b473-b1b59bbb490b",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "3763bf13-8531-4edb-b93e-5a3f4060e2e4"
        },
        "item": {
          "id": "61ac3b60-3ea5-4a25-b4a2-49148f0f0184",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "d769bae3-a985-443d-85bc-acaa26d2e05d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c3ee2f7-1eba-4264-afac-d687a356d156",
        "cursor": {
          "ref": "5102d626-03d5-41bb-b613-4970a8b7f3a6",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "01218339-d8e3-4b81-a5d2-3789f6865e54"
        },
        "item": {
          "id": "1c3ee2f7-1eba-4264-afac-d687a356d156",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "43ad6574-426a-4027-820c-5c26da154e50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce43abce-fe82-4ba5-8d93-a4e67486ff6f",
        "cursor": {
          "ref": "ddd6ce47-cd8b-4097-bc1c-c404ebddb3e4",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "5af81814-a4d9-46e9-a7fe-516a07768e0f"
        },
        "item": {
          "id": "ce43abce-fe82-4ba5-8d93-a4e67486ff6f",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "e253430d-b5b4-4dbf-9cb6-667de528c853",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9d71e43-7f7d-4f66-880d-5255bd753fae",
        "cursor": {
          "ref": "ff2eaedf-42ee-476b-9f27-5b1523096526",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "7cf781d9-f57d-4000-994e-026dd5963711"
        },
        "item": {
          "id": "f9d71e43-7f7d-4f66-880d-5255bd753fae",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "1fbb6fdd-158f-444a-aa83-551cbdf54fb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f12cae10-bace-4579-9457-019912174bd8",
        "cursor": {
          "ref": "376f4df0-afa3-481a-8831-ea54d2b14e87",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "9e76cbf5-4208-4d4b-bd9b-0c3ad39ffe35"
        },
        "item": {
          "id": "f12cae10-bace-4579-9457-019912174bd8",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "24eadd1c-7f47-42fc-a9af-e87fcd1d9d23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a55f5b85-b6a7-44aa-b50b-cc1d3e06ecac",
        "cursor": {
          "ref": "c6fc1b7e-8e89-4ee0-a1a4-3badf2c0bfe0",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "d2165394-2b87-4f20-8762-c94c8bf58796"
        },
        "item": {
          "id": "a55f5b85-b6a7-44aa-b50b-cc1d3e06ecac",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "da3a7173-3e45-4f85-9670-949795775452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a376d94a-14e2-4f6c-97da-372f5ced10e0",
        "cursor": {
          "ref": "4a3f476e-0912-4019-b3f3-a2ed03b5cb23",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "c8870dd2-a6d7-4eb6-b7f8-c611f0d3f226"
        },
        "item": {
          "id": "a376d94a-14e2-4f6c-97da-372f5ced10e0",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "ae4b1240-8cd3-4119-9604-1f8e641b7cca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dab7f27-76e9-499e-aef7-1bbb3b0733b8",
        "cursor": {
          "ref": "5df849cd-d2ac-40d2-a663-f8c78774b56a",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "6a0620bb-685b-4a0d-a037-ca59943493ad"
        },
        "item": {
          "id": "7dab7f27-76e9-499e-aef7-1bbb3b0733b8",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "5c988d84-a57f-4e9f-999f-b0f1ad59ba5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da3b80f2-81a2-410d-9926-4a1ef50c1f51",
        "cursor": {
          "ref": "fa68f08a-8b7b-48cb-9205-f343322dbfcf",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "ed441b72-d9b4-4f50-b9e1-1af0549d2e10"
        },
        "item": {
          "id": "da3b80f2-81a2-410d-9926-4a1ef50c1f51",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "87427e32-85dd-4e4c-b4f4-24bc73b3eaba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0429922b-1c1c-4bd6-a57a-c64e8ba5eb17",
        "cursor": {
          "ref": "d941ca8c-ea0b-450b-90a9-7824ef5ce7c8",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "88f92f66-825b-4e41-8c1b-ae0668b9fddc"
        },
        "item": {
          "id": "0429922b-1c1c-4bd6-a57a-c64e8ba5eb17",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "d68157db-09a8-4134-a56a-5a6e978cf200",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66dfe5f2-d9b0-4df9-89fe-acd9c5533ec7",
        "cursor": {
          "ref": "e01d6efd-b52a-4761-bb19-2382d99cebdb",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "8b282fd6-2b72-4ef1-8c5b-d2597a52616e"
        },
        "item": {
          "id": "66dfe5f2-d9b0-4df9-89fe-acd9c5533ec7",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "f764e4d9-4020-44d0-8da1-3398ee1eac94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aa5be85-8ac0-4af8-b0a5-84dd0434aac5",
        "cursor": {
          "ref": "4d9b37ec-77b4-40c2-ac02-2b33da455c12",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "f1454b78-77ad-4d25-a2a1-41584ece50d9"
        },
        "item": {
          "id": "4aa5be85-8ac0-4af8-b0a5-84dd0434aac5",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "343d0681-7310-40ab-a43d-7b112fa33425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76c95476-5281-4d74-b76e-aa180916afe3",
        "cursor": {
          "ref": "c9518a78-2368-4f1d-a983-a90fd9c13450",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "7afa5e8c-a879-43e6-9557-6c3384bf0e79"
        },
        "item": {
          "id": "76c95476-5281-4d74-b76e-aa180916afe3",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "4ce4bf44-6648-4765-8053-5fb9b8f086b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24eb77a2-d8be-417b-b1b3-88ed17a4356c",
        "cursor": {
          "ref": "4b4c3090-ff59-4132-98db-07f11ee01b4e",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "a1898bf2-a857-4da1-a057-22d1599427ab"
        },
        "item": {
          "id": "24eb77a2-d8be-417b-b1b3-88ed17a4356c",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "c37e4537-ac71-437d-a59f-c32fc497498c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "545c8725-af85-4c3a-8c80-5dfa8a26bcb5",
        "cursor": {
          "ref": "5668f8f6-e8e5-4554-bf9e-cc92cac2a18a",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "c6b71368-9753-47da-96ce-f3f60eb9d199"
        },
        "item": {
          "id": "545c8725-af85-4c3a-8c80-5dfa8a26bcb5",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "45841100-8298-4e92-b98a-6335294e966a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ca7b369-142e-46f8-b23f-5d3f2606c752",
        "cursor": {
          "ref": "03f4a44c-fe8a-442f-a5ff-8c0fb7925937",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "c8189a49-45ef-4ab2-b7b1-6af0e6d75db3"
        },
        "item": {
          "id": "3ca7b369-142e-46f8-b23f-5d3f2606c752",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "68d48d97-ef07-40f7-ae8e-ecc852ad724e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bb6971c-2d99-49a5-aeae-5c2d0b289685",
        "cursor": {
          "ref": "6ac8b813-ea06-4c18-9829-3bc18ad9d67f",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "6c4902bc-9168-4d0f-bff8-32df245cdd7f"
        },
        "item": {
          "id": "5bb6971c-2d99-49a5-aeae-5c2d0b289685",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "6d5f2631-fac3-4f50-aea7-1426e3a800c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3f1a33a-ba3a-430d-b4ba-591bbddc206a",
        "cursor": {
          "ref": "38505641-ac7a-48a2-a383-af73df5bc152",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "40b41ebc-13f9-4880-b702-3ea21abcdc2d"
        },
        "item": {
          "id": "f3f1a33a-ba3a-430d-b4ba-591bbddc206a",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "9fea92ea-99ca-4476-8271-efa2f6f1d024",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9ece6b9-2bba-4b12-9254-14c19edf39e9",
        "cursor": {
          "ref": "d1df6012-b2fb-4a8f-89f1-705ac6fc6df4",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "a407e7b4-cebe-4f58-8a11-a0023118c867"
        },
        "item": {
          "id": "f9ece6b9-2bba-4b12-9254-14c19edf39e9",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "98f8a762-2246-436b-8cc1-4f6086a1be7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5dbabe3-2937-462f-8bf1-a22d293d7597",
        "cursor": {
          "ref": "00dbbc05-adc4-4284-b226-a0d43810b158",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "24622426-e431-4de3-8efb-9064b3c1cf86"
        },
        "item": {
          "id": "d5dbabe3-2937-462f-8bf1-a22d293d7597",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "45380eb4-10aa-4c6e-8ce9-5d0eef59400c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d48aea05-c772-4659-b046-bea59ac5c5c5",
        "cursor": {
          "ref": "75507b6e-8547-484f-8d3a-c78244e9983d",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "741baa3e-adb2-4df8-a132-6d68c9c118dd"
        },
        "item": {
          "id": "d48aea05-c772-4659-b046-bea59ac5c5c5",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "a6e37d89-6999-41d3-a465-f2b36d13b04e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ef7f00e-763e-4651-8ca5-1418e459bd7b",
        "cursor": {
          "ref": "b2dfccba-8585-4a12-a278-d0c089b93196",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "39de239e-9904-4f8c-985a-f08f529c13b0"
        },
        "item": {
          "id": "0ef7f00e-763e-4651-8ca5-1418e459bd7b",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "268a0e7a-d008-41e7-bca9-c2b86c06fedc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "711f4dd1-3c3b-4d4e-9a81-c73091133924",
        "cursor": {
          "ref": "24ba39be-b11c-426f-b16e-29d72737a089",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "4a0f4519-81f3-4917-bd68-7de3ea9757b5"
        },
        "item": {
          "id": "711f4dd1-3c3b-4d4e-9a81-c73091133924",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "2483449c-f124-44e6-8b6d-2ffa846588c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0344f3e6-c7df-43fa-a933-a650d95eac47",
        "cursor": {
          "ref": "1c9e67eb-72ce-48b8-b4d2-a795fe02c71c",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "fddd90fb-0a4b-4624-9413-a7743ddf298a"
        },
        "item": {
          "id": "0344f3e6-c7df-43fa-a933-a650d95eac47",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "30da345e-0e46-4c3b-9391-b5dd5e9f5915",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b4213c2-43b7-48fe-a18e-f2d2ee909b28",
        "cursor": {
          "ref": "eebcc4f5-249a-45dd-9b45-cf19cc0a7773",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "54d979b3-c69a-4638-9c63-14d83d41cb87"
        },
        "item": {
          "id": "2b4213c2-43b7-48fe-a18e-f2d2ee909b28",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "3b2709a3-7f39-4518-bc48-5d2905bb63c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 149,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92be37f8-de24-430c-8014-11a02491812b",
        "cursor": {
          "ref": "ad13b948-4a44-4f30-b05b-12e04c7b7430",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "46ccb2de-fb62-4e24-8205-5d0901f2f127"
        },
        "item": {
          "id": "92be37f8-de24-430c-8014-11a02491812b",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "f4a30f5f-0796-48d0-beab-853ba2295918",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd1e9dca-62bd-4348-b41a-d0405d84852a",
        "cursor": {
          "ref": "f011c36f-8d88-4d8a-b675-6f1164e3d6c3",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "ca0f992b-1eea-45fa-ad83-7eea1be9b707"
        },
        "item": {
          "id": "dd1e9dca-62bd-4348-b41a-d0405d84852a",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "98a143bd-8f83-469c-a63b-b7ccca20b907",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f10b3ae-2d56-49d3-bf55-1554235e472b",
        "cursor": {
          "ref": "b169cf9f-ab7f-46fd-a560-d61f2ef58b25",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "8054e866-7cb5-41f3-a6ef-d142986f9ade"
        },
        "item": {
          "id": "4f10b3ae-2d56-49d3-bf55-1554235e472b",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "00480445-027f-4805-96ee-b94aff80754f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fc85cdd-7e43-4ad9-be57-1de92de27be0",
        "cursor": {
          "ref": "42948be9-7fd7-489e-93ae-e33e7f6a233e",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "a94ee5a1-11de-48a7-bf72-c570595504b2"
        },
        "item": {
          "id": "5fc85cdd-7e43-4ad9-be57-1de92de27be0",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "ec15faa2-89fc-4543-85b0-e99ec1f8ec80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dd34895-47e6-4b78-815c-eb08663a3df7",
        "cursor": {
          "ref": "2ad22216-1a0c-4593-b845-ee806b228220",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "812c2f34-355f-41d0-a941-5266c64431ea"
        },
        "item": {
          "id": "0dd34895-47e6-4b78-815c-eb08663a3df7",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "dfa40e5e-2906-4168-a1ad-2bebb85bf796",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2390493f-d2f5-40b4-92a4-cd591a3555d1",
        "cursor": {
          "ref": "497b2631-d824-4217-bf1e-a1a2c098aed5",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "e052f5b2-72b1-4b7c-9119-788ffdf24322"
        },
        "item": {
          "id": "2390493f-d2f5-40b4-92a4-cd591a3555d1",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "2263159b-9e23-4bba-838e-7193537f1e58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65846044-2aec-47e2-a40c-76c4ab54e1be",
        "cursor": {
          "ref": "dee00d42-b0ec-4fd2-80b6-75cfc2ef0d8e",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "ff53c859-5634-47ed-9c8a-9ee99acdfab5"
        },
        "item": {
          "id": "65846044-2aec-47e2-a40c-76c4ab54e1be",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "e3a1b02a-b88d-4d48-b297-e0d71a4c677d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe14f827-274b-4044-97f4-72031683f587",
        "cursor": {
          "ref": "db5a8d49-f56f-42cf-aabc-820c34ec2723",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "93009771-9510-4761-8d64-a994c4c27fa7"
        },
        "item": {
          "id": "fe14f827-274b-4044-97f4-72031683f587",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "7946178e-46be-462e-9397-27089b243773",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85c5fe24-ca98-49ef-bb55-a17b17c425e5",
        "cursor": {
          "ref": "bda8f3ad-1806-41d2-8289-21cf10e0694a",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "d8619695-27a4-40fe-b5be-da6f65197851"
        },
        "item": {
          "id": "85c5fe24-ca98-49ef-bb55-a17b17c425e5",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "33ff460d-6839-438c-b3ad-f8d694cfe35c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73fe5c4b-f46e-49da-a9aa-d7893a04d7f9",
        "cursor": {
          "ref": "f9fcd383-c86a-4697-9d7f-c71e7cffab66",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "25043701-f3d8-4552-9af1-0b146f923e28"
        },
        "item": {
          "id": "73fe5c4b-f46e-49da-a9aa-d7893a04d7f9",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "f0a49881-a539-4b35-afe4-0af5512f4c26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c7d42f6-73dd-4f57-bca4-5dd15239c11e",
        "cursor": {
          "ref": "300d3844-c83d-4450-805b-d8d9767b65be",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "ebae38cd-5495-4c75-944e-df75dbdc14aa"
        },
        "item": {
          "id": "2c7d42f6-73dd-4f57-bca4-5dd15239c11e",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "ab9c9081-3d99-42df-bd9e-44d13aa1b163",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec2a8da9-5a8e-42a9-b8a4-27484fe0e7cc",
        "cursor": {
          "ref": "4ccc087b-9c74-44c5-95de-4545ec1ee459",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "d02e6839-ae00-4521-bd52-88b63e172a09"
        },
        "item": {
          "id": "ec2a8da9-5a8e-42a9-b8a4-27484fe0e7cc",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "68f5345d-9f26-476e-9208-00123c01ddf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52cbabb4-7b8d-469b-89b3-c7af6d24f5a7",
        "cursor": {
          "ref": "9400c012-5782-43a9-816c-72b91f873cb6",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "5b560e81-74b0-4bd7-a49a-2235470ee06c"
        },
        "item": {
          "id": "52cbabb4-7b8d-469b-89b3-c7af6d24f5a7",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "5224c36b-c4c7-4dce-b55d-ecdc084cf69e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 146,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9be9463-c860-47ac-9b41-e6558097b1dd",
        "cursor": {
          "ref": "6e29902c-ba21-44a9-a3b3-372a219fb47b",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "40a6dbc4-4325-491c-a544-e10b44d8450d"
        },
        "item": {
          "id": "d9be9463-c860-47ac-9b41-e6558097b1dd",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "acf34a92-d9e9-48bd-8a2b-569e72f5c493",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b40a3ef-fa32-4502-9998-0d13775b8e83",
        "cursor": {
          "ref": "b5f31c42-8092-4696-bfc2-b0a3cedae273",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "11254107-903b-44f4-bce3-f9c6f5ab71ee"
        },
        "item": {
          "id": "0b40a3ef-fa32-4502-9998-0d13775b8e83",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "d9b682cc-8f11-4a82-8ee5-1702cec745e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f38373fa-9cea-4216-8e68-fb6f26fddfa9",
        "cursor": {
          "ref": "e53a1a94-074f-49eb-9275-05423e51c226",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "5e21ef8e-284a-4438-bf27-a220507f9a0f"
        },
        "item": {
          "id": "f38373fa-9cea-4216-8e68-fb6f26fddfa9",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "399fc8c9-9a7c-49fe-9744-77f084a14305",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1a65b6d-c41f-4b24-987a-7f91789873d6",
        "cursor": {
          "ref": "e095f835-91df-45c2-8f6f-e4f006531f44",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "9498f693-d288-46d0-a2a3-2a69d1833841"
        },
        "item": {
          "id": "a1a65b6d-c41f-4b24-987a-7f91789873d6",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "ba895546-18c3-484d-bbab-969961c83e12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9cfebbb-1f93-4a6f-9b4c-2eebe93b06a6",
        "cursor": {
          "ref": "34b74857-c2b2-43c6-9b45-028396fff523",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "39fa4ee3-167d-4292-a88a-146d9080f0db"
        },
        "item": {
          "id": "b9cfebbb-1f93-4a6f-9b4c-2eebe93b06a6",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "4837257e-344a-4451-ace5-88d12ce702a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f009f2dc-a687-49b0-8850-86946752d039",
        "cursor": {
          "ref": "0019254c-bb02-40d7-b5db-cd485126b568",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "0e8d4b67-04ef-49ae-bfde-de55eecbde0d"
        },
        "item": {
          "id": "f009f2dc-a687-49b0-8850-86946752d039",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "0ece2543-1bad-4201-8032-d746abc3a378",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3952bee6-938b-40f9-88d9-2ae08cda39ce",
        "cursor": {
          "ref": "06758fb6-033b-45cc-8cbf-a4c815f28052",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "4b5c9051-d234-46a8-96d8-22a47e4c735e"
        },
        "item": {
          "id": "3952bee6-938b-40f9-88d9-2ae08cda39ce",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "89a8403b-7af8-4012-91bf-d3646b0f4efd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15f4efd2-a4c2-409c-be67-58fb281f1867",
        "cursor": {
          "ref": "6cb67a17-61f8-4186-9f46-68789b7e7d1c",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "6d433d4c-3303-4262-afa8-ee018c34a8f5"
        },
        "item": {
          "id": "15f4efd2-a4c2-409c-be67-58fb281f1867",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "cfc6cd64-d92f-483d-ad37-d852e59bc573",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46304777-6845-424e-9598-0ebcdf0be79b",
        "cursor": {
          "ref": "0ecbdea8-12cc-45c1-b31f-3ea4a54a05df",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "3a70097f-09cb-4ff5-830b-49773baed548"
        },
        "item": {
          "id": "46304777-6845-424e-9598-0ebcdf0be79b",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "0f1b06d4-07a6-4f1d-9b57-1035d6c8e2af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e7202b3-a6b6-42ad-a5fa-f421bf3c135b",
        "cursor": {
          "ref": "3b1fb9e0-3a37-4bd7-ac0a-abf7b7276d95",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "ea9013fc-d957-417a-9224-b45a249bccb3"
        },
        "item": {
          "id": "1e7202b3-a6b6-42ad-a5fa-f421bf3c135b",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "3e6fd986-fa14-47af-88b1-1a5b6adf81f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df704c04-790e-48ab-855d-102e7c10cb55",
        "cursor": {
          "ref": "a1e84fff-5583-4bd7-a6d6-36d8b8a67ce7",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "be8fdf2f-2cf5-4f07-b9ff-01c672d5bb25"
        },
        "item": {
          "id": "df704c04-790e-48ab-855d-102e7c10cb55",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "8ee82e83-0cc2-4903-b655-bb14227a47d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3899dcd0-e90a-40b9-9ac3-fbc28fdf51fe",
        "cursor": {
          "ref": "eba3c5c3-2805-45d8-8a97-0f1ea3500502",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "abfc05a7-2b14-4ea5-a146-3ee5ff7bafe1"
        },
        "item": {
          "id": "3899dcd0-e90a-40b9-9ac3-fbc28fdf51fe",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "d042bf53-5f09-4415-9cd6-14646759536f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b137d7b-2cb4-4b7b-bc35-8ed6469df3e6",
        "cursor": {
          "ref": "432111d0-9ee1-4a8c-b5e1-f2787a14a7e3",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "74f9d0fc-5634-4869-8fcc-91c72a9a5134"
        },
        "item": {
          "id": "4b137d7b-2cb4-4b7b-bc35-8ed6469df3e6",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "93ae9aa4-54f8-4b01-a0c9-af430d479d71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33252c98-8c91-4923-a887-36f5013494f5",
        "cursor": {
          "ref": "668300a1-fba1-4645-8bcb-90875df0a43d",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "a54d1021-e7a1-4d4e-8c80-1d3eaa50995f"
        },
        "item": {
          "id": "33252c98-8c91-4923-a887-36f5013494f5",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "442b1f1c-f480-4abc-a521-6faa6be1882b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:276)"
            }
          }
        ]
      },
      {
        "id": "7f58ab92-af26-47be-ae9c-d6b9610d6cc7",
        "cursor": {
          "ref": "2ad8efcd-0dca-4e34-ab34-b599f57bdf48",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "0a5f72c2-8b86-4835-9906-d84645a3d4e0"
        },
        "item": {
          "id": "7f58ab92-af26-47be-ae9c-d6b9610d6cc7",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "8f890c43-31ff-4826-a710-414749da9cf1",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "30fa3842-0658-4b1b-b331-3f4c43bd3776",
        "cursor": {
          "ref": "c1950a4a-d571-4b96-a24f-d0e9bba9e4a1",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "365ced4a-e5d1-4d76-974d-aa6939777944"
        },
        "item": {
          "id": "30fa3842-0658-4b1b-b331-3f4c43bd3776",
          "name": "credentials_verify"
        },
        "response": {
          "id": "df5bb034-034b-4182-acee-c1ac7ea12753",
          "status": "OK",
          "code": 200,
          "responseTime": 1948,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d802131-e9de-4027-86c6-2a4d7b50e477",
        "cursor": {
          "ref": "2ae7354e-cec6-434e-8271-ccce9da9d1c8",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "49c36ac9-e9cf-43d2-8942-7467512be300"
        },
        "item": {
          "id": "9d802131-e9de-4027-86c6-2a4d7b50e477",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "c9768e74-f031-44d1-bc02-ce86d19fe348",
          "status": "OK",
          "code": 200,
          "responseTime": 3550,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "0da1a9d5-e326-4eb3-a08d-c35eb00f0692",
        "cursor": {
          "ref": "705b1505-5143-445c-8535-098af31eb7b3",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "a8394147-00a8-453c-9367-82dc97b6cfd2"
        },
        "item": {
          "id": "0da1a9d5-e326-4eb3-a08d-c35eb00f0692",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "bba45c6e-595c-48f3-a35c-d016987b05a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "0da1a9d5-e326-4eb3-a08d-c35eb00f0692",
        "cursor": {
          "ref": "705b1505-5143-445c-8535-098af31eb7b3",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "a8394147-00a8-453c-9367-82dc97b6cfd2"
        },
        "item": {
          "id": "0da1a9d5-e326-4eb3-a08d-c35eb00f0692",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "bba45c6e-595c-48f3-a35c-d016987b05a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "f1a20721-c0a0-40e9-b61d-eb4be8d20ce2",
        "cursor": {
          "ref": "747c7edb-078f-42e3-83da-92d81c2b300e",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "07780abd-db91-46fa-a641-a0dc662c3e75"
        },
        "item": {
          "id": "f1a20721-c0a0-40e9-b61d-eb4be8d20ce2",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "5d87e692-7c44-4dd0-a31a-a4030f745c5c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:281)"
            }
          }
        ]
      },
      {
        "id": "352d1a8a-4436-455e-a258-55fbf0f5ca05",
        "cursor": {
          "ref": "b6d3cfd7-d7db-4030-b051-218b32c8d6e0",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "c45740d1-e8be-44ba-8080-dde8a75cee05"
        },
        "item": {
          "id": "352d1a8a-4436-455e-a258-55fbf0f5ca05",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "96ba2d80-7f9c-4506-874a-e772f4560494",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:282)"
            }
          }
        ]
      }
    ]
  }
}